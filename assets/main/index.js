System.register("chunks:///_virtual/AlignFullScreenButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, log, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4607cFKlhRB97qftGoKlR4P", "AlignFullScreenButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AlignFullScreenButton = exports('AlignFullScreenButton', (_dec = ccclass('AlignFullScreenButton'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AlignFullScreenButton, _Component);

        function AlignFullScreenButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.alignFunc = null;

          _initializerDefineProperty(_this, "position", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AlignFullScreenButton.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('UPDATE_POSITION', this.updatePosition.bind(this));
        };

        _proto.start = function start() {
          this.updatePosition();
        };

        _proto.updatePosition = function updatePosition() {
          log('update button position ' + this.position);

          if (sys.isBrowser && sys.isMobile) {
            if (this.position == "TOP_RIGHT") {
              this.alignFunc = this.alignTopRight.bind(this);
            } else if (this.position == "BOT_LEFT") {
              this.alignFunc = this.alignBotLeft.bind(this);
            } else if (this.position == "BOT_LEFT_23") {
              this.alignFunc = this.alignBotLeft23.bind(this);
            } else if (this.position == "CENTER_LEFT") {
              this.alignFunc = this.alignCenterLeft.bind(this);
            } //add your align here


            if (this.alignFunc) {
              this.alignFunc();
              window.addEventListener('resize', this.alignFunc);
            }
          }
        };

        _proto.alignTopRight = function alignTopRight() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopRight");
              exitFullscreen.classList.add("alignTopRight");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotRight");
              exitFullscreen.classList.add("alignBotRight");
            }
          }
        };

        _proto.alignBotLeft = function alignBotLeft() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft");
              exitFullscreen.classList.add("alignBotLeft");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft");
              exitFullscreen.classList.add("alignTopLeft");
            }
          }
        };

        _proto.alignBotLeft23 = function alignBotLeft23() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignBotLeft23");
              exitFullscreen.classList.add("alignBotLeft23");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("alignTopLeft23");
              exitFullscreen.classList.add("alignTopLeft23");
            }
          }
        };

        _proto.alignCenterLeft = function alignCenterLeft() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Landscape");
              exitFullscreen.classList.add("exitFullScreen_Landscape");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              this.removeAllClass(enterFullscreen);
              this.removeAllClass(exitFullscreen);
              enterFullscreen.classList.add("enterFullScreen_Portrait");
              exitFullscreen.classList.add("exitFullScreen_Portrait");
            }
          }
        };

        _proto.removeAllClass = function removeAllClass(element) {
          element.classList.remove('alignTopRight', 'alignBotRight', 'alignTopLeft', 'alignBotLeft', 'exitFullScreen_Landscape', 'exitFullScreen_Portrait', 'alignBotLeft23', 'alignTopLeft23', 'enterFullScreen_Landscape', 'enterFullScreen_Portrait');
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser && sys.isMobile && this.alignFunc) {
            window.removeEventListener('resize', this.alignFunc);
          }
        };

        return AlignFullScreenButton;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "position", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "TOP_RIGHT";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig-debug.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e030CMy5lBK5Dcbb4Meioo", "appConfig-debug", undefined);

      log('VERSION GAME', '1.0.0'); ////////////////////////////////////////////////////

      var urlConstant = exports('urlConstant', {});

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "37333FieqpOxp7nSpV3N+9B", "appConfig", undefined);

      log('VERSION GAME', '1.0.0'); ////////////////////////////////////////////////////

      var urlConstant = exports('urlConstant', {
        API_URL: "https://api.staging.enostd.gay/",
        NETWORK_V3: true,
        USER_TOKEN: "user_token",
        URL_TOKEN: "token",
        SOCKET_URL: "wss://sock.staging.enostd.gay",
        LOBBY_SCENE_NAME: "Lobby",
        LOGIN_SCENE_NAME: "Login",
        IPMaster12: "wss://staging.fish.enostd.gay/lobby-1985/",
        IS_LOBBY_PORTRAIT: true // LOGIN_IFRAME: true

      }); ////////////////////////////////////////////////////

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoScaleBackground.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, sys, view, screen, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      sys = module.sys;
      view = module.view;
      screen = module.screen;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a75b58X7fVDkpLGY1Y5aN2f", "AutoScaleBackground", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoScaleBackground = exports('AutoScaleBackground', (_dec = ccclass('AutoScaleBackground'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoScaleBackground, _Component);

        function AutoScaleBackground() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._thisOnResized = null;
          _this._transform = null;
          return _this;
        }

        var _proto = AutoScaleBackground.prototype;

        _proto.onLoad = function onLoad() {
          this._transform = this.node.getComponent(UITransform);
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isBrowser) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }
        };

        _proto.start = function start() {
          this.scaleCanvasByOrientation();
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          var widthBackground = 960;
          var heightBackground = 640;

          if (!this._transform && this.node) {
            this._transform = this.node.getComponent(UITransform);
          }

          var heightDefaultCanvas = view.getDesignResolutionSize().height;

          if (this._transform) {
            widthBackground = this._transform.width;
            heightBackground = this._transform.height;
          } // v3.3.0
          // let widthView = view.getFrameSize().width;
          // let heightView = view.getFrameSize().height;
          // v3.4.1


          var widthView = screen.windowSize.width;
          var heightView = screen.windowSize.height;
          var scaleHeightDevice = heightView / heightDefaultCanvas;
          var scaleWidthDevice = widthView / heightDefaultCanvas;
          var realScaleDevice = scaleHeightDevice > scaleWidthDevice ? scaleWidthDevice : scaleHeightDevice;
          var convertWithBG = widthBackground * realScaleDevice;
          var convertHeightBG = heightBackground * realScaleDevice;
          var ratioW = widthView / convertWithBG;
          var ratioH = heightView / convertHeightBG;
          if (ratioW > ratioH) this.node.scale = new Vec3(ratioW, ratioW, ratioW);else this.node.scale = new Vec3(ratioH, ratioH, ratioH);
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        return AutoScaleBackground;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoSpinPanelController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomType.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, warn, Sprite, Color, Button, GameObject, CustomEvent, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      warn = module.warn;
      Sprite = module.Sprite;
      Color = module.Color;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "7aea21Q745PR6qx558OU0WG", "AutoSpinPanelController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoSpinPanelController = exports('AutoSpinPanelController', (_dec = ccclass('AutoSpinPanelController'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(AutoSpinPanelController, _GameObject);

        function AutoSpinPanelController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "autoSpinButton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalFrame", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedFrame", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numberButtons", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor5, _assertThisInitialized(_this));

          _this.spinNumber = void 0;
          _this.setAutoSpinEvent = null;
          return _this;
        }

        var _proto = AutoSpinPanelController.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.showOverlay = this.showOverlay.bind(this);
        };

        _proto.showOverlay = function showOverlay(isShow) {
          if (isShow === void 0) {
            isShow = false;
          }

          this.overlay.active = isShow;
        };

        _proto.getSpinNumber = function getSpinNumber(evt, number) {
          var _this2 = this;

          if (!evt || !number) {
            warn('Missing event or number of spins');
            return;
          }

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.spinNumber = number;
          this.numberButtons.forEach(function (it) {
            it.getComponent(Sprite).spriteFrame = _this2.normalFrame;
            it.getChildByName('Label').getComponent(Sprite).color = new Color().fromHEX('#ffffff');
          });
          evt.target.getComponent(Sprite).spriteFrame = this.selectedFrame;
          evt.target.getChildByName('Label').color = new Color().fromHEX('#f3d598');
          this.autoSpinButton.getComponent(Button).interactable = true;
        };

        _proto.startAutoSpinning = function startAutoSpinning() {
          var _this3 = this;

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.setAutoSpinEvent = new CustomEvent('SET_AUTO_SPIN_EVENT', true, {
            spinNumber: this.spinNumber
          });
          this.node.dispatchEvent(this.setAutoSpinEvent);
          this.node.emit('HIDE', 0, function () {
            setOpacity(_this3.node, 1);
          });
          this.resetButtonStatus();
          this.overlay.active = false;
        };

        _proto.resetButtonStatus = function resetButtonStatus() {
          var _this4 = this;

          this.autoSpinButton.getComponent(Button).interactable = false;
          this.numberButtons.forEach(function (it) {
            it.getComponent(Sprite).spriteFrame = _this4.normalFrame;
            it.getChildByName('Label').getComponent(Sprite).color = new Color().fromHEX('#ffffff');
          });
        };

        _proto.clickBtnClose = function clickBtnClose() {
          var _this5 = this;

          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.resetButtonStatus();
          this.node.emit('HIDE', 0, function () {
            setOpacity(_this5.node, 1);
          });
          this.overlay.active = false;
        };

        return AutoSpinPanelController;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoSpinButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "selectedFrame", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "numberButtons", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackToLobby.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameCommonUtils.ts', './loadConfigAsync.ts', './GameObject.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, gameCommonUtils, loadConfigAsync, GameObject;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c5758tYvK1N2LA4dqPDj83Y", "BackToLobby", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackToLobby = exports('BackToLobby', (_dec = ccclass('BackToLobby'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BackToLobby, _GameObject);

        function BackToLobby() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.isBackToLobby = false;
          return _this;
        }

        var _proto = BackToLobby.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            var isEnableBtn = gameCommonUtils.checkConditionCloseGameIframe();

            if (!isEnableBtn) {
              var button = this.node.getChildByName('Button');

              if (button) {
                button.active = false;
              }

              return;
            }
          }
        };

        _proto.onEnable = function onEnable() {// this.isBackToLobby = false;
        };

        _proto.trigger = function trigger() {
          // if (this.isBackToLobby) return;
          // this.isBackToLobby = true;
          if (this.config.IS_SUPPORT_EVENT && this.mainDirector.totalSlotGame > 1) {
            this.soundPlayer.playSFXClick();
            this.mainDirector.showPopUpCloseGame();
          } else {
            if (this.soundPlayer) {
              this.soundPlayer.playSFXClick();
              this.soundPlayer.stopAllAudio();
            }

            gameCommonUtils.handleCloseGameIframe();
          }
        };

        return BackToLobby;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BarMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TweenViewComponent.ts', './gameCommonUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, warn, Button, TweenViewComponent, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      warn = module.warn;
      Button = module.Button;
    }, function (module) {
      TweenViewComponent = module.TweenViewComponent;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "5cedaBMgmlKvbemcWrf8DAb", "BarMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BarMenu = exports('BarMenu', (_dec = ccclass('BarMenu'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_TweenViewComponent) {
        _inheritsLoose(BarMenu, _TweenViewComponent);

        function BarMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TweenViewComponent.call.apply(_TweenViewComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "exitGameNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSoundOn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSoundOff", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMusicOn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMusicOff", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlay", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOverlayList", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BarMenu.prototype;

        _proto.onLoad = function onLoad() {
          _TweenViewComponent.prototype.onLoad.call(this);

          this.node.init = this.init.bind(this);
          this.checkGameInApp();
        };

        _proto.init = function init() {
          if (this.soundPlayer) {
            if (this.btnSoundOn) this.btnSoundOn.active = this.soundPlayer.isEnableSFX;
            if (this.btnSoundOff) this.btnSoundOff.active = !this.soundPlayer.isEnableSFX;
            if (this.btnMusicOn) this.btnMusicOn.active = this.soundPlayer.isEnableBGM;
            if (this.btnMusicOff) this.btnMusicOff.active = !this.soundPlayer.isEnableBGM;
          }
        };

        _proto.show = function show(onStart, onComplete) {
          var _this2 = this;

          if (this.overlay) this.overlay.active = true;

          _TweenViewComponent.prototype.show.call(this, onStart, function () {
            _this2.activeBorderOverlayList(true);

            _this2.scheduleOnce(function () {
              onComplete && onComplete();
            }, 0.5);

            var isAutoSpin = _this2.dataStore.isAutoSpin;
            var isFinished = _this2.dataStore.playSession.isFinished;
            if (_this2.overlay) _this2.overlay.active = isAutoSpin || isFinished === false;
          });
        };

        _proto.hide = function hide(onStart, onComplete) {
          var _this3 = this;

          if (this.overlay) this.overlay.active = false;

          _TweenViewComponent.prototype.hide.call(this, onStart, function () {
            onComplete && onComplete();

            _this3.activeBorderOverlayList(false);
          });
        };

        _proto.clickSoundOn = function clickSoundOn() {
          //turn off sound
          if (this.btnSoundOff) this.btnSoundOff.active = true;
          if (this.btnSoundOn) this.btnSoundOn.active = false;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setEffectEnable(false);
        };

        _proto.clickSoundOff = function clickSoundOff() {
          //turn on sound 
          if (this.btnSoundOff) this.btnSoundOff.active = false;
          if (this.btnSoundOn) this.btnSoundOn.active = true;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setEffectEnable(true);
          this.soundPlayer.playSFXClick();
        };

        _proto.clickMusicOn = function clickMusicOn() {
          //turn music off
          if (this.btnMusicOff) this.btnMusicOff.active = true;
          if (this.btnMusicOn) this.btnMusicOn.active = false;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setBgmEnable(false);
          this.soundPlayer.playSFXClick();
        };

        _proto.clickMusicOff = function clickMusicOff() {
          //turn music on
          if (this.btnMusicOff) this.btnMusicOff.active = false;
          if (this.btnMusicOn) this.btnMusicOn.active = true;

          if (!this.soundPlayer) {
            warn('[SOUND_EVENT] No sound player found');
            return;
          }

          this.soundPlayer.setBgmEnable(true);
          this.soundPlayer.playSFXClick();
        };

        _proto.onExitGame = function onExitGame() {
          this.soundPlayer && this.soundPlayer.playSFXClick(); //todo exit game and back to lobby here
        };

        _proto.checkGameInApp = function checkGameInApp() {
          if (this.exitGameNode) {
            var isEnableBtn = gameCommonUtils.checkConditionCloseGameIframe();
            this.exitGameNode.getComponent(Button).interactable = !!isEnableBtn;
          }
        };

        _proto.activeBorderOverlayList = function activeBorderOverlayList(isActive) {
          for (var i = 0; i < this.borderOverlayList.length; i++) {
            var borderNode = this.borderOverlayList[i];
            if (borderNode) borderNode.active = isActive;
          }
        };

        return BarMenu;
      }(TweenViewComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "exitGameNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnSoundOn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnSoundOff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnMusicOn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnMusicOff", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "borderOverlayList", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, error, GameObject, SlotGameMode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      error = module.error;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5366gO62dCyLrQrV1yzUSc", "BaseDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseDirector = exports('BaseDirector', (_dec = ccclass('BaseDirector'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseDirector, _GameObject);

        function BaseDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.writer = null;
          _this.exitScript = void 0;
          _this.scripts = void 0;
          _this.listScriptAsync = [];
          _this.forceToExitMode = false;
          _this.storeNextScripts = null;
          _this.callBackWhenHide = null;
          _this.storeCurrentScripts = {
            script: [],
            data: {}
          };
          _this.isResetAsyncScript = false;
          return _this;
        }

        var _proto = BaseDirector.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["director"] = this;
          this.node.on("RUN_CONTINUE_SCRIPT", this.runContinueScript, this);
          this.node.on("FORCE_TO_EXIT", this.forceToExit, this);
          this.onExtendedLoad();
        };

        _proto.start = function start() {
          this.writer = this.node['writer'];
        };

        _proto.onExtendedLoad = function onExtendedLoad() {// let it empty. just override this func to call custom onLoad 
        };

        _proto.runAction = function runAction(actionName, data) {
          if (!this.writer || typeof this.writer['makeScript' + actionName] !== 'function') return;
          var script = this.writer['makeScript' + actionName](data);
          this.executeNextScript(script);
        };

        _proto.executeNextScript = function executeNextScript(scripts) {
          if (scripts === void 0) {
            scripts = [];
          }

          if (!this.writer || !scripts || scripts.length == 0) return;
          this.scripts = scripts;

          if (this.forceToExitMode && this.exitScript && this.exitScript.length > 0) {
            this.scripts = this.exitScript;
          }

          var nextScript = this.scripts.shift();
          var command = nextScript.command,
              data = nextScript.data;
          var executeFunc = this.getCommandName(command);

          if (typeof this[executeFunc] === 'function') {
            log(this.name + " run command", executeFunc, data);
            this[executeFunc](this.scripts, data);
          } else {
            error("No command " + executeFunc + " in " + this.name);
            this.executeNextScript(this.scripts);
          }
        };

        _proto.getCommandName = function getCommandName(command) {
          var gameSpeed = this.dataStore.gameSpeed || "";
          var commandWithSpeed = command + "_" + gameSpeed;

          if (typeof this[commandWithSpeed] === 'function') {
            return commandWithSpeed;
          } else {
            return command;
          }
        };

        _proto.resetGameSpeed = function resetGameSpeed() {
          log('resetGameSpeed');
          this.dataStore.gameSpeed = 0;
        };

        _proto.setGameSpeed = function setGameSpeed(gameSpeed) {
          log('setGameSpeed ' + gameSpeed);
          this.dataStore.gameSpeed = gameSpeed || this.getDefaultGameSpeed();
        };

        _proto.setGameSpeedMode = function setGameSpeedMode(mode) {
          if (mode === void 0) {
            mode = 'NORMAL';
          }

          log('setGameSpeedMode ' + mode);
          var GAME_SPEED = this.getGameSpeedConfig();
          this.dataStore.gameSpeed = GAME_SPEED[mode] || GAME_SPEED.NORMAL;
        };

        _proto.getGameSpeed = function getGameSpeed() {
          return this.dataStore.gameSpeed || this.getDefaultGameSpeed();
        };

        _proto.getDefaultGameSpeed = function getDefaultGameSpeed() {
          var GAME_SPEED = this.getGameSpeedConfig();
          return this.dataStore.modeTurbo ? GAME_SPEED.TURBO : GAME_SPEED.NORMAL;
        };

        _proto.getGameSpeedConfig = function getGameSpeedConfig() {
          // remove after all games updated
          if (this.config && this.config.GAME_SPEED) {
            return this.config.GAME_SPEED;
          } else {
            return {
              NORMAL: 0,
              TURBO: 1,
              INSTANTLY: 2
            };
          }
        };

        _proto.runContinueScript = function runContinueScript() {
          if (!this.storeNextScripts) return;
          var _this$storeNextScript = this.storeNextScripts,
              data = _this$storeNextScript.data,
              script = _this$storeNextScript.script;
          this[this.storeCurrentScripts] && this[this.storeCurrentScripts](script, data);

          this._resetStoreScript();
        };

        _proto.forceToExit = function forceToExit(scripts) {
          this.forceToExitMode = true;
          this.exitScript = scripts;
        };

        _proto._resetStoreScript = function _resetStoreScript() {
          this.storeCurrentScripts = '';
          this.storeNextScripts = {
            script: [],
            data: {}
          };
        };

        _proto.hide = function hide() {}; //-------------- Async Script ---------------

        /**@AsyncScript */


        _proto.canStoreAsyncScript = function canStoreAsyncScript() {
          var isNormalGame = this.dataStore.currentGameMode === SlotGameMode.NormalGame;
          var isFinished = this.dataStore.playSession.isFinished;
          var isAutoSpin = this.dataStore.isAutoSpin;
          var isValid = isFinished === true && !isAutoSpin && isNormalGame;
          return isValid;
        };

        _proto.storeAsyncScript = function storeAsyncScript(script, data) {
          this.listScriptAsync.push(data);
          this.executeNextScript(script);
        };

        _proto._runAsyncScript = function _runAsyncScript(script) {
          this.executeNextScript(script);
          this.runAsyncScript();
        };

        _proto.runAsyncScript = function runAsyncScript() {
          if (!this.listScriptAsync.length || this.isResetAsyncScript) return;
          var command = this.listScriptAsync.shift();

          if (command) {
            var callback = command.callback,
                name = command.name;

            if (name) {
              log(this.name + ' run AsyncScript: ', name);
            }

            callback && callback();
          }
        };

        _proto.resetAsyncScript = function resetAsyncScript() {
          if (!this.listScriptAsync.length) return;
          this.isResetAsyncScript = true;

          while (this.listScriptAsync.length > 0) {
            var command = this.listScriptAsync.shift();

            if (command) {
              var callback = command.callback,
                  isSkippable = command.isSkippable,
                  name = command.name;

              if (!isSkippable) {
                if (name) {
                  log(this.name + ' run resetAsyncScript: ', name);
                }

                callback && callback();
              }
            }
          }

          this.isResetAsyncScript = false;
        };

        _proto.clearAsyncScript = function clearAsyncScript() {
          this.listScriptAsync = [];
        };

        _proto.exit = function exit() {
          if (typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide();
            this.callBackWhenHide = null;
          }

          this.hide();
          this.node.emit('GAME_EXIT');
          this.node.active = false;
        };

        return BaseDirector;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseDynamicLoading.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, assetManager, sp, error, log, GameObject, AssetPathConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      assetManager = module.assetManager;
      sp = module.sp;
      error = module.error;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      AssetPathConfig = module.AssetPathConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7ddba2ycYdA8ob+oNWT+35o", "BaseDynamicLoading", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetData = exports('AssetData', function AssetData(asset, id, path, parent) {
        this.asset = void 0;
        this.id = void 0;
        this.dynamicPath = void 0;
        this.parentNode = void 0;
        this.asset = asset;
        this.id = id;
        this.dynamicPath = path;
        this.parentNode = parent;
      });
      var BaseDynamicLoading = exports('BaseDynamicLoading', (_dec = ccclass('BaseDynamicLoading'), _dec2 = property({
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec3 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseDynamicLoading, _GameObject);

        function BaseDynamicLoading() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dynamicLoading", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resourceRootPath", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "assetPaths", _descriptor3, _assertThisInitialized(_this));

          _this._loadedAsset = [];
          _this._localBundle = null;
          _this._bundlePrefix = 'bundle';
          _this._bundlePath = "";
          return _this;
        }

        var _proto = BaseDynamicLoading.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this._loadedAsset = [];
          this.setUpAssetBundle();
        };

        _proto.clearSingleResourceLoaded = function clearSingleResourceLoaded(assetData) {
          if (assetData) {
            var index = this._loadedAsset.indexOf(assetData);

            var assets = [];
            var deps = assetManager.dependUtil.getDepsRecursively(assetData.asset._uuid);

            for (var i = 0; i < deps.length; i++) {
              var _uuid = deps[i];
              var item = assetManager.assets.get(_uuid);

              if (item) {
                item.addRef();
                assets.push(item);
              }
            }

            assets.forEach(function (item) {
              if (item) {
                item.decRef(true);

                if (item instanceof sp.SkeletonData) {
                  item.reset();
                }
              }
            });
            assetData.asset.decRef(true);

            if (index > -1) {
              this._loadedAsset.splice(index, 1);
            }
          }
        };

        _proto.clearResourcesLoaded = function clearResourcesLoaded() {
          var _this2 = this;

          this._loadedAsset.forEach(function (assetData) {
            _this2.clearSingleResourceLoaded(assetData);
          });

          this._loadedAsset = [];
        };

        _proto._dynamicLoadByPath = function _dynamicLoadByPath(assetPath, assetId, parent, completeCB) {
          if (completeCB === void 0) {
            completeCB = null;
          }

          if (!this._localBundle) this._localBundle = assetManager.getBundle(this._bundlePath);

          if (this._localBundle) {
            var _asset = this._localBundle.get(this.resourceRootPath + assetPath);

            if (_asset) {
              // this.onLoadAssetCompletely(_asset, assetPath, assetId, parent, completeCB);
              completeCB && completeCB(_asset);
            } else {
              this._localBundle.load(this.resourceRootPath + assetPath, function (err, asset) {
                if (err) {
                  error("Error while loading asset path: " + assetPath);
                } else {
                  // this.onLoadAssetCompletely(asset, assetPath, assetId, parent, completeCB);
                  completeCB && completeCB(asset);
                }
              });
            }
          } else {
            log('>>>>> Asset Bundle is not ready');
          }
        };

        _proto.onLoadAssetCompletely = function onLoadAssetCompletely(asset, assetPath, assetId, parent, completeCB) {
          if (completeCB === void 0) {
            completeCB = null;
          }

          if (this.node) {
            var assetData = new AssetData(asset, assetId, assetPath, parent);
            this._loadedAsset && this._loadedAsset.push(assetData);
            var deps = assetManager.dependUtil.getDepsRecursively(asset._uuid);

            for (var i = 0; i < deps.length; i++) {
              var _uuid = deps[i];
              var item = assetManager.assets.get(_uuid);

              if (item && item instanceof sp.SkeletonData) {
                item.getRuntimeData();
                item.addRef();
              }
            }

            asset.addRef();
            completeCB && completeCB(asset);
          } else {
            asset.decRef(true);
          }
        };

        _proto.getAssetLoadedByPath = function getAssetLoadedByPath(path) {
          for (var i = 0; i < this._loadedAsset.length; i++) {
            if (path === this._loadedAsset[i].dynamicPath) {
              return this._loadedAsset[i];
            }
          }

          return null;
        };

        _proto.getAssetLoadedById = function getAssetLoadedById(id) {
          for (var i = 0; i < this._loadedAsset.length; i++) {
            if (id === this._loadedAsset[i].id) {
              return this._loadedAsset[i];
            }
          }

          return null;
        };

        _proto.setUpAssetBundle = function setUpAssetBundle() {
          var _this3 = this;

          this._bundlePath = this._bundlePrefix + this.config.GAME_ID;
          this._localBundle = assetManager.getBundle(this._bundlePath);

          if (!this._localBundle) {
            assetManager.loadBundle(this._bundlePath, function (err, bundle) {
              if (err) {
                error("Error while loading bundle with path: " + _this3._bundlePath);
              } else {
                _this3._localBundle = bundle;

                _this3.onAssetBundleReady();
              }
            });
          } else {
            this.onAssetBundleReady();
          }
        };

        _proto.onAssetBundleReady = function onAssetBundleReady() {// override code here
        };

        _proto.onDestroy = function onDestroy() {
          this.clearResourcesLoaded();
        };

        return BaseDynamicLoading;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "resourceRootPath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "assetPaths", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTableHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Label, CCInteger, CCString, NodePool, Vec3, Event, instantiate, GameObject, formatMoney, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      CCInteger = module.CCInteger;
      CCString = module.CCString;
      NodePool = module.NodePool;
      Vec3 = module.Vec3;
      Event = module.Event;
      instantiate = module.instantiate;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "4cc72EalHNHgLgsk4sPajZY", "BaseTableHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseTableHistoryDetail = exports('BaseTableHistoryDetail', (_dec = ccclass('BaseTableHistoryDetail'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: SlotGameMode
      }), _dec10 = property({
        type: CCInteger,
        tooltip: "Array of BigW ild Collumn Index on Table from 0",
        visible: function visible() {
          return this.hasBigWild;
        }
      }), _dec11 = property({
        type: CCString,
        tooltip: "Big wild symbol name per col, should be an array of 5 cols",
        visible: function visible() {
          return this.hasBigWild;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BaseTableHistoryDetail, _GameObject);

        function BaseTableHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "slotTable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enableHighlightHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimBackground", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prevPageBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextPageBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneType", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customSymbolWidth", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customSymbolHeight", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolScaleX", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolScaleY", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasSubSymbol", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasPayline", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasBigWild", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildCols", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildSymbols", _descriptor17, _assertThisInitialized(_this)); // big wild symbol name per col, should be an array of 5 col


          _this.symbolPool = null;
          _this.data = void 0;
          _this.pages = [];
          _this.currentFreeGamePage = 0;
          _this.currentJackpotPage = 0;
          _this.currentBonusGamePage = 0;
          _this.currentTopUpGamePage = 0;
          _this.currentNormalGamePage = 0;
          _this.symbols = [];
          return _this;
        }

        var _proto = BaseTableHistoryDetail.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('UPDATE_DETAIL_VIEW', this.updateDetailView, this);
          this.node.on('RESET_ALL', this.resetAll, this);
          this.node.on('CLEAR_TABLE', this.clearTable, this);
          this.symbolPool = new NodePool('SymbolPool');
          if (this.prevPageBtn) this.prevPageBtn.active = false;
          if (this.nextPageBtn) this.nextPageBtn.active = false;
        };

        _proto.updateDetailView = function updateDetailView(data, pages) {
          this.data = data;
          this.pages = pages;
          this.clearTable();
          this.updateTotalWinAmount(data);
        };

        _proto.updateTotalWinAmount = function updateTotalWinAmount(data) {
          this.totalWinAmount.string = '0';

          if (this.sceneType === SlotGameMode.JackpotGame) {
            if (data.latestWinJackpotInfo && data.latestWinJackpotInfo.length) {
              this.totalWinAmount.string = formatMoney(parseFloat(data.latestWinJackpotInfo[0].jackpotAmount));
            }
          } else if (this.sceneType === SlotGameMode.FreeGame && data.totalFreeWinAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseFloat(data.winAmount));
          } else if (this.sceneType === SlotGameMode.BonusGame && data.totalBonusWinAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseFloat(data.winAmount));
          } else if (this.sceneType === SlotGameMode.TopUpGame && data.totalTopUpWinAmount) {
            this.totalWinAmount.string = formatMoney(parseFloat(data.winAmount));
          } else if (this.sceneType === SlotGameMode.NormalGame && data.winAmount !== undefined) {
            this.totalWinAmount.string = formatMoney(parseFloat(data.winAmount));
          }
        };

        _proto.renderTable = function renderTable(matrix, format, subSym) {
          if (!matrix) return;
          if (this.dimBackground) this.dimBackground.active = false;
          var symbolWidth = this.sceneType === SlotGameMode.FreeGame && this.config.SYMBOL_WIDTH_FREE_GAME ? this.config.SYMBOL_WIDTH_FREE_GAME : this.config.SYMBOL_WIDTH;
          var symbolHeight = this.sceneType === SlotGameMode.FreeGame && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          symbolWidth = this.customSymbolWidth || symbolWidth;
          symbolHeight = this.customSymbolHeight || symbolHeight;
          var startX = (-format.length / 2 + 0.5) * symbolWidth;
          var count = 0;

          for (var col = 0; col < format.length; col++) {
            this.symbols[col] = [];
            var startY = (format[col] / 2 - 0.5) * symbolHeight;

            for (var row = 0; row < format[col]; row++) {
              var symbol = this.getSymbol();
              symbol.parent = this.slotTable;
              symbol.setScale(new Vec3(this.symbolScaleX, this.symbolScaleY, 1));
              symbol.setPosition(startX + col * symbolWidth, startY - row * symbolHeight);
              symbol.emit("INIT_FOR_PAYLINE", this.enableHighlightHolder, null, false);
              symbol.col = col;
              symbol.row = row;
              var symbolValue = matrix[count];

              if (this.hasBigWild) {
                var res = this.bigWildCols.indexOf(col);

                if (res >= 0 && symbolValue === "K") {
                  symbolValue = "";

                  if (row === 1) {
                    symbolValue = this.bigWildSymbols[col];
                    symbol.emit('CHANGE_TO_BIG_WILD', symbolValue);
                  }
                }
              }

              if (symbolValue === '' || symbolValue === matrix[count]) {
                symbol.emit('CHANGE_TO_SYMBOL', symbolValue);
              }

              symbol.symbolName = matrix[count];

              if (subSym && subSym.length && subSym.indexOf(count) > -1) {
                this.showSubSymbol(symbol, true);
              }

              this.symbols[col][row] = symbol;
              count++;
            }
          }

          this.showPaylines();
        };

        _proto.showPaylines = function showPaylines() {
          if (this.hasPayline && this.data.paylines && this.data.paylines.length && this.data.paylines !== '[]') {
            var parsePaylines = this.data.paylines.replace('[', '').replace(']', '');
            var paylines = this.dataStore.convertPayLine(parsePaylines.split(','));
            this.showTablePaylines(paylines);
          } else {
            if (this.dimBackground) this.dimBackground.active = false;
          }
        };

        _proto.showTablePaylines = function showTablePaylines(paylines) {
          var _this2 = this;

          if (!paylines || paylines.length == 0) return;
          this.disableHighlight();
          paylines.forEach(function (payline) {
            _this2.showNextPayline(payline);
          });
        };

        _proto.disableHighlight = function disableHighlight() {
          if (this.dimBackground) this.dimBackground.active = true;
        };

        _proto.showNextPayline = function showNextPayline(paylineInfo) {
          var _this3 = this;

          if (this.config.PAY_LINE_ALLWAYS) {
            var symbolName = paylineInfo.symbolName,
                symbolCount = paylineInfo.symbolCount;
            this.slotTable.children.forEach(function (symbol) {
              if ((symbol.symbolName === symbolName.trim() || symbol.symbolName === "K") && symbol.col < symbolCount) {
                _this3.showSymbolHightlight(symbol);
              }
            });
          } else {
            var payLineID = paylineInfo.payLineID,
                payLineWinNumbers = paylineInfo.payLineWinNumbers,
                _symbolName = paylineInfo.symbolName;
            var payline = this.config.PAY_LINE_MATRIX[payLineID.trim()];

            if (payline && payline.length && this.symbols.length > 0) {
              for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
                var row = payline[paylinePos];
                var col = paylinePos;
                var symbol = this.symbols[col][row];
                if (symbol && (symbol.symbolName === _symbolName || symbol.symbolName === "K")) this.showSymbolHightlight(symbol);
              }
            }
          }
        };

        _proto.showSubSymbol = function showSubSymbol(symbol, isActive) {
          // Custom event show subSymbol
          if (!symbol) return;
          symbol.emit('SHOW_SUB_SYMBOL_STATIC', isActive);
        };

        _proto.showSymbolHightlight = function showSymbolHightlight(symbol) {
          if (!symbol) return;
          symbol.emit('ENABLE_HIGHLIGHT', true);
        };

        _proto.onPrevPage = function onPrevPage() {
          var currentPage = 0;

          if (this.sceneType === SlotGameMode.FreeGame) {
            currentPage = --this.currentFreeGamePage;
          } else if (this.sceneType === SlotGameMode.JackpotGame) {
            currentPage = --this.currentJackpotPage;
          } else if (this.sceneType === SlotGameMode.BonusGame) {
            currentPage = --this.currentBonusGamePage;
          } else if (this.sceneType === SlotGameMode.TopUpGame) {
            currentPage = --this.currentTopUpGamePage;
          } else if (this.sceneType === SlotGameMode.NormalGame) {
            currentPage = --this.currentNormalGamePage;
          }

          if (!currentPage) this.prevPageBtn.active = false;
          this.nextPageBtn.active = true;
          this.clearTable();
          this.playClickSound();
          var event = new Event('UPDATE_GAME_DETAIL', true);
          event['userData'] = {
            currentPage: currentPage,
            gameMode: this.sceneType
          };
          this.node.dispatchEvent(event); //if (this.eventManager) this.eventManager.emit('UPDATE_GAME_DETAIL', currentPage, this.sceneType);
        };

        _proto.onNextPage = function onNextPage() {
          var currentPage = 0;

          if (this.sceneType === SlotGameMode.FreeGame) {
            currentPage = ++this.currentFreeGamePage;
          } else if (this.sceneType === SlotGameMode.JackpotGame) {
            currentPage = ++this.currentJackpotPage;
          } else if (this.sceneType === SlotGameMode.BonusGame) {
            currentPage = ++this.currentBonusGamePage;
          } else if (this.sceneType === SlotGameMode.TopUpGame) {
            currentPage = ++this.currentTopUpGamePage;
          } else if (this.sceneType === SlotGameMode.NormalGame) {
            currentPage = ++this.currentNormalGamePage;
          }

          this.prevPageBtn.active = true;
          if (currentPage === this.pages.length - 1) this.nextPageBtn.active = false;
          this.clearTable();
          this.playClickSound();
          var event = new Event('UPDATE_GAME_DETAIL', true);
          event['userData'] = {
            currentPage: currentPage,
            gameMode: this.sceneType
          };
          this.node.dispatchEvent(event); //if (this.eventManager) this.eventManager.emit('UPDATE_GAME_DETAIL', currentPage, this.sceneType);
        };

        _proto.resetUI = function resetUI() {
          if (this.prevPageBtn) this.prevPageBtn.active = false;
          if (this.nextPageBtn) this.nextPageBtn.active = false;
          if (this.totalWinAmount) this.totalWinAmount.string = '0';
          this.clearTable();
        };

        _proto.resetAll = function resetAll() {
          this.data = '';
          this.pages = [];
          this.currentFreeGamePage = 0;
          this.currentJackpotPage = 0;
          this.currentBonusGamePage = 0;
          this.currentTopUpGamePage = 0;
          this.currentNormalGamePage = 0;
          this.resetUI();
        };

        _proto.clearTable = function clearTable() {
          for (var col = 0; col < this.symbols.length; col++) {
            for (var row = 0; row < this.symbols[col].length; row++) {
              var symbol = this.symbols[col][row];

              if (symbol) {
                this.resetSymbol(symbol);
                this.symbolPool.put(symbol);
              }
            }
          }

          this.symbols = [];
        };

        _proto.playClickSound = function playClickSound() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.resetSymbol = function resetSymbol(symbol) {
          symbol.emit('RESET');
        };

        _proto.getSymbol = function getSymbol() {
          var element = this.symbolPool.get();
          if (!element) element = instantiate(this.symbolPrefab);
          return element;
        };

        _proto.onDestroy = function onDestroy() {
          _GameObject.prototype.onDestroy.call(this);

          this.symbolPool.clear();
        };

        return BaseTableHistoryDetail;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "slotTable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enableHighlightHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "dimBackground", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "totalWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "prevPageBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nextPageBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneType", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "customSymbolWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "customSymbolHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "symbolScaleX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "symbolScaleY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "hasSubSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "hasPayline", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "hasBigWild", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "bigWildCols", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "bigWildSymbols", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './EventNames.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, sys, GameObject, EventNames, formatWalletMoney, formatMoney, TutorialTriggerType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      sys = module.sys;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      formatMoney = module.formatMoney;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "81823CamwZJIoHs0ohUUGLH", "Bet", undefined);

      var lodash = globalThis._;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bet = exports('Bet', (_dec = ccclass('Bet'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: Button
      }), _dec6 = property({
        type: Button
      }), _dec7 = property({
        type: Button
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: Label
      }), _dec10 = property({
        type: Label
      }), _dec11 = property({
        type: Label,
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Bet, _GameObject);

        function Bet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "increaseBetBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceBetBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "increaseExtraBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceExtraBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "increaseBetLinesBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reduceBetLinesBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extraBetLabel", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLinesLabel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFormatDenom", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFormatTotal", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betUpSoundId", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betDownSoundId", _descriptor14, _assertThisInitialized(_this));

          _this.betData = null;
          _this.betLines = [];
          return _this;
        }

        var _proto = Bet.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (!this.eventManager) throw new Error("do not have eventManager"); //

          this.node.on("INIT_BET", this.initBet, this);
          this.node.on("SET_BET_ID", this.setBetId, this);
          this.node.on("UPDATE_BET", this.updateBet, this);
          this.node.on("UPDATE_EXTRA_BET", this.updateExtraBet, this);
          this.node.on("LOAD_BET", this.loadCacheBet, this);
          this.node.on('ENABLE_BET', this.enableBet, this);
          this.node.on('DISABLE_BET', this.disableBet, this);
          this.betData = this.dataStore.betData;
          this.disableBet();
        };

        _proto.initBet = function initBet() {
          var cacheBet = this.loadCacheBet();
          var betKey = cacheBet ? cacheBet[0] : this.betData.betKey;

          if (!this.betData.mainBets.hasOwnProperty(betKey)) {
            betKey = this._getDefaultKey(this.betData.mainBets);
          }

          var extraBetKey = cacheBet ? cacheBet[1] : this.betData.extraBetKey;

          if (!this.betData.extraBets.hasOwnProperty(extraBetKey)) {
            extraBetKey = this._getDefaultKey(this.betData.extraBets);
          }

          this.updateBet(betKey);
          this.updateExtraBet(extraBetKey);

          if (this.config.HAS_SELECT_BET_LINE) {
            var cacheBetLines = this.loadCacheBetLines() || this.betData.betLines;
            this.updateBetLines(cacheBetLines, true);
          }
        };

        _proto.setBetId = function setBetId(betId) {
          this.updateBet(betId[0]);
          this.updateExtraBet(betId[1]);
        };

        _proto.updateBet = function updateBet(betKey) {
          var denomDecimal = 0;
          var totalBetDecimal = 0;

          if (this.config.IS_SUPPORT_MULTI_CURRENCY) {
            var currencyConfig = this.config.CURRENCY_CONFIG[this.dataStore.currencyCode];
            denomDecimal = currencyConfig.BET_FORMAT.DENOM_DECIMAL || 0;
            totalBetDecimal = currencyConfig.BET_FORMAT.TOTALBET_DECIMAL || 0;
          }

          this.betData.updateBet(betKey);
          this.betLabel.string = this.isFormatDenom ? formatWalletMoney(this.betData.denom) : formatMoney(this.betData.denom, denomDecimal);
          this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.betData.getTotalBet()) : formatMoney(this.betData.getTotalBet(), totalBetDecimal);
          this.eventManager.emit(EventNames.BET_UPDATE, true);
          if (!this.dataStore.isTrialMode) this.cacheBet();
        };

        _proto.updateExtraBet = function updateExtraBet(extraBetKey) {
          this.betData.updateExtraBet(extraBetKey);

          if (this.extraBetLabel) {
            this.extraBetLabel.string = this.betData.extraBetValue;
            this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.betData.getTotalBet()) : formatMoney(this.betData.getTotalBet());
          }

          this.eventManager.emit(EventNames.BET_UPDATE);
          if (!this.dataStore.isTrialMode) this.cacheBet();
        };

        _proto.updateBetLines = function updateBetLines(betLines, loadCache) {
          if (loadCache === void 0) {
            loadCache = false;
          }

          if (!loadCache) {
            this.eventManager.emit(EventNames.BET_LINE_PREUPDATE);
          }

          this.betData.updateBetLines(betLines);

          if (this.betLinesLabel) {
            this.betLinesLabel.string = this.betData.betLineNumber;
            this.totalLabel.string = this.isFormatTotal ? formatWalletMoney(this.dataStore.getTotalBet()) : formatMoney(this.dataStore.getTotalBet());
          }

          if (!loadCache) {
            this.eventManager.emit(EventNames.BET_LINE_UPDATE);
          }

          if (!this.dataStore.isTrialMode) this.cacheBetLines();
        }
        /**
         * @event_click
         */
        ;

        _proto.increaseBet = function increaseBet() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData = this.betData,
              betKey = _this$betData.betKey,
              mainBets = _this$betData.mainBets;

          var newBetKey = this._getNextKey(betKey, mainBets);

          this.updateBet(newBetKey);
          this.guiMgr.onIngameEvent(TutorialTriggerType.IncreaseBet, 'BET_INCREASE');
        };

        _proto.reduceBet = function reduceBet() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var _this$betData2 = this.betData,
              betKey = _this$betData2.betKey,
              mainBets = _this$betData2.mainBets;

          var newBetKey = this._getPrevKey(betKey, mainBets);

          this.updateBet(newBetKey);
        };

        _proto.increaseExtraBet = function increaseExtraBet() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData3 = this.betData,
              extraBetKey = _this$betData3.extraBetKey,
              extraBets = _this$betData3.extraBets;

          var newExtraBetKey = this._getNextKey(extraBetKey, extraBets);

          this.updateExtraBet(newExtraBetKey);
          this.guiMgr.onIngameEvent(TutorialTriggerType.IncreaseExtraBet, 'EXTRA_BET_INCREASE');
        };

        _proto.reduceExtraBet = function reduceExtraBet() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var _this$betData4 = this.betData,
              extraBetKey = _this$betData4.extraBetKey,
              extraBets = _this$betData4.extraBets;

          var newExtraBetKey = this._getPrevKey(extraBetKey, extraBets);

          this.updateExtraBet(newExtraBetKey);
        };

        _proto.increaseBetLines = function increaseBetLines() {
          this.betUpSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betUpSoundId);
          var _this$betData5 = this.betData,
              betLines = _this$betData5.betLines,
              maxBetLine = _this$betData5.maxBetLine;
          var newBetLines = betLines.slice();

          if (newBetLines.length < maxBetLine) {
            var newLine = newBetLines.length + 1;
            newBetLines.push(newLine);
          } else {
            newBetLines = [1];
          }

          this.updateBetLines(newBetLines);
        };

        _proto.reduceBetLines = function reduceBetLines() {
          this.betDownSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.betDownSoundId);
          var betLines = this.betData.betLines;
          var newBetLines = betLines.slice();

          if (newBetLines.length > 1) {
            newBetLines.pop();
          } else {
            newBetLines = this.betData.getDefaultBetLines();
          }

          this.updateBetLines(newBetLines);
        }
        /**
         * @cache_Bet_data
         */
        ;

        _proto.cacheBet = function cacheBet() {
          var gameId = this.config.GAME_ID;
          var betCacheConfig = JSON.parse(sys.localStorage.getItem('betId') || '{}');
          betCacheConfig = lodash.isObject(betCacheConfig) ? betCacheConfig : {};
          betCacheConfig[gameId] = this.betData.betId;
          sys.localStorage.setItem('betId', JSON.stringify(betCacheConfig));
        };

        _proto.loadCacheBet = function loadCacheBet() {
          var gameId = this.config.GAME_ID;
          var cacheBetId = JSON.parse(sys.localStorage.getItem('betId') || '{}');
          if (cacheBetId[gameId]) return cacheBetId[gameId];
          return '';
        };

        _proto.cacheBetLines = function cacheBetLines() {
          var gameId = this.config.GAME_ID;
          var cacheBetLines = JSON.parse(sys.localStorage.getItem('betLines') || '{}');
          cacheBetLines = lodash.isObject(cacheBetLines) ? cacheBetLines : {};
          cacheBetLines[gameId] = this.betData.betLines.slice();
          sys.localStorage.setItem('betLines', JSON.stringify(cacheBetLines));
        };

        _proto.loadCacheBetLines = function loadCacheBetLines() {
          var gameId = this.config.GAME_ID;
          var cacheBetLines = JSON.parse(sys.localStorage.getItem('betLines')) || {};
          if (cacheBetLines[gameId]) return cacheBetLines[gameId];
          return null;
        };

        _proto._getDefaultKey = function _getDefaultKey(obj) {
          var keys = Object.keys(obj);
          if (keys.length < 0) throw new Error("invalid object");
          return keys.sort()[0];
        };

        _proto._getNextKey = function _getNextKey(currentKey, object) {
          var keys = Object.keys(object);
          var currentIndex = keys.indexOf(currentKey);
          var newIndex = currentIndex === keys.length - 1 ? 0 : currentIndex + 1;
          return keys[newIndex];
        };

        _proto._getPrevKey = function _getPrevKey(currentKey, object) {
          var keys = Object.keys(object);
          var currentIndex = keys.indexOf(currentKey);
          var newIndex = currentIndex === 0 ? keys.length - 1 : currentIndex - 1;
          return keys[newIndex];
        };

        _proto.enableBet = function enableBet() {
          this.enableBetBtn();
          this.enableExtraBetBtn();
          this.enableBetLineBtn();
        };

        _proto.disableBet = function disableBet() {
          this.disableBetBtn();
          this.disableExtraBetBtn();
          this.disableBetLineBtn();
        };

        _proto.enableBetBtn = function enableBetBtn() {
          this.increaseBetBtn && (this.increaseBetBtn.interactable = true);
          this.reduceBetBtn && (this.reduceBetBtn.interactable = true);
        };

        _proto.disableBetBtn = function disableBetBtn() {
          this.increaseBetBtn && (this.increaseBetBtn.interactable = false);
          this.reduceBetBtn && (this.reduceBetBtn.interactable = false);
        };

        _proto.enableExtraBetBtn = function enableExtraBetBtn() {
          this.increaseExtraBtn && (this.increaseExtraBtn.interactable = true);
          this.reduceExtraBtn && (this.reduceExtraBtn.interactable = true);
        };

        _proto.disableExtraBetBtn = function disableExtraBetBtn() {
          this.increaseExtraBtn && (this.increaseExtraBtn.interactable = false);
          this.reduceExtraBtn && (this.reduceExtraBtn.interactable = false);
        };

        _proto.enableBetLineBtn = function enableBetLineBtn() {
          this.increaseBetLinesBtn && (this.increaseBetLinesBtn.interactable = true);
          this.reduceBetLinesBtn && (this.reduceBetLinesBtn.interactable = true);
        };

        _proto.disableBetLineBtn = function disableBetLineBtn() {
          this.increaseBetLinesBtn && (this.increaseBetLinesBtn.interactable = false);
          this.reduceBetLinesBtn && (this.reduceBetLinesBtn.interactable = false);
        };

        return Bet;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "increaseBetBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "reduceBetBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "increaseExtraBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "reduceExtraBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "increaseBetLinesBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "reduceBetLinesBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "totalLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "extraBetLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "betLinesLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "isFormatDenom", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "isFormatTotal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "betUpSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BET_UP";
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "betDownSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BET_DOWN";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09c7bjvNx1CmLTFZ9Hw7fkA", "BetData", undefined);

      var BetData = exports('default', /*#__PURE__*/function () {
        function BetData(config) {
          this.betKey = void 0;
          this.extraBetKey = void 0;
          this.mainBets = void 0;
          this.extraBets = {
            "0": 1
          };
          this.betLines = [];
          this.maxBetLine = 20;
          this.betLineNumber = this.maxBetLine;
          this.totalCredit = void 0;
          this.denom = void 0; // = mainBets / totalBetLines

          this.isAlways = void 0;
          this.betKey = config.DEFAULT_BET;
          this.extraBetKey = config.DEFAULT_EXTRA_BET;
          this.mainBets = config.BETS;
          this.extraBets = config.EXTRA_BETS;
          this.betLineNumber = this.maxBetLine = config.PAY_LINE_LENGTH;
          this.isAlways = config.PAY_LINE_ALLWAYS;
          this.totalCredit = config.TOTAL_BET_CREDIT;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;

          if (config.HAS_SELECT_BET_LINE) {
            this.betLines = this.getDefaultBetLines();
          }
        }

        var _proto = BetData.prototype;

        _proto.updateBetData = function updateBetData(mainBets, extraBets, betLine) {
          this.mainBets = mainBets;
          var mainKeys = Object.keys(this.mainBets).sort();
          if (!this.mainBets.hasOwnProperty(this.betKey)) this.betKey = mainKeys[0];
          this.extraBets = extraBets || this.extraBets;
          var extraKeys = Object.keys(this.extraBets);
          if (!this.extraBets.hasOwnProperty(this.extraBetKey)) this.extraBetKey = extraKeys[0];
          this.betLines = betLine || this.betLines;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;
        };

        _proto.updateBet = function updateBet(betKey) {
          this.betKey = betKey;
          this.denom = this.isAlways ? 1 : this.betValue / this.maxBetLine;
        };

        _proto.updateExtraBet = function updateExtraBet(extraBetKey) {
          this.extraBetKey = extraBetKey;
        };

        _proto.updateBetLines = function updateBetLines(betLines) {
          this.betLines = betLines;
          this.betLineNumber = this.betLines.length;
        };

        _proto.getDefaultBetLines = function getDefaultBetLines() {
          // full lines
          var betLines = [];

          for (var i = 1; i <= this.maxBetLine; i++) {
            betLines.push(i);
          }

          return betLines;
        };

        _proto.getTotalBet = function getTotalBet() {
          if (this.isAlways) {
            return this.betValue * this.extraBetValue;
          } else {
            this.denom = this.betValue / this.maxBetLine;
            return this.denom * this.extraBetValue * this.betLineNumber;
          }
        };

        _proto.getBetLevel = function getBetLevel() {
          return this.betValue / this.totalCredit;
        };

        _createClass(BetData, [{
          key: "betId",
          get: function get() {
            return this.betKey + this.extraBetKey;
          }
        }, {
          key: "betValue",
          get: function get() {
            return this.mainBets[this.betKey];
          }
        }, {
          key: "extraBetValue",
          get: function get() {
            return this.extraBets[this.extraBetKey];
          }
        }]);

        return BetData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetHistoryMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, warn, GameObject, updateUtilConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      warn = module.warn;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      updateUtilConfig = module.updateUtilConfig;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f96b82SuNNKBJqsG+zgFnPs", "BetHistoryMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetHistoryMgr = exports('BetHistoryMgr', (_dec = ccclass('BetHistoryMgr'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetHistoryMgr, _GameObject);

        function BetHistoryMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "betHistoryPrefab", _descriptor, _assertThisInitialized(_this));

          _this.playSession = null;
          _this.token = null;
          _this.tokenType = null;
          _this.userId = null;
          _this.betInstance = null;
          _this.betHistory = null;
          _this.gameId = null;
          _this.currencyCode = null;
          return _this;
        }

        var _proto = BetHistoryMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          var queryString = window.location.search;
          var urlParams = new URLSearchParams(queryString);
          this.playSession = urlParams.get('psId');
          this.token = urlParams.get('token');
          this.tokenType = urlParams.get('tokenType');
          this.userId = urlParams.get('userId'); //this.config = this.node["config"];

          this.currencyCode = urlParams.get('c');

          if (this.currencyCode) {
            this._updateCurrencyConfig();
          }

          if (this.betHistoryPrefab && this.playSession) {
            this.betInstance = instantiate(this.betHistoryPrefab);
            this.betInstance.parent = this.node;
            this.betInstance.active = true;
            this.betInstance.setPosition(0, 0);
            this.betInstance.getComponent('SlotUIScene').show();
            this.betHistory = this.betInstance.getComponent('SlotBetHistory');
            this.betInstance.getComponentInChildren('SlotBetHistoryDetail').setToken(this.token, this.tokenType, this.userId);
            this.betHistory.openBetDetail({
              userData: {
                sessionId: this.playSession
              }
            });
            this.betInstance.getComponentInChildren('SlotBetHistoryDetail').disableCloseDetail();
          } else {
            warn("Cant get history prefab for game " + this.gameId);
          }
        };

        _proto._updateCurrencyConfig = function _updateCurrencyConfig() {
          if (!this.node.mainDirector || !this.node.config || !this.node.config.CURRENCY_CONFIG || !this.node.config.IS_SUPPORT_MULTI_CURRENCY) return;
          this.node.mainDirector.currencyCode = this.currencyCode;
          var currencyConfig = this.node.config.CURRENCY_CONFIG[this.currencyCode.toUpperCase()];

          if (currencyConfig && updateUtilConfig) {
            updateUtilConfig('CURRENCY_CONFIG', currencyConfig.MONEY_FORMAT);
          }
        };

        return BetHistoryMgr;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "betHistoryPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetOptionItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c74daLISiVCeZB30tnBNK5K", "BetOptionItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetOptionItem = exports('BetOptionItem', (_dec = ccclass('BetOptionItem'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BetOptionItem, _Component);

        function BetOptionItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "betOptionValue", _descriptor, _assertThisInitialized(_this));

          _this.controller = null;
          _this.itemIndex = 0;
          return _this;
        }

        var _proto = BetOptionItem.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node['updatedata'] = this.updateData.bind(this);
        };

        _proto.updateData = function updateData(values, index, controller) {
          this.controller = controller;
          this.betOptionValue.string = formatMoney(values);
          this.itemIndex = index;
        };

        _proto.onClick = function onClick() {
          if (!this.controller.getSelectBlocked()) {
            this.controller.setStopTouchUp();
            this.controller.selectBet(this.itemIndex, 0.5);
          }
        };

        return BetOptionItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "betOptionValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetOptionScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, ScrollView, tween, Layout, Vec3, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      ScrollView = module.ScrollView;
      tween = module.tween;
      Layout = module.Layout;
      Vec3 = module.Vec3;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7fa2eZlc8pN17hZpUQRMS8/", "BetOptionScrollView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetOptionScrollView = exports('BetOptionScrollView', (_dec = ccclass('BetOptionScrollView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetOptionScrollView, _GameObject);

        function BetOptionScrollView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "view", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betSelectPrefabName", _descriptor4, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.initPos = null;
          _this.heightItem = 60;
          _this.listItems = [];
          _this.currentIndex = 0;
          _this.limitTop = 0;
          _this.limitBottom = 0;
          _this.isTouchStarted = false;
          _this.controller = null;
          _this.isSelectBlocked = false;
          _this.countWheel = 0;
          _this.scrollDirection = 0;
          _this.isTouchUp = false;
          _this.listBetValues = [];
          _this.maxBet = 0;
          return _this;
        }

        var _proto = BetOptionScrollView.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.scrollView.on("scroll-ended", this.scrollEnded, this);
          this.scrollView.on("touch-up", this.touchUp, this);
          this.scrollView.on("scrolling", this.scrollingView, this);
          this.initPos = this.view.getComponent(UITransform).height / 2;
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("SELECT_MAX_BET", this.selectMaxBet, this);
          this.node.on("CLEAR_ALL_BET", this.clearAllBets, this);
          this.view.on(Node.EventType.TOUCH_END, this.touchViewEnded.bind(this));
          this.view.on(Node.EventType.TOUCH_START, this.touchViewStart.bind(this));
          this.view.on(Node.EventType.TOUCH_MOVE, this.touchViewMove.bind(this));
          this.view.on(Node.EventType.TOUCH_CANCEL, this.touchViewCancel.bind(this));
          this.view.on(Node.EventType.MOUSE_WHEEL, this.mouseWheel.bind(this));
          this.listItems = [];
          this.currentIndex = 0;
          if (this.mainDirector) this.poolFactory = this.mainDirector.poolFactory;
        };

        _proto.scrollingView = function scrollingView() {
          var height = this.content.getPosition().y;
          if (height <= this.limitTop || height >= this.limitBottom) return;
          if (this.touchViewStart) height = this.getCorrectPositionY(this.content.getPosition().y);
        };

        _proto.touchViewMove = function touchViewMove() {
          if (this.touchViewStart) {
            this.content.getPosition().y = this.getCorrectPositionY(this.content.getPosition().y);
          }
        };

        _proto.touchViewEnded = function touchViewEnded() {
          this.isTouchStarted = false;

          if (this.getIsScrolling() == true) {
            this.controller.unSetSelectColorButtons(this.currentIndex == 0);
          }
        };

        _proto.touchViewStart = function touchViewStart() {
          this.isTouchStarted = true;
          this.controller.setSelectColorButtons();
        };

        _proto.touchViewCancel = function touchViewCancel() {
          if (this.getIsScrolling() == false) this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.getIsScrolling = function getIsScrolling() {
          return this.scrollView.getComponent(ScrollView).isScrolling();
        };

        _proto.getSelectBlocked = function getSelectBlocked() {
          return this.isSelectBlocked;
        };

        _proto.mouseWheel = function mouseWheel() {
          var _this2 = this;

          var height = this.content.getPosition().y;
          if (height <= this.limitTop || height >= this.limitBottom) return;
          if (!this.countWheel) this.countWheel = 0;
          if (!this.content.prevPos) this.content.prevPos = this.content.getPosition();

          if (this.countWheel >= 3) {
            this.scrollDirection = height - this.content.prevPos.y > 0 ? 1 : -1;
            height = this.getCorrectPositionY(height + this.scrollDirection * 25);
            this.countWheel = 0;
          }

          this.isTouchUp = false;
          this.node.tweenNode && this.node.tweenNode.top();
          this.node.tweennNode = tween(this.node).delay(0.101).call(function () {
            _this2.calculateScroll();
          }).start();
          this.content.prevPos = this.content.getPosition();
          this.countWheel++;
        };

        _proto.clearAllBets = function clearAllBets() {
          for (var i = 0; i < this.listItems.length; i++) {
            var removeObj = this.listItems[i];
            if (this.poolFactory) this.poolFactory.removeObject(removeObj);
          }

          this.listItems = [];
        };

        _proto.updateData = function updateData(listBetValues, currentBetData, controller) {
          if (listBetValues === void 0) {
            listBetValues = [];
          }

          this.controller = controller;
          this.clearAllBets();
          this.listBetValues = [].concat(listBetValues);
          this.maxBet = this.listBetValues[0];

          for (var i = 0; i < listBetValues.length; i++) {
            var item = this.poolFactory && this.poolFactory.getObject(this.betSelectPrefabName);

            if (item) {
              item.active = true;
              item.parent = this.content;
              item.emit("UPDATE_DATA", this.listBetValues[i], i, this);
              item.setSiblingIndex(2);
              this.heightItem = item.getComponent(UITransform).height;
              this.listItems.push(item);
            }
          }

          var found = this.listBetValues.findIndex(function (it) {
            if (it == currentBetData) return true;
          });
          var reserveFound = this.listBetValues.length - 1 - found;
          this.content.getComponent(Layout).updateLayout();
          this.currentIndex = reserveFound;
          this.selectItemInAction(0.1, reserveFound, this.currentIndex == 0);
          this.limitTop = this.heightItem * 3;
          this.limitBottom = this.content.getComponent(UITransform).height - this.heightItem * 3;
        };

        _proto.getCorrectPositionY = function getCorrectPositionY(newY) {
          if (this.content.getPosition().y <= this.limitTop) return this.limitTop;else if (this.content.getPosition().y >= this.limitBottom) return this.limitBottom;
          return newY;
        };

        _proto.setStopTouchUp = function setStopTouchUp() {
          this.isTouchUp = false;
        };

        _proto.touchUp = function touchUp() {
          this.isTouchUp = true;
        };

        _proto.selectBet = function selectBet(index, timeScroll) {
          if (index === void 0) {
            index = 0;
          }

          if (timeScroll === void 0) {
            timeScroll = 0.1;
          }

          this.controller.setSelectedBet(this.listBetValues[index], index == 0);
          var reserveIndex = this.listBetValues.length - 1 - index;
          this.currentIndex = index;
          this.selectItemInAction(timeScroll, reserveIndex, true);
          this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.selectMaxBet = function selectMaxBet() {
          this.selectBet(0);
        };

        _proto.selectItemInAction = function selectItemInAction(time, index, isMaxBet) {
          var _this3 = this;

          if (time === void 0) {
            time = 0.15;
          }

          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          if (this.isSelectBlocked) return;
          this.isSelectBlocked = true;
          this.controller.unSetSelectColorButtons(isMaxBet);
          var nextPos = this.initPos + index * this.heightItem;
          this.content.tweenMove && this.content.tweenMove.stop();
          this.content.tweenMove = tween(this.content).to(time, {
            position: new Vec3(0, nextPos, 0)
          }, {
            easing: 'expoOut'
          }).start();
          this.content.tweenUnBlock && this.content.tweenUnBlock.stop();
          this.content.tweenUnBlock = tween(this.content).delay(0.1).call(function () {
            _this3.isSelectBlocked = false;
          }).start();
        };

        _proto.scrollEnded = function scrollEnded() {
          if (this.isTouchUp) {
            this.calculateScroll(0.15);
          }
        };

        _proto.calculateScroll = function calculateScroll(timeScroll) {
          if (timeScroll === void 0) {
            timeScroll = 0.1;
          }

          var offset = this.content.getPosition().y - this.initPos;
          var index = Math.round(offset / this.heightItem);
          if (index < 0) index = 0;else if (index >= this.listBetValues.length) index = this.listBetValues.length - 1;
          var reserveIndex = this.listBetValues.length - 1 - index;
          this.currentIndex = reserveIndex;
          var isMaxBet = reserveIndex == 0;
          this.controller.setSelectedBet(this.listBetValues[reserveIndex], isMaxBet);
          this.selectItemInAction(timeScroll, index, isMaxBet);
          this.isTouchUp = false;
          this.controller.unSetSelectColorButtons(this.currentIndex == 0);
        };

        _proto.onDestroy = function onDestroy() {
          this.content.tweenUnBlock && this.content.tweenUnBlock.stop();
          this.content.tweenMove && this.content.tweenMove.stop();
          this.node.tweenNode && this.node.tweenNode.stop();
        };

        _proto.getSelectBlock = function getSelectBlock() {
          return this.isSelectBlocked;
        };

        return BetOptionScrollView;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betSelectPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "BetOptionItem9947";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetSelectionMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f2cd5wBJKJCU6MZJLN9UrtQ", "BetSelectionMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetSelectionMgr = exports('BetSelectionMgr', (_dec = ccclass('BetSelectionMgr'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetSelectionMgr, _GameObject);

        function BetSelectionMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "overlay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betSelectionPanel", _descriptor2, _assertThisInitialized(_this));

          _this.isShowing = false;
          _this.tweenShow = null;
          return _this;
        }

        var _proto = BetSelectionMgr.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node['SHOW'] = this.show.bind(this);
          this.node['HIDE'] = this.hide.bind(this);
        };

        _proto.start = function start() {
          this.overlay.active = false;
          this.betSelectionPanel.active = false;
          this.isShowing = false;
        };

        _proto.show = function show() {
          var _this2 = this;

          if (this.isShowing) return;
          if (this.tweenShow) this.tweenShow.stop();
          this.tweenShow = tween(this.node).call(function () {
            _this2.isShowing = true;
            _this2.overlay.active = true;

            _this2.setOpacity(_this2.overlay, 0);

            _this2.fadeTo(_this2.overlay, 0.1, 120, {
              easing: 'sineIn'
            });
          }).delay(0.1).call(function () {
            _this2.betSelectionPanel.active = true;

            _this2.betSelectionPanel.emit("UPDATE_VALUE");

            _this2.betSelectionPanel.emit("SHOW");

            _this2.tweenShow = null;
          });
          this.tweenShow.start();
        };

        _proto.hide = function hide() {
          var _this3 = this;

          if (this.tweenShow) this.tweenShow.stop();
          this.tweenShow = tween(this.node).call(function () {
            _this3.isShowing = false;

            _this3.betSelectionPanel.emit("HIDE");
          }).delay(0.22).call(function () {
            _this3.betSelectionPanel.emit("CLEAR_ALL_BET");

            _this3.betSelectionPanel.active = false;

            _this3.fadeOut(_this3.overlay, 0.1, {
              easing: 'sineIn'
            });
          }).delay(0.1).call(function () {
            _this3.overlay.active = false;
            _this3.node.active = false;
            _this3.tweenShow = null;
          });
          this.tweenShow.start();
        };

        return BetSelectionMgr;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "betSelectionPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetSelectionPanelController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Button, Label, GameObject, formatMoney, findKeyByValue, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
      findKeyByValue = module.findKeyByValue;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "dfe6bA6RzNHXqPkU4B2QNps", "BetSelectionPanelController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetSelectionPanelController = exports('BetSelectionPanelController', (_dec = ccclass('BetSelectionPanelController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Color), _dec11 = property(Color), _dec12 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BetSelectionPanelController, _GameObject);

        function BetSelectionPanelController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btnConfirm", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnClose", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMaxBet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betOption", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblWallet", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblCurrentBet", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblMax", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorSelectedConfirm", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorSelectedMaxbet", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorUnSelected", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selectedValue", _descriptor12, _assertThisInitialized(_this));

          _this.selectedBet = 0;
          _this.selectBetEvent = null;
          return _this;
        }

        var _proto = BetSelectionPanelController.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('UPDATE_VALUE', this.updateValue, this);
          this.node.on('CLEAR_ALL_BET', this.clearAllBets, this);
        };

        _proto.updateValue = function updateValue() {
          var currentBetData = this.dataStore.betData.getTotalBet();
          var mainBets = this.dataStore.betData.mainBets;
          var betValues = Object.values(mainBets).sort(function (a, b) {
            return b - a;
          });
          this.betOption.emit("UPDATE_DATA", betValues, currentBetData, this);
          var isMaxBet = betValues[0] == currentBetData;
          this.btnMaxBet.getComponent(Button).interactable = !isMaxBet;
          this.unSetSelectColorButtons(isMaxBet);
          this.updateBottomLabelValue();
        };

        _proto.updateBottomLabelValue = function updateBottomLabelValue() {
          var currentBetData = this.dataStore.betData.getTotalBet();
          var wallet = this.dataStore.getCurrentWallet();
          var winAmountPS = this.dataStore.playSession.winAmountPS;
          this.lblWinAmount && (this.lblWinAmount.getComponent(Label).string = formatMoney(winAmountPS));
          this.lblCurrentBet && (this.lblCurrentBet.getComponent(Label).string = formatMoney(currentBetData));

          if (!this.dataStore.isTrialMode) {
            this.lblWallet && (this.lblWallet.getComponent(Label).string = formatMoney(wallet));
          }
        };

        _proto.setSelectedBet = function setSelectedBet(value, isMaxBet) {
          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          this.selectedBet = value;
          this.btnMaxBet.getComponent(Button).interactable = !isMaxBet;
        };

        _proto.setSelectColorButtons = function setSelectColorButtons() {
          this.btnMaxBet.getComponent(Button).target.color = this.colorSelectedMaxbet;
          this.btnConfirm.getComponent(Button).target.color = this.colorSelectedConfirm;
          this.btnClose.getComponent(Button).target.color = this.colorSelectedConfirm;
          this.lblMax.color = this.colorSelectedMaxbet;
        };

        _proto.unSetSelectColorButtons = function unSetSelectColorButtons(isMaxBet) {
          if (isMaxBet === void 0) {
            isMaxBet = false;
          }

          if (!isMaxBet) {
            this.btnMaxBet.getComponent(Button).target.color = this.colorUnSelected;
            this.lblMax.color = this.colorUnSelected;
          } else {
            this.btnMaxBet.getComponent(Button).target.color = this.colorUnSelected;
            this.lblMax.color = this.colorSelectedMaxbet;
          }

          this.btnConfirm.getComponent(Button).target.color = this.colorUnSelected;
          this.btnClose.getComponent(Button).target.color = this.colorUnSelected;
        };

        _proto.clickBtnConfirm = function clickBtnConfirm() {
          var mainBets = this.dataStore.betData.mainBets;
          var keyId = findKeyByValue(mainBets, this.selectedBet);
          this.selectBetEvent = new CustomEvent('SELECT_BET_EVENT', true, {
            betValue: keyId
          }); // this.selectBetEvent['betValue'] = this.selectBetEvent

          this.node.dispatchEvent(this.selectBetEvent);
        };

        _proto.onClickMaxBet = function onClickMaxBet() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.betOption.emit('SELECT_MAX_BET');
        };

        _proto.clearAllBets = function clearAllBets() {
          this.betOption.emit("CLEAR_ALL_BET");
        };

        _proto.clickBtnClose = function clickBtnClose() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.node.parent.emit("HIDE");
        };

        return BetSelectionPanelController;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnConfirm", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnMaxBet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betOption", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lblWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lblWallet", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lblCurrentBet", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lblMax", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "colorSelectedConfirm", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "colorSelectedMaxbet", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "colorUnSelected", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "selectedValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/big.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        (function (GLOBAL) {
          var Big,
              DP = 20,
              RM = 1,
              MAX_DP = 1E6,
              MAX_POWER = 1E6,
              NE = -7,
              PE = 21,
              STRICT = false,
              NAME = '[big.js] ',
              INVALID = NAME + 'Invalid ',
              INVALID_DP = INVALID + 'decimal places',
              INVALID_RM = INVALID + 'rounding mode',
              DIV_BY_ZERO = NAME + 'Division by zero',
              P = {},
              UNDEFINED = void 0,
              NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;

          function _Big_() {
            function Big(n) {
              var x = this;
              if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

              if (n instanceof Big) {
                x.s = n.s;
                x.e = n.e;
                x.c = n.c.slice();
              } else {
                if (typeof n !== 'string') {
                  if (Big.strict === true && typeof n !== 'bigint') {
                    throw TypeError(INVALID + 'value');
                  }

                  n = n === 0 && 1 / n < 0 ? '-0' : String(n);
                }

                parse(x, n);
              }

              x.constructor = Big;
            }

            Big.prototype = P;
            Big.DP = DP;
            Big.RM = RM;
            Big.NE = NE;
            Big.PE = PE;
            Big.strict = STRICT;
            Big.roundDown = 0;
            Big.roundHalfUp = 1;
            Big.roundHalfEven = 2;
            Big.roundUp = 3;
            return Big;
          }

          function parse(x, n) {
            var e, i, nl;

            if (!NUMERIC.test(n)) {
              throw Error(INVALID + 'number');
            }

            x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;
            if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

            if ((i = n.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +n.slice(i + 1);
              n = n.substring(0, i);
            } else if (e < 0) {
              e = n.length;
            }

            nl = n.length;

            for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

            if (i == nl) {
              x.c = [x.e = 0];
            } else {
              for (; nl > 0 && n.charAt(--nl) == '0';);

              x.e = e - i - 1;
              x.c = [];

              for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
            }

            return x;
          }

          function round(x, sd, rm, more) {
            var xc = x.c;
            if (rm === UNDEFINED) rm = x.constructor.RM;

            if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
              throw Error(INVALID_RM);
            }

            if (sd < 1) {
              more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
              xc.length = 1;

              if (more) {
                x.e = x.e - sd + 1;
                xc[0] = 1;
              } else {
                xc[0] = x.e = 0;
              }
            } else if (sd < xc.length) {
              more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
              xc.length = sd;

              if (more) {
                for (; ++xc[--sd] > 9;) {
                  xc[sd] = 0;

                  if (sd === 0) {
                    ++x.e;
                    xc.unshift(1);
                    break;
                  }
                }
              }

              for (sd = xc.length; !xc[--sd];) xc.pop();
            }

            return x;
          }

          function stringify(x, doExponential, isNonzero) {
            var e = x.e,
                s = x.c.join(''),
                n = s.length;

            if (doExponential) {
              s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;
            } else if (e < 0) {
              for (; ++e;) s = '0' + s;

              s = '0.' + s;
            } else if (e > 0) {
              if (++e > n) {
                for (e -= n; e--;) s += '0';
              } else if (e < n) {
                s = s.slice(0, e) + '.' + s.slice(e);
              }
            } else if (n > 1) {
              s = s.charAt(0) + '.' + s.slice(1);
            }

            return x.s < 0 && isNonzero ? '-' + s : s;
          }

          P.abs = function () {
            var x = new this.constructor(this);
            x.s = 1;
            return x;
          };

          P.cmp = function (y) {
            var isneg,
                x = this,
                xc = x.c,
                yc = (y = new x.constructor(y)).c,
                i = x.s,
                j = y.s,
                k = x.e,
                l = y.e;
            if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;
            if (i != j) return i;
            isneg = i < 0;
            if (k != l) return k > l ^ isneg ? 1 : -1;
            j = (k = xc.length) < (l = yc.length) ? k : l;

            for (i = -1; ++i < j;) {
              if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
            }

            return k == l ? 0 : k > l ^ isneg ? 1 : -1;
          };

          P.div = function (y) {
            var x = this,
                Big = x.constructor,
                a = x.c,
                b = (y = new Big(y)).c,
                k = x.s == y.s ? 1 : -1,
                dp = Big.DP;

            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }

            if (!b[0]) {
              throw Error(DIV_BY_ZERO);
            }

            if (!a[0]) {
              y.s = k;
              y.c = [y.e = 0];
              return y;
            }

            var bl,
                bt,
                n,
                cmp,
                ri,
                bz = b.slice(),
                ai = bl = b.length,
                al = a.length,
                r = a.slice(0, bl),
                rl = r.length,
                q = y,
                qc = q.c = [],
                qi = 0,
                p = dp + (q.e = x.e - y.e) + 1;
            q.s = k;
            k = p < 0 ? 0 : p;
            bz.unshift(0);

            for (; rl++ < bl;) r.push(0);

            do {
              for (n = 0; n < 10; n++) {
                if (bl != (rl = r.length)) {
                  cmp = bl > rl ? 1 : -1;
                } else {
                  for (ri = -1, cmp = 0; ++ri < bl;) {
                    if (b[ri] != r[ri]) {
                      cmp = b[ri] > r[ri] ? 1 : -1;
                      break;
                    }
                  }
                }

                if (cmp < 0) {
                  for (bt = rl == bl ? b : bz; rl;) {
                    if (r[--rl] < bt[rl]) {
                      ri = rl;

                      for (; ri && !r[--ri];) r[ri] = 9;

                      --r[ri];
                      r[rl] += 10;
                    }

                    r[rl] -= bt[rl];
                  }

                  for (; !r[0];) r.shift();
                } else {
                  break;
                }
              }

              qc[qi++] = cmp ? n : ++n;
              if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];
            } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

            if (!qc[0] && qi != 1) {
              qc.shift();
              q.e--;
              p--;
            }

            if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);
            return q;
          };

          P.eq = function (y) {
            return this.cmp(y) === 0;
          };

          P.gt = function (y) {
            return this.cmp(y) > 0;
          };

          P.gte = function (y) {
            return this.cmp(y) > -1;
          };

          P.lt = function (y) {
            return this.cmp(y) < 0;
          };

          P.lte = function (y) {
            return this.cmp(y) < 1;
          };

          P.minus = P.sub = function (y) {
            var i,
                j,
                t,
                xlty,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (a != b) {
              y.s = -b;
              return x.plus(y);
            }

            var xc = x.c.slice(),
                xe = x.e,
                yc = y.c,
                ye = y.e;

            if (!xc[0] || !yc[0]) {
              if (yc[0]) {
                y.s = -b;
              } else if (xc[0]) {
                y = new Big(x);
              } else {
                y.s = 1;
              }

              return y;
            }

            if (a = xe - ye) {
              if (xlty = a < 0) {
                a = -a;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }

              t.reverse();

              for (b = a; b--;) t.push(0);

              t.reverse();
            } else {
              j = ((xlty = xc.length < yc.length) ? xc : yc).length;

              for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                  xlty = xc[b] < yc[b];
                  break;
                }
              }
            }

            if (xlty) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
            }

            if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

            for (b = i; j > a;) {
              if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i];) xc[i] = 9;

                --xc[i];
                xc[j] += 10;
              }

              xc[j] -= yc[j];
            }

            for (; xc[--b] === 0;) xc.pop();

            for (; xc[0] === 0;) {
              xc.shift();
              --ye;
            }

            if (!xc[0]) {
              y.s = 1;
              xc = [ye = 0];
            }

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.mod = function (y) {
            var ygtx,
                x = this,
                Big = x.constructor,
                a = x.s,
                b = (y = new Big(y)).s;

            if (!y.c[0]) {
              throw Error(DIV_BY_ZERO);
            }

            x.s = y.s = 1;
            ygtx = y.cmp(x) == 1;
            x.s = a;
            y.s = b;
            if (ygtx) return new Big(x);
            a = Big.DP;
            b = Big.RM;
            Big.DP = Big.RM = 0;
            x = x.div(y);
            Big.DP = a;
            Big.RM = b;
            return this.minus(x.times(y));
          };

          P.neg = function () {
            var x = new this.constructor(this);
            x.s = -x.s;
            return x;
          };

          P.plus = P.add = function (y) {
            var e,
                k,
                t,
                x = this,
                Big = x.constructor;
            y = new Big(y);

            if (x.s != y.s) {
              y.s = -y.s;
              return x.minus(y);
            }

            var xe = x.e,
                xc = x.c,
                ye = y.e,
                yc = y.c;

            if (!xc[0] || !yc[0]) {
              if (!yc[0]) {
                if (xc[0]) {
                  y = new Big(x);
                } else {
                  y.s = x.s;
                }
              }

              return y;
            }

            xc = xc.slice();

            if (e = xe - ye) {
              if (e > 0) {
                ye = xe;
                t = yc;
              } else {
                e = -e;
                t = xc;
              }

              t.reverse();

              for (; e--;) t.push(0);

              t.reverse();
            }

            if (xc.length - yc.length < 0) {
              t = yc;
              yc = xc;
              xc = t;
            }

            e = yc.length;

            for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

            if (k) {
              xc.unshift(k);
              ++ye;
            }

            for (e = xc.length; xc[--e] === 0;) xc.pop();

            y.c = xc;
            y.e = ye;
            return y;
          };

          P.pow = function (n) {
            var x = this,
                one = new x.constructor('1'),
                y = one,
                isneg = n < 0;

            if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
              throw Error(INVALID + 'exponent');
            }

            if (isneg) n = -n;

            for (;;) {
              if (n & 1) y = y.times(x);
              n >>= 1;
              if (!n) break;
              x = x.times(x);
            }

            return isneg ? one.div(y) : y;
          };

          P.prec = function (sd, rm) {
            if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
              throw Error(INVALID + 'precision');
            }

            return round(new this.constructor(this), sd, rm);
          };

          P.round = function (dp, rm) {
            if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
              throw Error(INVALID_DP);
            }
            return round(new this.constructor(this), dp + this.e + 1, rm);
          };

          P.sqrt = function () {
            var r,
                c,
                t,
                x = this,
                Big = x.constructor,
                s = x.s,
                e = x.e,
                half = new Big('0.5');
            if (!x.c[0]) return new Big(x);

            if (s < 0) {
              throw Error(NAME + 'No square root');
            }

            s = Math.sqrt(x + '');

            if (s === 0 || s === 1 / 0) {
              c = x.c.join('');
              if (!(c.length + e & 1)) c += '0';
              s = Math.sqrt(c);
              e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
              r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
            } else {
              r = new Big(s + '');
            }

            e = r.e + (Big.DP += 4);

            do {
              t = r;
              r = half.times(t.plus(x.div(t)));
            } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

            return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
          };

          P.times = P.mul = function (y) {
            var c,
                x = this,
                Big = x.constructor,
                xc = x.c,
                yc = (y = new Big(y)).c,
                a = xc.length,
                b = yc.length,
                i = x.e,
                j = y.e;
            y.s = x.s == y.s ? 1 : -1;

            if (!xc[0] || !yc[0]) {
              y.c = [y.e = 0];
              return y;
            }

            y.e = i + j;

            if (a < b) {
              c = xc;
              xc = yc;
              yc = c;
              j = a;
              a = b;
              b = j;
            }

            for (c = new Array(j = a + b); j--;) c[j] = 0;

            for (i = b; i--;) {
              b = 0;

              for (j = a + i; j > i;) {
                b = c[j] + yc[i] * xc[j - i - 1] + b;
                c[j--] = b % 10;
                b = b / 10 | 0;
              }

              c[j] = b;
            }

            if (b) ++y.e;else c.shift();

            for (i = c.length; !c[--i];) c.pop();

            y.c = c;
            return y;
          };

          P.toExponential = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), ++dp, rm);

              for (; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, true, !!n);
          };

          P.toFixed = function (dp, rm) {
            var x = this,
                n = x.c[0];

            if (dp !== UNDEFINED) {
              if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                throw Error(INVALID_DP);
              }

              x = round(new x.constructor(x), dp + x.e + 1, rm);

              for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
            }

            return stringify(x, false, !!n);
          };

          P.toJSON = P.toString = function () {
            var x = this,
                Big = x.constructor;
            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
          };

          P.toNumber = function () {
            var n = Number(stringify(this, true, true));

            if (this.constructor.strict === true && !this.eq(n.toString())) {
              throw Error(NAME + 'Imprecise conversion');
            }

            return n;
          };

          P.toPrecision = function (sd, rm) {
            var x = this,
                Big = x.constructor,
                n = x.c[0];

            if (sd !== UNDEFINED) {
              if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                throw Error(INVALID + 'precision');
              }

              x = round(new Big(x), sd, rm);

              for (; x.c.length < sd;) x.c.push(0);
            }

            return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
          };

          P.valueOf = function () {
            var x = this,
                Big = x.constructor;

            if (Big.strict === true) {
              throw Error(NAME + 'valueOf disallowed');
            }

            return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
          };

          Big = _Big_();
          Big['default'] = Big.Big = Big;

          if (typeof define === 'function' && define.amd) {
            define(function () {
              return Big;
            });
          } else if (typeof module !== 'undefined' && module.exports) {
            module.exports = Big;
          } else {
            GLOBAL.Big = Big;
          }
        })(this); // #endregion ORIGINAL CODE


        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BigWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, CCString, Sprite, sp, tween, log, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      CCString = module.CCString;
      Sprite = module.Sprite;
      sp = module.sp;
      tween = module.tween;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "ac272TdMiVOkoZA+w+u9qh1", "BigWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWild = exports('BigWild', (_dec = ccclass('BigWild'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property({
        type: CCFloat
      }), _dec7 = property({
        type: CCString
      }), _dec8 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BigWild, _GameObject);

        function BigWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineExpand", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineIdle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topStaticNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "botStaticNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "offsetYPos", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandAnimationNames", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleAnimationName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "idleAnimationQueue", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFramePrefabName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeTime", _descriptor10, _assertThisInitialized(_this));

          _this._spineSkeletonExp = void 0;
          _this._spineSkeletonIdle = void 0;
          _this._poolFactory = null;
          _this._winLineFrame = null;
          _this._topStaticSprite = null;
          _this._botStaticSprite = null;
          _this._topStaticTween = null;
          _this._botStaticTween = null;
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = BigWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("PLAY_BIG_WILD", this.playBigWild, this);
          this.node.on("RESET_BIG_WILD", this.reset, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.playBigWild = this.playBigWild.bind(this);
          this.node.reset = this.reset.bind(this);
          this.node.playAnimation = this.playAnimation.bind(this);
          this.node.stopAnimation = this.stopAnimation.bind(this);
          this.initSkeletonData();

          if (this.topStaticNode) {
            this._topStaticSprite = this.topStaticNode.getComponent(Sprite);
          }

          if (this.botStaticNode) {
            this._botStaticSprite = this.botStaticNode.getComponent(Sprite);
          }
        };

        _proto.start = function start() {
          var mainDirector = this.node["mainDirector"];

          if (mainDirector) {
            this._poolFactory = mainDirector.poolFactory;
          }

          this.createWinLineFrame();
        };

        _proto.onEnable = function onEnable() {
          this.createWinLineFrame();
        };

        _proto.onDisable = function onDisable() {
          if (this._poolFactory && this._winLineFrame) {
            this._poolFactory.removeObject(this._winLineFrame);

            this._winLineFrame = null;
          }
        };

        _proto.createWinLineFrame = function createWinLineFrame() {
          if (!this.winLineFramePrefabName) return;

          if (this._poolFactory && !this._winLineFrame) {
            this._winLineFrame = this._poolFactory.getObject(this.winLineFramePrefabName);
            this._winLineFrame.parent = this.node;
          }
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();

          if (this.spineExpand) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
          }

          if (this.spineIdle) {
            this.setOpacity(this.spineIdle, 1);
            this.spineIdle.active = false;
          }

          if (this.topStaticNode) {
            this._topStaticSprite.fillRange = 0;
            this._topStaticSprite.fillStart = 0;
            this.topStaticNode.active = false;
          }

          if (this.botStaticNode) {
            this._botStaticSprite.fillRange = 0;
            this._botStaticSprite.fillStart = 0;
            this.botStaticNode.active = false;
          }
        };

        _proto.initSkeletonData = function initSkeletonData() {
          if (this.spineExpand && this.spineExpand.getComponent(sp.Skeleton)) {
            this._spineSkeletonExp = this.spineExpand.getComponent(sp.Skeleton);

            if (!this._spineSkeletonExp) {
              return;
            }

            this.setOpacity(this.spineExpand, 1);

            for (var i = 0; i < this.expandAnimationNames.length; i++) {
              this._spineSkeletonExp.setAnimation(0, this.expandAnimationNames[i], false);
            }

            this.spineExpand.active = false;
          }

          if (this.spineIdle && this.spineIdle.getComponent(sp.Skeleton)) {
            this._spineSkeletonIdle = this.spineIdle.getComponent(sp.Skeleton);
            this.setOpacity(this.spineIdle, 1);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationName, false);

            this.spineIdle.active = false;
          }
        };

        _proto.playBigWild = function playBigWild(row, col, isIdleFirst, playContinuosIdle) {
          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }
          /*const performanceLvl = (this.dataStore &&this.dataStore.performanceLevel) || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          if(this.animationLevel< Number(PerformanceLevel.Medium)){
              this.playStaticAnimation(row, col, isIdleFirst);
          }else{
              this.playSpineAnimation(row, col, isIdleFirst, playContinuosIdle);
          }*/


          this.playSpineAnimation(row, col, isIdleFirst, playContinuosIdle);
        };

        _proto.playStaticAnimation = function playStaticAnimation(row, col, isIdleFirst) {
          var _this2 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (!this._topStaticSprite || !this._botStaticSprite) return;
          var duration = 0.15;
          this._topStaticSprite.fillRange = 0;
          this._botStaticSprite.fillRange = 0;
          if (this._topStaticTween) this._topStaticTween.stop();
          if (this._botStaticTween) this._botStaticTween.stop();

          if (isIdleFirst) {
            this.botStaticNode.active = true;
            this._botStaticSprite.fillRange = 1;
            this.playIdleSound(col);
          } else {
            switch (row) {
              case 2:
                // Bot
                this.botStaticNode.active = true;
                this._botStaticSprite.fillStart = 0;
                this._botStaticTween = tween(this._botStaticSprite).to(duration, {
                  fillRange: 1
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._botStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._botStaticTween.start();

                break;

              case 1:
                // Mid
                this.botStaticNode.active = true;
                this._botStaticSprite.fillStart = 0.5;
                this._botStaticTween = tween(this._botStaticSprite).to(duration, {
                  fillRange: -0.5
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._botStaticTween = null;
                });

                this._botStaticTween.start();

                this.topStaticNode.active = true;
                this._topStaticSprite.fillStart = 0.5;
                this._topStaticTween = tween(this._topStaticSprite).to(duration, {
                  fillRange: 0.5
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._topStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._topStaticTween.start();

                break;

              case 0:
                // Top
                this.topStaticNode.active = true;
                this._topStaticSprite.fillStart = 1;
                this._topStaticTween = tween(this._topStaticSprite).to(duration, {
                  fillRange: -1
                }, {
                  easing: 'quartIn'
                }).call(function () {
                  _this2._topStaticTween = null;

                  _this2.playIdleSound(col);
                });

                this._topStaticTween.start();

                break;
            }

            this.playExpandSound(col);
          }
        };

        _proto.playSpineAnimation = function playSpineAnimation(row, col, isIdleFirst, playContinuosIdle) {
          var _this3 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }

          this.unscheduleAllCallbacks();

          if (isIdleFirst) {
            if (playContinuosIdle) {
              this.playLastIdleAnimationInQueue(col);
            } else {
              this.playIdleAnimation(col);
            }
          } else {
            if (this._spineSkeletonExp) {
              this._spineSkeletonIdle && this._spineSkeletonIdle.setCompleteListener(function () {});
              this.spineIdle.active = false;
              this.setOpacity(this.spineIdle, 1);
              var expAnimationName = "";

              if (row >= 0 && row < this.offsetYPos.length) {
                this.spineExpand.setPosition(0, this.offsetYPos[row]);
                expAnimationName = this.expandAnimationNames[row];
                log('===== Exp Anim Name: ' + expAnimationName + ' offsetY: ' + this.offsetYPos[row]);
              }

              this._spineSkeletonExp.setCompleteListener(function () {
                _this3._spineSkeletonExp.setCompleteListener(function () {});

                _this3.spineIdle.active = true;

                _this3.scheduleOnce(function () {
                  if (playContinuosIdle) {
                    _this3.playIdleAnimationQueue(col);
                  } else {
                    _this3.playIdleAnimation(col);
                  }
                }, _this3.fadeTime);
              });

              this.spineExpand.active = true;
              this.setOpacity(this.spineExpand, 1);

              this._spineSkeletonExp.setAnimation(0, expAnimationName, false);

              this.playExpandSound(col);
              this.scheduleOnce(function () {
                _this3.setOpacity(_this3.spineExpand, 255);
              }, this.fadeTime);
            }
          }
        };

        _proto.playIdleAnimation = function playIdleAnimation(col) {
          var _this4 = this;

          if (this.spineIdle) {
            this.scheduleOnce(function () {
              _this4.setOpacity(_this4.spineExpand, 1);

              _this4.spineExpand.active = false;
            }, 0);
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationName, true);

            this.playIdleSound(col);
          }
        };

        _proto.playLastIdleAnimationInQueue = function playLastIdleAnimationInQueue(col) {
          if (this.spineIdle && this.idleAnimationQueue && this.idleAnimationQueue.length > 0) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationQueue[this.idleAnimationQueue.length - 1], true);

            this.playIdleSound(col);
          }
        };

        _proto.playIdleAnimationQueue = function playIdleAnimationQueue(col) {
          if (this.spineIdle && this.idleAnimationQueue && this.idleAnimationQueue.length > 0) {
            this.setOpacity(this.spineExpand, 1);
            this.spineExpand.active = false;
            this.spineIdle.active = true;
            this.setOpacity(this.spineIdle, 255);

            this._spineSkeletonIdle.setAnimation(0, this.idleAnimationQueue[0], false);

            for (var i = 0; i < this.idleAnimationQueue.length - 1; i++) {
              var isLoop = i == this.idleAnimationQueue.length - 2; //dnvuanh remove wrong setmix
              //this._spineSkeletonIdle.setMix(this.idleAnimationQueue[i], this.idleAnimationQueue[i+1], 0.1);

              this._spineSkeletonIdle.addAnimation(0, this.idleAnimationQueue[i + 1], isLoop);
            }

            this.playIdleSound(col);
          }
        };

        _proto.playExpandSound = function playExpandSound(col) {
          this.soundPlayer && this.soundPlayer.playSfx("OPEN_WILD");
        };

        _proto.playIdleSound = function playIdleSound(col) {
          var wildSoundId = col === 1 ? "WILD_K1" : col === 3 ? "WILD_K2" : null;
          wildSoundId && this.soundPlayer && this.soundPlayer.playSfx(wildSoundId);
        };

        _proto.playAnimation = function playAnimation(row) {
          if (this._winLineFrame) {
            this._winLineFrame.active = true;

            this._winLineFrame.setPosition(0, this.offsetYPos[row]);
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          if (this._winLineFrame) {
            this._winLineFrame.active = false;
          }
        };

        return BigWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineExpand", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineIdle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "topStaticNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "botStaticNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "offsetYPos", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "expandAnimationNames", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "idleAnimationName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "idleAnimationQueue", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "winLineFramePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "fadeTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWildTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './DynamicLoadingPrefabControl.ts', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, CCInteger, instantiate, SlotGameMode, PerformanceLevel, DynamicLoadingPrefabControl, AssetPathConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      CCInteger = module.CCInteger;
      instantiate = module.instantiate;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      DynamicLoadingPrefabControl = module.DynamicLoadingPrefabControl;
    }, function (module) {
      AssetPathConfig = module.AssetPathConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "4fa48SxsaJARYGaqOVbcCNV", "BigWildTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWildObject = exports('BigWildObject', function BigWildObject(_col, _bigWild) {
        this.col = void 0;
        this.bigWild = void 0;
        this.col = _col;
        this.bigWild = _bigWild;
      });
      var BigWildTable = exports('BigWildTable', (_dec = ccclass('BigWildTable'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property({
        type: Prefab,
        visible: function visible() {
          return !this.dynamicLoading;
        }
      }), _dec4 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec5 = property({
        type: AssetPathConfig,
        visible: function visible() {
          return this.dynamicLoading;
        }
      }), _dec6 = property({
        type: CCInteger
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_DynamicLoadingPrefab) {
        _inheritsLoose(BigWildTable, _DynamicLoadingPrefab);

        function BigWildTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DynamicLoadingPrefab.call.apply(_DynamicLoadingPrefab, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "highPerfAssetPaths", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lowPerfAssetPaths", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildCollumnIndexList", _descriptor5, _assertThisInitialized(_this));

          _this.bigWilds = [];
          _this._isPlayingHighPerf = true;
          _this._hasLastBigWild = false;
          _this._isPlayingBigWild = false;
          return _this;
        }

        var _proto = BigWildTable.prototype;

        _proto.onLoad = function onLoad() {
          _DynamicLoadingPrefab.prototype.onLoad.call(this); //this.eventManager.on(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);

        };

        _proto.onEnable = function onEnable() {
          this.eventManager.on("INIT_BIG_WILD", this.createBigWilds, this);
          this.eventManager.on("SHOW_BIG_WILD", this.showBigWild, this);
          this.eventManager.on("RESET_BIG_WILD", this.reset, this);
          this.eventManager.on("PLAY_ANIMATION", this.playAnimation, this);
          this.eventManager.on("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.start = function start() {
          if (this.bigWilds.length == 0) {
            this.createBigWilds();
          }
        };

        _proto.onDisable = function onDisable() {
          this.eventManager.off("INIT_BIG_WILD", this.createBigWilds, this);
          this.eventManager.off("SHOW_BIG_WILD", this.showBigWild, this);
          this.eventManager.off("RESET_BIG_WILD", this.reset, this);
          this.eventManager.off("PLAY_ANIMATION", this.playAnimation, this);
          this.eventManager.off("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.createBigWilds = function createBigWilds(callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = null;
          }

          var _this$config = this.config,
              SYMBOL_WIDTH = _this$config.SYMBOL_WIDTH,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.currentGameMode === SlotGameMode.FreeGame ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          var startX = -(tableFormat.length / 2 - 0.5) * SYMBOL_WIDTH;
          var count = 0;

          if (this.dynamicLoading) {
            var _loop = function _loop() {
              var col = _this2.bigWildCollumnIndexList[i];

              _this2.createBigWildByPath(_this2.highPerfAssetPaths[i], function (bigWild) {
                if (bigWild) {
                  bigWild.name = 'BigWild_Collumn_' + col;
                  bigWild.parent = _this2.node;
                  bigWild.setPosition(startX + col * SYMBOL_WIDTH, 0);
                  var bigWildObject = new BigWildObject(col, bigWild);

                  _this2.bigWilds.push(bigWildObject);

                  _this2._isPlayingHighPerf = _this2.isHighPerformance();
                  count++;

                  if (count >= _this2.bigWildCollumnIndexList.length) {
                    callback && callback();
                  }
                }
              });
            };

            for (var i = 0; i < this.bigWildCollumnIndexList.length; i++) {
              _loop();
            }
          } else {
            for (var _i = 0; _i < this.bigWildCollumnIndexList.length; _i++) {
              var col = this.bigWildCollumnIndexList[_i];
              var bigWild = instantiate(this.bigWildPrefabs[_i]);

              if (bigWild) {
                bigWild.name = 'BigWild_Collumn_' + col;
                bigWild.parent = this.node;
                bigWild.setPosition(startX + col * SYMBOL_WIDTH, 0);
                var bigWildObject = new BigWildObject(col, bigWild);
                this.bigWilds.push(bigWildObject);
                this._isPlayingHighPerf = this.isHighPerformance();
                count++;

                if (count >= this.bigWildCollumnIndexList.length) {
                  callback && callback();
                }
              }
            }
          }
        };

        _proto.showBigWild = function showBigWild(currentMode, row, col, isIdleFirst, playContinuosIdle) {
          var _this3 = this;

          if (isIdleFirst === void 0) {
            isIdleFirst = false;
          }

          if (playContinuosIdle === void 0) {
            playContinuosIdle = false;
          }

          if (currentMode !== this.currentGameMode) return;

          if (this.bigWilds.length == 0) {
            this.createBigWilds(function () {
              for (var i = 0; i < _this3.bigWilds.length; i++) {
                var bigWildObject = _this3.bigWilds[i];

                if (bigWildObject && bigWildObject.col == col) {
                  bigWildObject.bigWild.emit("PLAY_BIG_WILD", row, col, isIdleFirst, playContinuosIdle);
                }
              }
            });
          } else {
            for (var i = 0; i < this.bigWilds.length; i++) {
              var bigWildObject = this.bigWilds[i];

              if (bigWildObject && bigWildObject.col == col) {
                bigWildObject.bigWild.emit("PLAY_BIG_WILD", row, col, isIdleFirst, playContinuosIdle);
              }
            }
          }

          this._isPlayingHighPerf = this.isHighPerformance();
          this._hasLastBigWild = true;
          this._isPlayingBigWild = true;
        };

        _proto.playAnimation = function playAnimation(currentMode, row, col) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject && bigWildObject.col == col) {
              bigWildObject.bigWild.emit("PLAY_ANIMATION", row);
            }
          }
        };

        _proto.stopAnimation = function stopAnimation(currentMode, col) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject && bigWildObject.col == col) {
              bigWildObject.bigWild.emit("STOP_ANIMATION");
            }
          }
        };

        _proto.reset = function reset(currentMode) {
          if (currentMode !== this.currentGameMode) return;

          for (var i = 0; i < this.bigWilds.length; i++) {
            var bigWildObject = this.bigWilds[i];

            if (bigWildObject) {
              bigWildObject.bigWild.emit("RESET_BIG_WILD");
            }
          }

          this._isPlayingBigWild = false;

          if (this._hasLastBigWild && this.bigWilds.length > 0) {
            this.reCreateBigWilds();
          }

          this._hasLastBigWild = false;
        };

        _proto.createBigWildByPath = function createBigWildByPath(assetPathConfig, completeCB) {
          var _this4 = this;

          if (completeCB === void 0) {
            completeCB = null;
          }

          if (assetPathConfig) {
            this._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (prefab) {
              var node = instantiate(prefab);
              node.active = true;

              _this4._usingObjects.push(node);

              completeCB && completeCB(node);
            });
          }
        };

        _proto.reCreateBigWilds = function reCreateBigWilds() {
          if (this.isHighPerformance() !== this._isPlayingHighPerf) {
            this.destroyDynamicLoadingObjects();
            this.bigWilds = [];
            this.createBigWilds();
          }
        };

        _proto.onChangePerformance = function onChangePerformance(isHighPer) {
          if (!this._isPlayingBigWild) {
            this.reCreateBigWilds();
          }
        };

        _proto.isHighPerformance = function isHighPerformance() {
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          var animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          return animationLevel >= Number(PerformanceLevel.Medium);
        };

        _proto.onDestroy = function onDestroy() {//this.eventManager.off(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
        };

        return BigWildTable;
      }(DynamicLoadingPrefabControl), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWildPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "highPerfAssetPaths", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lowPerfAssetPaths", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bigWildCollumnIndexList", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, Vec3, warn, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "3329fv2dpxGyY9sc+AmSt7s", "BonusRollReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollReel = exports('BonusRollReel', (_dec = ccclass('BonusRollReel'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BonusRollReel, _GameObject);

        function BonusRollReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "showSymbolIndex", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topBuffer", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "botBuffer", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unitDistance", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastTotalCircular", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turboTotalCicular", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopEasingDistance", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isBlock", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoUpdate", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "miniReel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showNumber", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "f2rFactor", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blockNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unblockNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelEffect", _descriptor16, _assertThisInitialized(_this));

          _this.totalSymbol = 4;
          _this.offsetToStop = 2;
          _this.totalScrolling = 0;
          _this.scrollingSpeed = 0;
          _this.betDenom = 0;
          _this.currentIndex = 0;
          _this.previousY = 0;
          _this._symbols = [];
          _this.symbolPos = [];
          _this.symbolNameList = [];
          _this.mode = '';
          _this.reelIndex = -1;
          _this.totalCircular = 0;
          _this.isWaitingResult = false;
          _this.isRolling = false;
          _this.reelStopped = false;
          _this.canF2R = false;
          _this.symbolValue = null;
          _this.circularCount = 0;
          _this.callbackFinish = null;
          _this.spinAction = null;
          _this.targetY = 0;
          _this.tweenTime = void 0;
          _this.isShowingResult = false;
          _this.callBackDelayStop = null;
          _this.multiplierFactor = 0;
          _this.symbolPrefabName = '';
          _this.poolFactory = null;
          _this.creditLabelPrefabName = '';
          return _this;
        }

        var _proto = BonusRollReel.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("UPGRADE_CREDIT", this.upgradeCredit, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("SET_MODE", this.setMode, this);
          this.node.on("SET_UP_BONUS_ROLL_RESUME", this.setupBonusRollResume, this);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("UNBLOCK_JACKPOT", this.unBlockJackpot, this);
          this.node.on("UPDATE_ALL_SYMBOLS", this.updateAllSymbols, this);
          this.node.on("HIDE_INTRO", this.hideIntro, this);
          this.node.updatePosition = this.updatePosition.bind(this);
          this.node.reelIndex = this.updateReelIndex.bind(this);
          this.betDenom = 1;
          this.setMode('FAST');
          this.totalSymbol = this.showNumber + this.topBuffer + this.botBuffer;
        };

        _proto.start = function start() {
          var MIN_SPEED = this.config.MIN_SPEED;
          this.scrollingSpeed = MIN_SPEED;
          this.currentIndex = 0;
          this.previousY = 0;
          this.isRolling = false;
          this.circularCount = 0;
          this.canF2R = false;
        };

        _proto.init = function init(poolFactory, symbolNameList, symbolPrefabName, creditLabelPrefabName, isBlock, config) {
          if (poolFactory) {
            this.poolFactory = poolFactory;
          }

          if (symbolPrefabName) {
            this.symbolPrefabName = symbolPrefabName;
          }

          if (creditLabelPrefabName) {
            this.creditLabelPrefabName = creditLabelPrefabName;
          }

          this.symbolNameList = symbolNameList;
          this.isBlock = isBlock;

          if (this.blockNode) {
            this.blockNode.active = this.isBlock;
          }

          this._symbols = [];
          this.createSymbols();
        };

        _proto.updateReelIndex = function updateReelIndex(col) {
          this.reelIndex = col;
        };

        _proto.startSpinning = function startSpinning() {
          if (this.isWaitingResult || this.isBlock) return;
          var MIN_SPEED = this.config.MIN_SPEED;
          this.isRolling = true;
          this.reelStopped = false;
          this.isWaitingResult = true;
          this.scrollingSpeed = MIN_SPEED;
          this.canF2R = false;
          this.symbolValue = null;
          this.isShowingResult = false;
          this.totalScrolling = 0;
          this.previousY = 0;
          this.circularCount = 0;
        };

        _proto.stopSpinning = function stopSpinning(symbolValue, callback) {
          var _this2 = this;

          if (this.isBlock) return;
          this.callbackFinish = callback;
          var delayTime = 0.5;
          this.canF2R = true;

          this.callBackDelayStop = function () {
            _this2.symbolValue = symbolValue;
            _this2.isShowingResult = true;
            var distanceMove = _this2.totalCircular * _this2.unitDistance;
            _this2.targetY = _this2.reelNode.position.y - distanceMove + _this2.totalScrolling;

            _this2.stopSpinningWithSteps();
          };

          this.unschedule(this.callBackDelayStop);
          this.scheduleOnce(this.callBackDelayStop, delayTime);
        };

        _proto.stopSpinningWithSteps = function stopSpinningWithSteps() {
          var _this3 = this;

          if (this.spinAction) {
            this.spinAction.stop();
          }

          this.tweenTime = Math.abs(this.targetY - this.reelNode.position.y) * 1.0 / (this.scrollingSpeed * this.multiplierFactor);
          this.spinAction = tween(this.reelNode).to(this.tweenTime, {
            position: new Vec3(0, this.targetY - this.stopEasingDistance, 0)
          }, {
            easing: 'sineOut',
            onUpdate: function onUpdate() {
              _this3.circulateSymbols();
            }
          }).call(function () {
            _this3.canF2R = false;
          }).to(0.05, {
            position: new Vec3(0, this.targetY, 0)
          }, {
            onUpdate: function onUpdate() {
              _this3.circulateSymbols();
            }
          }).call(function () {
            _this3.onFinishSpin();
          }).start();
        };

        _proto.onFinishSpin = function onFinishSpin() {
          this.reelNode.setPosition(this.reelNode.position.x, 0);

          this._symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });

          this.spinAction = null;
          this.isWaitingResult = false;
          this.isRolling = false;
          this.callbackFinish && this.callbackFinish();

          for (var i = 0; i < this._symbols.length; i++) {
            var symbol = this._symbols[i];

            if (symbol) {
              symbol.setPosition(new Vec3(symbol.position.x, this.symbolPos[i], 0));

              if (i === this.showSymbolIndex && this.symbolValue !== undefined && this.symbolValue !== null) {
                symbol.changeSymbol(this.symbolValue, this.betDenom);
              } else {
                symbol.disableLabel && symbol.disableLabel();
              }
            }
          }

          this.currentIndex = 0;
        };

        _proto.upgradeCredit = function upgradeCredit(symbolValue) {
          var _this4 = this;

          this.symbolValue = symbolValue;
          this.reelNode.children.forEach(function (item) {
            if (item) {
              item.changeSymbol(_this4.symbolValue || _this4.getRandomSymbolValue(), _this4.betDenom);
            }
          });
        };

        _proto.fastToResult = function fastToResult() {
          if (!this.canF2R || this.isBlock) return;

          if (this.circularCount >= this.totalCircular - 1) {
            return;
          }

          this.canF2R = false;
          this.scrollingSpeed = this.config.MAX_SPEED * this.f2rFactor;

          if (this.callBackDelayStop) {
            this.unschedule(this.callBackDelayStop);
            this.callBackDelayStop();
          } else if (this.spinAction) {
            this.stopSpinningWithSteps();
          }
        };

        _proto.setMode = function setMode(mode) {
          this.mode = mode;
          this.multiplierFactor = this.mode === 'FAST' ? 1 : 5;
          this.totalCircular = this.mode === 'FAST' ? this.fastTotalCircular : this.turboTotalCicular;
        };

        _proto.createSymbols = function createSymbols() {
          if (this.poolFactory && !this.isBlock) {
            var startY = -(this.showNumber / 2 + this.botBuffer - 0.5) * this.unitDistance;

            for (var i = 0; i < this.totalSymbol; i++) {
              var symbol = this.poolFactory.getObject(this.symbolPrefabName);

              if (symbol) {
                symbol.active = true;
                symbol.parent = this.reelNode;
                symbol.setSiblingIndex(i);
                var x = 0;
                var y = startY + i * this.unitDistance;
                symbol.position = new Vec3(x, y, 0);

                if (this.creditLabelPrefabName && this.miniReel) {
                  var label = this.poolFactory.getObject(this.creditLabelPrefabName);

                  if (label) {
                    symbol.addChild(label);
                    label.position = new Vec3(0, 0, 0);
                  }
                }

                var symbolValue = this.getRandomSymbolValue();
                symbol.changeSymbol(symbolValue, this.betDenom);

                if (i === this.showSymbolIndex && Number(symbolValue) > 0) {
                  this.symbolValue = symbolValue;
                } else {
                  symbol.disableLabel && symbol.disableLabel();
                }

                this._symbols.push(symbol);

                this.symbolPos.push(symbol.position.y);
              }
            }
          }
        };

        _proto.getRandomSymbolValue = function getRandomSymbolValue() {
          var _this$config = this.config,
              MINI_SYMBOL_NAME_LIST = _this$config.MINI_SYMBOL_NAME_LIST,
              LIST_JACKPOTS = _this$config.LIST_JACKPOTS;

          if (this.symbolNameList && this.symbolNameList.length > 0) {
            return this.symbolNameList[Math.floor(Math.random() * this.symbolNameList.length)];
          } else {
            this.symbolNameList = this.miniReel ? MINI_SYMBOL_NAME_LIST : LIST_JACKPOTS;
            return this.getRandomSymbolValue();
          }
        };

        _proto.setupBonusRollResume = function setupBonusRollResume(symbolValue) {
          if (this.isBlock) return;
          this.symbolValue = symbolValue;

          for (var i = 0; i < this.reelNode.children.length; i++) {
            var botItem = this.reelNode.children[i];

            if (this.symbolValue) {
              botItem.changeSymbol(this.symbolValue, this.betDenom);
            } else {
              botItem.changeSymbol(this.getRandomSymbolValue(), this.betDenom);
            }
          }
        };

        _proto.update = function update(dt) {
          if (this.autoUpdate) {
            this.updatePosition(dt);
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          var _this5 = this;

          this.betDenom = betDenom;
          this.reelNode.children.forEach(function (item) {
            if (item) {
              item.emit("UPDATE_BET_DENOM", _this5.betDenom);
            }
          });
        };

        _proto.unBlockJackpot = function unBlockJackpot(active, callback) {
          if (active === void 0) {
            active = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          this.isBlock = true;
          this.unblockNode.active = active;

          if (callback) {
            this.scheduleOnce(function () {
              callback && callback();
              callback = null;
            }, .5);
          }
        };

        _proto.updateAllSymbols = function updateAllSymbols(symbolName) {
          var rs = isNaN(symbolName) ? symbolName : parseInt(symbolName);
          warn("updateAllSymbols " + rs);
          this.reelNode.children.forEach(function (item, index) {
            item.changeSymbol(symbolName);
            if (isNaN(symbolName) == false) item.emit("ADD_NUMBER_INTRO", symbolName);
          });
        };

        _proto.hideIntro = function hideIntro() {
          this.reelNode.children.forEach(function (item) {
            item.emit("HIDE_NUMBER_INTRO");
          });
        };

        _proto.updatePosition = function updatePosition(dt) {
          if (this.isBlock) return;

          if (this.isRolling) {
            if (this.scrollingSpeed < this.config.MAX_SPEED) {
              this.scrollingSpeed += this.config.ACCEL * dt;
            } else if (this.canF2R) {
              this.scrollingSpeed = this.config.MAX_SPEED;
            }

            if (this.scrollingSpeed > this.config.MAX_SPEED) this.scrollingSpeed = this.config.MAX_SPEED;

            if (!this.isShowingResult) {
              var y = this.reelNode.position.y;
              y -= this.scrollingSpeed * dt;
              this.reelNode.position = new Vec3(this.reelNode.position.x, y, 0);
            }

            if (this.previousY != this.reelNode.position.y) {
              this.totalScrolling += Math.abs(this.previousY - this.reelNode.position.y);
              this.previousY = this.reelNode.position.y;
            }
          }

          if (!this.isShowingResult) {
            this.circulateSymbols();
          }
        };

        _proto.circulateSymbols = function circulateSymbols() {
          while (this.totalScrolling >= this.unitDistance) {
            var botItem = this._symbols[this.currentIndex];
            botItem.isRealSymbol = false;
            var y = botItem.position.y;
            y += this.unitDistance * this.totalSymbol;
            botItem.position = new Vec3(botItem.position.x, y, 0);
            this.currentIndex = (this.currentIndex + 1) % this.totalSymbol;
            this.totalScrolling = this.totalScrolling - this.unitDistance;
            var symbolName = this.getRandomSymbolValue();

            if (this.isShowingResult) {
              this.circularCount += 1;
              var offsetToStop = this.showNumber + this.topBuffer - 1;
              var stopCount = this.totalCircular - offsetToStop;

              if (this.circularCount >= stopCount && this.circularCount < stopCount + this.showNumber && this.symbolValue !== undefined && this.symbolValue != null) {
                botItem.changeSymbol(this.symbolValue, this.betDenom);
                botItem.isRealSymbol = true;
              } else {
                botItem.changeSymbol(symbolName, this.betDenom);
              }
            } else {
              botItem.changeSymbol(symbolName, this.betDenom);
            }
          }
        };

        return BonusRollReel;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "showSymbolIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "topBuffer", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "botBuffer", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "unitDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fastTotalCircular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "turboTotalCicular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "stopEasingDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "isBlock", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "autoUpdate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "miniReel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "showNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "f2rFactor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 8;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "reelNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "blockNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "unblockNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "reelEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Prefab, Sprite, Label, warn, instantiate, Component, formatWalletMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Label = module.Label;
      warn = module.warn;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "59fb7emvwlO97PuHFaZ0DLi", "BonusRollSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollSymbol = exports('BonusRollSymbol', (_dec = ccclass('BonusRollSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BonusRollSymbol, _Component);

        function BonusRollSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprites", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rate1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rate2", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numberPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteBg", _descriptor6, _assertThisInitialized(_this));

          _this.isFirst = false;
          _this.creditValue = void 0;
          _this.betDenom = void 0;
          _this.numberIntro = null;
          return _this;
        }

        var _proto = BonusRollSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.changeSymbol = this.changeSymbol.bind(this);
          this.node.upgradeCredit = this.upgradeCredit.bind(this);
          this.node.disableLabel = this.disableLabel.bind(this);
          this.node.isFirstStringLabel = this.isFirstStringLabel.bind(this);
          if (this.Bg) this.spriteBg = this.Bg.getComponent(Sprite);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("ADD_NUMBER_INTRO", this.addNumberIntro, this);
          this.node.on("HIDE_NUMBER_INTRO", this.hideNumberIntro, this);
          this.isFirst = true;
        };

        _proto.isFirstStringLabel = function isFirstStringLabel(isFirst) {
          this.isFirst = isFirst;
        };

        _proto.changeSymbol = function changeSymbol(symbolValue, betDenom) {
          if (betDenom === void 0) {
            betDenom = 1;
          }

          var label = this.node.getComponentInChildren(Label);
          this.creditValue = null;

          if (label) {
            label.node.active = false;
          }

          if (symbolValue === 'JP') {
            this.spriteBg.spriteFrame = this.sprites[0];
          } else if (symbolValue === 'FR') {
            this.spriteBg.spriteFrame = this.sprites[1];
          } else if (symbolValue && symbolValue !== '0') {
            if (symbolValue < this.rate1) {
              this.spriteBg.spriteFrame = this.sprites[2];
            } else if (symbolValue < this.rate2) {
              this.spriteBg.spriteFrame = this.sprites[3];
            } else {
              this.spriteBg.spriteFrame = this.sprites[4];
            }

            if (label) {
              label.node.active = true;
              this.creditValue = parseInt(symbolValue);

              if (this.creditValue) {
                label.string = formatWalletMoney(this.creditValue * betDenom);
              } else {
                warn("mini symbol value: " + symbolValue);
              } // if (this.isFirst) {
              //     label.string = "";
              // }

            }
          } else {
            this.spriteBg.spriteFrame = this.sprites[2];
            warn("mini symbol value: " + symbolValue);
          }
        };

        _proto.upgradeCredit = function upgradeCredit(multiplier) {
          if (this.creditValue) {
            var label = this.node.getComponentInChildren(Label);

            if (label) {
              label.string = formatWalletMoney(this.creditValue * multiplier);
            }
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          this.betDenom = betDenom;

          if (this.creditValue && this.isFirst) {
            var label = this.node.getComponentInChildren(Label);

            if (label) {
              label.string = formatWalletMoney(this.creditValue * betDenom);
            }
          }

          this.isFirst = false;
        };

        _proto.disableLabel = function disableLabel() {
          var label = this.node.getComponentInChildren(Label);

          if (label) {
            label.node.active = false;
          }
        };

        _proto.addNumberIntro = function addNumberIntro(num) {
          if (!this.numberIntro) {
            this.numberIntro = instantiate(this.numberPrefab);
            this.node.addChild(this.numberIntro);
          }

          this.disableLabel();
          this.numberIntro.getComponent(Label).string = formatWalletMoney(num);
        };

        _proto.hideNumberIntro = function hideNumberIntro() {
          if (this.numberIntro) this.numberIntro.active = false;
        };

        return BonusRollSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprites", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rate1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 500;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rate2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1000;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "numberPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spriteBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusRollTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, Vec3, log, GameObject, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "4335dv4mARLm6rwwxudiCmk", "BonusRollTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BonusRollTable = exports('BonusRollTable', (_dec = ccclass('BonusRollTable'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(BonusRollTable, _GameObject);

        function BonusRollTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "miniReelPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "holderNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "creditLabelPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefabName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinMultiplier", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleHolder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLocks", _descriptor8, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.isReady = false;
          _this.isFastToResult = false;
          _this.reels = [];
          _this.tableFormat = null;
          _this.symbolNameList = [];
          _this.mode = '';
          _this.curentConfig = void 0;
          _this.showingMultipler = false;
          _this.matrix = void 0;
          _this.mul = 1;
          _this.betDenom = void 0;
          _this.callbackMultiplier = void 0;
          _this.isPositionUpdated = false;
          return _this;
        }

        var _proto = BonusRollTable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("SET_MODE", this.setMode, this);
          this.node.on("SET_UP_BONUS_ROLL_RESUME", this.setupBonusRollResume, this);
          this.node.on("UPDATE_BET_DENOM", this.updateBetDenom, this);
          this.node.on("SHOW_MULTIPLIER", this.showMultiplier, this);
          this.node.on("RESET_MULTIPLIER_CB", this.resetMultiplierCB, this);
          this.node.on("UNBLOCK_JACKPOT", this.unBlockJackpot, this);
          this.node.on("SHOW_LOCKS", this.showLocks, this);
          this.node.on('STOP_REEL_WITH_RANDOM_MATRIX', this.stopReelWithRandom, this);
          this.node.on('SHOW_INTRO', this.showIntroSymbols, this);
          this.node.on('HIDE_INTRO', this.hideIntroSymbols, this);
          this.node.on("GAME_HIDE", this.onGameHide, this);
          this.node.on("GAME_SHOW", this.onGameShow, this);
          this.mode = 'FAST';
          this.isReady = false;
        };

        _proto.init = function init() {
          if (this.isReady) return;
          this.isFastToResult = false;
          this.reels = [];
          this.tableFormat = this.config.MINI_TABLE_FORMAT;
          this.symbolNameList = this.config.MINI_SYMBOL_NAME_LIST;
          var startX = -(this.tableFormat.length / 2 - 0.5) * this.config.TOP_UP_WIDTH + .05;

          for (var col = 0; col < this.tableFormat.length; col++) {
            var reel = instantiate(this.miniReelPrefab);
            reel.name = 'Mini_Reel_' + col;
            reel.parent = this.holderNode;
            var x = startX + this.config.TOP_UP_WIDTH * col;
            reel.setPosition(new Vec3(x, 0, 0));
            var isBlock = col === 1 || col === 3;

            if (this.mainDirector) {
              this.poolFactory = this.mainDirector.poolFactory;
            }

            reel.reelIndex = col;
            reel.emit('INIT', this.poolFactory, this.symbolNameList, this.symbolPrefabName, this.creditLabelPrefabName, isBlock);
            this.reels[col] = reel;
          }

          this.isReady = true;
        };

        _proto.onGameShow = function onGameShow() {
          if (this.holderNode) this.holderNode.active = true;
        };

        _proto.onGameHide = function onGameHide() {
          if (this.holderNode) this.holderNode.active = false;
        };

        _proto.showIntroSymbols = function showIntroSymbols(ranInt) {
          if (!this.isFreeMode) {
            if (ranInt == undefined) {
              var len = this.config.BEAUTY_MATRIX_BAR.length;
              ranInt = Math.floor(Math.random() * len);
            }

            var listSymbols = this.config.BEAUTY_MATRIX_BAR[ranInt];
            var mat = listSymbols.split(',');
            this.reels.forEach(function (it, index) {
              it.emit("UPDATE_ALL_SYMBOLS", mat[index]);
            });
          }
        };

        _proto.hideIntroSymbols = function hideIntroSymbols() {
          this.reels.forEach(function (it) {
            it.emit("HIDE_INTRO");
          });
        };

        _proto.setMode = function setMode(mode) {
          this.mode = mode;
        };

        _proto.startSpinning = function startSpinning() {
          this.isFastToResult = false;
          this.curentConfig = this.mode === 'FAST' ? this.config.TABLE_NORMAL : this.config.TABLE_TURBO;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];

            if (reel) {
              reel.emit("SET_MODE", this.mode);
              reel.emit("START_SPINNING");
            }
          }

          if (this.showingMultipler) {
            this.hideMultiplier();
          }

          this.isPositionUpdated = true;
        };

        _proto.stopReelWithRandom = function stopReelWithRandom() {
          this.cheatStopSpinning();
        };

        _proto.cheatStopSpinning = function cheatStopSpinning() {
          var fakeMatrix = [];

          for (var i = 0; i < this.tableFormat.length; i++) {
            var randIndex = Math.floor(Math.random() * this.symbolNameList.length);
            var randValue = this.symbolNameList[randIndex];
            fakeMatrix[i] = randValue;
          }

          this.stopSpinning({
            bonusRoll: fakeMatrix,
            multiplier: 1
          }, function () {
            log('On Table Stop Spinning: ' + fakeMatrix);
          });
        };

        _proto.stopSpinning = function stopSpinning(data, callback) {
          var multiplier = data.multiplier,
              bonusRoll = data.bonusRoll;
          this.matrix = bonusRoll;
          this.mul = multiplier || 1;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var symbolValue = this.matrix[col];
            var reel = this.reels[col];

            if (reel) {
              reel.emit("STOP_SPINNING", symbolValue, this.onReelStopCallback.bind(this, col, callback));
            }
          }
        };

        _proto.onReelStopCallback = function onReelStopCallback(col, callback) {
          if (col == this.tableFormat.length - 1) {
            callback && callback();
          }

          this.isPositionUpdated = false;
        };

        _proto.update = function update(dt) {
          if (this.isReady && this.isPositionUpdated) {
            for (var col = 0; col < this.tableFormat.length; ++col) {
              var reel = this.reels[col];

              if (reel) {
                reel.updatePosition(dt);
              }
            }
          }
        };

        _proto.fastToResult = function fastToResult() {
          if (!this.isFastToResult) {
            this.isFastToResult = true;
            this.hideMultiplier();

            for (var col = 0; col < this.tableFormat.length; ++col) {
              var reel = this.reels[col];

              if (reel) {
                reel.emit('FAST_TO_RESULT');
              }
            }
          }
        };

        _proto.setupBonusRollResume = function setupBonusRollResume(data) {
          var multiplier = data.multiplier,
              bonusRoll = data.bonusRoll,
              isResume = data.isResume;

          if (!bonusRoll) {
            log('Bonus roll is undefined');
            return;
          }

          this.matrix = bonusRoll;
          this.mul = multiplier || 1;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];
            var symbolValue = this.matrix[col];

            if (reel) {
              if (isResume && (col == 1 || col == 3)) {
                reel.emit("UNBLOCK_JACKPOT", true);
              }

              reel.emit("SET_UP_BONUS_ROLL_RESUME", Number(symbolValue) > 0 ? Number(symbolValue) * this.mul : symbolValue);
            }
          }

          if (isResume) {
            this.showLocks();
          }
        };

        _proto.updateBetDenom = function updateBetDenom(betDenom) {
          this.betDenom = betDenom;

          for (var col = 0; col < this.reels.length; ++col) {
            this.reels[col].emit("UPDATE_BET_DENOM", betDenom);
          }
        };

        _proto.showMultiplier = function showMultiplier(multiplier, callback) {
          if (!this.coinMultiplier) return;
          this.curentConfig = this.mode === 'FAST' ? this.config.TABLE_NORMAL : this.config.TABLE_TURBO;
          this.showingMultipler = true;
          this.callbackMultiplier = callback;
          this.coinMultiplier.active = true;
          this.coinMultiplier.setScale(new Vec3(1, 1, 1)); //TODO: SHOW MULTIPLIER HERE
        };

        _proto.upgradeCredit = function upgradeCredit(isForce) {
          if (isForce === void 0) {
            isForce = false;
          }

          for (var col = 0; col < this.tableFormat.length; ++col) {
            var reel = this.reels[col];
            var symbolValue = this.matrix[col];

            if (isForce) {
              if (reel) {
                reel.emit("UPGRADE_CREDIT", Number(symbolValue) > 0 ? symbolValue * this.mul : symbolValue);
              }
            } else {
              if (Number(symbolValue) > 0 && col !== 1 && col !== 3) {
                this.runMultiplyAnim(reel, symbolValue * this.mul, col);
              }
            }
          }
        };

        _proto.runMultiplyAnim = function runMultiplyAnim(reel, symbolValue, col) {
          if (reel) {
            reel.emit("UPGRADE_CREDIT", symbolValue);
          } //TODO

        };

        _proto.hideMultiplier = function hideMultiplier() {
          if (!this.showingMultipler) return;
          this.callbackMultiplier && this.callbackMultiplier();
          this.callbackMultiplier = null;
          this.coinMultiplier.active = false;
          this.showingMultipler = false; //RESET PARTICLE SYSTEM HERE
        };

        _proto.resetMultiplierCB = function resetMultiplierCB() {
          this.callbackMultiplier = null;
        };

        _proto.unBlockJackpot = function unBlockJackpot(active, callback) {
          if (active === void 0) {
            active = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          for (var col = 0; col < this.reels.length; ++col) {
            if (col == 1 || col == 3) {
              this.reels[col].emit("UNBLOCK_JACKPOT", active, col == 1 ? callback : null);
            }
          }
        };

        _proto.showLocks = function showLocks(isOn) {
          if (isOn === void 0) {
            isOn = false;
          }

          this.listLocks.forEach(function (item) {
            item.active = isOn;

            if (item.getChildByName('Lock')) {
              setOpacity(item.getChildByName('Lock'), 255);
            }
          });
        };

        return BonusRollTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "miniReelPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "holderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "creditLabelPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinMultiplier", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "particleHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listLocks", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusValueControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Vec3, tween, Color, Component, formatWalletMoney, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Vec3 = module.Vec3;
      tween = module.tween;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "92da5+beGZPe6lZgt2jpapj", "BonusValueControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var BonusValueControl = exports('BonusValueControl', (_dec = ccclass('BonusValueControl'), _dec2 = requireComponent(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BonusValueControl, _Component);

        function BonusValueControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dimColor", _descriptor, _assertThisInitialized(_this));

          _this._label = null;
          _this._currentCreditValue = 0;
          _this._currentDenomValue = 1;
          _this._appearingTween = null;
          return _this;
        }

        var _proto = BonusValueControl.prototype;

        _proto.onLoad = function onLoad() {
          this._label = this.getComponent(Label);
        };

        _proto.showValue = function showValue(creditValue, denomRate, isFast, isSelected) {
          var _this2 = this;

          if (isFast === void 0) {
            isFast = false;
          }

          if (isSelected === void 0) {
            isSelected = false;
          }

          this._currentCreditValue = creditValue;
          this._currentDenomValue = denomRate;
          var money = this._currentDenomValue * this._currentCreditValue;

          if (isFast) {
            this.node.scale = new Vec3(1, 1, 1);

            if (this._label) {
              if (money >= 100000) {
                this._label.string = formatWalletMoney(money).toString();
              } else {
                this._label.string = formatMoney(money);
              }
            }
          } else {
            if (this._label) {
              this._label.string = 'X' + creditValue;
            }

            this.node.scale = new Vec3(0.01, 0.01, 0.01);
            if (this._appearingTween) this._appearingTween.stop();
            this._appearingTween = tween(this.node).to(0.5, {
              angle: -360,
              scale: new Vec3(1, 1, 1)
            }).delay(0.5).call(function () {
              if (_this2._label) {
                if (money >= 100000) {
                  _this2._label.string = formatWalletMoney(money).toString();
                } else {
                  _this2._label.string = formatMoney(money);
                }
              }

              _this2._appearingTween = null;
            });

            this._appearingTween.start();
          }

          this._label.color = isSelected ? Color.WHITE : this.dimColor;
        };

        _proto.reset = function reset() {
          if (this._label) {
            this._label.string = '';
          }

          if (this._appearingTween) this._appearingTween.stop();
          this.node.scale = new Vec3(0.01, 0.01, 0.01);
          this.node.angle = 0;
        };

        return BonusValueControl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(0, 0, 0, 0);
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottomBarMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TweenViewComponent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, TweenViewComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      TweenViewComponent = module.TweenViewComponent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e10cdlvHPdLAKs5u8p+w8b/", "BottomBarMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottomBarMgr = exports('BottomBarMgr', (_dec = ccclass('BottomBarMgr'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_TweenViewComponent) {
        _inheritsLoose(BottomBarMgr, _TweenViewComponent);

        function BottomBarMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TweenViewComponent.call.apply(_TweenViewComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "movingGroup", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BottomBarMgr.prototype;

        _proto.show = function show(onStartCB, onCompleteCB) {
          if (onStartCB === void 0) {
            onStartCB = null;
          }

          if (onCompleteCB === void 0) {
            onCompleteCB = null;
          }

          if (this.movingGroup) {
            this.movingGroup.show();
          }

          _TweenViewComponent.prototype.show.call(this, onStartCB, onCompleteCB);
        };

        _proto.hide = function hide(onStartCB, onCompleteCB) {
          if (onStartCB === void 0) {
            onStartCB = null;
          }

          if (onCompleteCB === void 0) {
            onCompleteCB = null;
          }

          if (this.movingGroup) {
            this.movingGroup.hide();
          }

          _TweenViewComponent.prototype.show.call(this, onStartCB, onCompleteCB);
        };

        return BottomBarMgr;
      }(TweenViewComponent), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "movingGroup", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CanvasScaleByOrientation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, Canvas, CCInteger, Widget, sys, view, macro, director, screen, log, ResolutionPolicy, Camera, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      Canvas = module.Canvas;
      CCInteger = module.CCInteger;
      Widget = module.Widget;
      sys = module.sys;
      view = module.view;
      macro = module.macro;
      director = module.director;
      screen = module.screen;
      log = module.log;
      ResolutionPolicy = module.ResolutionPolicy;
      Camera = module.Camera;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "b4c0egcgEpKdZ75o3AkPNx+", "CanvasScaleByOrientation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CanvasScaleByOrientation = exports('CanvasScaleByOrientation', (_dec = ccclass('CanvasScaleByOrientation'), _dec2 = property(CCBoolean), _dec3 = property(CCBoolean), _dec4 = property({
        type: Canvas
      }), _dec5 = property(CCBoolean), _dec6 = property(CCBoolean), _dec7 = property(CCInteger), _dec8 = property(CCInteger), _dec9 = property({
        type: Widget
      }), _dec10 = property(CCBoolean), _dec11 = property({
        type: CCInteger
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CanvasScaleByOrientation, _Component);

        function CanvasScaleByOrientation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "autoOrientation", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isPortrait", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "canvas", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fitByOrientation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useCustomDesignResolution", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSWidth", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSHeight", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "widgetNodes", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minScreenRatio", _descriptor10, _assertThisInitialized(_this));

          _this._thisOnResized = void 0;
          _this.innerSize = void 0;
          return _this;
        }

        var _proto = CanvasScaleByOrientation.prototype;

        _proto.onLoad = function onLoad() {
          this.innerSize = {
            width: window.innerWidth,
            height: window.innerHeight
          };
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isBrowser) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          if (!sys.isNative) {
            var divFullscreen = document.getElementById('div_full_screen');

            if (this.isPortrait) {
              if (divFullscreen) {
                divFullscreen.style.visibility = "hidden";
              }
            }

            if (this.autoOrientation) {
              view.setOrientation(macro.ORIENTATION_AUTO);
            } else if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }
        };

        _proto.start = function start() {
          if (sys.isMobile) {
            var eventResize = new Event('gameShow');
            window.dispatchEvent(eventResize);
          }

          if (sys.isNative) {
            director.emit("INTEGRATION_SET_CANVAS_ORIENT", this.isPortrait ? 0 : 1);
          }

          this.scaleCanvasByOrientation();
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          var screenWidth = sys.isBrowser ? window.innerWidth : screen.windowSize.width;
          var screenHeight = sys.isBrowser ? window.innerHeight : screen.windowSize.height;

          if (this.autoOrientation) {
            if (screenWidth < screenHeight) {
              this.isPortrait = true;
            } else {
              this.isPortrait = false;
            }
          } else {
            if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }

          if (this.canvas) {
            if (this.isDebug) {
              log("Canvas after update: ");
              log(this.canvas);
            }

            this.canvas.alignCanvasWithScreen = true;

            if (this.fitByOrientation) {
              var designRatio = this.useCustomDesignResolution ? this.customDSWidth / this.customDSHeight : view.getDesignResolutionSize().width / view.getDesignResolutionSize().height;
              var screenRatio = screenWidth / screenHeight;

              if (window && sys.isMobile && sys.isBrowser) {
                var isLandscapeOrien = this.isLandscapeScreen();

                if (this.isPortrait) {
                  screenRatio = isLandscapeOrien ? screenHeight / screenWidth : screenWidth / screenHeight;
                } else {
                  screenRatio = isLandscapeOrien ? window.innerWidth / window.innerHeight : window.innerHeight / window.innerWidth;
                }
              }

              if (this.isDebug) {
                log("[TestResize]View size width: " + screenWidth + ", height: " + screenHeight + "  Design Resolution: W: " + view.getDesignResolutionSize().width + ", H: " + view.getDesignResolutionSize().height + ",  Screen Ratio: " + screenRatio + ", Design Ratio: " + designRatio + ", minScreenRatio: " + this.minScreenRatio);
              }

              if (this.isPortrait) {
                if (screenRatio < designRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);

                  if (this.isDebug) {
                    log("CANVAS FIT WIDTH");
                  }
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);

                  if (this.isDebug) {
                    log("CANVAS FIT HEIGHT");
                  }
                }

                this.rotateRootPortraitGame();
              } else {
                if (screenRatio < designRatio && screenRatio >= this.minScreenRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);

                  if (this.isDebug) {
                    log("[TestResize]CANVAS FIT WIDTH");
                  }
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);

                  if (this.isDebug) {
                    log("[TestResize]CANVAS FIT HEIGHT");
                  }
                }
              }
            }
          } else {
            if (this.isDebug) {
              log("No canvas component");
            }
          }

          if (this.widgetNodes && this.widgetNodes.length > 0) {
            for (var i = 0; i < this.widgetNodes.length; i++) {
              var widget = this.widgetNodes[i];

              if (widget) {
                this.widgetNodes[i].updateAlignment();
              }
            }
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        _proto.isLandscapeScreen = function isLandscapeScreen() {
          if (sys.isMobile && sys.isBrowser && typeof window.matchMedia === 'function') {
            if (window.matchMedia("(orientation: landscape)").matches) {
              return true;
            }

            if (window.matchMedia("(orientation: portrait)").matches) {
              return false;
            }
          }

          return true;
        };

        _proto.isShowKeyboard = function isShowKeyboard() {
          var currentViewSize = window.innerWidth * window.innerHeight;
          var rate = currentViewSize / (this.innerSize.width * this.innerSize.height);
          return rate < 0.8;
        };

        _proto.rotateRootPortraitGame = function rotateRootPortraitGame() {
          if (!this.isPortrait) return;

          if (sys.isMobile && sys.isBrowser) {
            var isLandScapeView = this.isLandscapeScreen() && !this.isShowKeyboard();
            this.node.children.forEach(function (child) {
              if (!child.getComponent(Camera)) {
                child.angle = isLandScapeView ? 180 : 0;
              }
            });
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        return CanvasScaleByOrientation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoOrientation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fitByOrientation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useCustomDesignResolution", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "widgetNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "minScreenRatio", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClosePopups.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, EventHandler, Button, GameObject;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventHandler = module.EventHandler;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "69a9cRqdT1Ke5D+jzipWi0M", "ClosePopups", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ClosePopups = exports('ClosePopups', (_dec = ccclass('ClosePopups'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(ClosePopups, _GameObject);

        function ClosePopups() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.fadeSpeed = 0.2;
          _this.isFading = false;
          return _this;
        }

        var _proto = ClosePopups.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.addClickEvent();
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.isFading = false;
        };

        _proto.addClickEvent = function addClickEvent() {
          var clickEventHandler = new EventHandler();
          clickEventHandler.target = this.node;
          clickEventHandler.component = 'ClosePopups';
          clickEventHandler.handler = 'closePopups';
          var button = this.node.getComponent(Button);

          if (!button) {
            button = this.node.addComponent(Button);
          }

          button.clickEvents.push(clickEventHandler);
        };

        _proto.closePopups = function closePopups() {
          var _this2 = this;

          if (this.isFading) return;
          this.isFading = true;
          this.scheduleOnce(function () {
            _this2.isFading = false;
          }, this.fadeSpeed);
          var gui = this.guiMgr;
          if (!gui) return;
          gui.closePopups();
        };

        return ClosePopups;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "363a80aYLhMurIq1bGA4+Ce", "CoinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TYPE = {
        BIG: 0,
        MEGA: 1,
        SUPER: 2
      };
      var CoinEffect = exports('CoinEffect', (_dec = ccclass('CoinEffect'), _dec2 = property({
        type: ParticleSystem2D
      }), _dec3 = property({
        type: ParticleSystem2D
      }), _dec4 = property({
        type: ParticleSystem2D
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoinEffect, _Component);

        function CoinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "coinBigWin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinMegaWin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinSuperWin", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_COIN_EFFECT', this.showCoinEffect, this);
          this.node.on('HIDE_COIN_EFFECT', this.hideCoinEffect, this);
          this.node.on('RESET_COIN_EFFECT', this.resetCoinEffect, this);
          this.resetCoinEffect();
        };

        _proto.resetCoinEffect = function resetCoinEffect() {
          if (this.coinBigWin) this.coinBigWin.node.active = false;

          if (this.coinMegaWin) {
            this.coinMegaWin.forEach(function (item) {
              item.node.active = false;
            });
          }

          if (this.coinSuperWin) {
            this.coinSuperWin.forEach(function (item) {
              item.node.active = false;
            });
          }
        };

        _proto.hideCoinEffect = function hideCoinEffect() {
          if (this.coinBigWin) this.coinBigWin.stopSystem();

          if (this.coinMegaWin) {
            this.coinMegaWin.forEach(function (item) {
              item.stopSystem();
            });
          }

          if (this.coinSuperWin) {
            this.coinSuperWin.forEach(function (item) {
              item.stopSystem();
            });
          }
        };

        _proto.showCoinEffect = function showCoinEffect(type, isSkipEffect) {
          if (type === void 0) {
            type = TYPE.BIG;
          }

          if (type === TYPE.BIG) {
            if (this.coinBigWin) {
              this.coinBigWin.node.active = true;
              this.coinBigWin.resetSystem();
            }
          } else if (type === TYPE.MEGA) {
            if (!isSkipEffect) {
              if (this.coinBigWin) this.coinBigWin.stopSystem();

              if (this.coinMegaWin) {
                this.coinMegaWin.forEach(function (item) {
                  item.node.active = true;
                  item.resetSystem();
                });
              }
            }
          } else {
            if (!isSkipEffect) {
              if (this.coinBigWin) this.coinBigWin.resetSystem();
            }

            if (this.coinMegaWin) {
              this.coinMegaWin.forEach(function (item) {
                item.stopSystem();
              });
            }

            if (this.coinSuperWin) {
              this.coinSuperWin.forEach(function (item) {
                item.node.active = true;
                item.resetSystem();
              });
            }
          }
        };

        return CoinEffect;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinBigWin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinMegaWin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "coinSuperWin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinsEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, ParticleSystem2D, view, tween, Vec3, setOpacity, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      ParticleSystem2D = module.ParticleSystem2D;
      view = module.view;
      tween = module.tween;
      Vec3 = module.Vec3;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "fa67b6DG8NOpaf7Nl24G5YU", "CoinsEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var CoinsEffect = exports('CoinsEffect', (_dec = ccclass('CoinsEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(CoinsEffect, _SlotUIScene);

        function CoinsEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.duration = void 0;
          _this.moneyPool = void 0;
          _this.moneyIndex = void 0;
          _this.coinDropperTween = void 0;
          _this.moneyDropperTween = void 0;

          _initializerDefineProperty(_this, "coinSpawnerCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPipeDelayTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinDropper", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneySpawner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPiles", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinsEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.initValue();
          this.node.on('START_PARTICLE', this.startParticle, this);
          this.node.on('STOP_PARTICLE', this.stopParticle, this);
          this.node.on('DROP_MONEY', this.randomDropMoney, this);
          this.duration = 10;
        };

        _proto.initValue = function initValue() {
          if (!this.moneyPrefab) return;
          this.moneyPool = [];

          for (var i = 0; i < 20; ++i) {
            var money = instantiate(this.moneyPrefab);
            money.parent = this.moneySpawner;
            setOpacity(money, 0);
            this.moneyPool.push(money);
          }

          setOpacity(this.moneySpawner, 0);
        };

        _proto.startParticle = function startParticle() {
          var _this2 = this;

          this.coinDropper.getComponent(ParticleSystem2D).resetSystem();
          this.coinPiles.forEach(function (pile) {
            pile.setPosition(0, -view.getVisibleSize().height / 2 - 20);
            pile.getComponent(ParticleSystem2D).resetSystem();
            var curPos = pile.getPosition();
            tween(pile).to(_this2.duration, {
              position: new Vec3(curPos.x + 200, curPos.y + 200, curPos.z)
            }).start();
          });
        };

        _proto.stopParticle = function stopParticle() {
          this.moneyDropperTween && this.moneyDropperTween.stop();
          this.coinDropper.getComponent(ParticleSystem2D).stopSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).stopSystem();
          });
        };

        _proto.randomDropMoney = function randomDropMoney() {
          var _this3 = this;

          if (!this.moneyPrefab) return;
          this.moneyIndex = 0;
          setOpacity(this.moneySpawner, 255);
          this.moneyDropperTween = tween(this.moneySpawner).repeatForever(tween().delay(0.3).call(function () {
            _this3.dropMoney();
          })).start();
        };

        _proto.dropMoney = function dropMoney() {
          var money = this.moneyPool[this.moneyIndex];
          this.moneyIndex = (this.moneyIndex + 1) % this.moneyPool.length;
          money.x = (Math.random() - 0.5) * view.getVisibleSize().width;
          var randomAnimIdx = Math.random() * 3 | 0 + 1;
          var animName = 'TienRoi' + randomAnimIdx;
          setOpacity(money, 255);
          money.getComponent('sp.Skeleton').setAnimation(0, animName, false);
        };

        return CoinsEffect;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinSpawnerCount", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinPipeDelayTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "coinDropper", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "moneySpawner", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinPiles", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config9000.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameCommonUtils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, gameCommonUtils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1fb886d4N9Fy7CXaAPPs5e7", "Config9000", undefined);

      var ccclass = _decorator.ccclass;
      var Config9000 = exports('Config9000', (_dec = ccclass('Config9000'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Config9000, _Component);

        function Config9000() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Config9000.prototype;

        _proto.onLoad = function onLoad() {
          this.node.config = {
            GAME_ID: '9965',
            JP_PREFIX_EVENT: '9965_',
            JP_NAMES: ["GRAND"],
            DEFAULT_BET: "1",
            BETS: {
              '1': 500,
              '2': 1000,
              '3': 5000,
              '4': 10000,
              '5': 50000,
              '6': 500000
            },
            DEFAULT_EXTRA_BET: "0",
            EXTRA_BETS: {
              "0": 1
            },
            TOTAL_BET_CREDIT: 25,
            TREASURE_VALUE_1: ["1", "2", "3", "4"],
            DEFAULT_TRIAL_JACKPOT: {
              "9965_1_GRAND": 250000,
              "9965_2_GRAND": 500000,
              "9965_3_GRAND": 2500000,
              "9965_4_GRAND": 5000000,
              "9965_5_GRAND": 25000000,
              "9965_6_GRAND": 250000000
            },
            DEFAULT_TRIAL_WALLET: 200000000,
            TRIAL_BET: '5',
            TRIAL_EXTRA_BET: '0',
            MESSAGE_DIALOG: gameCommonUtils.getMessageSlot(),
            DEMONTATION: 250,
            ACTIVE_SYMBOL: ["8", "18", "38", "68", "168"],
            BOX_MAP_VALUES: {
              100: 1,
              200: 2,
              400: 3
            },
            RANDOM_ACTIVE_SYMBOL: [["8"], ["8", "18"], ["8", "18", "38"], ["8", "18", "38", "68"], ["8", "18", "38", "68", "168"]],
            PAY_TABLE: {
              "2": [10, 15, 50],
              "3": [5, 10, 20],
              "4": [5, 10, 20],
              "5": [5, 10, 20],
              "6": [5, 10, 20],
              "22": [10, 15, 50],
              "33": [35, 65, 250],
              "44": [15, 50, 200],
              "55": [15, 35, 150],
              "66": [10, 30, 100]
            },
            GAME_SPEED: {
              NORMAL: 0,
              TURBO: 1,
              INSTANTLY: 2
            },
            PARTICLE_MOVING_TIME: 1,
            MUSIC_VOLUME: 0.7,
            SOUND_EFFECT_VOLUME: 1,
            JP_LIST_HISTORY: 'GRAND-MAJOR',
            BET_IDS: "10-20-30-40-50-60",
            BET_IDS_IFRAME: "10-20-30-40-50-60",
            SKIP_NEAR_WIN_TURBO: true,
            IS_SHOW_JACKPOT_EXPLOSION: true,
            HIGH_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 2,
              BIG_WIN_ANIMATION: 2,
              JP_WIN_ANIMATION: 2,
              BACKGROUND_ANIMATION: 2,
              NEAR_WIN_ANIMATION: 2,
              TRANSITION_ANIMATION: 2,
              BONUS_ANIMATION: 2
            },
            MEDIUM_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 1,
              BIG_WIN_ANIMATION: 1,
              JP_WIN_ANIMATION: 1,
              BACKGROUND_ANIMATION: 1,
              NEAR_WIN_ANIMATION: 1,
              TRANSITION_ANIMATION: 1,
              BONUS_ANIMATION: 1
            },
            LOW_PERFORMANCE_LV: {
              PAYLINE_ANIMATION: 0,
              BIG_WIN_ANIMATION: 0,
              JP_WIN_ANIMATION: 0,
              BACKGROUND_ANIMATION: 0,
              NEAR_WIN_ANIMATION: 0,
              TRANSITION_ANIMATION: 0,
              BONUS_ANIMATION: 0
            },

            /********** * ONLY TABLE CONFIG ****************/
            NORMAL_TABLE_FORMAT: [3, 3, 3, 3, 3],
            FREE_TABLE_FORMAT: [3, 3, 3, 3, 3],
            TOPUP_TABLE_FORMAT: [3, 3, 3, 3, 3],
            BONUS_TABLE_FORMAT: [3, 3, 3, 3, 3],
            TABLE_BUFFER: {
              TOP: 1,
              BOT: 1
            },
            ACCEL: 1200,
            MIN_SPEED: 2000,
            MAX_SPEED: 2800,
            SUPER_SPEED: 3500,
            TABLE_NORMAL: {
              TIME: 0.06,
              DELAY_START: 0.2,
              DELAY_STOP: 0.2,
              EASING_DISTANCE: 15,
              EASING_TIME: 0.5,
              TOTAL_CIRCULAR: 8,
              STEP_STOP: 12,
              RATE: 1,
              IS_TURBO: false,
              BLINKS: 2,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 2,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.3,
              NEAR_WIN_DELAY: 0.4,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            TABLE_TURBO: {
              TIME: 0.06,
              DELAY_START: 0.1,
              DELAY_STOP: 0.1,
              EASING_DISTANCE: 15,
              EASING_TIME: 0,
              TOTAL_CIRCULAR: 6,
              STEP_STOP: 8,
              RATE: 2,
              IS_TURBO: true,
              BLINKS: 1,
              BLINK_DURATION: 0.5,
              ANIMATION_DURATION: 1,
              EXPECT_PAYLINE_TIME: 2,
              EXPECT_PAYLINE_ALLWAYS_TIME: 2,
              MIN_TIME_EACH_PAYLINE: 0.2,
              NEAR_WIN_DELAY: 0.2,
              NEAR_WIN_DELAY_LAST_REEL: 0.8
            },
            NORMAL_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            FREE_SYMBOLS: [['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6'], ['2', '3', '4', '5', '6']],
            EXCEPTION_SYMBOLS: ["A", "R", "K", "K1", "K2"],
            WILD_SYMBOL: 'K',
            SYMBOL_SMALL_NAME_LIST: ['2', '3', '4', '5', '6'],
            SYMBOL_WIDTH: 190,
            SYMBOL_HEIGHT: 148,
            PAY_LINE_LENGTH: 20,
            PAY_LINE_ALLWAYS: false,
            SHOW_WINLINE_FRAME: true,
            SHOW_DRAWING_LINE: true,
            PAY_LINE_MATRIX: {
              "1": [1, 1, 1, 1, 1],
              "2": [0, 0, 0, 0, 0],
              "3": [2, 2, 2, 2, 2],
              "4": [0, 1, 2, 1, 0],
              "5": [2, 1, 0, 1, 2],
              "6": [1, 0, 1, 0, 1],
              "7": [1, 2, 1, 2, 1],
              "8": [0, 1, 0, 1, 0],
              "9": [2, 1, 2, 1, 2],
              "10": [1, 0, 0, 0, 1],
              "11": [1, 2, 2, 2, 1],
              "12": [2, 2, 1, 2, 2],
              "13": [0, 0, 1, 0, 0],
              "14": [2, 1, 1, 1, 2],
              "15": [0, 1, 1, 1, 0],
              "16": [0, 2, 0, 2, 0],
              "17": [2, 0, 2, 0, 2],
              "18": [1, 1, 0, 1, 1],
              "19": [1, 1, 2, 1, 1],
              "20": [2, 2, 0, 2, 2]
            },
            HAS_GAME_EVENT: false,
            SERVER_VERSION: '',

            /********** * ONLY FOR TUTORIAL ****************/
            TUTORIAL_TEXT: {
              CLICK_SPIN_1: "Bấm quay để bắt đầu chơi.",
              INFO_BET_1: "Xét trên dòng 1 đang cược 5K, có 3 \nbiểu tượng Eva và hệ số thưởng là\n 40 thì sẽ được trả thưởng\n là 5K x 40 = 200.000.",
              INTRO_JACKPOT: "Đây là hũ xu của game, mỗi lần quay sẽ góp 1 phần tiền cược vào hũ.",
              CONTINUE_SPIN: "Thử thêm lần nữa nào.",
              CLICK_BET: "Không thắng được gì. Thử tăng mức cược lên xem sao.",
              CLICK_TURBO: "Bấm vào đây để tăng tốc.",
              WIN_BONUS: "Tìm đủ 3 biểu tượng Bonus, bạn sẽ \nbiết được đường vào hầm bí mật.",
              BONUS_RULE: "Bạn có 3 lần mở rương với các phần thưởng khác nhau. Hãy chọn nào.",
              WIN_SCATTER: "Tìm đủ 3 biểu tượng Free bạn sẽ bắt được tín hiệu trợ giúp.",
              SPIN_TIMES: "Số lần quay còn lại sẽ được cập nhật ở đây.",
              CLICK_AUTO_SPIN: "Nhấn giữ để tự động quay."
            }
          };
        };

        return Config9000;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/connectNetwork.ts", ['cc', './loadConfigAsync.ts', './serviceRest.ts', './gameCommonUtils.ts', './globalNetwork.ts', './mock.ts'], function (exports) {
  var cclegacy, sys, log, loadConfigAsync, apiObject, gameCommonUtils, globalNetwork, mock;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      mock = module.mock;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9aa5GoLR9JNqfGizKqYr82", "connectNetwork", undefined);

      var ConnectNetwork = /*#__PURE__*/function () {
        function ConnectNetwork() {
          this.gameId = '';
        }

        var _proto = ConnectNetwork.prototype;

        _proto.getToken = function getToken() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              URL_TOKEN = _loadConfigAsync$getC.URL_TOKEN,
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          var token = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            token = getUrlParam(URL_TOKEN);
            sys.localStorage.setItem(USER_TOKEN, token);
          } else if (typeof window !== 'undefined' && typeof window["__Game_Bridge"] !== 'undefined' && typeof window["__Game_Bridge"].getUSS === 'function') {
            token = window["__Game_Bridge"].getUSS();
          } else {
            token = sys.localStorage.getItem(USER_TOKEN);
          }

          return "bedau21";
        };

        _proto.getRefreshToken = function getRefreshToken() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME,
              _loadConfigAsync$getC3 = _loadConfigAsync$getC2.URL_REFRESH_TOKEN,
              URL_REFRESH_TOKEN = _loadConfigAsync$getC3 === void 0 ? 'refresh-token' : _loadConfigAsync$getC3,
              _loadConfigAsync$getC4 = _loadConfigAsync$getC2.USER_REFRESH_TOKEN,
              USER_REFRESH_TOKEN = _loadConfigAsync$getC4 === void 0 ? 'user-refresh-token' : _loadConfigAsync$getC4;

          var refreshToken = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            refreshToken = getUrlParam(URL_REFRESH_TOKEN);
            sys.localStorage.setItem(USER_REFRESH_TOKEN, refreshToken);
          } else {
            refreshToken = sys.localStorage.getItem(USER_REFRESH_TOKEN);
          }

          return refreshToken;
        };

        _proto.loginScene = function loginScene(_ref) {
          var _this = this;

          var _ref$callback = _ref.callback,
              _callback = _ref$callback === void 0 ? function () {} : _ref$callback,
              _ref$gameId = _ref.gameId,
              gameId = _ref$gameId === void 0 ? '' : _ref$gameId,
              _ref$callbackAuthFail = _ref.callbackAuthFailed,
              callbackAuthFailed = _ref$callbackAuthFail === void 0 ? function () {} : _ref$callbackAuthFail;

          log("Login using V3");

          var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC5.IS_FINISHED_REMOTE,
              DEV_ENV = _loadConfigAsync$getC5.DEV_ENV,
              USER_TOKEN = _loadConfigAsync$getC5.USER_TOKEN;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this.loginScene({
                callback: _callback,
                gameId: gameId,
                callbackAuthFailed: callbackAuthFailed
              });
            }, 100);
            return;
          }

          this.gameId = gameId;
          var token = this.getToken();
          var refreshToken = this.getRefreshToken();

          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME,
              API_URL = _loadConfigAsync$getC6.API_URL;

          var envId = LOGIN_IFRAME ? 'iframe' : 'portal';
          var gameIdSocket = LOGIN_IFRAME ? gameId : 'all';
          var getUrlParam = gameCommonUtils.getUrlParam;
          var history = getUrlParam('history');
          if (LOGIN_IFRAME && history && history === 'true') return;

          if (token || !DEV_ENV) {
            if (token) {
              globalNetwork.init(token, refreshToken, envId, gameIdSocket);

              _callback();
            } else {
              callbackAuthFailed();
            }
          } else {
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            };
            apiObject.post({
              url: 'auth/login',
              data: dataPost,
              callback: function callback(_ref2) {
                var data = _ref2.data;

                if (data.data.token) {
                  sys.localStorage.setItem(USER_TOKEN, data.data.token);
                  globalNetwork.init(data.data.token, '', envId, gameIdSocket);

                  _callback();
                } else {
                  callbackAuthFailed && callbackAuthFailed();
                }
              },
              callbackErr: function callbackErr() {
                callbackAuthFailed && callbackAuthFailed();
              },
              apiUrl: API_URL
            });
          }
        };

        return ConnectNetwork;
      }();

      var connectNetwork = exports('default', new ConnectNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CountDown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e7558f3NxpPO66Q/lR3NXnP", "CountDown", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CountDown = exports('CountDown', (_dec = ccclass('CountDown'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CountDown, _Component);

        function CountDown() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "textNumber", _descriptor, _assertThisInitialized(_this));

          _this.tweenCount = null;
          _this.count = 0;
          return _this;
        }

        var _proto = CountDown.prototype;

        _proto.onLoad = function onLoad() {
          // globalThis.countDown = this;
          this.node.on("SHOW", this.show, this);
          this.node.on("START_COUNT", this.startCountDown, this);
          this.node.on("STOP_COUNT", this.stopCountDown, this);
          this.node.on("HIDE", this.hide, this);
        };

        _proto.show = function show(time) {
          this.node.active = true;
          this.textNumber.string = "" + time;
        };

        _proto.startCountDown = function startCountDown(time, callback) {
          var _this2 = this;

          if (time === void 0) {
            time = 10;
          }

          if (time < 1) throw new Error("Can not count down less than 1s");
          this.node.active = true;
          this.count = Math.floor(time);
          this.textNumber.string = "" + this.count;
          this.tweenCount && this.tweenCount.stop();
          this.tweenCount = tween(this.node).delay(1).call(function () {
            _this2.count--;
            _this2.textNumber.string = "" + _this2.count;
          }).union().repeat(this.count).call(function () {
            callback && callback();
            _this2.tweenCount = null;
          }).start();
        };

        _proto.stopCountDown = function stopCountDown() {
          this.tweenCount && this.tweenCount.stop();
          this.tweenCount = null;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        return CountDown;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "textNumber", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomCanvasSize.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './CanvasScaleByOrientation.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, view, ResolutionPolicy, sys, Component, loadConfigAsync, gameCommonUtils, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "765a98ou0RK46VyyIsLn7md", "CustomCanvasSize", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomCanvasSize = exports('CustomCanvasSize', (_dec = ccclass('CustomCanvasSize'), _dec2 = property(CCInteger), _dec3 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CustomCanvasSize, _Component);

        function CustomCanvasSize() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "customDSWidth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "customDSHeight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isPortrait", _descriptor3, _assertThisInitialized(_this));

          _this._defaultDesignResolution = {};
          _this._defaultResolutionPolicy = null;
          _this._thisOnResized = void 0;
          _this._canvasScaleComp = null;
          return _this;
        }

        var _proto = CustomCanvasSize.prototype;

        _proto.onLoad = function onLoad() {
          this._canvasScaleComp = this.node.scene.getComponentInChildren(CanvasScaleByOrientation);
          this.updateCustomScreen();
        };

        _proto.updateCustomScreen = function updateCustomScreen() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              IS_FINISHED_REMOTE = _loadConfigAsync$getC.IS_FINISHED_REMOTE;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this2.updateCustomScreen();
            }, 100);
            return;
          }

          if (!LOGIN_IFRAME) {
            this.updateCustomCanvasSize();
            this.updateWindowOrientation();
            this.scaleCanvasByOrientation(0.1);
          }
        };

        _proto.updateCustomCanvasSize = function updateCustomCanvasSize() {
          var resolutionSize = view.getDesignResolutionSize();
          this._defaultDesignResolution.width = resolutionSize.width;
          this._defaultDesignResolution.height = resolutionSize.height;
          this._defaultResolutionPolicy = view.getResolutionPolicy();

          var _currentResolutionPolicy = this.isPortrait ? ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.FIXED_WIDTH;

          view.setDesignResolutionSize(this.customDSWidth, this.customDSHeight, _currentResolutionPolicy);
        };

        _proto.updateWindowOrientation = function updateWindowOrientation() {
          if (!sys.isNative && window && this.isMobile()) {
            var event = new CustomEvent('orientationchange', {
              detail: {
                type: "manualCall"
              }
            });
            window.dispatchEvent(event);
          }
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation(delay) {
          var _this3 = this;

          this.scheduleOnce(function () {
            if (_this3._canvasScaleComp) {
              _this3._canvasScaleComp.scaleCanvasByOrientation();
            }
          }, delay);
        };

        _proto.isMobile = function isMobile() {
          var isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i) != null;
          return isMobile;
        };

        _proto.onDestroy = function onDestroy() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

          if (!LOGIN_IFRAME) {
            var gameCanvasSize = gameCommonUtils.gameCanvasSize;

            if (gameCanvasSize && gameCanvasSize.width && gameCanvasSize.height) {
              var width = gameCanvasSize.width,
                  height = gameCanvasSize.height,
                  resolutionPolicy = gameCanvasSize.resolutionPolicy;
              view.setDesignResolutionSize(width, height, resolutionPolicy ? resolutionPolicy : this._defaultResolutionPolicy);
            } else {
              var _this$_defaultDesignR = this._defaultDesignResolution,
                  _width = _this$_defaultDesignR.width,
                  _height = _this$_defaultDesignR.height;
              view.setDesignResolutionSize(_width, _height, this._defaultResolutionPolicy);
            }

            this.updateWindowOrientation();
          }
        };

        return CustomCanvasSize;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomEnum.ts", ['cc'], function (exports) {
  var cclegacy, Enum;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
    }],
    execute: function () {
      cclegacy._RF.push({}, "98561X/zvpHDb4kZud08kR7", "CustomEnum", undefined);

      var PaylineType = exports('PaylineType', /*#__PURE__*/function (PaylineType) {
        PaylineType[PaylineType["Traditional"] = 0] = "Traditional";
        PaylineType[PaylineType["AllWaysToWin"] = 1] = "AllWaysToWin";
        PaylineType[PaylineType["Others"] = 9] = "Others";
        return PaylineType;
      }({}));
      Enum(PaylineType);
      var SlotGameMode = exports('SlotGameMode', /*#__PURE__*/function (SlotGameMode) {
        SlotGameMode[SlotGameMode["NormalGame"] = 0] = "NormalGame";
        SlotGameMode[SlotGameMode["FreeGame"] = 1] = "FreeGame";
        SlotGameMode[SlotGameMode["BonusGame"] = 2] = "BonusGame";
        SlotGameMode[SlotGameMode["TopUpGame"] = 3] = "TopUpGame";
        SlotGameMode[SlotGameMode["JackpotGame"] = 4] = "JackpotGame";
        SlotGameMode[SlotGameMode["GambleGame"] = 5] = "GambleGame";
        SlotGameMode[SlotGameMode["RespinGame"] = 6] = "RespinGame";
        SlotGameMode[SlotGameMode["Others"] = 9] = "Others";
        return SlotGameMode;
      }({}));
      Enum(SlotGameMode);
      var StateGameMode = exports('StateGameMode', /*#__PURE__*/function (StateGameMode) {
        StateGameMode[StateGameMode["NormalGame"] = 1] = "NormalGame";
        StateGameMode[StateGameMode["FreeGame"] = 2] = "FreeGame";
        StateGameMode[StateGameMode["FreespinOption"] = 3] = "FreespinOption";
        StateGameMode[StateGameMode["BonusGame"] = 4] = "BonusGame";
        StateGameMode[StateGameMode["RespinGame"] = 5] = "RespinGame";
        StateGameMode[StateGameMode["Others"] = 9] = "Others";
        return StateGameMode;
      }({}));
      Enum(StateGameMode);
      var SlotSceneType = exports('SlotSceneType', /*#__PURE__*/function (SlotSceneType) {
        SlotSceneType[SlotSceneType["JackpotWin"] = 0] = "JackpotWin";
        SlotSceneType[SlotSceneType["BigWin"] = 1] = "BigWin";
        SlotSceneType[SlotSceneType["FreespinOption"] = 2] = "FreespinOption";
        SlotSceneType[SlotSceneType["Setting"] = 3] = "Setting";
        SlotSceneType[SlotSceneType["JackpotHistory"] = 4] = "JackpotHistory";
        SlotSceneType[SlotSceneType["BetHistory"] = 5] = "BetHistory";
        SlotSceneType[SlotSceneType["GameInfo"] = 6] = "GameInfo";
        SlotSceneType[SlotSceneType["TotalWinPanel"] = 7] = "TotalWinPanel";
        SlotSceneType[SlotSceneType["FreeGameOption"] = 8] = "FreeGameOption";
        SlotSceneType[SlotSceneType["IntroBonusGame"] = 9] = "IntroBonusGame";
        SlotSceneType[SlotSceneType["IntroFreeGame"] = 10] = "IntroFreeGame";
        SlotSceneType[SlotSceneType["IntroNormalGame"] = 11] = "IntroNormalGame";
        SlotSceneType[SlotSceneType["ExtraBetPopup"] = 12] = "ExtraBetPopup";
        SlotSceneType[SlotSceneType["IntroJackpotGame"] = 13] = "IntroJackpotGame";
        SlotSceneType[SlotSceneType["Loading"] = 14] = "Loading";
        SlotSceneType[SlotSceneType["BetLinePanel"] = 15] = "BetLinePanel";
        SlotSceneType[SlotSceneType["TotalWinBonus"] = 16] = "TotalWinBonus";
        SlotSceneType[SlotSceneType["IntroFreeSpinOption"] = 17] = "IntroFreeSpinOption";
        SlotSceneType[SlotSceneType["GameInfoPayable"] = 18] = "GameInfoPayable";
        SlotSceneType[SlotSceneType["IntroFreeResume"] = 19] = "IntroFreeResume";
        SlotSceneType[SlotSceneType["Other"] = 99] = "Other";
        return SlotSceneType;
      }({}));
      Enum(SlotSceneType);
      var DistanceType = exports('DistanceType', /*#__PURE__*/function (DistanceType) {
        DistanceType[DistanceType["Near"] = 0] = "Near";
        DistanceType[DistanceType["Middle"] = 1] = "Middle";
        DistanceType[DistanceType["Far"] = 2] = "Far";
        DistanceType[DistanceType["VeryFar"] = 3] = "VeryFar";
        return DistanceType;
      }({}));
      Enum(DistanceType);
      var IndicatorAngel = exports('IndicatorAngel', /*#__PURE__*/function (IndicatorAngel) {
        IndicatorAngel[IndicatorAngel["top"] = 180] = "top";
        IndicatorAngel[IndicatorAngel["left"] = -90] = "left";
        IndicatorAngel[IndicatorAngel["right"] = 90] = "right";
        return IndicatorAngel;
      }({}));
      Enum(IndicatorAngel);
      var TutorialCommandType = exports('TutorialCommandType', /*#__PURE__*/function (TutorialCommandType) {
        TutorialCommandType[TutorialCommandType["EnableButton"] = 0] = "EnableButton";
        TutorialCommandType[TutorialCommandType["DisableButton"] = 1] = "DisableButton";
        TutorialCommandType[TutorialCommandType["HighlightObject"] = 2] = "HighlightObject";
        TutorialCommandType[TutorialCommandType["RevertHighlightObject"] = 3] = "RevertHighlightObject";
        TutorialCommandType[TutorialCommandType["SetPosition"] = 4] = "SetPosition";
        TutorialCommandType[TutorialCommandType["SetRotation"] = 5] = "SetRotation";
        TutorialCommandType[TutorialCommandType["SetScale"] = 6] = "SetScale";
        TutorialCommandType[TutorialCommandType["SetContentSize"] = 7] = "SetContentSize";
        TutorialCommandType[TutorialCommandType["SetOpacity"] = 8] = "SetOpacity";
        TutorialCommandType[TutorialCommandType["ShowObject"] = 9] = "ShowObject";
        TutorialCommandType[TutorialCommandType["HideObject"] = 10] = "HideObject";
        TutorialCommandType[TutorialCommandType["AddFlag"] = 11] = "AddFlag";
        TutorialCommandType[TutorialCommandType["RemoveFlag"] = 12] = "RemoveFlag";
        TutorialCommandType[TutorialCommandType["BlockTouch"] = 14] = "BlockTouch";
        TutorialCommandType[TutorialCommandType["UnBlockTouch"] = 15] = "UnBlockTouch";
        TutorialCommandType[TutorialCommandType["WaitForTrigger"] = 16] = "WaitForTrigger";
        TutorialCommandType[TutorialCommandType["EditDialog"] = 17] = "EditDialog";
        TutorialCommandType[TutorialCommandType["MoveTo"] = 18] = "MoveTo";
        TutorialCommandType[TutorialCommandType["MoveFromTo"] = 19] = "MoveFromTo";
        TutorialCommandType[TutorialCommandType["HighlightSymbol"] = 20] = "HighlightSymbol";
        TutorialCommandType[TutorialCommandType["RevertAllHighlightObject"] = 21] = "RevertAllHighlightObject";
        TutorialCommandType[TutorialCommandType["ResumeCurrentScript"] = 22] = "ResumeCurrentScript";
        TutorialCommandType[TutorialCommandType["HighlightObjectByName"] = 23] = "HighlightObjectByName";
        TutorialCommandType[TutorialCommandType["PauseAction"] = 24] = "PauseAction";
        TutorialCommandType[TutorialCommandType["ResumeActions"] = 25] = "ResumeActions";
        TutorialCommandType[TutorialCommandType["SetSiblingIndex"] = 26] = "SetSiblingIndex";
        TutorialCommandType[TutorialCommandType["Custom"] = 99] = "Custom";
        return TutorialCommandType;
      }({}));
      Enum(TutorialCommandType);
      var TutorialTriggerType = exports('TutorialTriggerType', /*#__PURE__*/function (TutorialTriggerType) {
        TutorialTriggerType[TutorialTriggerType["SpinClicked"] = 0] = "SpinClicked";
        TutorialTriggerType[TutorialTriggerType["ResetSession"] = 1] = "ResetSession";
        TutorialTriggerType[TutorialTriggerType["TutorialClick"] = 2] = "TutorialClick";
        TutorialTriggerType[TutorialTriggerType["TurboClick"] = 3] = "TurboClick";
        TutorialTriggerType[TutorialTriggerType["IncreaseBet"] = 4] = "IncreaseBet";
        TutorialTriggerType[TutorialTriggerType["FinishBonusPayline"] = 5] = "FinishBonusPayline";
        TutorialTriggerType[TutorialTriggerType["FinishScatterPayline"] = 6] = "FinishScatterPayline";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGame"] = 7] = "EnterFreeGame";
        TutorialTriggerType[TutorialTriggerType["EnterBonusGame"] = 8] = "EnterBonusGame";
        TutorialTriggerType[TutorialTriggerType["EnterTopupGame"] = 9] = "EnterTopupGame";
        TutorialTriggerType[TutorialTriggerType["ResumeNormalGame"] = 10] = "ResumeNormalGame";
        TutorialTriggerType[TutorialTriggerType["AutoSpinClicked"] = 11] = "AutoSpinClicked";
        TutorialTriggerType[TutorialTriggerType["SpinStopped"] = 12] = "SpinStopped";
        TutorialTriggerType[TutorialTriggerType["FinishJackpotPayline"] = 14] = "FinishJackpotPayline";
        TutorialTriggerType[TutorialTriggerType["SelectGoldenSymbol"] = 15] = "SelectGoldenSymbol";
        TutorialTriggerType[TutorialTriggerType["IncreaseExtraBet"] = 16] = "IncreaseExtraBet";
        TutorialTriggerType[TutorialTriggerType["AnyAction"] = 17] = "AnyAction";
        TutorialTriggerType[TutorialTriggerType["FreeGameOptionClick"] = 18] = "FreeGameOptionClick";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGameOption"] = 19] = "EnterFreeGameOption";
        TutorialTriggerType[TutorialTriggerType["OnCutsceneClose"] = 20] = "OnCutsceneClose";
        TutorialTriggerType[TutorialTriggerType["AutoSpinPanelShow"] = 21] = "AutoSpinPanelShow";
        TutorialTriggerType[TutorialTriggerType["PauseAction"] = 22] = "PauseAction";
        TutorialTriggerType[TutorialTriggerType["ResumeAction"] = 23] = "ResumeAction";
        TutorialTriggerType[TutorialTriggerType["ExitFreeGame"] = 24] = "ExitFreeGame";
        TutorialTriggerType[TutorialTriggerType["ExitBonusGame"] = 25] = "ExitBonusGame";
        TutorialTriggerType[TutorialTriggerType["ExitTopUpGame"] = 26] = "ExitTopUpGame";
        TutorialTriggerType[TutorialTriggerType["OpenWildPanel"] = 27] = "OpenWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWild"] = 28] = "SelectWild";
        TutorialTriggerType[TutorialTriggerType["CloseWildPanel"] = 29] = "CloseWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWIldClosed"] = 30] = "SelectWIldClosed";
        TutorialTriggerType[TutorialTriggerType["OpenBetLinePanel"] = 31] = "OpenBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["BetLineAllClick"] = 32] = "BetLineAllClick";
        TutorialTriggerType[TutorialTriggerType["BetLineEventClick"] = 33] = "BetLineEventClick";
        TutorialTriggerType[TutorialTriggerType["CloseBetLinePanel"] = 34] = "CloseBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["ShowPayline"] = 35] = "ShowPayline";
        TutorialTriggerType[TutorialTriggerType["EnterRespinGame"] = 36] = "EnterRespinGame";
        TutorialTriggerType[TutorialTriggerType["BetSelectionPanelShow"] = 37] = "BetSelectionPanelShow";
        TutorialTriggerType[TutorialTriggerType["ConfirmBet"] = 38] = "ConfirmBet";
        TutorialTriggerType[TutorialTriggerType["ButtonClick"] = 39] = "ButtonClick";
        TutorialTriggerType[TutorialTriggerType["OnJackpotCutsceneClose"] = 40] = "OnJackpotCutsceneClose";
        TutorialTriggerType[TutorialTriggerType["Other"] = 99] = "Other";
        TutorialTriggerType[TutorialTriggerType["None"] = 999] = "None";
        return TutorialTriggerType;
      }({}));
      Enum(TutorialTriggerType);
      var PerformanceLevel = exports('PerformanceLevel', /*#__PURE__*/function (PerformanceLevel) {
        PerformanceLevel[PerformanceLevel["High"] = 2] = "High";
        PerformanceLevel[PerformanceLevel["Medium"] = 1] = "Medium";
        PerformanceLevel[PerformanceLevel["Low"] = 0] = "Low";
        return PerformanceLevel;
      }({})); //for minimized screen

      Enum(PerformanceLevel);
      var WinEffectLevel = exports('WinEffectLevel', /*#__PURE__*/function (WinEffectLevel) {
        WinEffectLevel[WinEffectLevel["BIG"] = 0] = "BIG";
        WinEffectLevel[WinEffectLevel["MEGA"] = 1] = "MEGA";
        WinEffectLevel[WinEffectLevel["SUPER"] = 2] = "SUPER";
        return WinEffectLevel;
      }({}));
      Enum(WinEffectLevel);
      var WalletType = exports('WalletType', /*#__PURE__*/function (WalletType) {
        WalletType[WalletType["NORMAL"] = 1] = "NORMAL";
        WalletType[WalletType["TRIAL"] = 2] = "TRIAL";
        WalletType[WalletType["PROMOTE"] = 4] = "PROMOTE";
        return WalletType;
      }({}));
      Enum(WalletType); //

      var SLOT_SCREEN_MODE = exports('SLOT_SCREEN_MODE', /*#__PURE__*/function (SLOT_SCREEN_MODE) {
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SINGLE"] = 0] = "SINGLE";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["MULTI"] = 1] = "MULTI";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SELECTION"] = 2] = "SELECTION";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["POPUP_CONFIRM"] = 3] = "POPUP_CONFIRM";
        return SLOT_SCREEN_MODE;
      }({}));
      var EVENT_STATE = exports('EVENT_STATE', /*#__PURE__*/function (EVENT_STATE) {
        EVENT_STATE[EVENT_STATE["ACTIVE"] = 0] = "ACTIVE";
        EVENT_STATE[EVENT_STATE["INACTIVE"] = 1] = "INACTIVE";
        EVENT_STATE[EVENT_STATE["EXPIRED"] = 2] = "EXPIRED";
        EVENT_STATE[EVENT_STATE["FINISHED"] = 3] = "FINISHED";
        EVENT_STATE[EVENT_STATE["INVALID"] = 4] = "INVALID";
        return EVENT_STATE;
      }({}));
      var TOP_PLAYER_DISPLAY = exports('TOP_PLAYER_DISPLAY', /*#__PURE__*/function (TOP_PLAYER_DISPLAY) {
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["UNBENT"] = 0] = "UNBENT";
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
        return TOP_PLAYER_DISPLAY;
      }({}));
      Enum(TOP_PLAYER_DISPLAY);
      var QUEST_DISPLAY = exports('QUEST_DISPLAY', /*#__PURE__*/function (QUEST_DISPLAY) {
        QUEST_DISPLAY[QUEST_DISPLAY["UNBENT"] = 0] = "UNBENT";
        QUEST_DISPLAY[QUEST_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
        return QUEST_DISPLAY;
      }({}));
      Enum(QUEST_DISPLAY);
      var NotifyWinEffect = exports('NotifyWinEffect', /*#__PURE__*/function (NotifyWinEffect) {
        NotifyWinEffect[NotifyWinEffect["BigWin"] = 1] = "BigWin";
        NotifyWinEffect[NotifyWinEffect["JackpotWin"] = 2] = "JackpotWin";
        return NotifyWinEffect;
      }({}));
      Enum(NotifyWinEffect); //

      var DialogTitle = exports('DialogTitle', /*#__PURE__*/function (DialogTitle) {
        DialogTitle[DialogTitle["ExitGame"] = 0] = "ExitGame";
        DialogTitle[DialogTitle["RemoveGame"] = 1] = "RemoveGame";
        DialogTitle[DialogTitle["ChangeGame"] = 2] = "ChangeGame";
        DialogTitle[DialogTitle["Announcement"] = 3] = "Announcement";
        return DialogTitle;
      }({}));
      Enum(DialogTitle);
      var DialogContent = exports('DialogContent', /*#__PURE__*/function (DialogContent) {
        DialogContent["ExitGame"] = "B\u1EA1n \u0111ang ch\u01A1i {n} game slot, b\u1EA1n\nmu\u1ED1n tho\xE1t t\u1EA5t c\u1EA3?";
        DialogContent["RemoveGame"] = "B\u1EA1n c\xF3 ch\u1EAFc mu\u1ED1n tho\xE1t game?";
        DialogContent["ChangeGame"] = "GAME \u0110ANG M\u1EDE S\u1EBC B\u1ECA T\u1EAET N\u1EBEU \u0110\u1ED4I\nGAME KH\xC1C";
        return DialogContent;
      }({}));
      Enum(DialogContent);
      var HorizontalExpandDirection = exports('HorizontalExpandDirection', /*#__PURE__*/function (HorizontalExpandDirection) {
        HorizontalExpandDirection[HorizontalExpandDirection["None"] = -20] = "None";
        HorizontalExpandDirection[HorizontalExpandDirection["LeftToRight"] = 20] = "LeftToRight";
        HorizontalExpandDirection[HorizontalExpandDirection["RightToLeft"] = 21] = "RightToLeft";
        HorizontalExpandDirection[HorizontalExpandDirection["FromMiddle"] = 22] = "FromMiddle";
        return HorizontalExpandDirection;
      }({}));
      Enum(HorizontalExpandDirection);
      var VerticalExpandDirection = exports('VerticalExpandDirection', /*#__PURE__*/function (VerticalExpandDirection) {
        VerticalExpandDirection[VerticalExpandDirection["None"] = -10] = "None";
        VerticalExpandDirection[VerticalExpandDirection["BottomToTop"] = 10] = "BottomToTop";
        VerticalExpandDirection[VerticalExpandDirection["TopToBottom"] = 11] = "TopToBottom";
        VerticalExpandDirection[VerticalExpandDirection["FromMiddle"] = 12] = "FromMiddle";
        return VerticalExpandDirection;
      }({}));
      Enum(VerticalExpandDirection);
      var PROMOTION_ERROR = exports('PROMOTION_ERROR', /*#__PURE__*/function (PROMOTION_ERROR) {
        PROMOTION_ERROR["WRONG_BET"] = "0016";
        PROMOTION_ERROR["EXPIRED"] = "0042";
        PROMOTION_ERROR["RESET"] = "0043";
        PROMOTION_ERROR["NEW"] = "0044";
        return PROMOTION_ERROR;
      }({}));
      Enum(PROMOTION_ERROR);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomEventNames.ts", ['cc', './EventNames.ts'], function (exports) {
  var cclegacy, EventNames;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed83dLTCwJAELr8FF4gQAec", "CustomEventNames", undefined);

      var customEvents = {
        // test
        TEST_testEvent: "TEST_testEvent"
      };
      var defaultEvent = Object.assign({}, EventNames);
      var gameEvent = exports('default', Object.assign(defaultEvent, customEvents));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomPageViewIndicator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, SpriteComponent, PageViewIndicator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      SpriteComponent = module.SpriteComponent;
      PageViewIndicator = module.PageViewIndicator;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "db9c0YejNNPNITBLdrMDU11", "CustomPageViewIndicator", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomPageViewIndicator = exports('CustomPageViewIndicator', (_dec = ccclass('CustomPageViewIndicator'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_PageViewIndicator) {
        _inheritsLoose(CustomPageViewIndicator, _PageViewIndicator);

        function CustomPageViewIndicator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PageViewIndicator.call.apply(_PageViewIndicator, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "unSelectedSpriteFrame", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CustomPageViewIndicator.prototype;

        _proto._changedState = function _changedState() {
          var indicators = this._indicators;
          if (indicators.length === 0) return;
          var idx = this._pageView._curPageIdx;
          if (idx >= indicators.length) return;

          for (var i = 0; i < indicators.length; ++i) {
            var node = indicators[i];

            if (node) {
              var sprite = node.getComponent(SpriteComponent);

              if (sprite) {
                sprite.spriteFrame = this.unSelectedSpriteFrame;
              }
            }
          }

          this.setSpriteFrame({
            indicators: indicators,
            idx: idx
          });
        };

        _proto.setSpriteFrame = function setSpriteFrame(_ref) {
          var indicators = _ref.indicators,
              idx = _ref.idx;
          var node = indicators[idx];

          if (node) {
            var sprite = node.getComponent(SpriteComponent);

            if (sprite) {
              sprite.spriteFrame = this.spriteFrame;
            }
          }
        };

        return CustomPageViewIndicator;
      }(PageViewIndicator), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "unSelectedSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Toggle, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Toggle = module.Toggle;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "b468fzJEV9LUoupVX1bfhf5", "CustomToggle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomToggle = exports('CustomToggle', (_dec = ccclass('CustomToggle'), _dec2 = property({
        type: SpriteFrame
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: SpriteFrame
      }), _dec7 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Toggle) {
        _inheritsLoose(CustomToggle, _Toggle);

        function CustomToggle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Toggle.call.apply(_Toggle, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "checkedNormalSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "checkedPressSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "checkedDisableSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedNormalSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedPressSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unCheckedDisableSprite", _descriptor6, _assertThisInitialized(_this));

          _this.defaultTarget = null;
          return _this;
        }

        var _proto = CustomToggle.prototype;

        _proto._internalToggle = function _internalToggle() {
          _Toggle.prototype._internalToggle.call(this);

          this.normalSprite = this.isChecked ? this.checkedNormalSprite : this.unCheckedNormalSprite;
          this.pressedSprite = this.isChecked ? this.checkedPressSprite : this.unCheckedPressSprite;
          this.disabledSprite = this.isChecked ? this.checkedDisableSprite : this.unCheckedDisableSprite;
          this.defaultTarget = this.node.children[0];
          this.target = this.isChecked ? this.checkMark.node : this.defaultTarget;

          if (this.defaultTarget) {
            setOpacity(this.defaultTarget, this.isChecked ? 0 : 255);
          }

          if (this.checkMark) {
            setOpacity(this.checkMark.node, this.isChecked ? 255 : 0);
          }
        };

        return CustomToggle;
      }(Toggle), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkedNormalSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "checkedPressSprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "checkedDisableSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedNormalSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedPressSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "unCheckedDisableSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomType.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, cclegacy, _decorator, Prefab, Node, sp, Label, SpriteFrame, JsonAsset, Event, WalletType, SlotSceneType, HorizontalExpandDirection, VerticalExpandDirection;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      sp = module.sp;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      JsonAsset = module.JsonAsset;
      Event = module.Event;
    }, function (module) {
      WalletType = module.WalletType;
      SlotSceneType = module.SlotSceneType;
      HorizontalExpandDirection = module.HorizontalExpandDirection;
      VerticalExpandDirection = module.VerticalExpandDirection;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _dec12, _dec13, _class7, _class8, _descriptor10, _descriptor11, _dec14, _dec15, _dec16, _class10, _class11, _descriptor12, _descriptor13, _dec17, _dec18, _class13, _class14, _descriptor14, _descriptor15, _dec19, _dec20, _class16, _class17, _descriptor16, _descriptor17, _dec21, _dec22, _class19, _class20, _descriptor18, _descriptor19, _dec23, _dec24, _class22, _class23, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _dec25, _dec26, _dec27, _class25, _class26, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _dec28, _dec29, _class28, _class29, _descriptor30, _descriptor31, _dec30, _dec31, _dec32, _dec33, _class31, _class32, _descriptor32, _descriptor33, _descriptor34, _descriptor35;

      cclegacy._RF.push({}, "1c110+n0e5MbLjlzZh6IZ/D", "CustomType", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolPrefab = exports('PoolPrefab', (_dec = ccclass('PoolPrefab'), _dec2 = property({
        displayName: 'Prefab Name',
        visible: true
      }), _dec3 = property({
        type: Prefab,
        displayName: 'Prefab',
        visible: true
      }), _dec4 = property({
        displayName: 'Initial Count',
        visible: true
      }), _dec(_class = (_class2 = function PoolPrefab() {
        _initializerDefineProperty(this, "prefabName", _descriptor, this);

        _initializerDefineProperty(this, "prefab", _descriptor2, this);

        _initializerDefineProperty(this, "initialCount", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "initialCount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));
      var RotatingObject = exports('RotatingObject', (_dec5 = ccclass('RotatingObject'), _dec6 = property({
        type: Node,
        displayName: 'Node to rotate',
        visible: true
      }), _dec7 = property({
        displayName: 'Rotating Speed'
      }), _dec8 = property({
        displayName: 'Rotating Speed Variance'
      }), _dec9 = property({
        displayName: 'Clockwise = 1, Counter Clockwise = -1'
      }), _dec10 = property({
        displayName: 'Min Angle'
      }), _dec11 = property({
        displayName: 'Max Angle'
      }), _dec5(_class4 = (_class5 = function RotatingObject() {
        _initializerDefineProperty(this, "node", _descriptor4, this);

        _initializerDefineProperty(this, "speed", _descriptor5, this);

        _initializerDefineProperty(this, "speedVar", _descriptor6, this);

        _initializerDefineProperty(this, "clockwise", _descriptor7, this);

        _initializerDefineProperty(this, "minAngle", _descriptor8, this);

        _initializerDefineProperty(this, "maxAngle", _descriptor9, this);
      }, (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "node", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speedVar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "clockwise", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "minAngle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "maxAngle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class5)) || _class4));
      var SlotCustomDataType = exports('SlotCustomDataType', (_dec12 = ccclass('SlotCustomDataType'), _dec13 = property({
        type: sp.SkeletonData
      }), _dec12(_class7 = (_class8 = function SlotCustomDataType() {
        _initializerDefineProperty(this, "spineName", _descriptor10, this);

        _initializerDefineProperty(this, "spineData", _descriptor11, this);
      }, (_descriptor10 = _applyDecoratedDescriptor(_class8.prototype, "spineName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class8.prototype, "spineData", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class8)) || _class7));
      var WalletString = exports('WalletString', (_dec14 = ccclass('WalletString'), _dec15 = property({
        type: WalletType
      }), _dec16 = property({
        type: Label
      }), _dec14(_class10 = (_class11 = function WalletString() {
        _initializerDefineProperty(this, "walletType", _descriptor12, this);

        _initializerDefineProperty(this, "displayString", _descriptor13, this);
      }, (_descriptor12 = _applyDecoratedDescriptor(_class11.prototype, "walletType", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return WalletType.NORMAL;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class11.prototype, "displayString", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class11)) || _class10));
      var JackpotType = exports('JackpotType', (_dec17 = ccclass('JackpotType'), _dec18 = property({
        type: SpriteFrame
      }), _dec17(_class13 = (_class14 = function JackpotType() {
        _initializerDefineProperty(this, "jpName", _descriptor14, this);

        _initializerDefineProperty(this, "image", _descriptor15, this);
      }, (_descriptor14 = _applyDecoratedDescriptor(_class14.prototype, "jpName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class14.prototype, "image", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class14)) || _class13));
      var JackpotObject = exports('JackpotObject', (_dec19 = ccclass("JackpotObject"), _dec20 = property({
        type: Node
      }), _dec19(_class16 = (_class17 = function JackpotObject() {
        _initializerDefineProperty(this, "jpType", _descriptor16, this);

        _initializerDefineProperty(this, "jpNode", _descriptor17, this);
      }, (_descriptor16 = _applyDecoratedDescriptor(_class17.prototype, "jpType", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class17.prototype, "jpNode", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class17)) || _class16));
      var ScenePrefab = exports('ScenePrefab', (_dec21 = ccclass("ScenePrefab"), _dec22 = property({
        type: SlotSceneType
      }), _dec21(_class19 = (_class20 = function ScenePrefab() {
        _initializerDefineProperty(this, "sceneType", _descriptor18, this);

        _initializerDefineProperty(this, "prefabPath", _descriptor19, this);
      }, (_descriptor18 = _applyDecoratedDescriptor(_class20.prototype, "sceneType", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotSceneType.Other;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class20.prototype, "prefabPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class20)) || _class19));
      var CustomEvent = exports('CustomEvent', /*#__PURE__*/function (_Event) {
        _inheritsLoose(CustomEvent, _Event);

        function CustomEvent(name, bubbles, details) {
          var _this;

          _this = _Event.call(this, name, bubbles) || this;
          _this.details = null;
          _this.details = details;
          return _this;
        }

        return CustomEvent;
      }(Event));
      var AssetPathConfig = exports('AssetPathConfig', (_dec23 = ccclass("AssetPathConfig"), _dec24 = property(Node), _dec23(_class22 = (_class23 = function AssetPathConfig() {
        _initializerDefineProperty(this, "id", _descriptor20, this);

        _initializerDefineProperty(this, "path", _descriptor21, this);

        _initializerDefineProperty(this, "index", _descriptor22, this);

        _initializerDefineProperty(this, "parentNode", _descriptor23, this);

        _initializerDefineProperty(this, "lazyLoadOnWeb", _descriptor24, this);

        _initializerDefineProperty(this, "lazyLoadOnNative", _descriptor25, this);
      }, (_descriptor20 = _applyDecoratedDescriptor(_class23.prototype, "id", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class23.prototype, "path", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class23.prototype, "index", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class23.prototype, "parentNode", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class23.prototype, "lazyLoadOnWeb", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class23.prototype, "lazyLoadOnNative", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class23)) || _class22));
      var ExpandingConfig = exports('ExpandingConfig', (_dec25 = ccclass("ExpandingConfig"), _dec26 = property({
        type: HorizontalExpandDirection
      }), _dec27 = property({
        type: VerticalExpandDirection
      }), _dec25(_class25 = (_class26 = function ExpandingConfig() {
        /**
         * @en
         * Expand Width - Unit is number of collum.
         */
        _initializerDefineProperty(this, "expandWidth", _descriptor26, this);
        /**
         * @en
         * Expand Height - Unit is number of row.
         */


        _initializerDefineProperty(this, "expandHeight", _descriptor27, this);

        _initializerDefineProperty(this, "expandDirectionHorizontal", _descriptor28, this);

        _initializerDefineProperty(this, "expandDirectionVertical", _descriptor29, this);
      }, (_descriptor26 = _applyDecoratedDescriptor(_class26.prototype, "expandWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class26.prototype, "expandHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class26.prototype, "expandDirectionHorizontal", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return HorizontalExpandDirection.LeftToRight;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class26.prototype, "expandDirectionVertical", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return VerticalExpandDirection.BottomToTop;
        }
      })), _class26)) || _class25));
      var SpriteFrameSet = exports('SpriteFrameSet', (_dec28 = ccclass("SpriteFrameSet"), _dec29 = property({
        type: SpriteFrame
      }), _dec28(_class28 = (_class29 = function SpriteFrameSet() {
        _initializerDefineProperty(this, "path", _descriptor30, this);

        _initializerDefineProperty(this, "spriteFrame", _descriptor31, this);
      }, (_descriptor30 = _applyDecoratedDescriptor(_class29.prototype, "path", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class29.prototype, "spriteFrame", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class29)) || _class28));
      var TutorialDataConfig = exports('TutorialDataConfig', (_dec30 = ccclass("TutorialDataConfig"), _dec31 = property({
        type: JsonAsset
      }), _dec32 = property({
        type: JsonAsset
      }), _dec33 = property({
        type: JsonAsset
      }), _dec30(_class31 = (_class32 = function TutorialDataConfig() {
        _initializerDefineProperty(this, "currencyCode", _descriptor32, this);

        _initializerDefineProperty(this, "tutorialData", _descriptor33, this);

        _initializerDefineProperty(this, "tutorialSteps", _descriptor34, this);

        _initializerDefineProperty(this, "tutorialText", _descriptor35, this);
      }, (_descriptor32 = _applyDecoratedDescriptor(_class32.prototype, "currencyCode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class32.prototype, "tutorialData", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class32.prototype, "tutorialSteps", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class32.prototype, "tutorialText", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class32)) || _class31));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomTypeShare.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, cclegacy, _decorator, AudioClip, AudioSource, Event;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      Event = module.Event;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _dec4, _class4;

      cclegacy._RF.push({}, "a9b9bNRtfxJ4ZzdD4GzCwFi", "CustomTypeShare", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomAudioClip = exports('CustomAudioClip', (_dec = ccclass('CustomAudioClip'), _dec2 = property({
        type: AudioClip
      }), _dec3 = property({
        type: AudioSource,
        visible: false
      }), _dec(_class = (_class2 = function CustomAudioClip() {
        _initializerDefineProperty(this, "isMusic", _descriptor, this);

        _initializerDefineProperty(this, "isEffect", _descriptor2, this);

        _initializerDefineProperty(this, "destroyedOnSwitchMode", _descriptor3, this);

        _initializerDefineProperty(this, "soundId", _descriptor4, this);

        _initializerDefineProperty(this, "maxCount", _descriptor5, this);

        _initializerDefineProperty(this, "ignoreCheckMaxChannel", _descriptor6, this);

        _initializerDefineProperty(this, "audioFile", _descriptor7, this);

        _initializerDefineProperty(this, "audioSource", _descriptor8, this);

        this.audioSourcePool = [];
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isMusic", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isEffect", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "destroyedOnSwitchMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ignoreCheckMaxChannel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "audioFile", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "audioSource", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var CustomEvent = exports('CustomEvent', (_dec4 = ccclass('CustomEvent'), _dec4(_class4 = /*#__PURE__*/function (_Event) {
        _inheritsLoose(CustomEvent, _Event);

        function CustomEvent(name, bubbles, details) {
          var _this;

          _this = _Event.call(this, name, bubbles) || this;
          _this.details = null;
          _this.details = details;
          return _this;
        }

        return CustomEvent;
      }(Event)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BetData.ts', './SlotUtils.ts', './CustomEnum.ts', './QuestData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, BetData, convertSlotMatrix, convertPayLineAlways, convertPayLine, PerformanceLevel, WalletType, SlotGameMode, StateGameMode, QuestData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      BetData = module.default;
    }, function (module) {
      convertSlotMatrix = module.convertSlotMatrix;
      convertPayLineAlways = module.convertPayLineAlways;
      convertPayLine = module.convertPayLine;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
      WalletType = module.WalletType;
      SlotGameMode = module.SlotGameMode;
      StateGameMode = module.StateGameMode;
    }, function (module) {
      QuestData = module.QuestData;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ae662qMETdFSIuvnHv9fXxl", "DataStore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataStore = exports('DataStore', (_dec = ccclass('DataStore'), _dec2 = property({
        type: PerformanceLevel,
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DataStore, _Component);

        function DataStore() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.config = null;
          _this.wallets = [];
          _this.selectedWallet = WalletType.NORMAL;
          _this.walletHasUpdate = false;
          _this.betData = void 0;
          _this.playSession = {};
          _this.lastEvent = {};
          _this.lastNormalResult = {};
          _this.isAlways = false;
          _this.spinTimes = 0;
          _this.isAutoSpin = false;
          _this.isTrialMode = false;
          _this.isDisplayFullScreen = true;
          _this.isAdsMode = false;
          _this.modeTurbo = false;
          _this.gameSpeed = 0;
          _this.promotion = null;
          _this.currentGameMode = SlotGameMode.NormalGame;
          _this.extendData = {};
          _this.questData = new QuestData();
          _this.isAutoSpinNormal = false;
          _this.walletTypes = [];

          _initializerDefineProperty(_this, "_performanceLevel", _descriptor, _assertThisInitialized(_this));

          _this._pausedWallet = 0;
          _this._isDebug = true;
          return _this;
        }

        var _proto = DataStore.prototype;

        _proto.onLoad = function onLoad() {
          this._isDebug && (window['dataStore'] = this);
          this.config = this.node.config;
          this.node.dataStore = this;
          this.betData = new BetData(this.config); // default

          this.isAlways = this.config.PAY_LINE_ALLWAYS;
          this.wallets[WalletType.NORMAL] = 0;
          this.wallets[WalletType.TRIAL] = 0;
          this.wallets[WalletType.PROMOTE] = 0;
        }
        /**
         * @extend and @override this func 
         * if the game have the different way to calculate money
         * Don't need to extends new BetData. 
         */
        ;

        _proto.getTotalBet = function getTotalBet() {
          return this.betData.getTotalBet();
        }
        /**
         * @wallet
         */
        ;

        _proto.getWalletAfterSpin = function getWalletAfterSpin() {
          return this.getCurrentWallet() - this.getTotalBet();
        };

        _proto.setWalletTypes = function setWalletTypes(types) {
          this.walletTypes = types;
        };

        _proto.getWalletTypes = function getWalletTypes() {
          return this.walletTypes;
        };

        _proto.switchWallet = function switchWallet(wallet) {
          this.selectedWallet = wallet;
        };

        _proto.getCurrentWallet = function getCurrentWallet() {
          return this.wallets[this.selectedWallet];
        };

        _proto.setWallet = function setWallet(wallet, value) {
          if (this.wallets[wallet] != value) {
            this.wallets[wallet] = value;
            this.walletHasUpdate = true;
          }
        };

        _proto.getWallets = function getWallets() {
          return this.wallets;
        };

        _proto.getCurrentWalletType = function getCurrentWalletType() {
          return this.selectedWallet;
        };

        _proto.setCurrentWallet = function setCurrentWallet(value) {
          if (this.wallets[this.selectedWallet] != value) {
            this.wallets[this.selectedWallet] = value;
            this.walletHasUpdate = true;
          }
        } //save value only
        ;

        _proto.updateWallets = function updateWallets(_ref) {
          var amount = _ref.amount,
              pAmount = _ref.pAmount;

          if (this.wallets[WalletType.NORMAL] !== amount || this.wallets[WalletType.PROMOTE] !== pAmount) {
            this.wallets[WalletType.NORMAL] = amount;
            this.wallets[WalletType.PROMOTE] = pAmount;
            this.walletHasUpdate = true;
          }
        };

        _proto.syncWalletUI = function syncWalletUI(wallets) {
          if (!isNaN(wallets[WalletType.NORMAL]) && wallets[WalletType.NORMAL] !== this.wallets[WalletType.NORMAL] || !isNaN(wallets[WalletType.PROMOTE]) && wallets[WalletType.PROMOTE] !== this.wallets[WalletType.PROMOTE] || !isNaN(wallets[WalletType.TRIAL]) && wallets[WalletType.TRIAL] !== this.wallets[WalletType.TRIAL]) this.walletHasUpdate = true;else {
            this.walletHasUpdate = false;
          }
        };

        _proto.isPausingWallet = function isPausingWallet(type) {
          return (this._pausedWallet & type) == type;
        };

        _proto.pauseCurrentWallet = function pauseCurrentWallet() {
          if (!this.isPausingWallet(this.selectedWallet)) {
            this.pauseWallet(this.selectedWallet);
          }
        };

        _proto.resumeCurrentWallet = function resumeCurrentWallet() {
          if (this.isPausingWallet(this.selectedWallet)) {
            this.resumeWallet(this.selectedWallet);
          }
        };

        _proto.pauseWallet = function pauseWallet(type) {
          if (!this.isPausingWallet(type)) this._pausedWallet = this._pausedWallet + type;
        };

        _proto.resumeWallet = function resumeWallet(type) {
          if (this.isPausingWallet(type)) this._pausedWallet -= type;
        }
        /**
         * @process_data
         */
        ;

        _proto.formatData = function formatData(playSession) {
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var matrix = playSession.matrix,
              normalGameMatrix = playSession.normalGameMatrix,
              freeGameMatrix = playSession.freeGameMatrix,
              payLines = playSession.payLines,
              state = playSession.state,
              bonusGameMatrix = playSession.bonusGameMatrix,
              eventData = playSession.eventData,
              winAmountQuest = playSession.winAmountQuest,
              winAmountEvent = playSession.winAmountEvent,
              isTrialMode = playSession.isTrialMode;
          var tableFormat = NORMAL_TABLE_FORMAT;

          if (state == StateGameMode.FreeGame) {
            tableFormat = FREE_TABLE_FORMAT;
          }

          if (matrix) {
            playSession.matrix = this.convertMatrix(matrix, tableFormat);
          } else if (freeGameMatrix) {
            playSession.matrix = this.convertMatrix(freeGameMatrix, tableFormat);
          } else if (normalGameMatrix) {
            playSession.matrix = this.convertMatrix(normalGameMatrix, tableFormat);
          }

          if (playSession.payLines) {
            playSession.payLines = this.convertPayLine(payLines);
          }

          if (bonusGameMatrix) {
            playSession.bonusGameMatrix = this.formatBonusMatrix(bonusGameMatrix);
          }

          if (!isTrialMode) {
            if (eventData) {
              this.questData.updateQuestData(eventData);
            }

            if (winAmountQuest || winAmountEvent) {
              this.questData.setWinAmount(winAmountQuest, winAmountEvent);
            } else if (playSession.version == 1) {
              this.questData.resetWinAmount();
            }
          }

          this.playSession = playSession; //warn("%c run data-update ", "color: red", this.playSession);

          return playSession;
        };

        _proto.convertMatrix = function convertMatrix(matrix, tableFormat) {
          if (tableFormat === void 0) {
            tableFormat = null;
          }

          var NORMAL_TABLE_FORMAT = this.config.NORMAL_TABLE_FORMAT;
          return convertSlotMatrix(matrix, tableFormat ? tableFormat : NORMAL_TABLE_FORMAT);
        };

        _proto.convertPayLine = function convertPayLine$1(payLines) {
          if (this.isAlways) {
            return convertPayLineAlways(payLines);
          } else {
            return convertPayLine(payLines);
          }
        };

        _proto.formatBonusMatrix = function formatBonusMatrix(bonusGameMatrix) {
          return bonusGameMatrix.map(function (value) {
            return Number(value);
          });
        };

        _proto.setTurbo = function setTurbo(value) {
          this.modeTurbo = value;
        };

        _proto.setLowPerformance = function setLowPerformance() {
          this._performanceLevel = PerformanceLevel.Low;
        };

        _proto.setMediumPerformance = function setMediumPerformance() {
          this._performanceLevel = PerformanceLevel.Medium;
        };

        _proto.setHighPerformance = function setHighPerformance() {
          this._performanceLevel = PerformanceLevel.High;
        };

        _proto.getQuestData = function getQuestData() {
          return this.questData;
        };

        _createClass(DataStore, [{
          key: "performanceLevel",
          get: function get() {
            var performance = 'HIGH_PERFORMANCE_LV';

            switch (this._performanceLevel) {
              case PerformanceLevel.Medium:
                performance = 'MEDIUM_PERFORMANCE_LV';
                break;

              case PerformanceLevel.Low:
                performance = 'LOW_PERFORMANCE_LV';
                break;
            }

            return performance;
          }
        }]);

        return DataStore;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_performanceLevel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PerformanceLevel.High;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugViewRuntimeControl, _Component);

        function DebugViewRuntimeControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));

          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this.hideButtonLabel = void 0;
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }

        var _proto = DebugViewRuntimeControl.prototype;

        _proto.start = function start() {
          // get canvas resolution
          var canvas = this.node.parent.getComponent(Canvas);

          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }

          var uiTransform = this.node.parent.getComponent(UITransform);
          var halfScreenWidth = uiTransform.width * 0.5;
          var halfScreenHeight = uiTransform.height * 0.5;
          var x = -halfScreenWidth + halfScreenWidth * 0.1,
              y = halfScreenHeight - halfScreenHeight * 0.1;
          var width = 200,
              height = 20; // new nodes

          var miscNode = this.node.getChildByName('MiscMode');
          var buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          var titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles'; // title

          for (var i = 0; i < 2; i++) {
            var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;

            var _labelComponent = newLabel.getComponent(Label);

            _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            _labelComponent.color = Color.WHITE;
            _labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = _labelComponent;
          }

          y -= height; // single

          var currentRow = 0;

          for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
            if (_i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }

            var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            var textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[_i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[_i] = newNode;
          }

          x += width; // buttons

          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent; // misc

          y -= 40;

          for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
            var _newNode = instantiate(this.compositeModeToggle);

            _newNode.setPosition(x, y - height * _i2, 0.0);

            _newNode.setScale(0.5, 0.5, 0.5);

            _newNode.parent = miscNode;

            var _textComponent = _newNode.getComponentInChildren(RichText);

            _textComponent.string = this.strMisc[_i2];
            this.textComponentList[this.textComponentList.length] = _textComponent;
            this.textContentList[this.textContentList.length] = _textComponent.string;

            var toggleComponent = _newNode.getComponent(Toggle);

            toggleComponent.isChecked = _i2 ? true : false;

            _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);

            this.miscModeToggleList[_i2] = _newNode;
          } // composite


          y -= 150;

          for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
            var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;

            _newNode2.setPosition(x, y - height * _i3, 0.0);

            _newNode2.setScale(0.5, 0.5, 0.5);

            _newNode2.parent = this.compositeModeToggle.parent;

            var _textComponent2 = _newNode2.getComponentInChildren(RichText);

            _textComponent2.string = this.strComposite[_i3];
            this.textComponentList[this.textComponentList.length] = _textComponent2;
            this.textContentList[this.textContentList.length] = _textComponent2.string;

            _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);

            this.compositeModeToggleList[_i3] = _newNode2;
          }
        };

        _proto.isTextMatched = function isTextMatched(textUI, textDescription) {
          var tempText = new String(textUI);
          var findIndex = tempText.search('>');

          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        };

        _proto.toggleSingleMode = function toggleSingleMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        };

        _proto.toggleCompositeMode = function toggleCompositeMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        };

        _proto.toggleLightingWithAlbedo = function toggleLightingWithAlbedo(toggle) {
          var debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        };

        _proto.toggleCSMColoration = function toggleCSMColoration(toggle) {
          var debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        };

        _proto.enableAllCompositeMode = function enableAllCompositeMode(button) {
          var debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);

          for (var i = 0; i < this.compositeModeToggleList.length; i++) {
            var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);

            _toggleComponent.isChecked = true;
          }

          var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        };

        _proto.hideUI = function hideUI(button) {
          var titleNode = this.node.getChildByName('Titles');
          var activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        };

        _proto.changeTextColor = function changeTextColor(button) {
          this._currentColorIndex++;

          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }

          for (var i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }

          for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
            this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
          }
        };

        _proto.onLoad = function onLoad() {};

        _proto.update = function update(deltaTime) {};

        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DialogDisplayControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "94c3bCpKiVDY5syIybSol/3", "DialogDisplayControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DialogDisplayControl = exports('DialogDisplayControl', (_dec = ccclass('DialogDisplayControl'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DialogDisplayControl, _Component);

        function DialogDisplayControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scaleEaseType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "duration", _descriptor2, _assertThisInitialized(_this));

          _this._scaleTween = null;
          return _this;
        }

        var _proto = DialogDisplayControl.prototype;

        _proto.onEnable = function onEnable() {
          this.tweenScale();
        };

        _proto.onDisable = function onDisable() {
          if (this._scaleTween) this._scaleTween.stop();
          this.node.scale = new Vec3(0.001, 0.001, 0.001);
        };

        _proto.tweenScale = function tweenScale() {
          if (this._scaleTween) this._scaleTween.stop();
          this.node.scale = new Vec3(0.001, 0.001, 0.001);
          this._scaleTween = tween(this.node).to(this.duration, {
            scale: Vec3.ONE
          }, {
            easing: this.scaleEaseType
          });

          this._scaleTween.start();
        };

        return DialogDisplayControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scaleEaseType", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'backOut';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Director.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './globalNetwork.ts', './CustomEnum.ts', './UIManager.ts', './NetworkEnum.ts', './gameCommonUtils.ts', './loadConfigAsync.ts', './SlotSoundPlayer.ts', './PoolFactory.ts', './gameStateSlot.ts', './EventListenerManager.ts', './SpineSkeletonDatabase.ts', './EventNames.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, JsonAsset, Node, game, Game, macro, log, director, sys, setDisplayStats, error, Event, tween, MotionStreak, Component, globalNetwork, SlotGameMode, PROMOTION_ERROR, WalletType, UIManager, NetworkState, NetworkEvent, gameCommonUtils, loadConfigAsync, SlotSoundPlayer, PoolFactory, GameStateManager, EventListenerManager, SpineSkeletonDatabase, EventNames, formatWalletMoney, updateUtilConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Node = module.Node;
      game = module.game;
      Game = module.Game;
      macro = module.macro;
      log = module.log;
      director = module.director;
      sys = module.sys;
      setDisplayStats = module.setDisplayStats;
      error = module.error;
      Event = module.Event;
      tween = module.tween;
      MotionStreak = module.MotionStreak;
      Component = module.Component;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      PROMOTION_ERROR = module.PROMOTION_ERROR;
      WalletType = module.WalletType;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NetworkState = module.NetworkState;
      NetworkEvent = module.NetworkEvent;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SlotSoundPlayer = module.SlotSoundPlayer;
    }, function (module) {
      PoolFactory = module.PoolFactory;
    }, function (module) {
      GameStateManager = module.GameStateManager;
    }, function (module) {
      EventListenerManager = module.EventListenerManager;
    }, function (module) {
      SpineSkeletonDatabase = module.SpineSkeletonDatabase;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      updateUtilConfig = module.updateUtilConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "99d055Vmh5MfptzAh3MqZWv", "Director", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotText = null;
      var Director = exports('Director', (_dec = ccclass('Director'), _dec2 = property({
        type: PoolFactory,
        visible: true,
        tooltip: "An unique Pool Factory to manage all instantiation in game"
      }), _dec3 = property({
        type: UIManager
      }), _dec4 = property({
        type: SlotSoundPlayer
      }), _dec5 = property({
        type: EventListenerManager
      }), _dec6 = property({
        type: JsonAsset
      }), _dec7 = property({
        type: SpineSkeletonDatabase
      }), _dec8 = property({
        type: JsonAsset
      }), _dec9 = property({
        type: Node,
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Director, _Component);

        function Director() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_poolFactory", _descriptor, _assertThisInitialized(_this));

          _this.gameModes = [];

          _initializerDefineProperty(_this, "guiMgr", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundPlayer", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "eventManager", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tutorialData", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineSkeletonDatabase", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameText", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "introGame", _descriptor8, _assertThisInitialized(_this));

          _this.config = null;
          _this.dataStore = null;
          _this.eventId = null;
          _this.hidePopupPromotion = void 0;
          _this.networkState = NetworkState.NOT_CONNECT;
          _this.gameStateManager = null;
          _this.appHide = false;
          _this.totalSlotGame = 1;
          _this.currentGameMode = _this.gameModes[SlotGameMode.NormalGame];
          _this.resumeDelay = 0.3;
          _this.errorData = null; // multi languages - currency

          _this.currencyCode = 'VND';
          _this.defaultCurrency = '';
          _this.extendCommonData = null;
          _this._isCurrencyError = false;
          _this.languageCode = "VI";
          _this.isJoinGameSuccess = false;
          _this.userSwitchedTab = false;
          _this.needCheckNewEvent = false;
          _this.scheduleGetNextEvent = false;
          return _this;
        }

        var _proto = Director.prototype;

        _proto.onLoad = function onLoad() {
          //set up game model
          this.config = this.node["config"];
          this.dataStore = this.node["dataStore"]; // listen to setup game model for children nodes;

          this.node.on("GET_GAME_MODEL", this.setupGameModel, this); // listen event focus, blur game

          game.on(Game.EVENT_HIDE, this.onEventHide, this);
          game.on(Game.EVENT_SHOW, this.onEventShow, this);
          this.node.on('ON_GAME_FULL', this.onDisplayFull.bind(this));
          this.node.on('ON_GAME_THUMBNAIL', this.onDisplayThumbnail.bind(this));
          this.node.on('SET_UP_POOL_FACTORY', this.setUpPoolFactory.bind(this));
          this.node.on('SET_UP_UI_MANAGER', this.setUpUIManager.bind(this));
          this.node.on('SET_UP_SLOT_SOUND_MANAGER', this.setUpSoundManager.bind(this));
          this.node.on('SET_UP_SPINE_DATABASE', this.setUpSpineDatabase.bind(this));
          this.node.on('START_GAME', this.startGame.bind(this));
          this.node.on('FORCE_NETWORK_GLT', this.forceNetwork.bind(this));

          if (this.config.IS_SUPPORT_EVENT) {
            this.eventManager.on(EventNames.GAME_RESTART, this.gameRestart, this);
          }

          gameCommonUtils.handleReleaseBundle();

          if (gameCommonUtils.isLoginIframe()) {
            macro.ENABLE_MULTI_TOUCH = false;
          }

          SlotText = this.config.MESSAGE_DIALOG;
        };

        _proto.setUpPoolFactory = function setUpPoolFactory(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this._poolFactory = evt.details.poolFactory;
          }
        };

        _proto.setEventId = function setEventId(eventId) {
          this.eventId = eventId;
        };

        _proto.getEventId = function getEventId() {
          return this.eventId;
        };

        _proto.setUpUIManager = function setUpUIManager(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.guiMgr = evt.details.guiMgr;
          }
        };

        _proto.setUpSpineDatabase = function setUpSpineDatabase(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.spineSkeletonDatabase = evt.details.spineSkeletonDatabase;
          }
        };

        _proto.setUpSoundManager = function setUpSoundManager(evt) {
          evt.propagationStopped = true;

          if (evt.details) {
            this.soundPlayer = evt.details.soundManager;
          }
        };

        _proto.setupGameModel = function setupGameModel(evt) {
          if (this.config) {
            evt.propagationStopped = true;
            evt.target.config = this.config;
            evt.target.dataStore = this.dataStore;
            evt.target.mainDirector = this;
          }
        };

        _proto.start = function start() {
          this.startGame();
          this.loadText();
        };

        _proto.loadText = function loadText() {
          if (this.gameText) {
            this.config.GAME_TEXT = this.gameText.json;
          }
        };

        _proto.startGame = function startGame() {
          // connectNetwork.loginScene({
          //     callback: this.setUpGame.bind(this),
          //     gameId: (this.node as any).config['GAME_ID'],
          //     callbackAuthFailed: this.loginFailed.bind(this)
          // });
          this.initGameMode();
        };

        _proto.enableButtonInteraction = function enableButtonInteraction() {
          for (var i = 0; i < this.gameModes.length; i++) {
            var gameMode = this.gameModes[i];
            gameMode && gameMode.emit('ENABLE_BUTTON_INTERACTION');
          }

          this.guiMgr.enableButtons();
        };

        _proto.initGameMode = function initGameMode() {
          //Binding game modes
          for (var i = 0; i < this.gameModes.length; i++) {
            var gameMode = this.gameModes[i];
            var isNormalGame = false;

            if (gameMode && gameMode["init"]) {
              gameMode.init(isNormalGame);
            }
          } //4 modes: normalGame, freeGame, bonusGame. topUpGame


          this.dataStore.currentGameMode = SlotGameMode.NormalGame;
          this.currentGameMode = this.gameModes[SlotGameMode.NormalGame];
          this.currentGameMode && this.currentGameMode.enter();
        };

        _proto.onEventHide = function onEventHide() {
          log("GAME_HIDE");
          this.appHide = true;

          if (this.gameStateManager) {
            this.gameStateManager.gameOnPause();
          }

          this.userSwitchedTab = true;
        };

        _proto.onEventShow = function onEventShow() {
          log("GAME_SHOW");
          this.appHide = false;

          if (this.gameStateManager) {
            this.gameStateManager.gameOnResume();
          }

          if (this.config.IS_SUPPORT_EVENT) {
            this.gameStateManager.getLastedQuest();
          }

          director.emit("EVENT_CLIENT2_RECONNECT");
        };

        _proto.loginFailed = function loginFailed() {
          log("[MainDirector] authFailed");

          this._showPopupHandleOutGame(SlotText.AUTHEN_FAILED, gameCommonUtils.handleBackLogin);
        };

        _proto.getServerVersion = function getServerVersion() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var version = this.config.SERVER_VERSION || '';

          if (LOGIN_IFRAME) {
            version = gameCommonUtils.getUrlParam('gameVersion') || version;
          }

          return version;
        };

        _proto.setUpGame = function setUpGame() {
          var gameId = this.config.GAME_ID;
          if (this.config.HAS_GAME_EVENT === false) this.eventId = '0';
          var serverVersion = this.getServerVersion();

          if (sys.isBrowser) {
            var debugStats = gameCommonUtils.getUrlParam('stats');

            if (debugStats === 'true' || debugStats === 'false') {
              setDisplayStats(JSON.parse(debugStats));
            }
          }

          this.gameStateManager = globalNetwork.registerGame({
            gameState: GameStateManager,
            gameId: gameId,
            serverVersion: serverVersion,
            eventId: this.eventId,
            isSlotGame: true,
            stateUpdate: this._stateUpdate.bind(this),
            userLogout: this._userLogout.bind(this),
            joinGameSuccess: this._joinGameSuccess.bind(this),
            onJackpotWin: this._jackpotWin.bind(this),
            onJackpotWinAnnounce: this._jackpotWinAnnounce.bind(this),
            joinGameFailed: this._joinGameFailed.bind(this),
            networkUpdate: this._networkUpdate.bind(this),
            eventUpdate: this._eventUpdate.bind(this),
            updateTopUser: this._updateTopUser.bind(this),
            onWalletUpdate: this._onWalletUpdate.bind(this),
            onJoinGameDenied: this._onJoinGameDenied.bind(this),
            onRequestDenied: this._onRequestDenied.bind(this),
            onLeaveTrialGameSuccess: this.onLeaveTrialGameSuccess.bind(this),
            onLeaveTrialGameFailed: this.onLeaveTrialGameFailed.bind(this)
          });
          if (this.gameStateManager && this.tutorialData) this.gameStateManager.bindTutorialData(this.tutorialData.json);
        };

        _proto.sendSpinToNetwork = function sendSpinToNetwork(gameMode, betData, betLines) {
          if (betData === void 0) {
            betData = '';
          }

          log("MainDirector] sendSpinToNetwork", {
            betData: betData,
            betLines: betLines,
            gameMode: gameMode
          });

          switch (gameMode) {
            case SlotGameMode.NormalGame:
              this.gameStateManager.triggerSpinRequest(betData, betLines, this.dataStore.getCurrentWalletType());
              break;

            case SlotGameMode.FreeGame:
              this.gameStateManager.triggerFreeSpinRequest();
              break;

            case SlotGameMode.BonusGame:
              this.gameStateManager.triggerMiniGame(betData);
              break;

            case SlotGameMode.TopUpGame:
              this.gameStateManager.triggerFreeSpinRequest();
              break;

            case SlotGameMode.RespinGame:
              this.gameStateManager.triggerRespinRequest();
              break;
          }
        };

        _proto.leaveGameTrialPlaysession = function leaveGameTrialPlaysession() {
          this.gameStateManager.triggerLeaveGameTrialRequest();
        };

        _proto.newGameMode = function newGameMode(_ref, callback) {
          var _this2 = this;

          var name = _ref.name,
              data = _ref.data;

          if (!this.gameModes[name]) {
            this.node.emit("LOAD_MODULE_BY_NAME", name, function () {
              // this.stopJackpotWin();
              _this2.gameModes[name].init();

              _this2.currentGameMode.hide();

              _this2.dataStore.currentGameMode = name;
              _this2.currentGameMode = _this2.gameModes[name];

              _this2.currentGameMode.enter(data, callback);
            });
          } else {
            // this.stopJackpotWin();
            this.currentGameMode.hide();
            this.dataStore.currentGameMode = name;
            this.currentGameMode = this.gameModes[name];
            this.currentGameMode.enter(data, callback);
          }
        };

        _proto.resumeGameMode = function resumeGameMode(_ref2, callback) {
          var name = _ref2.name;

          if (this.gameModes[name]) {
            this.dataStore.currentGameMode = name;
            this.currentGameMode = this.gameModes[name];
            this.currentGameMode.show(callback);
          }
        };

        _proto.freeSpinOptionTrigger = function freeSpinOptionTrigger(option) {
          this.gameStateManager.triggerFreeSpinOption(option);
        };

        _proto._stateUpdate = function _stateUpdate(data) {
          if (this.networkState == NetworkState.DISCONNECTED) {
            error("[MainDirector] stateUpdate come after user disconnect, please recheck flow");
            return;
          }

          this.networkState = NetworkState.CONNECTED;
          data = this.dataStore.formatData(data);
          log("[MainDirector] stateUpdate " + data);
          this.currentGameMode.stateUpdate(function () {});
        };

        _proto._stateResume = function _stateResume(data) {
          var _this3 = this;

          log("[MainDirector] stateResume " + data);
          data = this.dataStore.formatData(data);
          this.scheduleOnce(function () {
            _this3.currentGameMode.stateResume(function () {});
          }, this.resumeDelay);
        };

        _proto._userLogout = function _userLogout() {
          log("[MainDirector] userLogout");
          this.gameStateManager.outGame();
          this.networkState = NetworkState.DISCONNECTED;

          if (this.config.IS_SUPPORT_EVENT && !gameCommonUtils.isLoginIframe()) {
            this.node.dispatchEvent(new Event('USER_LOGOUT', true));
          } else {
            this._showPopupHandleOutGame(SlotText.ANOTHER_ACCOUNT, gameCommonUtils.handleBackLogin);
          }
        };

        _proto._showPopupHandleOutGame = function _showPopupHandleOutGame(text, cbHandler) {
          if (gameCommonUtils.isLoginIframe()) {
            var isShowButton = gameCommonUtils.checkConditionCloseGameIframe();
            var actionOK = null;

            if (isShowButton) {
              actionOK = gameCommonUtils.handleCloseGameIframe;
            }

            this.guiMgr.showDialog(text, actionOK, null, true);
          } else {
            this.guiMgr.showDialog(text, cbHandler, null, true);
          }
        };

        _proto._joinGameSuccess = function _joinGameSuccess(meta) {
          log("%c [MainDirector] joinGameSuccess", "color: red", meta);
          this.networkState = NetworkState.CONNECTED;
          var extendData = meta.extendData;
          var mBet = extendData.mBet,
              eBet = extendData.eBet,
              metaDataUser = extendData.metaDataUser,
              eData = extendData.eData,
              extendCommon = extendData.ec;
          var currentWallets = metaDataUser.currentWallets;
          this.enableButtonInteraction();

          if (extendCommon) {
            this.extendCommonData = this.parseExtendCommonData(extendCommon);

            if (this.extendCommonData && this.config.IS_SUPPORT_MULTI_CURRENCY) {
              this._updateCurrencyConfig();
            }

            if (this._isCurrencyError) return;
          }

          this.isJoinGameSuccess = true;

          if (mBet) {
            this._initBetData(mBet, eBet);
          } //update wallet if any


          if (currentWallets) {
            this.dataStore.updateWallets(currentWallets);
            this.guiMgr.updateWallet(this.dataStore.getWallets());
          }

          this.guiMgr.initJackpot(meta.jackpotInfo);
          this.gameStateManager.networkCallbackJP(this._jackpotUpdate.bind(this));

          if (eData) {
            if (this.config.IS_SUPPORT_EVENT) {
              this._initQuestData(eData);
            }
          }

          if (meta.hasOwnProperty('dataResume')) {
            this._stateResume(meta.dataResume);

            this.gameModes[SlotGameMode.NormalGame].emit("SPIN_DISABLE");
            this.guiMgr.disableBet();
          } else {
            this._setUpAfterJoinGame();

            this.gameModes[SlotGameMode.NormalGame].emit("SPIN_ENABLE");
            this.guiMgr.enableBet();
          }

          this.extendJoinGame(meta);
          this.dataStore.setWalletTypes(meta['wallet-types']);
          this.guiMgr.setWalletTypes(meta['wallet-types']);
          this.eventManager.emit(EventNames.JOIN_GAME_SUCCESS, {
            dataResume: meta.dataResume
          });
        };

        _proto._initQuestData = function _initQuestData(eData) {
          this.dataStore.getQuestData().initQuestData(eData);
          this.guiMgr.initQuest();
        };

        _proto._onJoinGameDenied = function _onJoinGameDenied() {
          var _this4 = this;

          if (!this.node) return;
          this.scheduleOnce(function () {
            var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

            var _this4$config$MESSAGE = _this4.config.MESSAGE_DIALOG,
                ACCOUNT_BLOCKED = _this4$config$MESSAGE.ACCOUNT_BLOCKED,
                ACCOUNT_BLOCKED_IFRAME = _this4$config$MESSAGE.ACCOUNT_BLOCKED_IFRAME;
            var lockIframe = ACCOUNT_BLOCKED_IFRAME.replace("GAME_TITLE", document.title.replace("Techplay - ", ""));

            _this4._showPopupHandleOutGame(LOGIN_IFRAME ? lockIframe : ACCOUNT_BLOCKED, gameCommonUtils.handleBackLogin);
          }, 0.3);
        };

        _proto._onRequestDenied = function _onRequestDenied() {
          var _this5 = this;

          if (!this.node) return;
          this.scheduleOnce(function () {
            var REQUEST_DENIED = _this5.config.MESSAGE_DIALOG.REQUEST_DENIED;

            _this5._showPopupHandleOutGame(REQUEST_DENIED, gameCommonUtils.handleBackLogin);
          }, 0.3);
        };

        _proto.onLeaveTrialGameSuccess = function onLeaveTrialGameSuccess() {};

        _proto.onLeaveTrialGameFailed = function onLeaveTrialGameFailed() {};

        _proto._initBetData = function _initBetData(mBet, eBet) {
          var listDataBet = mBet.split(',');
          var mainBets = {};
          listDataBet.forEach(function (item) {
            mainBets[item.split(';')[0][0]] = Number(item.split(';')[1]);
          });
          var extraBets = null;

          if (eBet) {
            extraBets = {};
            var lisExtraBetData = eBet.split(',');
            lisExtraBetData.forEach(function (item) {
              extraBets[item.split(';')[0][0]] = Number(item.split(';')[1]);
            });
          }

          this.dataStore.betData.updateBetData(mainBets, extraBets);
          this.guiMgr.initBet();
        };

        _proto.extendJoinGame = function extendJoinGame(meta) {
          var metaDataPromotion = meta.extendData.metaDataPromotion;
          var dataResume = meta.dataResume;
          var hasPromotion = metaDataPromotion && metaDataPromotion.promotionRemain;
          var isShowIntroGame = !dataResume && !hasPromotion;

          this._showIntroGame(isShowIntroGame);

          if (!hasPromotion) return;

          if (dataResume) {
            this.promotionUpdate(metaDataPromotion, true);
          } else {
            this.promotionUpdate(metaDataPromotion);
          }
        };

        _proto._showIntroGame = function _showIntroGame(isShow) {
          if (!this.introGame) return;

          if (isShow) {
            this.introGame.emit("SHOW_BUTTON_JOIN_GAME", true);
          } else {
            this.introGame.active = false;
          }
        };

        _proto.promotionUpdate = function promotionUpdate(metaData, isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          if (metaData) {
            if (this.dataStore) {
              var betId = metaData.betId,
                  promotionRemain = metaData.promotionRemain,
                  promotionTotal = metaData.promotionTotal;
              this.dataStore.promotion = {
                promotionBetId: betId,
                promotionRemain: promotionRemain,
                promotionTotal: promotionTotal
              };
              this.showPromotionPopup(isResume);
            }
          }
        };

        _proto.showPromotionPopup = function showPromotionPopup(isResume) {
          var _this6 = this;

          if (isResume === void 0) {
            isResume = false;
          }

          if (isResume) return;
          this.guiMgr.disableBet();
          var _this$config$MESSAGE_ = this.config.MESSAGE_DIALOG,
              promotionMessage = _this$config$MESSAGE_.PROMOTION_MESSAGE,
              promotionReset = _this$config$MESSAGE_.PROMOTION_RESET,
              promotionNew = _this$config$MESSAGE_.PROMOTION_NEW;

          var actionBtnOK = function actionBtnOK() {};

          var actionCancel = null;
          var _this$dataStore$promo = this.dataStore.promotion,
              promotionRemain = _this$dataStore$promo.promotionRemain,
              promotionBetId = _this$dataStore$promo.promotionBetId;
          var _ref3 = this.dataStore,
              promotionErrorCode = _ref3.promotionErrorCode;
          this.guiMgr.setBetId(promotionBetId);
          var totalBetValue = this.dataStore.getTotalBet();
          var message = promotionMessage.replace("{1}", promotionRemain).replace("{2}", formatWalletMoney(totalBetValue));

          if (promotionErrorCode) {
            switch (promotionErrorCode) {
              case PROMOTION_ERROR.RESET:
                message = promotionReset.replace("{1}", promotionRemain).replace("{2}", formatWalletMoney(totalBetValue));
                break;

              case PROMOTION_ERROR.NEW:
                message = promotionNew.replace("{1}", promotionRemain).replace("{2}", formatWalletMoney(totalBetValue));
                break;
            }

            this.dataStore.promotionErrorCode = null;
          }

          this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          this.setUpPromotion();
          this.hidePopupPromotion = tween(this).delay(5).call(function () {
            _this6.guiMgr.hideDialog();

            _this6.hidePopupPromotion = null;
          }).start();
        };

        _proto.setUpPromotion = function setUpPromotion() {
          this.currentGameMode.emit("SETUP_PROMO_SPIN");
        };

        _proto._setUpAfterJoinGame = function _setUpAfterJoinGame() {
          this.guiMgr.selectWallet();
        };

        _proto._joinGameFailed = function _joinGameFailed() {
          log("[MainDirector] joinGameFail");
          this.eventManager.emit(EventNames.JOIN_GAME_FAIL);
          this.networkState = NetworkState.DISCONNECTED;

          this._showPopupHandleOutGame(SlotText.AUTHEN_FAILED, gameCommonUtils.handleBackLogin);
        };

        _proto._jackpotWin = function _jackpotWin() {
          log("[MainDirector] jackpotWin"); //TODO: implement notify jackpot win
        };

        _proto._jackpotWinAnnounce = function _jackpotWinAnnounce(data, isMe) {
          log("[MainDirector] jackpotWinAnnounce: ", data, isMe); //TODO: implement notify jackpot win annouce
        };

        _proto._networkUpdate = function _networkUpdate(event, code, errorData) {
          if (code === void 0) {
            code = '';
          }

          if (errorData === void 0) {
            errorData = null;
          }

          log("[MainDirector] network event " + event + " " + code);
          if (this.networkState == NetworkState.DISCONNECTED) return;

          switch (event) {
            case NetworkEvent.FAIL_CONNECT_SERVER:
              this.onFailConnect();
              break;

            case NetworkEvent.SLOW_CONNECTION:
              this.onSlowConnect();
              break;

            case NetworkEvent.SOCKET_LOST_CONNECTION:
              this.onLostConnect();
              break;

            case NetworkEvent.SOCKET_CONNECTED:
              this.onSocketConnected();
              break;

            case NetworkEvent.SOCKET_RESUME_CONNECTION:
              this.onResumeConnect();
              break;

            case NetworkEvent.TIMEOUT_REQUEST_DIE:
              this.onTimeOutDie();
              break;

            case NetworkEvent.TIMEOUT_REQUEST_WAIT:
              this.onTimeOutWait();
              break;

            case NetworkEvent.WALLET_ERROR_CODE:
              this.onWalletError(code);
              break;

            case NetworkEvent.BACKEND_ERROR_CODE:
              this.onBackEndError(code);
              break;

            case NetworkEvent.MISMATCH_DATA:
              this.onMismatchData();
              break;

            case NetworkEvent.PROMOTION_ERROR:
              this.errorData = errorData;
              this.onPromotionError(code);
              break;
          }
        };

        _proto.onMismatchData = function onMismatchData() {
          this.networkState = NetworkState.DISCONNECTED;
          var message = SlotText.MISMATCH_DATA;

          var actionOK = function actionOK() {
            gameCommonUtils.handleFlowOutGame();
          };

          this._showPopupHandleOutGame(message, actionOK);
        };

        _proto.onFailConnect = function onFailConnect() {
          var message = SlotText.SYSTEM_ERROR;
          this.networkState = NetworkState.DISCONNECTED;
          this.guiMgr.showDialog(message, function () {});
        };

        _proto.onSlowConnect = function onSlowConnect() {
          if (this.isJoinGameSuccess) {
            this.guiMgr.showToast(SlotText.NETWORK_WARNING);
          }
        };

        _proto.onLostConnect = function onLostConnect() {
          if (!this.isJoinGameSuccess) return;
          var message = SlotText.NETWORK_DISCONNECT;
          this.networkState = NetworkState.LOST_CONNECTION;

          this._showPopupHandleOutGame(message, function () {});
        };

        _proto.onSocketConnected = function onSocketConnected() {
          if (this.networkState != NetworkState.NOT_CONNECT && this.config.IS_SUPPORT_EVENT) {
            console.log('call get lasted quest');
            this.gameStateManager.getLastedQuest();
            this.userSwitchedTab = true;
          }
        };

        _proto.onResumeConnect = function onResumeConnect() {
          console.log('onResumeConnect ' + this.networkState);

          if (this.networkState == NetworkState.CONNECTED && this.dataStore.isTrialMode) {
            this.guiMgr.hideDialog();
          }

          if (this.networkState == NetworkState.LOST_CONNECTION || this.networkState == NetworkState.WAITING_RESPONSE) {
            this.guiMgr.hideDialog();
            this.networkState = NetworkState.CONNECTED;
          }
        };

        _proto.onTimeOutDie = function onTimeOutDie() {
          this.networkState = NetworkState.DISCONNECTED;
          var message = SlotText.SYSTEM_ERROR;

          var actionOK = function actionOK() {
            gameCommonUtils.handleFlowOutGame();
          };

          this._showPopupHandleOutGame(message, actionOK);
        };

        _proto.onTimeOutWait = function onTimeOutWait() {
          this.networkState = NetworkState.WAITING_RESPONSE;
          var message = SlotText.DISCONNECT;

          var actionOK = function actionOK() {
            gameCommonUtils.handleFlowOutGame();
          };

          this._showPopupHandleOutGame(message, actionOK);
        };

        _proto.onWalletError = function onWalletError(code) {
          var _this7 = this;

          var message = this.getMessageError(code);

          var actionOK = function actionOK() {
            var _this7$gameStateManag = _this7.gameStateManager._playerInfoStateManager.getWallets(),
                amount = _this7$gameStateManag.amount;

            _this7.dataStore.setCurrentWallet(amount);

            _this7.dataStore.resumeCurrentWallet();
          };

          this.guiMgr.showDialog(message, actionOK);
        };

        _proto.onBackEndError = function onBackEndError(code) {
          var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC3.LOGIN_IFRAME;

          var actionOK = function actionOK() {
            if (LOGIN_IFRAME) {
              gameCommonUtils.handleCloseGameIframe();
            } else {
              gameCommonUtils.handleFlowOutGame();
            }
          };

          var isEnableBtn = gameCommonUtils.checkConditionCloseGameIframe();
          var message = this.getMessageError(code);
          this.guiMgr.showDialog(message, isEnableBtn ? actionOK : null);
        };

        _proto.onPromotionError = function onPromotionError(code) {
          var message = this.getMessageError(code);

          var _this$gameStateManage = this.gameStateManager._playerInfoStateManager.getWallets(),
              amount = _this$gameStateManage.amount;

          this.dataStore.setCurrentWallet(amount);
          this.dataStore.resumeCurrentWallet();

          var actionOK = function actionOK() {//
          };

          this.guiMgr.showDialog(message, actionOK);
        };

        _proto.getMessageError = function getMessageError(code) {
          var action = this.handleErrorCode(code);
          return action.message + ("\n(" + code + ")");
        };

        _proto.forceStopSpinning = function forceStopSpinning() {
          var _this8 = this;

          this.scheduleOnce(function () {
            _this8.currentGameMode.emit('STOP_WITH_RANDOM_MATRIX');
          }, 0.2);
        };

        _proto.handleErrorCode = function handleErrorCode(code) {
          var message = SlotText.SYSTEM_ERROR;
          this.forceStopSpinning();

          switch (code) {
            case '0000':
              code = '1000';
              this.networkState = NetworkState.DISCONNECTED;
              message = SlotText.SYSTEM_ERROR;
              break;

            case 'W2408':
            case 'W2500':
            case 'W2008':
            case 'W29999':
              message = SlotText.SYSTEM_ERROR;
              break;

            case '0001':
              if (this.config.IS_SUPPORT_EVENT && this.dataStore.getWalletTypes().length > 1) {
                var walletType = this.dataStore.getCurrentWalletType();

                if (walletType == WalletType.PROMOTE) {
                  message = SlotText.NO_MONEY_EVENT.replace("[wallet]", SlotText.WALLET_PROMOTE);
                } else {
                  message = SlotText.NO_MONEY_EVENT.replace("[wallet]", SlotText.WALLET_NORMAL);
                }
              } else {
                message = SlotText.NO_MONEY;
              }

              break;

            case '0007':
              message = SlotText.NO_PLAYSESSION;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0026':
              message = SlotText.MISMATCH_DATA;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0029':
              message = SlotText.GROUP_MAINTAIN;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0014':
              message = SlotText.NO_FREESPIN_OPTION;
              this.networkState = NetworkState.DISCONNECTED;
              break;

            case '0031':
              message = SlotText.EVENT_NOT_AVAILABLE;

            case 'W2001':
            case 'W2004':
              message = SlotText.SPIN_UNSUCCESS;
              break;

            case 'W2006':
            case 'W2007':
              var _loadConfigAsync$getC4 = loadConfigAsync.getConfig(),
                  LOGIN_IFRAME = _loadConfigAsync$getC4.LOGIN_IFRAME;

              var lockIframe = SlotText.ACCOUNT_BLOCKED_IFRAME.replace("GAME_TITLE", document.title.replace("Techplay - ", ""));
              message = LOGIN_IFRAME ? lockIframe : SlotText.ACCOUNT_BLOCKED;
              break;

            case PROMOTION_ERROR.WRONG_BET:
            case PROMOTION_ERROR.RESET:
            case PROMOTION_ERROR.NEW:
            case PROMOTION_ERROR.EXPIRED:
              message = this.handlePromotionError(code);
              break;
          }

          return {
            message: message
          };
        };

        _proto._onWalletUpdate = function _onWalletUpdate(data) {
          this.dataStore.updateWallets(data);
        };

        _proto._jackpotUpdate = function _jackpotUpdate(data) {
          this.guiMgr.updateJackpot(data);
        };

        _proto.skipTutorialMode = function skipTutorialMode() {
          var useTutorialData = gameCommonUtils.getUrlParam('useTutorialData') == 'true';

          if (!useTutorialData && this.dataStore.isTrialMode) {
            this.gameStateManager.skipTutorial();
          }
        };

        _proto.onDisplayFull = function onDisplayFull(totalGame) {
          log("game display full");

          if (this.soundPlayer) {
            this.soundPlayer.loadCacheConfig();
            this.guiMgr.updateSoundSetting();
            this.soundPlayer.unmuteMusic();
            this.soundPlayer.unmuteAllEffects();
            this.soundPlayer.setThumbMode(false);
          }

          this.totalSlotGame = totalGame;
          this.dataStore.setHighPerformance();
          this.dataStore.isDisplayFullScreen = true;
          this.eventManager && this.eventManager.emit(EventNames.ON_CHANGE_PERFORMANCE, true);
          this.node.getComponentsInChildren(MotionStreak).forEach(function (it) {
            it.reset();
          });
          this.node.emit('UPDATE_POSITION');
        };

        _proto.onDisplayThumbnail = function onDisplayThumbnail() {
          if (this.soundPlayer) {
            this.soundPlayer.muteMusic();
            this.soundPlayer.muteAllEffects();
            this.soundPlayer.setThumbMode(true);
          }

          log("game display thumbnail");
          this.dataStore.setLowPerformance();
          this.dataStore.isDisplayFullScreen = false;
          this.eventManager && this.eventManager.emit(EventNames.ON_CHANGE_PERFORMANCE, false);
          this.node.getComponentsInChildren(MotionStreak).forEach(function (it) {
            it.reset();
          });
        };

        _proto._eventUpdate = function _eventUpdate(data) {
          var code = data.code,
              eventId = data.eventId,
              questId = data.questId,
              eData = data.eData; //this.dataStore.eventNotify(code, eventId, questId, eData);

          switch (code) {
            case '0032':
              {
                //reset mission
                this.dataStore.questData.reset();
                this.dataStore.questData.active = false;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0033':
              {
                //turn on quest
                this.dataStore.questData.active = true;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0034':
              {
                //turn off quest
                this.dataStore.questData.active = false;
                this.guiMgr.refreshQuestUI();
              }
              break;

            case '0037':
              {
                //open mission new day

                /*this.dataStore.questData.active = true;
                this.guiMgr.refreshQuestUI();
                this.guiMgr.forceOpenPanel();*/
                //cause flow complicated from BE, when receive 0037 for new quest, call glte to update lasted quest
                this.getNextEvent();
              }
              break;
            //quest close

            case '0039':
              {
                log("[DataStore] event force close " + eventId + " " + questId);
                this.dataStore.questData.active = false;
                this.guiMgr.forceCloseEvent();
              }
              break;

            case '0038':
              {
                /*this.dataStore.questData.reset();
                if (eData) {
                    this.dataStore.questData.active = true;
                    this.dataStore.questData.initQuestData(eData);
                    this.guiMgr.initQuest();
                }
                else {
                    error(`new quest error eData is null`);
                }*/
                //cause flow complicated from BE, when receive 0038 for new quest, call glte to update lasted quest
                this.getNextEvent();
              }
              break;

            case '0040':
              {
                log("[DataStore] Quest complete " + eventId + " " + questId + " " + eData);
                var _this$dataStore$quest = this.dataStore.questData,
                    eventInfo = _this$dataStore$quest.eventInfo,
                    startedShowAnim = _this$dataStore$quest.startedShowAnim,
                    finishedShowAnim = _this$dataStore$quest.finishedShowAnim; //let isCurrentGame = eventInfo.isCurrentGame;

                var isCurrentGame = this.dataStore.questData.getCurrentGame() == this.config.GAME_ID;
                this.dataStore.questData.questComplete(eData);
                var isEventFinished = eventInfo.isFinished;

                if (!isCurrentGame) {
                  log('not current game, update ui immediatly');
                  this.guiMgr.refreshQuestUI();

                  if (isEventFinished) {
                    this.guiMgr.finishEvent(null);
                  }
                } else if (isEventFinished) {
                  log('event finish on this game, check for finish anim');

                  if (startedShowAnim && finishedShowAnim) {
                    log('animation played, check next event');
                    this.guiMgr.refreshQuestUI();
                    this.getNextEvent();
                  } else {
                    this.scheduleGetNextEvent = true;
                    console.log('not play anim, wait for anim finish', startedShowAnim, finishedShowAnim);
                  }
                } else if (finishedShowAnim) {
                  log('refresh event');
                  this.guiMgr.refreshQuestUI();
                } else {
                  log('something wrong');
                }
              }
              break;

            case '0041':
              {
                log("[DataStore] New event comming " + eventId + " " + questId + " " + eData);
                var _this$dataStore$quest2 = this.dataStore.questData,
                    _eventInfo = _this$dataStore$quest2.eventInfo,
                    _startedShowAnim = _this$dataStore$quest2.startedShowAnim,
                    _finishedShowAnim = _this$dataStore$quest2.finishedShowAnim;
                var canApplyNewEvent = false;

                if (this.userSwitchedTab && !this.isScheduleGetEvent() || !_eventInfo || !_eventInfo.isFinished || _startedShowAnim && _finishedShowAnim) {
                  canApplyNewEvent = true;
                } else {
                  log('cant apply event', _eventInfo.isFinished, _startedShowAnim, _finishedShowAnim, this.userSwitchedTab);
                }

                if (eData) {
                  if (canApplyNewEvent) {
                    if (this.currentGameMode == this.gameModes[SlotGameMode.NormalGame]) {
                      this.dataStore.questData.reset();
                      this.dataStore.questData.active = true;
                      this.dataStore.questData.initQuestData(eData);
                      console.log('finished show anim, init quest');
                      this.guiMgr.initQuest();
                    } else {
                      console.log('new event coming on feature, delay to check on next spin');
                      this.needCheckNewEvent = true;
                    }
                  } else {
                    console.log('new event coming when showing win anim, need handle more');
                  }
                } else {
                  if (canApplyNewEvent) {
                    this.dataStore.questData.active = false;
                    this.guiMgr.refreshQuestUI();
                  } else {
                    console.log('cant apple null event when showing win anim');
                  }
                }

                this.userSwitchedTab = false;
              }
              break;
          }
        };

        _proto.getNextEvent = function getNextEvent() {
          log('[Director] try get next event');

          if (this.config.IS_SUPPORT_EVENT) {
            this.scheduleGetNextEvent = false;
            this.dataStore.questData.playingFinish = false;
            this.gameStateManager.getLastedQuest();
          }
        };

        _proto.isScheduleGetEvent = function isScheduleGetEvent() {
          return this.scheduleGetNextEvent;
        };

        _proto.gameRestart = function gameRestart(gameMode) {
          console.log(gameMode);

          if (gameMode === SlotGameMode.NormalGame && this.needCheckNewEvent) {
            if (!this.dataStore.questData.startedShowAnim || this.dataStore.questData.finishedShowAnim) {
              this.needCheckNewEvent = false;
              this.userSwitchedTab = true; //force check new event

              this.getNextEvent();
            }
          }
        };

        _proto._updateTopUser = function _updateTopUser(data) {
          var userList = data.userList,
              userOnline = data.ccu;
          if (this.guiMgr) this.guiMgr.topUserUpdate(userList, userOnline);
        };

        _proto.forceNetwork = function forceNetwork(event) {
          var isForced = event.userData.isForced;
          this.gameStateManager.onForceGetLatestedState(isForced);
        };

        _proto.showPopUpCloseGame = function showPopUpCloseGame() {
          var _this9 = this;

          var actionBackToLobby = function actionBackToLobby() {
            if (_this9.soundPlayer) {
              _this9.soundPlayer.playSFXClick();

              _this9.soundPlayer.stopAllAudio();
            }

            gameCommonUtils.handleCloseGameIframe();
          };

          var updatedEvent = new Event('SHOW_POP_UP_CLOSE_GAME', true);
          updatedEvent.dialogContent = {
            actionOK: actionBackToLobby,
            actionCancel: function actionCancel() {}
          };
          this.node.dispatchEvent(updatedEvent);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.hidePopupPromotion) {
            this.hidePopupPromotion.stop();
            this.hidePopupPromotion = null;
          }

          if (this.gameStateManager) {
            this.gameStateManager.outGame();
          }
        };

        _proto.handlePromotionError = function handlePromotionError(code) {
          var message = SlotText.SYSTEM_ERROR;

          switch (code) {
            case PROMOTION_ERROR.WRONG_BET:
            case PROMOTION_ERROR.RESET:
            case PROMOTION_ERROR.NEW:
              //Format this.errorData is either an Array or Object
              if (this.errorData) {
                var metaData;
                var promotion;

                if (this.errorData[0] && this.errorData[0].metaData) {
                  metaData = this.errorData[0].metaData;
                  promotion = metaData.promotion || null;
                } else {
                  var _error = this.errorData.error;

                  if (_error[0] && _error[0].metaData) {
                    metaData = _error[0].metaData;
                    promotion = metaData.promotion || null;
                  }
                }

                if (promotion) {
                  var promotionData = promotion.split(';');
                  var updatedData = {
                    betId: promotionData[0],
                    promotionRemain: Number(promotionData[1]),
                    promotionTotal: Number(promotionData[2])
                  };
                  this.dataStore.isErrorPromotion = true;
                  this.dataStore.promotionErrorCode = code;
                  this.promotionUpdate(updatedData);
                }
              }

              break;

            case PROMOTION_ERROR.EXPIRED:
              message = SlotText.PROMOTION_EXPIRED;
              this.dataStore.promotion = null;
          }

          return message;
        };

        _proto._updateCurrencyConfig = function _updateCurrencyConfig() {
          this.currencyCode = this._getCurrency();
          this.dataStore['currencyCode'] = this.currencyCode;
          if (this.currencyCode === this.defaultCurrency || !this.currencyCode) return;

          this._updateGameConfig();

          var currencyConfig = this.config.MONEY_FORMAT;
          updateUtilConfig('CURRENCY_CONFIG', currencyConfig);
        };

        _proto._updateGameConfig = function _updateGameConfig() {
          var CURRENCY_CONFIG = this.config.CURRENCY_CONFIG;
          if (!CURRENCY_CONFIG) return;
          var currencyConfig = CURRENCY_CONFIG[this.currencyCode.toUpperCase()];
          var updatedConfig = Object.assign(this.config, currencyConfig);
          this.config = updatedConfig;
        };

        _proto._getCurrency = function _getCurrency() {
          this.defaultCurrency = this.config.DEFAULT_CURRENCY || 'VND';
          var serverCurrency = this.getServerCurrency();
          var clientCurrency = this.getClientCurrency();
          if (serverCurrency !== clientCurrency) return this.showCurrencyErrorPopup();
          return serverCurrency.toUpperCase();
        };

        _proto.getServerCurrency = function getServerCurrency() {
          return this.extendCommonData.c && this.extendCommonData.c.toUpperCase();
        } // parse ec="c:usd#l:vn" => extendCommonData { c: 'usd', l: 'vn' }
        ;

        _proto.parseExtendCommonData = function parseExtendCommonData(extendCommon) {
          var properties = extendCommon.split('#');
          var extendCommonData = {};
          properties.forEach(function (stringValue) {
            var property = stringValue.split(':');
            var key = property[0];
            var value = property[1];
            extendCommonData[key] = value;
          });
          return extendCommonData;
        };

        _proto.showCurrencyErrorPopup = function showCurrencyErrorPopup() {
          var _this10 = this;

          this._isCurrencyError = true; // const loadConfigAsync = require('loadConfigAsync');

          var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC5.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            var CURRENCY_NOT_SUPPORTED = this.config.MESSAGE_DIALOG.CURRENCY_NOT_SUPPORTED;

            var actionOK = function actionOK() {
              _this10._isCurrencyError = false;
              gameCommonUtils.handleCloseGameIframe();
            };

            this.guiMgr.showDialog(CURRENCY_NOT_SUPPORTED, actionOK, null, true);
          }
        };

        _proto.getClientCurrency = function getClientCurrency() {
          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME;

          if (!this.config.IS_SUPPORT_MULTI_CURRENCY) return '';
          var currencyCode = '';

          if (LOGIN_IFRAME) {
            currencyCode = gameCommonUtils.getUrlParam('c') || this.defaultCurrency;
          } else {
            currencyCode = sys.localStorage.getItem('c') || this.defaultCurrency;
          }

          return currencyCode.toUpperCase();
        };

        _createClass(Director, [{
          key: "poolFactory",
          get: function get() {
            return this._poolFactory;
          }
        }]);

        return Director;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_poolFactory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "guiMgr", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "soundPlayer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "eventManager", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tutorialData", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spineSkeletonDatabase", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "gameText", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "introGame", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DotsHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ce146S9s0xBJqTizQi+3E6w", "DotsHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DotsHistory = exports('DotsHistory', (_dec = ccclass('DotsHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DotsHistory, _Component);

        function DotsHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jackpotDot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topupDot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusDot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeDot", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DotsHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_DOTS', this.showDots, this);
        };

        _proto.showDots = function showDots(data) {
          this.jackpotDot.active = false;
          this.topupDot.active = false;
          this.bonusDot.active = false;
          this.freeDot.active = false;
          if (data.totalJpWinAmount) this.jackpotDot.active = true;
          if (data.totalTopupWinAmount || data.topUpGameTotal) this.topupDot.active = true;
          if (data.totalBonusWinAmount || data.bonusGameTotal) this.bonusDot.active = true;
          if (data.totalFreeWinAmount || data.freeGameTotal) this.freeDot.active = true;
        };

        return DotsHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotDot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "topupDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bonusDot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "freeDot", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Draggable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, view, UITransform, sys, Event, tween, v3, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      view = module.view;
      UITransform = module.UITransform;
      sys = module.sys;
      Event = module.Event;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "10808PO81pPibTRRS6Rlvlz", "Draggable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Draggable = exports('Draggable', (_dec = ccclass('Draggable'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Draggable, _GameObject);

        function Draggable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.deltaX = 0;
          _this.deltaY = 0;
          _this.originalY = 0;
          _this.originalX = 0;

          _initializerDefineProperty(_this, "dragHolder", _descriptor, _assertThisInitialized(_this)); // Node area for drag and drop


          _initializerDefineProperty(_this, "overlay", _descriptor2, _assertThisInitialized(_this)); // Node for dim dragHolder


          _initializerDefineProperty(_this, "opacity", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickToBorder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderOffsetX", _descriptor5, _assertThisInitialized(_this));

          _this.moveTween = null;
          _this.dragging = false;
          _this.borderLeftX = 0;
          _this.borderRightX = 0;
          return _this;
        }

        var _proto = Draggable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          if (!this.dragHolder) return;
          this.dragHolder.on(Node.EventType.TOUCH_START, this._onDragStart, this);
          this.dragHolder.on(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
          this.dragHolder.on(Node.EventType.TOUCH_END, this._onDragEnd, this);
          this.node.on(Node.EventType.MOUSE_UP, this.moveToBorder, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.moveToBorder, this);
          view.on('canvas-resize', this._thisOnResized, this);

          if (this.overlay) {
            this.overlay.on(Node.EventType.TOUCH_END, this._onOverlayTouchEnd, this);
          }

          if (!this.dragHolder.getComponent(UITransform)) {
            this.dragHolder.addComponent(UITransform);
          }

          this.calculateBorder();
          globalThis.multislot = this;
        };

        _proto.calculateBorder = function calculateBorder() {
          var maxWidth = view.getDesignResolutionSize().width;
          if (sys.isNative) maxWidth = view.getVisibleSize().width;
          this.borderLeftX = -maxWidth / 2 + this.borderOffsetX;
          this.borderRightX = maxWidth / 2 - this.borderOffsetX;
        };

        _proto._onDragStart = function _onDragStart(event) {
          this.dragging = true;
          if (this.overlay) this.overlay.active = true;
          this.originalX = this.dragHolder.position.x;
          this.originalY = this.dragHolder.position.y;
          this.deltaX = event.getLocationX() - this.dragHolder.position.x;
          this.deltaY = event.getLocationY() - this.dragHolder.position.y;
          this.setOpacity(this.dragHolder, 255);
        };

        _proto._onDragMove = function _onDragMove(event) {
          if (!this.dragging) return;
          this.dragging = true;
          var delta = event.getUIDelta();
          var fullWidth = view.getVisibleSize().width;
          var fullHeight = view.getVisibleSize().height;

          var _this$dragHolder$getC = this.dragHolder.getComponent(UITransform),
              width = _this$dragHolder$getC.width,
              height = _this$dragHolder$getC.height;

          var minX = -fullWidth / 2 + width / 2;
          var maxX = fullWidth / 2 - width / 2;
          var minY = -fullHeight / 2 + height / 2;
          var maxY = fullHeight / 2 - height / 2;
          var moveX = this.dragHolder.position.x + delta.x;
          var moveY = this.dragHolder.position.y + delta.y;

          if (moveX < minX) {
            moveX = minX;
          } else if (moveX > maxX) {
            moveX = maxX;
          }

          if (moveY < minY) {
            moveY = minY;
          } else if (moveY > maxY) {
            moveY = maxY;
          }

          this.dragHolder.setPosition(moveX, moveY);
        };

        _proto._onDragEnd = function _onDragEnd(event) {
          var distance = Math.sqrt(Math.pow(this.dragHolder.position.x - this.originalX, 2) + Math.pow(this.dragHolder.position.y - this.originalY, 2));

          if (distance < 10) {
            this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
          }

          this.dragging = false;

          if (this.stickToBorder) {
            this.moveToBorder();
          }
        };

        _proto.moveToBorder = function moveToBorder() {
          this.calculateBorder();
          var distanceLeft = Math.abs(this.node.position.x - this.borderLeftX);
          var distanceRight = Math.abs(this.borderRightX - this.node.position.x);

          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (distanceLeft <= distanceRight) this.moveToLeft(distanceLeft / 300);else this.moveToRight(distanceRight / 300);
        };

        _proto.easeOutBack = function easeOutBack(x) {
          var c1 = 1.70158;
          var c3 = c1 + 1;
          return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
        };

        _proto.moveToLeft = function moveToLeft(time) {
          var _this2 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderLeftX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this2.easeOutBack(t);
            }
          }).start();
        };

        _proto.moveToRight = function moveToRight(time) {
          var _this3 = this;

          var moveTime = _.clamp(time, 0.8, 1.2);

          this.moveTween = tween(this.node).to(moveTime, {
            position: v3(this.borderRightX, this.node.position.y, this.node.position.z)
          }, {
            easing: function easing(t) {
              return _this3.easeOutBack(t);
            }
          }).start();
        };

        _proto._onOverlayTouchEnd = function _onOverlayTouchEnd(event) {
          if (this.overlay) this.overlay.active = false;
          this.setOpacity(this.dragHolder, this.opacity);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.moveTween) {
            this.moveTween.stop();
          }

          if (this.dragHolder) {
            this.dragHolder.off(Node.EventType.TOUCH_START, this._onDragStart, this);
            this.dragHolder.off(Node.EventType.TOUCH_MOVE, this._onDragMove, this);
            this.dragHolder.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
          }

          if (this.overlay) this.overlay.off(Node.EventType.TOUCH_END, this._onDragEnd, this);
        };

        return Draggable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "opacity", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickToBorder", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "borderOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DynamicLoadingPrefabControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDynamicLoading.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sys, instantiate, BaseDynamicLoading;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      instantiate = module.instantiate;
    }, function (module) {
      BaseDynamicLoading = module.BaseDynamicLoading;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2046cH/FqhEXZmB9tebq2iz", "DynamicLoadingPrefabControl", undefined);

      var ccclass = _decorator.ccclass;
      var DynamicLoadingPrefabControl = exports('DynamicLoadingPrefabControl', (_dec = ccclass('DynamicLoadingPrefabControl'), _dec(_class = /*#__PURE__*/function (_BaseDynamicLoading) {
        _inheritsLoose(DynamicLoadingPrefabControl, _BaseDynamicLoading);

        function DynamicLoadingPrefabControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDynamicLoading.call.apply(_BaseDynamicLoading, [this].concat(args)) || this;
          _this._isHighPerformance = false;
          _this._usingObjects = [];
          _this._isLoaded = false;
          return _this;
        }

        var _proto = DynamicLoadingPrefabControl.prototype;

        _proto.onLoad = function onLoad() {
          _BaseDynamicLoading.prototype.onLoad.call(this);
        } //dnvuanh remove causing bad performance

        /*onEnable(){
            if(this.eventManager){
                this.eventManager.on(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
            }
        };
         onDisable(){
            if(this.eventManager){
                this.eventManager.off(EventNames.ON_CHANGE_PERFORMANCE, this.onChangePerformance, this);
            }
        }*/
        ;

        _proto.onChangePerformance = function onChangePerformance(isHighPer) {
          var _this2 = this;

          this._isHighPerformance = isHighPer;

          if (isHighPer) {
            if (this._isLoaded) return;
            this.createObjectsAsyncByPaths(function () {
              if (!_this2._isHighPerformance) {
                _this2.destroyDynamicLoadingObjects();
              }
            });
          } else {
            this.destroyDynamicLoadingObjects();
          }
        };

        _proto.createObjectsAsyncByPaths = function createObjectsAsyncByPaths(completeCB) {
          var _this3 = this;

          if (completeCB === void 0) {
            completeCB = null;
          }

          if (!this._localBundle) return;
          var count = 0;

          var _loop = function _loop() {
            var assetPathConfig = _this3.assetPaths[i];

            if (assetPathConfig) {
              _this3._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (prefab) {
                if (_this3._isHighPerformance) {
                  var node = instantiate(prefab);
                  node.active = true;
                  node.parent = assetPathConfig.parentNode;

                  _this3._usingObjects.push(node);
                }

                count++;

                if (count >= _this3.assetPaths.length) {
                  completeCB && completeCB();
                }
              });
            }
          };

          for (var i = 0; i < this.assetPaths.length; i++) {
            _loop();
          }

          this._isLoaded = true;
        };

        _proto.onAssetBundleReady = function onAssetBundleReady() {
          var _this4 = this;

          if (!this._isLoaded) {
            this._isHighPerformance = true;
            this.createObjectsAsyncByPaths(function () {
              if (!_this4._isHighPerformance) {
                _this4.destroyDynamicLoadingObjects();
              }
            });
          }
        };

        _proto.destroyDynamicLoadingObjects = function destroyDynamicLoadingObjects() {
          for (var i = 0; i < this._usingObjects.length; i++) {
            var node = this._usingObjects[i];

            if (node) {
              node.destroy();
            }
          }

          this._usingObjects = []; // this.clearResourcesLoaded();

          this._isLoaded = false;

          if (sys.isNative) {
            sys.garbageCollect();
          }
        };

        return DynamicLoadingPrefabControl;
      }(BaseDynamicLoading)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventListenerManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, warn, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3c085XLolNK4pPd/oLUMOG1", "EventListenerManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EventListenerManager = exports('EventListenerManager', (_dec = ccclass('EventListenerManager'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventListenerManager, _Component);

        function EventListenerManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.handlers = {};
          return _this;
        }

        var _proto = EventListenerManager.prototype;

        _proto.on = function on(eventName, handler, target) {
          var objHandler = {
            handler: handler,
            target: target
          };
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            handlerList = [];
            this.handlers[eventName] = handlerList;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var existObjHandler = handlerList[i];

            if (!existObjHandler) {
              handlerList[i] = objHandler;
              return i;
            } else {
              if (existObjHandler.handler === handler && existObjHandler.target === target) {
                warn("[EventListenerManager] Existing target: " + target + " and its handler: " + handler.name + " were already registered to an event: " + eventName);
                return i;
              }
            }
          }

          handlerList.push(objHandler);
          return handlerList.length;
        };

        _proto.off = function off(eventName, handler, target) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var oldObj = handlerList[i];

            if (oldObj.handler === handler && target === oldObj.target) {
              handlerList.splice(i--, 1);
            }
          }
        };

        _proto.targetOff = function targetOff(target) {
          for (var eventName in this.handlers) {
            var handlerList = this.handlers[eventName];

            if (handlerList) {
              for (var i = 0; i < handlerList.length; i++) {
                if (handlerList[i].target === target) {
                  handlerList.splice(i--, 1);
                }
              }
            }
          }
        };

        _proto.emit = function emit(eventName) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          for (var i = 0; i < handlerList.length; i++) {
            var objHandler = handlerList[i];

            if (objHandler && objHandler.handler && objHandler.target) {
              objHandler.handler.apply(objHandler.target, args);
            }
          }
        };

        return EventListenerManager;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventNames.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ee628icwdpH9qW5mmecXm9c", "EventNames", undefined);

      var EventNames = exports('default', {
        //network
        JOIN_GAME_SUCCESS: 'JOIN_GAME_SUCCESS',
        JOIN_GAME_FAIL: 'JOIN_GAME_FAIL',
        //table
        TABLE_START_SPIN: 'TABLE_START_SPIN',
        TABLE_STOP_SPIN: 'TABLE_STOP_SPIN',
        FAST_TO_RESULT_FINISH: 'FAST_TO_RESULT_FINISH',
        //slot button
        SPIN_CLICK: 'SPIN_CLICK',
        FAST_TO_RESULT_CLICK: 'FAST_TO_RESULT_CLICK',
        AUTO_SPIN_START: 'AUTO_SPIN_START',
        AUTO_SPIN_STOP: 'AUTO_SPIN_STOP',
        //cutscene
        BIGWIN_START: 'BIGWIN_START',
        BIGWIN_END: 'BIGWIN_END',
        SKIP_BIGWIN_FTR: 'SKIP_BIGWIN_FTR',
        JACKPOT_START: 'JACKPOT_START',
        JACKPOT_END: 'JACKPOT_END',
        FREEOPTION_RESULT_START: 'FREEOPTION_RESULT_START',
        //payline
        DRAWING_LINE_CLEAR: 'DRAWING_LINE_CLEAR',
        DRAWING_LINE_ADD: 'DRAWING_LINE_ADD',
        DRAWING_LINE_ADD_FIRST: 'DRAWING_LINE_ADD_FIRST',
        DRAWING_LINE_ADD_LAST: 'DRAWING_LINE_ADD_LAST',
        DRAWING_LINE_ADD_DOT: 'DRAWING_LINE_ADD_DOT',
        //BET
        BET_UPDATE: 'BET_UPDATE',
        BET_LINE_PREUPDATE: 'BET_LINE_PREUPDATE',
        BET_LINE_UPDATE: 'BET_LINE_UPDATE',
        //WALLET
        SWITCH_WALLET: 'SWITCH_WALLET',
        START_UPDATE_WALLET: 'START_UPDATE_WALLET',
        //SESSION
        GAME_RESTART: 'GAME_RESTART',
        GAME_RESET_SESSION: 'GAME_RESET_SESSION',
        //gamemode
        SWITCH_MODE_TRIAL: 'GAME_MODE_TRIAL',
        SWITCH_MODE_REAL: 'SWITCH_MODE_REAL',
        //performance
        ON_CHANGE_PERFORMANCE: 'ON_CHANGE_PERFORMANCE',
        //loading
        CREATE_ON_DEMAND_OBJECT: 'CREATE_ON_DEMAND_OBJECT',
        REMOVE_ON_DEMAND_OBJECT: 'REMOVE_ON_DEMAND_OBJECT',
        OPEN_INFO: 'OPEN_INFO',
        //TUTORIAL:
        TUTORIAL_START: 'TUTORIAL_START',
        TUTORIAL_BREAK: 'TUTORIAL_BREAK',
        TUTORIAL_END: 'TUTORIAL_END',
        //TURBO
        TURBO_ON: 'TURBO_ON',
        TURBO_OFF: 'TURBO_OFF',
        //WIN AMOUNT
        FINISH_UPDATE_WINAMOUNT: 'FINISH_UPDATE_WINAMOUNT',
        PLAY_ANIM_WINQUEST: 'PLAY_ANIM_WINQUEST',
        SPIN_CLICK_ACTION: 'SPIN_CLICK_ACTION'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExtendMiniBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MiniBox.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, MiniBox;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      MiniBox = module.MiniBox;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "afbbdA/+LpEJ5EjFSM+Lt3e", "ExtendMiniBox", undefined);

      var ccclass = _decorator.ccclass;
      var ExtendMiniBox = exports('ExtendMiniBox', (_dec = ccclass('ExtendMiniBox'), _dec(_class = /*#__PURE__*/function (_MiniBox) {
        _inheritsLoose(ExtendMiniBox, _MiniBox);

        function ExtendMiniBox() {
          return _MiniBox.apply(this, arguments) || this;
        }

        var _proto = ExtendMiniBox.prototype;

        _proto.init = function init() {
          this.boxPosition = this.node.position.clone(); // Debug: { warn(this.boxPosition)}
        };

        return ExtendMiniBox;
      }(MiniBox)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExtendMiniTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './MiniTable.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, v3, tween, fadeTo, MiniTable;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      fadeTo = module.fadeTo;
    }, function (module) {
      MiniTable = module.MiniTable;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "75bc6NA5ZJIXKxx7X0zGeCp", "ExtendMiniTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var ExtendMiniTable = exports('ExtendMiniTable', (_dec = ccclass('ExtendMiniTable'), _dec2 = property(Prefab), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_MiniTable) {
        _inheritsLoose(ExtendMiniTable, _MiniTable);

        function ExtendMiniTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MiniTable.call.apply(_MiniTable, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "extendBoxPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendBoxHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxExtendBox", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendWidthStep", _descriptor4, _assertThisInitialized(_this));

          _this.extendBoxes = [];
          _this.extendValues = void 0;
          _this.maxMiniBox = void 0;
          _this.currentPhase = 1;
          return _this;
        }

        var _proto = ExtendMiniTable.prototype;

        _proto.onLoad = function onLoad() {
          _MiniTable.prototype.onLoad.call(this);

          this.node.on("SHOW_MINI_BOXES", this.showMiniBoxes, this);
          this.node.on("HIDE_MINI_BOXES", this.hideMiniBoxes, this);
          this.node.on("SHOW_EXTEND_BOXES", this.showExtendBoxes, this);
          this.node.on("HIDE_EXTEND_BOXES", this.hideExtendBoxes, this);
        };

        _proto.initBoxes = function initBoxes() {
          _MiniTable.prototype.initBoxes.call(this);

          this.initExtendBoxes();
          this.hideExtendBoxes();
        };

        _proto.initExtendBoxes = function initExtendBoxes() {
          var maxMiniBox = this.colNumber * this.rowNumber;

          for (var index = 0; index < this.maxExtendBox; index++) {
            var eBox = instantiate(this.extendBoxPrefab);
            this.extendBoxHolder.addChild(eBox);
            eBox.active = true;
            eBox['boxIndex'] = maxMiniBox + index;
            this.extendBoxes.push(eBox);
            eBox.setPosition(this.getPosExtendBox(index));
            eBox.emit('INIT');
          }
        };

        _proto.getPosExtendBox = function getPosExtendBox(index) {
          var x = ((1 - this.maxExtendBox) / 2 + index) * this.extendWidthStep;
          return v3(x, 0);
        };

        _proto.showMiniBoxes = function showMiniBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.currentPhase = 1;
          this.listBoxes.forEach(function (box) {
            return box.emit("SHOW");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.hideMiniBoxes = function hideMiniBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.listBoxes.forEach(function (box) {
            return box.emit("HIDE");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.showExtendBoxes = function showExtendBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.currentPhase = 2;
          this.extendBoxHolder.active = true;
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("SHOW");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.hideExtendBoxes = function hideExtendBoxes(callBack, time) {
          if (callBack === void 0) {
            callBack = null;
          }

          if (time === void 0) {
            time = 0;
          }

          this.extendBoxHolder.active = false;
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("HIDE");
          });

          if (time > 0 && callBack) {
            this.scheduleOnce(callBack, time);
          } else {
            callBack && callBack();
          }
        };

        _proto.resumeTable = function resumeTable(data, defaultValue) {
          if (!data) return;

          for (var i = 0; i < this.listBoxes.length; i++) {
            if (data[i] !== defaultValue) {
              this.listBoxes[i].emit("BOX_OPEN", data[i], true, true);
            }
          }
        };

        _proto.openBox = function openBox(data, callback) {
          var index = data.index,
              value = data.value;

          if (index < this.listBoxes.length) {
            this.listBoxes[index].emit("BOX_OPEN", value, false, true, callback);
          } else {
            index -= this.listBoxes.length;
            this.extendBoxes[index].emit("BOX_OPEN", value, false, true, callback);
          }
        };

        _proto.openAllBoxes = function openAllBoxes(result, callback) {
          if (this.currentPhase === 1) {
            _MiniTable.prototype.openAllBoxes.call(this, result, callback);
          } else {
            this.result = result;

            for (var i = 0; i < this.extendBoxes.length; i++) {
              var eBox = this.extendBoxes[i];

              if (eBox.isOpen === false) {
                var randValue = this.getRandomValue();
                eBox.stopAnimClick();
                eBox.emit("BOX_OPEN", randValue, true, false, null);
                fadeTo(eBox, 0.5, 0.5);
              }
            }

            if (callback && typeof callback === 'function') {
              tween(this.node).delay(this.openAllBoxDelay).call(function () {
                callback();
              }).start();
            }
          }
        };

        _proto.autoClickExtend = function autoClickExtend() {
          var index = this.randRange(0, this.extendBoxes.length);
          this.listBoxes[index].onClickItem(null, true);
        };

        _proto.autoClick = function autoClick() {
          if (this.currentPhase === 2) {
            var index = this.randRange(0, this.extendBoxes.length);
            this.extendBoxes[index].onClickItem(null, true);
          } else {
            var _index = this.randRange(0, this.listBoxes.length);

            this.listBoxes[_index]["isOpen"] ? this.autoClick() : this.listBoxes[_index].onClickItem(null, true);
          }
        };

        _proto.resetTable = function resetTable() {
          this.listBoxes.forEach(function (box) {
            return box.emit("BOX_RESET");
          });
          this.extendBoxes.forEach(function (eBox) {
            return eBox.emit("BOX_RESET");
          });
          this.hideExtendBoxes();
          this.currentPhase = 1;
        };

        return ExtendMiniTable;
      }(MiniTable), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "extendBoxPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "extendBoxHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "maxExtendBox", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "extendWidthStep", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 150;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeGameOption.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SlotUIScene;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "32733MXtthJI5HAVD+VqrX/", "FreeGameOption", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FreeGameOption = exports('FreeGameOption', (_dec = ccclass('FreeGameOption'), _dec(_class = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(FreeGameOption, _SlotUIScene);

        function FreeGameOption() {
          return _SlotUIScene.apply(this, arguments) || this;
        }

        var _proto = FreeGameOption.prototype;

        _proto.exit = function exit(callback) {
          if (callback === void 0) {
            callback = null;
          }

          if (callback) this.callback = callback;

          if (this.callback) {
            this.node.emit("STOP");
            this.callback();
          }

          this.node.active = false;
        };

        return FreeGameOption;
      }(SlotUIScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeGameWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './SlotGameWriter.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SlotSceneType, SlotGameMode, SlotGameWriter;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      SlotGameWriter = module.SlotGameWriter;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c210eUJPypIAICb9y9T+yr/", "FreeGameWriter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FreeGameWriter = exports('FreeGameWriter', (_dec = ccclass('FreeGameWriter'), _dec(_class = /*#__PURE__*/function (_SlotGameWriter) {
        _inheritsLoose(FreeGameWriter, _SlotGameWriter);

        function FreeGameWriter() {
          return _SlotGameWriter.apply(this, arguments) || this;
        }

        var _proto = FreeGameWriter.prototype;

        _proto.makeScriptShowResults = function makeScriptShowResults() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio = dataStore.playSession,
              matrix = _dataStore$playSessio.matrix,
              winAmount = _dataStore$playSessio.winAmount,
              winAmountPS = _dataStore$playSessio.winAmountPS,
              payLines = _dataStore$playSessio.payLines,
              bonusGame = _dataStore$playSessio.bonusGame,
              freeGameRemain = _dataStore$playSessio.freeGameRemain,
              freeGameTotal = _dataStore$playSessio.freeGameTotal,
              jackpotInfo = _dataStore$playSessio.jackpotInfo;
          var betData = dataStore.betData;
          var listScript = [];
          listScript.push({
            command: "_setUpPaylines",
            data: {
              matrix: matrix,
              payLines: payLines
            }
          });
          listScript.push({
            command: "_pauseUpdateJP"
          });
          listScript.push({
            command: "_showBigWild",
            data: {
              isResume: false
            }
          }); //TODO: jackpot

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jackpotAmount = 0;
            var jpLineId;

            if (arrayJP && arrayJP.length > 2) {
              jackpotAmount = Number(arrayJP[1]);
              jpLineId = arrayJP[2];
            }

            if (jpLineId) {
              listScript.push({
                command: "_showJackpotPayLine",
                data: {
                  jpPayLineID: jpLineId
                }
              });
            }

            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroJackpotGame
              }
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.JackpotWin,
                content: {
                  winAmount: jackpotAmount,
                  currentBetData: betData.getTotalBet()
                }
              }
            });
            listScript.push({
              command: "_resumeUpdateJP"
            });
          }

          if (bonusGame && bonusGame > 0) {
            if (winAmount && winAmount > 0) {
              listScript.push({
                command: '_updateWinningAmount',
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_showBonusPayLine"
            });
            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroBonusGame
              }
            });
            listScript.push({
              command: "_newGameMode",
              data: {
                name: "bonusGame"
              }
            });
            listScript.push({
              command: "_resumeGameMode",
              data: {
                name: SlotGameMode.FreeGame
              }
            });
          }

          if (payLines && payLines.length > 0) {
            listScript.push({
              command: "_blinkAllPaylines"
            });
            listScript.push({
              command: "_showFreePayline"
            });
          }

          if (!freeGameRemain || freeGameRemain <= 0) {
            if (winAmountPS && winAmountPS > 0) {
              listScript.push({
                command: '_updateWinningAmount',
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_delayTimeScript",
              data: 1
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.TotalWinPanel,
                content: {
                  winAmount: winAmountPS,
                  freeGameTotal: freeGameTotal
                }
              }
            });
            listScript.push({
              command: "_clearPaylines"
            });
            listScript.push({
              command: "_gameExit"
            });
          } else {
            if (freeGameRemain > dataStore.spinTimes) {
              listScript.push({
                command: "_showScatterPayLine"
              });
              listScript.push({
                command: "_moveParticles"
              });
              listScript.push({
                command: "_addSpinTimesAnimation",
                data: freeGameRemain - dataStore.spinTimes
              });
              dataStore.spinTimes = freeGameRemain;
              listScript.push({
                command: "_updateSpinTimes",
                data: freeGameRemain
              });
              listScript.push({
                command: "_delayTimeScript",
                data: 0.5
              });
            } else {
              dataStore.spinTimes = freeGameRemain;
              listScript.push({
                command: "_updateSpinTimes",
                data: freeGameRemain
              });
            }

            listScript.push({
              command: "_gameRestart"
            });
          }

          return listScript;
        };

        return FreeGameWriter;
      }(SlotGameWriter)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreespinOption.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './CustomEnum.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, SlotUIScene, TutorialTriggerType, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "8204ahS8mpMnY9z9PezUrML", "FreespinOption", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseFreespinOption = exports('BaseFreespinOption', (_dec = ccclass('BaseFreespinOption'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(BaseFreespinOption, _SlotUIScene);

        function BaseFreespinOption() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "options", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownText", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSelectTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownTime", _descriptor4, _assertThisInitialized(_this));

          _this.repeatCountDown = null;
          _this._count = null;
          return _this;
        }

        var _proto = BaseFreespinOption.prototype; //enable option when open

        _proto.enter = function enter() {
          this.guiMgr.onIngameEvent(TutorialTriggerType.EnterFreeGameOption, 'ON_ENTER_FREEGAME_OPTION');
          this.options.children.forEach(function (item) {
            item.getComponent(Button).interactable = true;
            setOpacity(item, 255);
          });
          this.runAutoSelectOption();
          this.soundPlayer && this.soundPlayer.playMusic("BGM_SELECT_OPTION");
        };

        _proto.runAutoSelectOption = function runAutoSelectOption() {
          var _this2 = this;

          this._count = this.autoSelectTime;

          if (this.countDownText) {
            this.setOpacity(this.countDownText.node, 255);
            this.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + this._count + "s";
          }

          this.repeatCountDown = function () {
            if (_this2._count == 0) {
              var randomOption = Math.ceil(Math.random() * _this2.options.children.length);

              _this2.optionClick(null, randomOption);

              _this2.unschedule(_this2.repeatCountDown);
            }

            _this2._count--;

            if (_this2.countDownText) {
              _this2.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + _this2._count + "s";
            }

            if (_this2._count <= _this2.countDownTime) {
              _this2.playAudioCountDown();
            }
          };

          this.schedule(this.repeatCountDown, 1);
        }; //disable option when close


        _proto.optionClick = function optionClick(ev, index) {
          this.unschedule(this.repeatCountDown);
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.soundPlayer && this.soundPlayer.playSfx("BONUS_COIN_SELECT");

          if (this.countDownText) {
            this.setOpacity(this.countDownText.node, 0);
          }

          this.options.children.forEach(function (item, i) {
            item.getComponent(Button).interactable = false;

            if (i + 1 == index) {
              setOpacity(item, 255);
            } else {
              setOpacity(item, 150);
            }
          });
          this.runAnimSelecedOption(index);
        };

        _proto.runAnimSelecedOption = function runAnimSelecedOption(option) {
          // to do
          this.guiMgr.onIngameEvent(TutorialTriggerType.FreeGameOptionClick, 'FREEGAME_OPTION_SELECT');
          this.mainDirector.freeSpinOptionTrigger(option);
        };

        _proto.playAudioCountDown = function playAudioCountDown() {
          this.soundPlayer && this.soundPlayer.playSfx("COUNT_DOWN_30S");
        };

        return BaseFreespinOption;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "options", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "countDownText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoSelectTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "countDownTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, tween, Vec3, Button, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "f8577QAtftI9po6B2oqnGtz", "GambleBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GambleBox = exports('GambleBox', (_dec = ccclass('GambleBox'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GambleBox, _GameObject);

        function GambleBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelScore", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxClick", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxOpen", _descriptor5, _assertThisInitialized(_this));

          _this.tweenClick = void 0;
          return _this;
        }

        var _proto = GambleBox.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node.on("PLAY_ANIM_CLICK", this.playAnimClick, this);
          this.node.on("STOP_ANIM_CLICK", this.stopAnimClick, this);
          this.node.on("OPEN", this.playAnimOpen, this);
          this.node.on("DIM", this.dim, this);
          this.node.on("RESET", this.resetBox, this);
          this.node.on("ENABLE", this.enableClick, this);
          this.node.on("DISABLE", this.disableClick, this);
          this.node.isOpen = false;
        };

        _proto.show = function show() {
          this.node.active = true;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.onClickBox = function onClickBox(e) {
          if (this.node.isOpen) return;
          var event = new Event('CLICK_BOX', true);
          this.node.dispatchEvent(event);
        };

        _proto.playAnimClick = function playAnimClick() {
          this.soundBoxClick && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxClick);
          var time = 0.02;
          this.stopAnimClick();
          this.tweenClick = tween(this.node).repeatForever(tween(this.node).by(time, {
            position: new Vec3(-10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(-10, 0, 0)
          }));
          this.tweenClick.start();
        };

        _proto.stopAnimClick = function stopAnimClick() {
          if (this.tweenClick) this.tweenClick.stop();
          this.tweenClick = null;
        };

        _proto.playAnimOpen = function playAnimOpen(value, callback) {
          var _this2 = this;

          this.node.isOpen = true;
          this.disableClick();
          this.soundBoxOpen && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxOpen);
          tween(this.node).delay(0.5).call(function () {
            _this2.stopAnimClick();

            _this2.showScore(value);
          }).delay(0.5).call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }
          }).start();
        };

        _proto.dim = function dim() {
          this.setOpacity(this.node, 150);
        };

        _proto.showScore = function showScore(value) {
          this.labelScore.string = value.toString();
        };

        _proto.enableClick = function enableClick() {
          this.node.getComponent(Button).interactable = true;
        };

        _proto.disableClick = function disableClick() {
          this.node.getComponent(Button).interactable = false;
        };

        _proto.resetBox = function resetBox() {
          this.stopAnimClick();
          this.labelScore.string = "";
          this.symbolNode.active = false;
          this.setOpacity(this.staticNode, 255);
          this.setOpacity(this.node, 255);
          this.node.isOpen = false;
          this.enableClick();
        };

        return GambleBox;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "symbolNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelScore", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxClick", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxOpen", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './BaseDirector.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, v3, SlotGameMode, BaseDirector;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6e5b7pgYPxE77AttN0m8GZL", "GambleDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var GambleDirector = exports('GambleDirector', (_dec = ccclass('GambleDirector'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(GambleDirector, _BaseDirector);

        function GambleDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxNumber", _descriptor3, _assertThisInitialized(_this));

          _this.listBoxes = [];
          _this.listOpenedIndexes = [];
          _this.isWaitingResult = false;
          _this.currentPick = void 0;
          _this.maxOpenBoxes = 1;
          _this.remainValues = [];
          _this.isIdle = true;
          _this.callbackStateUpdate = null;
          _this._delayTimeCallback = null;
          _this.countDownText = null;
          _this.isClickStopGamble = false;
          return _this;
        }

        var _proto = GambleDirector.prototype;

        _proto.onLoad = function onLoad() {
          // Debug: { window['gamble'] = this; }
          _BaseDirector.prototype.onLoad.call(this);

          this.setOpacity(this.node, 0);
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_SHOW", this.showGame, this);
          this.node.on("GAME_HIDE", this.hideGame, this);
          this.node.on('CLICK_BOX', this.onClickBox, this);
          this.init();
          if (this.mainDirector) this.mainDirector.gameModes[SlotGameMode.GambleGame] = this.node;
        };

        _proto.showGame = function showGame() {
          this.node.active = true;
        };

        _proto.hideGame = function hideGame() {
          this.node.active = false;
        };

        _proto.init = function init() {
          this.writer = this.node['writer'];
          this.isWaitingResult = false;
          this.node.active = false;
          this.initBoxes();
        };

        _proto.initBoxes = function initBoxes() {
          for (var index = 0; index < this.boxNumber; index++) {
            var box = instantiate(this.boxPrefab);
            box.boxIndex = index;
            box.active = true;
            this.table.addChild(box);
            this.listBoxes.push(box);
            box.setPosition(this.getPosByIndex(index));
          }
        };

        _proto.getPosByIndex = function getPosByIndex(index) {
          var WIDTH = 175;
          var x = (index - (this.boxNumber - 1) / 2) * WIDTH;
          return v3(x, 0, 0);
        };

        _proto.onClickBox = function onClickBox(event) {
          event.propagationStopped = true;
          if (this.isWaitingResult) return;
          if (this.isClickStopGamble) return;
          var box = event.target;

          if (this.canOpenBox(box)) {
            this.isIdle = false;
            this.currentPick = box.boxIndex;
            this.runAction("GambleGameClick", this.currentPick);
            this.listOpenedIndexes.push(this.currentPick);
            box.emit("DISABLE");
            box.emit("PLAY_ANIM_CLICK");
          }
        };

        _proto.onClickStopGamble = function onClickStopGamble() {
          if (this.isWaitingResult) return;
          if (this.isClickStopGamble) return;
          var gambleRemain = this.dataStore.playSession.gambleRemain;
          if (!gambleRemain) return this._gameExit();
          this.isWaitingResult = true;
          this.isClickStopGamble = true;
          this.mainDirector.gameStateManager.triggerGambleSpinRequest(1, 0);
        };

        _proto.canOpenBox = function canOpenBox(box) {
          if (this.listOpenedIndexes.length >= this.maxOpenBoxes) return false;
          if (this.listOpenedIndexes.indexOf(box.boxIndex) > -1) return false;
          return this.listOpenedIndexes.length < this.maxOpenBoxes;
        };

        _proto.resetGambleGame = function resetGambleGame() {
          this.isIdle = true;
          this.currentPick = void 0;
          this.listOpenedIndexes = [];
          this.isClickStopGamble = false;
          this.listBoxes.forEach(function (box) {
            return box.emit("RESET");
          });
        }
        /**
         * @receive_data
         * */
        ;

        _proto.stateUpdate = function stateUpdate(callback) {
          this.callbackStateUpdate = callback;

          if (this.isClickStopGamble) {
            this._gameExit();

            return;
          }

          this.runAction('ResultReceive');
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          if (typeof this.callbackStateUpdate == "function") {
            this.callbackStateUpdate();
            this.callbackStateUpdate = null;
          }
        };

        _proto.ready = function ready() {
          this.isWaitingResult = false;
          this.runAction("GambleGameStart");
        };

        _proto._checkPauseTutorial = function _checkPauseTutorial(flag) {
          return this.guiMgr.checkPauseTutorial(flag);
        };

        _proto.pickOutRandomValue = function pickOutRandomValue() {
          var randomIndex = Math.floor(Math.random() * this.remainValues.length);
          return this.remainValues.splice(randomIndex, 1)[0];
        }
        /** 
         * @commands
         */
        ;

        _proto._enableGambleButton = function _enableGambleButton(script, isEnable) {
          this.eventManager.emit("ENABLE_GAMBLE_BUTTON", isEnable);
          this.executeNextScript(script);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this2 = this;

          this._delayTimeCallback = function () {
            _this2.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._showCutscene = function _showCutscene(script, _ref) {
          var _this3 = this;

          var name = _ref.name,
              content = _ref.content;

          if (this._checkPauseTutorial('pauseFreeGame') || this._checkPauseTutorial('pauseBonusGame') || this._checkPauseTutorial('pauseGambleGame')) {
            this.storeCurrentScripts = '_showCutscene';
            var data = {
              name: name,
              content: content
            };
            this.storeNextScripts = {
              script: script,
              data: data
            };
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this3.executeNextScript(script);
            });
          }
        };

        _proto._gambleGameStart = function _gambleGameStart(scripts) {
          if (this._checkPauseTutorial('pauseGambleGame')) {
            this.storeCurrentScripts = '_gambleGameStart';
            this.storeNextScripts = {
              scripts: scripts,
              data: {}
            };
          } else {
            this.executeNextScript(scripts);
          }
        };

        _proto._sendRequestPlayGamble = function _sendRequestPlayGamble(scripts, _ref2) {
          var openCell = _ref2.openCell;
          this.isWaitingResult = true;
          var winAmountPS = this.dataStore.playSession.winAmountPS;
          this.dataStore.setCurrentWallet(this.dataStore.getCurrentWallet() - winAmountPS);
          this.mainDirector.guiMgr.updateWallet(this.dataStore.getWallets());
          this.dataStore.pauseCurrentWallet();
          this.mainDirector.gameStateManager.triggerGambleSpinRequest(openCell, winAmountPS);
          this.executeNextScript(scripts);
        };

        _proto._showResult = function _showResult(script) {
          this.isWaitingResult = false;
          this.runAction("ShowResult");
          this.executeNextScript(script);
        };

        _proto._openPickedBox = function _openPickedBox(scripts, data) {
          var _this4 = this;

          var index = data.index,
              value = data.value;
          var box = this.listBoxes[index];
          box.emit("OPEN", value, function () {
            _this4.executeNextScript(scripts);
          });
        };

        _proto._setRemainValues = function _setRemainValues(scripts, remainValues) {
          this.remainValues = remainValues;
          this.executeNextScript(scripts);
        };

        _proto._openAllBoxes = function _openAllBoxes(scripts) {
          var _this5 = this;

          for (var i = 0; i < this.listBoxes.length; i++) {
            var box = this.listBoxes[i];

            if (box.isOpen === false) {
              var randomValue = this.pickOutRandomValue();
              box.emit("STOP_ANIM_CLICK");
              box.emit("OPEN", randomValue, null);
              this.setOpacity(box, 180);
            }
          }

          this.scheduleOnce(function () {
            _this5.executeNextScript(scripts);
          }, 2);
        };

        _proto._updateWinningAmount = function _updateWinningAmount(scripts, _ref3) {
          var winAmount = _ref3.winAmount,
              time = _ref3.time;
          this.guiMgr.updateWinAmount(winAmount, time / 1000);
          this.executeNextScript(scripts);
        };

        _proto._clearWinAmount = function _clearWinAmount(script) {
          this.guiMgr.fadeOutWinAmount();
          this.executeNextScript(script);
        };

        _proto._showBigWin = function _showBigWin(script, _ref4) {
          var _this6 = this;

          var name = _ref4.name,
              content = _ref4.content;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this6.guiMgr.showCutScene(name, content, function () {
                _this6.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showBigWin",
              isSkippable: true
            });
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this6.executeNextScript(script);
            });
          }
        };

        _proto._gambleGameRestart = function _gambleGameRestart(scripts) {
          this.resetGambleGame();
          this.executeNextScript(scripts);
        };

        _proto._gameExit = function _gameExit() {
          this.resetGambleGame();
          this.eventManager.emit("HIDE_GAMBLE_GAME");
          this.node.exit();
        };

        return GambleDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boxPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "boxNumber", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GambleWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts', './CustomEnum.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, GameObject, shuffleArray, removeElementByValue, SlotSceneType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      shuffleArray = module.shuffleArray;
      removeElementByValue = module.removeElementByValue;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6ca40ppxixI+Zf7C06uqOLq", "GambleWriter", undefined);

      var ccclass = _decorator.ccclass;
      var GambleWriter = exports('GambleWriter', (_dec = ccclass('GambleWriter'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GambleWriter, _GameObject);

        function GambleWriter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.currentPick = null;
          _this.allValues = [0, 0, 2, 2];
          return _this;
        }

        var _proto = GambleWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptGambleGameStart = function makeScriptGambleGameStart() {
          return [{
            command: "_gambleGameStart"
          }];
        };

        _proto.makeScriptGambleGameClick = function makeScriptGambleGameClick(boxIndex) {
          this.currentPick = boxIndex;
          return [{
            command: '_clearWinAmount'
          }, {
            command: "_sendRequestPlayGamble",
            data: {
              openCell: boxIndex
            }
          }];
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var listScript = [];
          listScript.push({
            command: "_showResult"
          });
          return listScript;
        };

        _proto.makeScriptShowResult = function makeScriptShowResult() {
          var listScript = [];
          var _this$dataStore$playS = this.dataStore.playSession,
              winAmountPS = _this$dataStore$playS.winAmountPS,
              gambleRemain = _this$dataStore$playS.gambleRemain;
          var gambleValue = winAmountPS > 0 ? 2 : 0;
          listScript.push({
            command: "_openPickedBox",
            data: {
              index: this.currentPick,
              value: gambleValue
            }
          });
          var cloneValues = this.allValues.slice(); // copy

          var remainValues = shuffleArray(removeElementByValue(cloneValues, gambleValue));
          listScript.push({
            command: "_setRemainValues",
            data: remainValues
          });
          listScript.push({
            command: "_openAllBoxes"
          });

          if (winAmountPS > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          listScript.push({
            command: "_showCutscene",
            data: {
              name: SlotSceneType.TotalWinPanel,
              content: {
                winAmount: winAmountPS
              }
            }
          });

          if (gambleRemain > 0) {
            listScript.push({
              command: "_gambleGameRestart"
            });
            return listScript;
          } else {
            listScript.push({
              command: "_enableGambleButton",
              data: false
            });
            listScript.push({
              command: "_gameExit"
            });
            return listScript;
          }
        };

        return GambleWriter;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/game-network.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        function a0_0x126a() {
          var _0x34464c = ['pingTimeout', 'decoder', 'MessageManager\x20-\x20_initSocket\x20-\x20exist\x20socket.', 'maxSize', '_ackPacket', 'ondisconnect', 'POPUP_DISCONNECTED_EVENT', '__initialize', 'https', 'JSONP\x20disabled', 'buffer', 'No\x20transports\x20available', 'area', 'toLowerCase', 'size', 'once', 'Connect\x20without\x20login\x20due\x20to\x20missing\x20serviceRest', 'msec', 'warn', 'headers', '_intervalExtendToken', 'enable', 'accept-charset', '_sendPacket', 'setUserType', 'userAgent', 'NEW_MESSAGE_EVENT', 'enqueue', 'unregisterEvent', 'removeBlobs', 'MessageManager\x20-\x20_handleSocketEvent.', 'connect_timeout', 'hasOwnProperty', '\x20is\x20not\x20a\x20scalar\x20value', 'send-message-success', 'flushing\x20%d\x20packets\x20in\x20socket', 'nsps', 'name', 'floor', 'socket.io-client', 'Possible\x20EventEmitter\x20memory\x20leak\x20detected.\x20', 'setPing', '#33CC99', 'ontimeout', 'setToken', 'isSocketAvailable', 'MozWebSocket', 'isAbleSendingData', 'days', 'transport\x20not\x20open\x20-\x20deferring\x20close', 'object', 'reconnect', 'SocketManager\x20-\x20force-disconnect\x20>>>\x20close\x20connect!', 'connect', 'jitter', 'takeBinaryData', 'customEventMapping', 'listener', 'storage', 'MessageManager\x20-\x20_initSocket.', 'invalid\x20payload', 'onPacket', 'defaultOption', 'engine.io-client:socket', 'hostname', 'index', 'numberRetrySendingMessage', 'table', 'source', 'save', 'socket\x20receive:\x20type\x20\x22%s\x22,\x20data\x20\x22%s\x22', 'method', 'EventManager\x20-\x20newEvent:\x20data\x20is\x20null.', 'shouldWaitForACK', 'COMMAND_FAILED_CONC_OVER_LIMIT', 'Socket', 'performing\x20disconnect\x20(%s)', 'availableAmount', 'hasListeners', 'userInfo', 'rememberUpgrade', 'buildSocketUrlQueryParam', 'device', '_duplicateEventId', 'network', 'Updated\x20url\x20must\x20not\x20empty.', 'message-pushed', 'onPong', 'token', 'addEventListeners', 'undefined', 'COMMAND_FAILED_RETRY', 'TransportError', 'upgradeError', '#9933FF', 'reconnecting', 'https://', 'sid', 'ack', 'upgrading', 'handshake', 'onOpen', 'pVer', 'reconstructPacket', 'connect_error', 'pingInterval', 'CommandManager\x20%s\x20-\x20clean\x20up', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_RETRY:\x20messageId=%s,\x20numberResend=%s', '_encrypt_5_2', 'createElement', 'walletVersion', 'addListener', 'onHandshake', 'isView', 'minutes', 'encodePayloadAsBlob', '_initNewConnection', 'newListener', 'flags', 'Invalid\x20UTF-8\x20detected', '_duplicateMessageId', 'PONG', 'logFn', '0000', 'SOCKET_REQUEST_EVENT_V3', '10468955MOzMxJ', 'writing\x20close\x20packet', 'slice', '8705990fDRybK', 'websocket', '2.1.2', 'exports', 'numberResend', 'directory', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_CONC_OVER_LIMIT.\x20current\x20:\x20%s,\x20maximum:\x20%s', 'EventManager\x20-\x20newEvent:\x20duplicate\x20eventId\x20%s', 'Deferred', 'unshift', 'apply', 'host', 'polling', 'then', 'WebSocket', 'prev', 'getMaxListeners', 'Authen\x20token\x20success:\x20%j', 'create', 'startsWith', '#CC00FF', 'sId', '_resolve', 'parentNode', 'agent', 'mismatch-command', '_eventManager', 'warned', 'requestTimeout', 'defaultMaxListeners', 'decoded\x20%s\x20as\x20%j', 'player-can-not-connect', 'poor-connection', 'MessageManager\x20-\x20_handleSocketStatus.', '&ssid=', '_ids', 'resendCount', 'connected-connection', 'parser', '14403132LSZCoW', 'firebug', '#CC0000', 'SOCKET_RESPONSE_EVENT', 'ignoring\x20poll\x20-\x20transport\x20state\x20\x22%s\x22', '_callbacks', 'socket.io-parser', '2466669cxcdeR', 'submit', 'Logger', 'eventId', '_handleSocketEvent', 'hash', 'Content-type', 'error-pushed', '#99CC00', 'strict', 'onAck', 'SocketManager\x20-\x20chat-event:\x20%j', 'setWalletInfos', 'Invalid\x20byte\x20index', 'formatArgs', 'Lone\x20surrogate\x20U+', 'packets', 'relative', 'max', 'doPoll', 'starting\x20upgrade\x20probes', 'requestsCount', 'can-not-connect', '\x20ms', 'readyState', 'writable', 'xhr\x20poll\x20error', '#FF3300', '#0033CC', '_randomizationFactor', 'json', '___eio', 'textarea', 'replace', '%c\x20', 'main', 'SocketManager', 'message', 'encodePayload', 'eid', 'decoded', 'byteLength', 'onNetworkWarning', 'will\x20wait\x20%dms\x20before\x20reconnect\x20attempt', 'file', 'onopen', 'load', 'killed', 'attempts', 'unknown\x20packet\x20type\x20', 'getDisplayName', 'wallet-service-id', '#FF00CC', 'jsonp\x20poll\x20error', '_serverSocketVersion', 'code', 'clearRemainingCommand', 'decode', 'sendChatMessage:\x20_socketManager\x20was\x20not\x20setup.', 'includes', '_initSocket', '443', 'parser\x20error', 'wrapFn', 'skips', 'PlayerInfoStateManager', '#FF9900', '#CC3399', 'MessageManager\x20-\x20updateToken:\x20%j', 'probe\x20error:\x20', 'SOCKET_REQUEST_EVENT_V5_1', 'paused', 'color:\x20inherit', 'finishedReconstruction', 'Queue\x20is\x20empty', 'enablesXDR', 'svt', 'heartbeat', 'iterator', 'ackPacket', 'doWrite', 'CONNECTED_EVENT', 'packet\x20received\x20with\x20socket\x20readyState\x20\x22%s\x22', 'createTransport', '&games=', 'fired', 'substr', 'Queue', 'MessageManager\x20-\x20_handleSocketStatus\x20with\x20null\x20_socketManager', 'callback', 'open', 'flush', '#CC3366', 'Decoder', 'server\x20disconnect\x20(%s)', '_close', 'getPromise', 'updateLogger', 'EventManager\x20-\x20waitForEvent\x20was\x20timeout.\x20%s', 'setJitter', 'push', 'The\x20\x22emitter\x22\x20argument\x20must\x20be\x20of\x20type\x20EventEmitter.\x20Received\x20type\x20', 'onCannotSendMessage', 'ceil', 'opts', 'form', '#99CC33', 'isArray', 'iframeId', 'removeSendingMessage', 'setDisplayName', 'SocketManager\x20-\x20Init\x20new\x20connection!!!', 'readyState\x20%s', 'wss', '#00CCCC', 'cleanup', 'Queue\x20underflow', 'log', 'setAvatar', 'pAvaiAmt', 'hashMap', 'UPDATE_TOKEN', '[object\x20BlobConstructor]', 'src', '_messageIdServiceIdMap', 'map', 'toString', 'logFnWarn', 'setUserId', 'MessageManager\x20-\x20sendMessage:\x20%s\x20-\x20%j', '_config', 'Microsoft.XMLHTTP', 'deconstructPacket', 'CAN_NOT_SEND_MESSAGE_EVENT', '#CC33CC', 'forceNode', '#0066FF', '921f6ca5-1f32-494c-8a6f-cbf1211ce37f', 'SOCKET_REQUEST_EVENT_V4', 'connecting', 'local', 'copy', 'response', 'async', '#3333FF', 'onClose', 'clear', 'maxConcurrentCommand', 'isFull', 'keys', 'ondecoded', 'Haven\x27t\x20init\x20socket\x20connection.\x20Please\x20update\x20config.', 'addCommandManager', 'removeWaiting', 'walletType', 'href', '_reconnectionAttempts', 'randomizationFactor', 'Illegal\x20attachments', 'pop', 'after\x20called\x20too\x20many\x20times', 'commandPayload', '#0000FF', 'backoff', 'uuid', 'CAN_NOT_CONNECT', 'Unknown\x20type:\x20', 'prevBufferLen', 'split', 'Login\x20error.\x20Clean\x20up.', 'close\x20(%s)', '\x20listeners\x20added.\x20Use\x20emitter.setMaxListeners()\x20to\x20increase\x20limit', 'setTransport', 'currentLatencyIdx', 'addEventListener', '-1000px', '\x20times.\x20', 'debug', 'SockerManager\x20-\x20reconnect_error\x20in\x20', 'generateId', 'eventNames', 'toJSON', 'getAvatar', 'getResponseHeader', 'SEND_MESSAGE_SUCCESS_EVENT', 'null', 'walletInfos', 'compress', '#CC33FF', 'presence', 'event', 'ping', 'maxRetry', 'splice', 'SocketManagerNewMessage:\x20CANNOT\x20parse\x20message:\x20%s,\x20keyAB:\x20%j', '_startIntervalExtendToken', '#33CC33', 'waitForEvent', 'onShowPopupDisconnected', 'isSuccess', 'xscheme', 'removeChild', 'connect\x20attempt\x20will\x20timeout\x20after\x20%d', 'SocketManager\x20-\x20Pause\x20interval\x20sending\x20message!', 'opening\x20%s', 'setDisableHeaderCheck', 'receiveBuffer', 'secure', '_pendingSubscribeChannelList', 'pause', '_keyAB', 'script', 'pong', '#FF00FF', '#3300CC', 'password', 'we\x20are\x20currently\x20writing\x20-\x20waiting\x20to\x20pause', 'codePointAt', 'setMaxListeners', 'isAnonymousUser', 'priorWebsocketSuccess', 'dequeue', 'appendChild', '_commandIdFieldName', 'Active', 'updateKeyAB', '_events', 'getInstance', '#6600CC', 'formatters', 'eio_iframe_', 'onNetworkStatus', '#3333CC', '_isSkipMapNewEvent', '#9900CC', 'EIO', '[object\x20FileConstructor]', 'substring', 'STATUS_KILLED', 'clearAll', 'readAsArrayBuffer', 'EXPECTED_EVENT_TIMEOUT', 'year', 'parse\x20%s', 'ERROR', '#00CCFF', 'usingBrowserWebSocket', '#FF0066', '#66CC33', '?v=2', 'WebkitAppearance', 'timestampParam', '#0033FF', 'socket.io-client:url', 'second', 'playerStateInfo', 'SocketManager\x20-\x20DISCONNECTED.', '_handleConnectionStatus', 'set', 'abort', 'xhr', 'Request', 'port', 'off', '_registerSystemState', 'mins', 'regexp', 'listeners', 'io\x20client\x20disconnect', 'round', 'passphrase', 'test', '_placeholder', 'serviceId', '_handleReponseMessage', 'encoding\x20packet\x20%j', 'isEmpty', 'setWalletBalance', 'write', 'TextEncoder', 'Object', 'decodeBase64Packet', 'xhr\x20data\x20%s', 'STATUS_ALIVE', 'forceBase64', 'timeout', 'onping', 'pre-pause\x20writing\x20complete', 'reconstructor', 'defineProperty', 'extraHeaders', 'yrs', 'encodePacket', 'removeWaitingQueue', '_unSubscribe', '_data', 'subEvents', 'onCannotConnect', 'application/octet-stream', 'engine.io-client:websocket', 'delete', 'lib', 'onclose', 'onmessage', 'getSSID', 'reconPack', 'pollXhr', 'pausing', '#FF3399', 'disconnect', 'resolve', 'onevent', '#00CC33', 'CommandManager\x20%s\x20-\x20ack:\x20messageId=%s', 'uid', 'toUpperCase', 'MaxListenersExceededWarning', 'pWallet', 'humanize', 'update-token', 'socketUrl', 'onerror', 'callbackErr', 'emitting\x20event\x20%j', 'application/octet-stream;\x20charset=UTF-8', 'policyPort', 'exTkn', 'promotion', 'Updated\x20token\x20must\x20not\x20empty.', 'queueContents', 'sendBuffer', 'my\x20wallet\x20CANNOT\x20update\x20promotion\x20wallet.\x20current\x20version\x20[%s],\x20new\x20version\x20[%s],\x20wallet:\x20%j', 'isDebugging', 'promise', 'number', 'CAN_NOT_CONNECT_EVENT', 'b64', 'error', 'getWallets', '#FF33FF', 'urlVerifyToken', 'ssid', 'onHeartbeat', 'client-join-game-result', 'text/plain;charset=UTF-8', 'description', 'closing', 'Unhandled\x20error.', 'duration', 'CONNECTED_CONNECTION', 'transportOptions', 'unSubscribe', '_socketManager', 'pausing\x20current\x20transport\x20\x22%s\x22', 'BINARY_ACK', 'popup-disconnected-event', '[UnexpectedJSONParseError]:\x20', 'socket', 'Encoder', 'color', 'all', 'getAllWallet', 'getSubscribedChannel', 'serviceRest', 'probe', 'window', '#0000CC', '#00CC00', 'onpong', 'payload', 'canBeDuplicated', 'charAt', 'socket.io-client:socket', 'removeAllListeners', 'url', 'removeAllEventListeners', '?token=', 'body', 'registerOnce', 'skipReconnect', '_reconnect_attempt', 'amount', 'displayName', 'init', 'reconnect_error', 'millisecond', 'timestampRequests', 'pingIntervalTimer', 'secs', 'type', '.*?', 'onConnected', 'isBinary', 'http', 'enabled', '#CC3333', '_cachedMessage', 'wud', 'request', 'isBuffer', 'doLogin', 'packet', 'opening', 'doClose', 'games', 'close', 'position', 'cleanUp', 'COMMAND_FAILED_DUPLICATE', 'engine.io-client:polling-xhr', 'ANONYMOUS', 'forced\x20close', 'writing\x20ping\x20packet\x20-\x20expecting\x20pong\x20within\x20%sms', 'userType', 'DEBUG', 'error-pushed\x20%j', 'SocketManager\x20-\x20send\x20message:\x20counter=%s,\x20messageId=%s', 'socket\x20open', 'insert', 'RoutingEvent', 'success', 'colors', 'closeAndCleanUp', 'server\x20error', 'CommandManager\x20%s\x20-\x20COMMAND_FAILED_DUPLICATE.\x20Executing\x20type:\x20%j', 'isReactNative', 'Ignore\x20due\x20to\x20config\x20is\x20exist.', 'probing\x20transport\x20\x22%s\x22', 'function', 'setWalletBalanceV22', 'lastPing', 'onEvent', '9602NfzVRU', 'POOR_CONNECTION', 'closed', '#3399CC', '#CC9900', 'can-not-send-message', 'chat-event', '#3366CC', 'query', 'alive', 'long', 'reconnectionAttempts', 'shift', 'onload', 'MessageManager\x20-\x20Authen\x20token:\x20%s', '#FFCC00', 'onpacket', 'supportsBinary', '#FF0000', 'registerEventOnce', 'parser\x20error:\x20', 'socketio', 'binary', 'removeListener', '#6600FF', 'Content-Type', 'creating\x20transport\x20\x22%s\x22', '&env=', 'reconnection', 'rejectUnauthorized', 'removeEvent', '_emitter', 'top', 'socket-info', 'options', '#CC0066', 'getToken', '_routingEventHandler', '_opt', 'anchor', 'key', '_subscribe', 'got\x20binary\x20data\x20when\x20not\x20reconstructing\x20a\x20packet', 'day', 'path', 'sendPacket', 'managers', 'pong\x20-\x20latency:\x20%s,\x20avarage\x20latency:\x20%s', 'length', 'count', 'prototype', 'socket\x20close\x20with\x20reason:\x20\x22%s\x22', 'minute', 'CommandManager\x20%s\x20-\x20cannotSendMessage:\x20messageId=%s', 'encoded\x20%j\x20as\x20%s', 'decodePayload', '#CCCC00', 'queue', 'transport\x20closed', 'namespace', 'subs', 'env', 'getPrototypeOf', 'result', 'socket\x20error\x20%j', '#FF0033', 'CommandManager', 'arraybuffer', 'data', 'getOwnPropertySymbols', 'protocol', 'avatar', 'PacketManager', 'reset', 'head', 'registerEvent', 'setCurrency', 'state-updated', 'transport\x20close', 'The\x20value\x20of\x20\x22defaultMaxListeners\x22\x20is\x20out\x20of\x20range.\x20It\x20must\x20be\x20a\x20non-negative\x20number.\x20Received\x20', 'getUserId', 'client-state-request', 'Accept', '__importDefault', 'hasPacket', 'emitBuffered', 'authority', 'attachments', 'https:', 'wallet-updated', 'cert', '#FF3333', 'renderer', 'removeEventListener', 'SOCKET_RESPONSE_EVENT_V5_1', 'counter', 'filterUpgrades', 'acks', 'milliseconds', '_countPingOverTime', 'ipv6uri', 'value', '_encrypt', 'my\x20wallet\x20update:\x20%j', 'CommandManager\x20%s\x20-\x20resendMessage:\x20messageId=%s,\x20resendMessageId=%s,\x20numberResend=%s,\x20resendCount=%s', 'encodeQueryData', 'destroy', 'Invalid\x20continuation\x20byte', 'responseType', 'executeCommand', 'readAsDataURL', 'pAmt', '_sId', 'autoConnect', 'bind', 'pfx', '_commandHandlerMap', 'SocketManager\x20-\x20sendChatMessage:\x20%j', '\x22%s\x22\x20works\x20-\x20aborting\x20\x22%s\x22', 'responseText', 'listenerCount', 'EventManager\x20-\x20newEvent:\x20%j', 'doOpen', 'remove', 'num', 'factor', 'sendChatMessage', 'apiUrl', 'nsp', '6115990xjqqCu', 'DISCONNECT', '#FF6633', 'hrs', 'encodePayloadAsArrayBuffer', 'onLoad', 'setting\x20transport\x20%s', '\x20%c', 'server', 'writeBuffer', 'XMLHttpServiceRest', 'product', 'reconnect\x20success', 'processPacketQueue', 'jsonp', '_latency', '_eventsCount', '#0099FF', 'changing\x20transport\x20and\x20sending\x20upgrade\x20packet', 'state-pushed', 'isFullfill', 'chat-message', 'jsonp\x20polling\x20iframe\x20removal\x20error', 'threshold', '#3399FF', '_hmuid_', 'upgrade', 'requests', 'status', 'decodePayloadAsBinary', 'TextDecoder', 'STATUS_INIT', 'force-disconnect', '__esModule', '_packetManager', 'reduce', '_waitForEventTimeOutId', 'bad\x20ack\x20%s', 'console', 'call', 'indexOf', 'pow', '6jIYhNC', 'append', 'setMax', '#66CC00', 'diff', 'names', '_reject', 'Duplicate', 'random', 'SocketManager\x20-\x20send-message-success:\x20%s', 'CONNECT', '8NNVVWm', 'years', 'style', '://', 'pollComplete', 'concat', 'onconnect', 'instance', 'Transport', '#6633CC', 'filter', 'SockerManager\x20-\x20emit\x20event\x20can-not-connect!', 'attaching\x20ack\x20callback\x20to\x20event', 'Queue\x20overflow', 'EventManager', 'coerce', 'q51', '*/*', '_status', 'supports', 'transports', '__spreadArray', 'types', 'emit', 'ondata', 'POST', 'wallet', 'className', 'protocols', '_timeout', 'onreadystatechange', 'Connection\x20error', 'reject', 'fromCodePoint', 'encodeBase64Packet', 'prependOnceListener', 'getBlob', '#FF6600', 'onunload', 'userId', 'onack', 'localStorage', 'writing\x20packet\x20%j', 'send', 'encode', '_executingCommandType', 'hours', 'drain', 'ServiceRest', 'string', '_buildPacket', 'seconds', 'withCredentials', 'color:\x20', '#9933CC', 'mismatch-version', 'socket\x20closing\x20-\x20telling\x20transport\x20to\x20close', 'messageId', 'probe\x20transport\x20\x22%s\x22\x20failed', 'exception', 'DISCONNECTED_CONNECTION', 'updateToken', 'base64', '_socket', 'attachEvent', 'encoder', 'initSocket', 'pathNames', 'instances', '#33CCFF', 'pagehide', 'check', '11BqLwFd', 'updateAllCounter', '\x22encode\x20error\x22', '_subscribeChannelList', 'get', 'user-logged-out', 'reconnectionDelay', 'binaryType', 'transport', 'parse', '_reconnectionDelayMax', 'exists', 'ownKeys', '#3300FF', 'player-can-not-authen', 'utf-8', 'ids', 'fromCharCode', 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx', 'connected', 'forEach', 'reconnect_failed', 'upgrades', 'stringify', 'listLastLatency', 'has', 'useColors', 'EVENT', 'hasXDR', 'hasPromotionWalletType', 'currency', 'expected-event-timeout', 'version', 'Authen\x20token\x20fail:\x20%j', 'ACK', '_reconnection', 'min', 'hour', 'pingTimeoutTimer', 'CONNECTED', 'transport\x20error', 'boolean', '_maxListeners', 'SocketManager\x20-\x20emit\x20event\x20can-not-connect!', 'disconnected', 'ciphers', '#00CC66', '_validateDublicateCommandType', 'logFnError', '#CC3300', 'MessageManager', 'multiplex', 'ignoring\x20socket\x20cache\x20for\x20%s', 'join', 'match', 'perMessageDeflate', 'default', 'buffers', 'forceJSONP', 'probe\x20transport\x20\x22%s\x22\x20failed\x20because\x20of\x20error:\x20%s', 'The\x20\x22listener\x22\x20argument\x20must\x20be\x20of\x20type\x20Function.\x20Received\x20type\x20', 'iteratePacket', 'CHAT_MESSAGE_EVENT', 'sendMessage', 'COMMAND_SEND_SUCCESSFULLY', '_messageIdInfosMap', 'EventManager\x20-\x20cannotConnect.', 'transport\x20is\x20open\x20-\x20connecting', 'onreconnect', 'getOwnPropertyNames', '_stopIntervalExtendToken', 'prependListener', 'left', 'reconnectionDelayMax', '6785088xIvQrI', 'SOCKET_RESPONSE_EVENT_V5_2', 'onData', 'onlyBinaryUpgrades', 'documentElement', 'option', 'iframe', 'uri', 'engine', 'process', 'xhr\x20poll', 'setRequestHeader', '_eventHandlerMap', 'exec', 'action', 'setMin', 'target', '#CC0033', 'disconnected-connection', 'javascript:0', 'removeItem', 'MessageManager\x20-\x20closeAndCleanUp.', 'updateCounter', 'byteOffset', 'EventManager\x20-\x20clean\x20up.', 'registerGame', 'calling\x20ack\x20%s\x20with\x20%j', 'localAddress', 'ping\x20timeout', 'ping-event', 'unregisterGame', 'SocketManager\x20status\x20KILLED,\x20not\x20init\x20new\x20connection!', 'poll', 'socket.io-client:manager', 'user-logged-out:\x20%j', 'sendXhr', '#CCCC33', 'SocketManagerNewMessage:\x20%s', 'packetBuffer', 'abs', 'blob', 'pingTimeoutWarning', 'forceNew', 'onError', 'decodePacket', 'reconnect\x20failed', 'emitAll', 'MessageManager\x20-\x20sendChatMessage:\x20%j', 'maybeReconnectOnOpen', '/engine.io', 'subscribe', 'add', 'BINARY_EVENT', 'onCannotAuthen', '#FF33CC', 'PONG_EVENT', 'MISMATCH_COMMAND_ID', 'sending\x20connect\x20packet\x20with\x20query\x20%s', 'averageLatency', 'packetCreate', 'SOCKET_REQUEST_EVENT_V5_2', 'Login\x20success.\x20Connecting', 'encoding', 'onDrain', 'charCodeAt'];

          a0_0x126a = function a0_0x126a() {
            return _0x34464c;
          };

          return a0_0x126a();
        }

        function a0_0x107f(_0x3ddd85, _0x32d048) {
          var _0x126a9b = a0_0x126a();

          return a0_0x107f = function a0_0x107f(_0x107fca, _0x396224) {
            _0x107fca = _0x107fca - 0xed;
            var _0x2a4f44 = _0x126a9b[_0x107fca];
            return _0x2a4f44;
          }, a0_0x107f(_0x3ddd85, _0x32d048);
        }

        (function (_0x2681e0, _0x4d2720) {
          var _0x4e0f88 = a0_0x107f,
              _0x3f33e3 = _0x2681e0();

          while (!![]) {
            try {
              var _0x4fe21b = parseInt(_0x4e0f88(0x27f)) / 0x1 * (parseInt(_0x4e0f88(0x181)) / 0x2) + -parseInt(_0x4e0f88(0x3b8)) / 0x3 + -parseInt(_0x4e0f88(0x2c9)) / 0x4 + -parseInt(_0x4e0f88(0x202)) / 0x5 * (-parseInt(_0x4e0f88(0x22c)) / 0x6) + parseInt(_0x4e0f88(0x387)) / 0x7 + -parseInt(_0x4e0f88(0x237)) / 0x8 * (-parseInt(_0x4e0f88(0x3b1)) / 0x9) + -parseInt(_0x4e0f88(0x38a)) / 0xa;

              if (_0x4fe21b === _0x4d2720) break;else _0x3f33e3['push'](_0x3f33e3['shift']());
            } catch (_0x51fa2a) {
              _0x3f33e3['push'](_0x3f33e3['shift']());
            }
          }
        })(a0_0x126a, 0xeff2c), !function () {
          var _0x172cd5 = a0_0x107f,
              _0x1cc45a = {
            0x1542: function _(_0x5c015a, _0x12369a, _0x44b637) {
              var _0x179f9f = a0_0x107f;

              var _0xeb8e57 = this && this[_0x179f9f(0x1d4)] || function (_0x113ade) {
                return _0x113ade && _0x113ade['__esModule'] ? _0x113ade : {
                  'default': _0x113ade
                };
              };

              Object[_0x179f9f(0xf2)](_0x12369a, _0x179f9f(0x223), {
                'value': !0x0
              }), _0x12369a['Duplicate'] = void 0x0;

              var _0x1d2343 = _0x44b637(0x13dc),
                  _0x347957 = _0xeb8e57(_0x44b637(0x28a)),
                  _0x494f86 = function () {
                var _0x378484 = _0x179f9f;

                function _0x42122b(_0x1aaa2e) {
                  var _0x53e763 = a0_0x107f;
                  void 0x0 === _0x1aaa2e && (_0x1aaa2e = 0x3e8), this['maxSize'] = 0x3e8, this[_0x53e763(0x30d)] = _0x1aaa2e, this[_0x53e763(0x1ba)] = new _0x1d2343[_0x53e763(0x40f)](_0x1aaa2e), this[_0x53e763(0x430)] = new _0x347957[_0x53e763(0x2b7)]();
                }

                return _0x42122b[_0x378484(0x1b3)]['insert'] = function (_0x222758) {
                  var _0x2b51aa = _0x378484;
                  this[_0x2b51aa(0x1ba)]['size']() >= this['maxSize'] && this[_0x2b51aa(0x430)][_0x2b51aa(0xfd)](this[_0x2b51aa(0x1ba)][_0x2b51aa(0x495)]()), this['queue'][_0x2b51aa(0x325)](_0x222758), this['hashMap'][_0x2b51aa(0x4ba)](_0x222758, !0x0);
                }, _0x42122b[_0x378484(0x1b3)][_0x378484(0x28a)] = function (_0x3a50ca) {
                  var _0x4d8fe1 = _0x378484;
                  return this['hashMap'][_0x4d8fe1(0x298)](_0x3a50ca);
                }, _0x42122b[_0x378484(0x1b3)][_0x378484(0x4a7)] = function () {
                  var _0x806bcf = _0x378484;
                  this[_0x806bcf(0x1ba)]['clear'](), this[_0x806bcf(0x430)][_0x806bcf(0x44a)]();
                }, _0x42122b;
              }();

              _0x12369a[_0x179f9f(0x233)] = _0x494f86;
            },
            0x13dc: function _(_0x2852c4, _0x159f3d) {
              var _0x14a935 = a0_0x107f;
              Object[_0x14a935(0xf2)](_0x159f3d, _0x14a935(0x223), {
                'value': !0x0
              }), _0x159f3d[_0x14a935(0x40f)] = void 0x0;

              var _0x453c42 = function () {
                var _0xf14113 = _0x14a935;

                function _0x15fef0(_0x1e0d17) {
                  var _0x26b0d6 = a0_0x107f;
                  this['maxSize'] = _0x1e0d17 > 0x0 ? _0x1e0d17 : 0xa, this[_0x26b0d6(0x1b1)] = 0x0, this[_0x26b0d6(0x1ba)] = new Array(this[_0x26b0d6(0x30d)]);
                }

                return _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x4cc)] = function () {
                  var _0x4d351e = _0xf14113;
                  return 0x0 === this[_0x4d351e(0x1b1)];
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x44c)] = function () {
                  var _0x323e25 = _0xf14113;
                  return this[_0x323e25(0x1b1)] === this[_0x323e25(0x30d)];
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x325)] = function (_0x202ae9) {
                  var _0x11ce23 = _0xf14113;
                  if (this[_0x11ce23(0x44c)]()) throw new Error(_0x11ce23(0x244));
                  this[_0x11ce23(0x1ba)][this[_0x11ce23(0x1b1)]++] = _0x202ae9;
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x495)] = function () {
                  var _0xad38df = _0xf14113;
                  if (this['isEmpty']()) throw new Error(_0xad38df(0x42c));

                  for (var _0x1bff7a = this[_0xad38df(0x1ba)][0x0], _0x4c4716 = 0x0; _0x4c4716 < this['length']; _0x4c4716++) this[_0xad38df(0x1ba)][_0x4c4716] = this[_0xad38df(0x1ba)][_0x4c4716 + 0x1];

                  return this[_0xad38df(0x1b1)]--, _0x1bff7a;
                }, _0x15fef0['prototype']['peek'] = function () {
                  var _0x28f62f = _0xf14113;
                  if (this['isEmpty']()) throw new Error(_0x28f62f(0x402));
                  return this[_0x28f62f(0x1ba)][0x0];
                }, _0x15fef0['prototype'][_0xf14113(0x44a)] = function () {
                  var _0x215139 = _0xf14113;
                  this[_0x215139(0x1b1)] = 0x0, this['queue'] = new Array(this[_0x215139(0x30d)]);
                }, _0x15fef0[_0xf14113(0x1b3)][_0xf14113(0x318)] = function () {
                  return this['length'];
                }, _0x15fef0['prototype'][_0xf14113(0x11a)] = function () {
                  for (var _0x38ddfc = 0x0; _0x38ddfc < this['length']; ++_0x38ddfc);
                }, _0x15fef0;
              }();

              _0x159f3d[_0x14a935(0x40f)] = _0x453c42;
            },
            0xb46: function _(_0x3861e5, _0x3ff832) {
              var _0x394f3d = a0_0x107f;
              Object[_0x394f3d(0xf2)](_0x3ff832, _0x394f3d(0x223), {
                'value': !0x0
              }), _0x3ff832[_0x394f3d(0x392)] = void 0x0;

              var _0x8ead94 = function () {
                var _0x24a2a2 = _0x394f3d;

                function _0x20d1c7() {
                  var _0x5a6e59 = a0_0x107f,
                      _0x31cbe2 = this;

                  this[_0x5a6e59(0x3a0)] = function () {}, this[_0x5a6e59(0x232)] = function () {}, this[_0x5a6e59(0x216)] = !0x1, this[_0x5a6e59(0x11e)] = new Promise(function (_0x5d328a, _0x207349) {
                    var _0x9eb056 = _0x5a6e59;
                    _0x31cbe2[_0x9eb056(0x3a0)] = _0x5d328a, _0x31cbe2['_reject'] = _0x207349;
                  });
                }

                return _0x20d1c7[_0x24a2a2(0x1b3)]['resolve'] = function (_0x57d88c) {
                  var _0x189798 = _0x24a2a2;
                  this[_0x189798(0x3a0)](_0x57d88c), this['isFullfill'] = !0x0;
                }, _0x20d1c7['prototype']['reject'] = function (_0x31844e, _0x46bdf1) {
                  var _0x52686f = _0x24a2a2;
                  this[_0x52686f(0x232)](_0x31844e, _0x46bdf1), this[_0x52686f(0x216)] = !0x0;
                }, _0x20d1c7['prototype'][_0x24a2a2(0x418)] = function () {
                  return this['promise'];
                }, _0x20d1c7[_0x24a2a2(0x1b3)]['isPromiseFullfill'] = function () {
                  var _0x43942b = _0x24a2a2;
                  return this[_0x43942b(0x216)];
                }, _0x20d1c7;
              }();

              _0x3ff832[_0x394f3d(0x392)] = _0x8ead94;
            },
            0x370: function _(_0x6d1686, _0x33789f, _0x9edefa) {
              var _0x306321 = a0_0x107f;

              var _0x4b4a6c = this && this[_0x306321(0x1d4)] || function (_0x39ea09) {
                var _0x5b86d8 = _0x306321;
                return _0x39ea09 && _0x39ea09[_0x5b86d8(0x223)] ? _0x39ea09 : {
                  'default': _0x39ea09
                };
              };

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x223), {
                'value': !0x0
              }), _0x33789f[_0x306321(0x267)] = _0x33789f[_0x306321(0x3dc)] = _0x33789f['EventManager'] = _0x33789f['CommandManager'] = _0x33789f[_0x306321(0x2b1)] = _0x33789f[_0x306321(0x3f9)] = _0x33789f[_0x306321(0x392)] = _0x33789f[_0x306321(0x35e)] = _0x33789f['lib'] = void 0x0;

              var _0x409f31 = _0x4b4a6c(_0x9edefa(0x28a)),
                  _0x48c66c = _0x9edefa(0x1a99),
                  _0x29221a = _0x9edefa(0x758),
                  _0xf3b88b = _0x4b4a6c(_0x9edefa(0x7e9)),
                  _0x54e9b5 = _0x9edefa(0xb46);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x392), {
                'enumerable': !0x0,
                'get': function get() {
                  return _0x54e9b5['Deferred'];
                }
              });

              var _0x4d24b2 = _0x9edefa(0x1531);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x3f9), {
                'enumerable': !0x0,
                'get': function get() {
                  var _0x25054c = _0x306321;
                  return _0x4d24b2[_0x25054c(0x3f9)];
                }
              });

              var _0x1cd305 = _0x9edefa(0x19be);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x2b1), {
                'enumerable': !0x0,
                'get': function get() {
                  var _0x2767c4 = _0x306321;
                  return _0x1cd305[_0x2767c4(0x2b1)];
                }
              });

              var _0x4ed804 = _0x9edefa(0x4f0);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x1c3), {
                'enumerable': !0x0,
                'get': function get() {
                  return _0x4ed804['CommandManager'];
                }
              });

              var _0x316af0 = _0x9edefa(0x6);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x245), {
                'enumerable': !0x0,
                'get': function get() {
                  var _0x415fea = _0x306321;
                  return _0x316af0[_0x415fea(0x245)];
                }
              });

              var _0x51e5da = _0x9edefa(0x1d8f);

              Object['defineProperty'](_0x33789f, _0x306321(0x3dc), {
                'enumerable': !0x0,
                'get': function get() {
                  return _0x51e5da['SocketManager'];
                }
              });

              var _0x1d32ca = _0x9edefa(0x1518);

              Object[_0x306321(0xf2)](_0x33789f, _0x306321(0x267), {
                'enumerable': !0x0,
                'get': function get() {
                  var _0x913f05 = _0x306321;
                  return _0x1d32ca[_0x913f05(0x267)];
                }
              }), _0x33789f[_0x306321(0xfe)] = {
                'hashmap': _0x409f31[_0x306321(0x2b7)],
                'io': _0x48c66c,
                'logger': _0xf3b88b[_0x306321(0x2b7)],
                'uuid': _0x29221a[_0x306321(0x45c)]
              }, _0x33789f[_0x306321(0x35e)] = {
                'Deferred': _0x54e9b5[_0x306321(0x392)],
                'PlayerInfoStateManager': _0x4d24b2[_0x306321(0x3f9)],
                'MessageManager': _0x1cd305[_0x306321(0x2b1)],
                'CommandManager': _0x4ed804['CommandManager'],
                'EventManager': _0x316af0['EventManager'],
                'SocketManager': _0x51e5da[_0x306321(0x3dc)],
                'ServiceRest': _0x1d32ca['ServiceRest']
              };
            },
            0x4f0: function _(_0x49a0f0, _0x438f75, _0x5aac2c) {
              var _0xa0dc0 = a0_0x107f;

              var _0x1547ba = this && this[_0xa0dc0(0x1d4)] || function (_0x256263) {
                var _0x6689f3 = _0xa0dc0;
                return _0x256263 && _0x256263[_0x6689f3(0x223)] ? _0x256263 : {
                  'default': _0x256263
                };
              };

              Object['defineProperty'](_0x438f75, _0xa0dc0(0x223), {
                'value': !0x0
              }), _0x438f75[_0xa0dc0(0x1c3)] = void 0x0;

              var _0x28fdc6 = _0x5aac2c(0x19be),
                  _0x317f79 = _0x5aac2c(0x758),
                  _0x3d1d58 = _0x1547ba(_0x5aac2c(0x7e9)),
                  _0x560ebd = _0x1547ba(_0x5aac2c(0x1c13)),
                  _0x14e192 = _0x1547ba(_0x5aac2c(0x28a)),
                  _0x3bad06 = function () {
                var _0x26a56d = _0xa0dc0;

                function _0x3e6f5a(_0x4a41a8, _0x1396ac, _0x2fa43c) {
                  var _0x44543c = a0_0x107f;
                  void 0x0 === _0x2fa43c && (_0x2fa43c = 'commandId'), this[_0x44543c(0x4c9)] = _0x4a41a8, this[_0x44543c(0x44b)] = _0x1396ac || 0x1, this[_0x44543c(0x497)] = _0x2fa43c, this[_0x44543c(0x1a0)] = new _0x560ebd[_0x44543c(0x2b7)](), this['_executingCommandType'] = new _0x14e192['default'](), this[_0x44543c(0x2c0)] = new _0x14e192[_0x44543c(0x2b7)]();
                }

                return _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x1cc)] = function (_0x5ae2aa, _0x40a28a) {
                  this['_emitter']['on'](_0x5ae2aa, _0x40a28a);
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x14b)] = function (_0x53380f, _0x13c19f) {
                  var _0x3ae798 = _0x26a56d;

                  this[_0x3ae798(0x1a0)][_0x3ae798(0x319)](_0x53380f, _0x13c19f);
                }, _0x3e6f5a['prototype'][_0x26a56d(0x2fb)] = function (_0x33a037) {
                  var _0x3b9524 = _0x26a56d;

                  _0x28fdc6[_0x3b9524(0x2b1)][_0x3b9524(0x49b)]()[_0x3b9524(0x2fb)](_0x33a037);
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['unSubscribe'] = function (_0x4abe08) {
                  var _0x4086b5 = _0x26a56d;

                  _0x28fdc6[_0x4086b5(0x2b1)]['getInstance']()[_0x4086b5(0x130)](_0x4abe08);
                }, _0x3e6f5a['prototype'][_0x26a56d(0x1ee)] = function (_0xcadc43, _0x2f7ace) {
                  var _0x55b6ef = _0x26a56d;

                  _0x3d1d58[_0x55b6ef(0x2b7)][_0x55b6ef(0x469)]('CommandManager\x20%s\x20-\x20executeCommand:\x20%j', this[_0x55b6ef(0x4c9)], [_0xcadc43, _0x2f7ace]);

                  var _0x167814 = this['_executingCommandType']['count']();

                  if (!this[_0x55b6ef(0x2ae)](_0xcadc43, _0x2f7ace)) return _0x3d1d58[_0x55b6ef(0x2b7)][_0x55b6ef(0x122)](_0x55b6ef(0x179), this[_0x55b6ef(0x4c9)], this[_0x55b6ef(0x264)][_0x55b6ef(0x44d)]()), _0x3e6f5a[_0x55b6ef(0x169)];
                  if (_0x167814 >= this['maxConcurrentCommand'] && !this[_0x55b6ef(0x264)][_0x55b6ef(0x298)](_0xcadc43['event'])) return _0x3d1d58['default']['error'](_0x55b6ef(0x390), this[_0x55b6ef(0x4c9)], _0x167814, this[_0x55b6ef(0x44b)]), _0x3e6f5a['COMMAND_FAILED_CONC_OVER_LIMIT'];

                  var _0x1a2a66 = (0, _0x317f79[_0x55b6ef(0x45c)])();

                  _0xcadc43[_0x55b6ef(0x1c5)][this['_commandIdFieldName']] = _0x1a2a66;

                  var _0x49d200 = _0x28fdc6['MessageManager']['getInstance']()[_0x55b6ef(0x2be)](this[_0x55b6ef(0x4c9)], _0xcadc43);

                  return _0x2f7ace[_0x55b6ef(0x353)] && (this['_executingCommandType']['set'](_0xcadc43[_0x55b6ef(0x476)], !0x0), this[_0x55b6ef(0x2c0)][_0x55b6ef(0x4ba)](_0x49d200, {
                    'commandId': _0x1a2a66,
                    'resendCount': _0x2f7ace[_0x55b6ef(0x3ae)],
                    'commandPayload': _0xcadc43,
                    'numberResend': 0x0
                  })), _0x3d1d58['default'][_0x55b6ef(0x469)]('CommandManager\x20%s\x20-\x20sendMessage\x20messageId=%s,\x20commandId=%s', this['serviceId'], _0x49d200, _0x1a2a66), _0x1a2a66;
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['clearRemainingCommand'] = function () {
                  var _0x27fbd9 = _0x26a56d;
                  this[_0x27fbd9(0x264)]['clear'](), _0x28fdc6[_0x27fbd9(0x2b1)][_0x27fbd9(0x49b)]()[_0x27fbd9(0x425)](this[_0x27fbd9(0x2c0)][_0x27fbd9(0x44d)]()), this[_0x27fbd9(0x2c0)][_0x27fbd9(0x44a)]();
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x148)] = function () {
                  var _0x2195c7 = _0x26a56d;

                  this[_0x2195c7(0x1a0)]['removeAllListeners']();
                }, _0x3e6f5a[_0x26a56d(0x1b3)]['cleanUp'] = function () {
                  var _0x52a600 = _0x26a56d;
                  _0x3d1d58[_0x52a600(0x2b7)][_0x52a600(0x469)](_0x52a600(0x374), this['serviceId']), this[_0x52a600(0x1a0)][_0x52a600(0x146)](), this[_0x52a600(0x3f0)]();
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x3c2)] = function (_0x4a0cfa) {
                  var _0x6f3ac = _0x26a56d;

                  if (_0x3d1d58['default'][_0x6f3ac(0x469)](_0x6f3ac(0x10a), this[_0x6f3ac(0x4c9)], _0x4a0cfa), this['_messageIdInfosMap'][_0x6f3ac(0x298)](_0x4a0cfa)) {
                    var _0x411377 = this['_messageIdInfosMap'][_0x6f3ac(0x283)](_0x4a0cfa)[_0x6f3ac(0x459)];

                    this['_messageIdInfosMap'][_0x6f3ac(0xfd)](_0x4a0cfa), this[_0x6f3ac(0x264)][_0x6f3ac(0xfd)](_0x411377['event']), this[_0x6f3ac(0x1a0)][_0x6f3ac(0x24e)](_0x3e6f5a[_0x6f3ac(0x2bf)], _0x411377);
                  }
                }, _0x3e6f5a[_0x26a56d(0x1b3)][_0x26a56d(0x41e)] = function (_0x973889) {
                  var _0x13282e = _0x26a56d;

                  if (_0x3d1d58['default'][_0x13282e(0x469)](_0x13282e(0x1b6), this[_0x13282e(0x4c9)], _0x973889), this[_0x13282e(0x2c0)]['has'](_0x973889)) {
                    var _0x33ec44 = this[_0x13282e(0x2c0)][_0x13282e(0x283)](_0x973889),
                        _0x4a960f = _0x33ec44[_0x13282e(0x3ae)],
                        _0x23d949 = _0x33ec44['commandId'],
                        _0xb1cae0 = _0x33ec44['commandPayload'],
                        _0x179368 = _0x33ec44[_0x13282e(0x38e)];

                    if (this[_0x13282e(0x2c0)][_0x13282e(0xfd)](_0x973889), this['_executingCommandType'][_0x13282e(0xfd)](_0xb1cae0['event']), _0x179368 < _0x4a960f) {
                      _0x3d1d58[_0x13282e(0x2b7)][_0x13282e(0x469)]('CommandManager\x20%s\x20-\x20resendMessage:\x20%s', this['serviceId'], _0x973889);

                      var _0x2a8c0c = _0x28fdc6[_0x13282e(0x2b1)][_0x13282e(0x49b)]()[_0x13282e(0x2be)](this[_0x13282e(0x4c9)], _0xb1cae0, _0x973889);

                      _0x179368++, this[_0x13282e(0x2c0)][_0x13282e(0x4ba)](_0x2a8c0c, {
                        'resendCount': _0x4a960f,
                        'commandId': _0x23d949,
                        'commandPayload': _0xb1cae0,
                        'numberResend': _0x179368
                      }), _0x3d1d58['default']['debug'](_0x13282e(0x1e9), this[_0x13282e(0x4c9)], _0x973889, _0x2a8c0c, _0x179368, _0x4a960f);
                    } else _0x3d1d58[_0x13282e(0x2b7)][_0x13282e(0x469)](_0x13282e(0x375), this[_0x13282e(0x4c9)], _0x973889, _0x179368), this[_0x13282e(0x1a0)][_0x13282e(0x24e)](_0x3e6f5a['COMMAND_FAILED_RETRY'], _0x23d949);
                  }
                }, _0x3e6f5a['prototype'][_0x26a56d(0x2ae)] = function (_0x2755e1, _0x5ab482) {
                  var _0x2d6662 = _0x26a56d,
                      _0x1928cc = _0x2755e1[_0x2d6662(0x476)];

                  return !!_0x5ab482[_0x2d6662(0x143)] || !0x1 === this['_executingCommandType'][_0x2d6662(0x298)](_0x1928cc);
                }, _0x3e6f5a['COMMAND_FAILED_CONC_OVER_LIMIT'] = _0x26a56d(0x354), _0x3e6f5a[_0x26a56d(0x169)] = _0x26a56d(0x169), _0x3e6f5a[_0x26a56d(0x365)] = _0x26a56d(0x365), _0x3e6f5a[_0x26a56d(0x2bf)] = _0x26a56d(0x2bf), _0x3e6f5a;
              }();

              _0x438f75['CommandManager'] = _0x3bad06;
            },
            0x6: function _(_0x453b8c, _0x3688bc, _0x490a7c) {
              var _0x5ebdb6 = a0_0x107f;

              var _0x153c37 = this && this['__importDefault'] || function (_0x1c4659) {
                var _0x38321c = a0_0x107f;
                return _0x1c4659 && _0x1c4659[_0x38321c(0x223)] ? _0x1c4659 : {
                  'default': _0x1c4659
                };
              };

              Object['defineProperty'](_0x3688bc, _0x5ebdb6(0x223), {
                'value': !0x0
              }), _0x3688bc[_0x5ebdb6(0x245)] = void 0x0;

              var _0x6b2cef = _0x153c37(_0x490a7c(0x1c13)),
                  _0xaec8d2 = _0x153c37(_0x490a7c(0x28a)),
                  _0x20b317 = _0x490a7c(0x1542),
                  _0x3f3746 = _0x153c37(_0x490a7c(0x7e9)),
                  _0x58f34c = {
                'jgr': _0x5ebdb6(0x128),
                'sud': _0x5ebdb6(0x1ce),
                'spu': _0x5ebdb6(0x215),
                'erp': _0x5ebdb6(0x3bf),
                'mep': _0x5ebdb6(0x360)
              },
                  _0x7b72e5 = function () {
                var _0x3e512c = _0x5ebdb6;

                function _0x45c846(_0x1900b7, _0x160919) {
                  var _0x1af255 = a0_0x107f;
                  void 0x0 === _0x1900b7 && (_0x1900b7 = !0x1), this[_0x1af255(0x1a0)] = new _0x6b2cef[_0x1af255(0x2b7)](), this['_duplicateEventId'] = new _0x20b317[_0x1af255(0x233)](0x3e8), this['_waitForEventTimeOutId'] = new _0xaec8d2[_0x1af255(0x2b7)](), this[_0x1af255(0x4a1)] = _0x1900b7, this[_0x1af255(0x342)] = _0x160919 || _0x58f34c;
                }

                return _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x492)] = function (_0x2ab4da) {
                  var _0x1818b7 = _0x3e512c;

                  this[_0x1818b7(0x1a0)][_0x1818b7(0x492)](_0x2ab4da);
                }, _0x45c846[_0x3e512c(0x1b3)]['registerEvent'] = function (_0x5b3e72, _0x5bcb3f) {
                  this['_emitter']['on'](_0x5b3e72, _0x5bcb3f);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x326)] = function (_0x5488a7, _0x40f333) {
                  var _0x458715 = _0x3e512c;

                  this[_0x458715(0x1a0)][_0x458715(0x198)](_0x5488a7, _0x40f333);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x14b)] = function (_0x311bfa, _0x135e9d) {
                  var _0x375427 = _0x3e512c;

                  this['_emitter'][_0x375427(0x319)](_0x311bfa, _0x135e9d);
                }, _0x45c846[_0x3e512c(0x1b3)]['removeAllEventListeners'] = function () {
                  var _0x188284 = _0x3e512c;

                  this['_emitter'][_0x188284(0x146)]();
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x47d)] = function (_0x77f53d, _0x4392af, _0x36d5ad) {
                  var _0x2fe937 = _0x3e512c,
                      _0x5ccf32 = setTimeout(function () {
                    var _0x101803 = a0_0x107f;
                    _0x3f3746[_0x101803(0x2b7)]['debug'](_0x101803(0x41a), _0x4392af), _0x36d5ad();
                  }, _0x77f53d);

                  return this[_0x2fe937(0x226)][_0x2fe937(0x4ba)](_0x5ccf32, _0x4392af), _0x5ccf32;
                }, _0x45c846['prototype']['removeWaitingQueue'] = function () {
                  var _0x382f98 = _0x3e512c;
                  this[_0x382f98(0x226)][_0x382f98(0x44d)]()[_0x382f98(0x293)](function (_0x44f271) {
                    clearTimeout(_0x44f271);
                  }), this['_waitForEventTimeOutId'][_0x382f98(0x44a)]();
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x451)] = function (_0x4d23d1) {
                  var _0x375947 = _0x3e512c;
                  clearTimeout(_0x4d23d1), this['_waitForEventTimeOutId'][_0x375947(0xfd)](_0x4d23d1);
                }, _0x45c846[_0x3e512c(0x1b3)][_0x3e512c(0x168)] = function () {
                  var _0x2abf6b = _0x3e512c;
                  _0x3f3746[_0x2abf6b(0x2b7)][_0x2abf6b(0x469)](_0x2abf6b(0x2e1)), this[_0x2abf6b(0x1a0)]['removeAllListeners'](), this[_0x2abf6b(0x35d)][_0x2abf6b(0x4a7)](), this[_0x2abf6b(0xf6)]();
                }, _0x45c846[_0x3e512c(0x1b3)]['onConnected'] = function () {
                  var _0x2f6b15 = _0x3e512c;
                  _0x3f3746[_0x2f6b15(0x2b7)][_0x2f6b15(0x469)]('EventManager\x20-\x20connected.'), this[_0x2f6b15(0x1a0)][_0x2f6b15(0x24e)](_0x45c846[_0x2f6b15(0x2a6)]);
                }, _0x45c846[_0x3e512c(0x1b3)]['onPong'] = function (_0x10b942) {
                  this['_emitter']['emit'](_0x45c846['PONG'], _0x10b942);
                }, _0x45c846['prototype'][_0x3e512c(0xfa)] = function () {
                  var _0x14ab1b = _0x3e512c;
                  _0x3f3746[_0x14ab1b(0x2b7)][_0x14ab1b(0x469)](_0x14ab1b(0x2c1)), this[_0x14ab1b(0x1a0)]['emit'](_0x45c846[_0x14ab1b(0x45d)]);
                }, _0x45c846['prototype'][_0x3e512c(0x180)] = function (_0x3ed62a) {
                  var _0x265776 = _0x3e512c,
                      _0x14e5e0 = this;

                  _0x3f3746[_0x265776(0x2b7)]['debug'](_0x265776(0x1fa), _0x3ed62a), _0x3ed62a && _0x3ed62a[_0x265776(0x476)] && (_0x3ed62a[_0x265776(0x476)] = !this[_0x265776(0x4a1)] && this[_0x265776(0x342)][_0x3ed62a['event']] ? this[_0x265776(0x342)][_0x3ed62a[_0x265776(0x476)]] : _0x3ed62a[_0x265776(0x476)]);

                  var _0x1392bd = _0x3ed62a[_0x265776(0x476)],
                      _0x4a974d = _0x3ed62a[_0x265776(0x1c5)],
                      _0x536b8a = _0x3ed62a[_0x265776(0x3bb)];

                  _0x4a974d ? this[_0x265776(0x35d)][_0x265776(0x28a)](_0x536b8a) ? _0x3f3746[_0x265776(0x2b7)][_0x265776(0x122)](_0x265776(0x391), _0x536b8a) : (this['_duplicateEventId'][_0x265776(0x173)](_0x536b8a), this['_waitForEventTimeOutId']['keys']()[_0x265776(0x293)](function (_0x5c4758) {
                    var _0x5c26ee = _0x265776;
                    _0x14e5e0['_waitForEventTimeOutId']['get'](_0x5c4758)(_0x3ed62a) && (clearTimeout(_0x5c4758), _0x14e5e0[_0x5c26ee(0x226)][_0x5c26ee(0xfd)](_0x5c4758));
                  }), _0x265776(0x3bf) === _0x1392bd && _0x3f3746[_0x265776(0x2b7)]['warn'](_0x265776(0x170), _0x3ed62a), this[_0x265776(0x1a0)]['emit'](_0x1392bd, _0x3ed62a)) : _0x3f3746[_0x265776(0x2b7)][_0x265776(0x122)](_0x265776(0x352));
                }, _0x45c846[_0x3e512c(0x2a6)] = _0x3e512c(0x292), _0x45c846[_0x3e512c(0x383)] = 'pong', _0x45c846[_0x3e512c(0x45d)] = _0x3e512c(0x3ce), _0x45c846[_0x3e512c(0x4a9)] = _0x3e512c(0x29e), _0x45c846[_0x3e512c(0x301)] = _0x3e512c(0x3a3), _0x45c846['MISMATCH_DATA_VERSION'] = _0x3e512c(0x26e), _0x45c846;
              }();

              _0x3688bc['EventManager'] = _0x7b72e5;
            },
            0x1531: function _(_0x2a2c13, _0x547017, _0x5a8506) {
              var _0x576e90 = a0_0x107f;

              var _0x4d1412 = this && this[_0x576e90(0x1d4)] || function (_0x462328) {
                var _0x44343c = _0x576e90;
                return _0x462328 && _0x462328[_0x44343c(0x223)] ? _0x462328 : {
                  'default': _0x462328
                };
              };

              Object['defineProperty'](_0x547017, '__esModule', {
                'value': !0x0
              }), _0x547017[_0x576e90(0x3f9)] = void 0x0;

              var _0x1d06d4 = _0x4d1412(_0x5a8506(0x1c13)),
                  _0x4ca7ec = _0x5a8506(0x6),
                  _0x42182d = _0x4d1412(_0x5a8506(0x7e9)),
                  _0x5d483c = _0x5a8506(0x758),
                  _0x20fb09 = _0x576e90(0x3db),
                  _0x31b059 = 'promotion',
                  _0x9271ca = {
                0x0: _0x20fb09,
                0x1: _0x31b059
              },
                  _0x5bd598 = function () {
                var _0xa3689a = _0x576e90;

                function _0x23f8b5() {
                  var _0x1cfdf4 = a0_0x107f,
                      _0x5aa1d8 = this;

                  this[_0x1cfdf4(0x362)] = null, this[_0x1cfdf4(0x25e)] = null, this['displayName'] = null, this[_0x1cfdf4(0x1c8)] = '', this[_0x1cfdf4(0x29d)] = '', this['userType'] = '', this[_0x1cfdf4(0x3a4)] = new _0x4ca7ec[_0x1cfdf4(0x245)](), this[_0x1cfdf4(0x1a0)] = new _0x1d06d4['default'](), this['_eventManager'][_0x1cfdf4(0x1cc)]('wallet-updated', function (_0x54b44c) {
                    var _0x14e010 = _0x1cfdf4;

                    _0x5aa1d8[_0x14e010(0x4cd)](_0x54b44c);
                  }), this['_eventManager'][_0x1cfdf4(0x1cc)]('wud-pAmt', function (_0x19f812) {
                    var _0x34a001 = _0x1cfdf4;

                    _0x5aa1d8[_0x34a001(0x4cd)](_0x19f812);
                  }), this['_eventManager'][_0x1cfdf4(0x1cc)](_0x1cfdf4(0x15e), function (_0x27b3b1) {
                    var _0x2bf7fa = _0x1cfdf4;

                    _0x5aa1d8[_0x2bf7fa(0x17e)](_0x27b3b1);
                  }), this['_eventManager']['registerEvent'](_0x1cfdf4(0x284), function (_0x4f8873) {
                    var _0x36f2ba = _0x1cfdf4;
                    _0x42182d[_0x36f2ba(0x2b7)][_0x36f2ba(0x469)](_0x36f2ba(0x2eb), _0x4f8873), _0x5aa1d8[_0x36f2ba(0x1a0)][_0x36f2ba(0x24e)](_0x4f8873[_0x36f2ba(0x476)], _0x4f8873['data']);
                  }), this[_0x1cfdf4(0x3a4)][_0x1cfdf4(0x1cc)](_0x1cfdf4(0x215), function (_0x150084) {
                    var _0x200fe9 = _0x1cfdf4;
                    'wallet-service-id' === _0x150084[_0x200fe9(0x4c9)] && _0x5aa1d8['setWalletBalance'](_0x150084);
                  }), this[_0x1cfdf4(0x126)] = (0, _0x5d483c[_0x1cfdf4(0x45c)])(), this['walletInfos'] = {}, this[_0x1cfdf4(0x29f)] = 0x0;
                }

                return _0x23f8b5[_0xa3689a(0x49b)] = function () {
                  var _0xe0a518 = _0xa3689a;
                  return _0x23f8b5['instance'] || (_0x23f8b5[_0xe0a518(0x23e)] = new _0x23f8b5()), _0x23f8b5['instance'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x4c0)] = function (_0x3864de) {
                  var _0x16947 = _0xa3689a,
                      _0x3ad528 = this;

                  _0x3864de[_0x16947(0x2e2)](_0x16947(0x3eb), {
                    'onAck': function onAck() {},
                    'onCannotSendMessage': function onCannotSendMessage() {}
                  }, {
                    'onConnected': function onConnected() {
                      var _0x3c0ad4 = _0x16947;
                      _0x3ad528[_0x3c0ad4(0x1d1)]() && _0x3864de['sendMessage'](_0x3c0ad4(0x3eb), {
                        'event': _0x3c0ad4(0x1d2),
                        'data': {
                          'serviceId': _0x3c0ad4(0x3eb),
                          'objectId': _0x3ad528[_0x3c0ad4(0x1d1)](),
                          'stateType': 'wallet-type',
                          'token': _0x3ad528[_0x3c0ad4(0x1a5)](),
                          'commandId': (0, _0x5d483c['uuid'])()
                        }
                      });
                    },
                    'onCannotConnect': function onCannotConnect() {
                      var _0x546f20 = _0x16947;
                      _0x3ad528[_0x546f20(0x362)] = null, _0x3ad528[_0x546f20(0x25e)] = null, _0x3ad528[_0x546f20(0x14f)] = null, _0x3ad528[_0x546f20(0x472)] = {}, _0x3ad528[_0x546f20(0x29f)] = 0x0;
                    },
                    'onCannotAuthen': function onCannotAuthen() {},
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)][_0x16947(0x1f3)](this[_0x16947(0x3a4)])
                  }), _0x3864de['registerGame'](_0x16947(0x385), {}, {
                    'onConnected': function onConnected() {},
                    'onCannotConnect': function onCannotConnect() {
                      var _0x3dfd11 = _0x16947;

                      _0x3ad528['_emitter'][_0x3dfd11(0x24e)](_0x3dfd11(0x3a9));
                    },
                    'onCannotAuthen': function onCannotAuthen() {
                      var _0x859fd1 = _0x16947;

                      _0x3ad528[_0x859fd1(0x1a0)][_0x859fd1(0x24e)](_0x859fd1(0x28d));
                    },
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)][_0x16947(0x1f3)](this['_eventManager'])
                  }), _0x3864de['registerGame'](_0x16947(0x139), {}, {
                    'onConnected': function onConnected() {},
                    'onCannotConnect': function onCannotConnect() {},
                    'onCannotAuthen': function onCannotAuthen() {},
                    'onEvent': this[_0x16947(0x3a4)][_0x16947(0x180)]['bind'](this['_eventManager'])
                  });
                }, _0x23f8b5['prototype'][_0xa3689a(0x194)] = function (_0x504ca0, _0xfd72f2) {
                  var _0xa8e987 = _0xa3689a;

                  this[_0xa8e987(0x1a0)][_0xa8e987(0x319)](_0x504ca0, _0xfd72f2);
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x1cc)] = function (_0x586fa9, _0x5b1fa2) {
                  var _0x4fcc00 = _0xa3689a;

                  this[_0x4fcc00(0x1a0)]['on'](_0x586fa9, _0x5b1fa2);
                }, _0x23f8b5[_0xa3689a(0x1b3)]['removeEvent'] = function (_0x126c12, _0x5ca740) {
                  var _0x4020b1 = _0xa3689a;

                  this[_0x4020b1(0x1a0)][_0x4020b1(0x198)](_0x126c12, _0x5ca740);
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x4cd)] = function (_0x1b44e) {
                  var _0x17c8fc = _0xa3689a,
                      _0x5d9b6e = _0x1b44e[_0x17c8fc(0x1c5)],
                      _0x5f4000 = !0x1;

                  isNaN(_0x5d9b6e['version']) || isNaN(_0x5d9b6e[_0x17c8fc(0x14e)]) || !this[_0x17c8fc(0x472)][_0x17c8fc(0x3db)] || (!this[_0x17c8fc(0x29f)] || this[_0x17c8fc(0x29f)] <= _0x5d9b6e[_0x17c8fc(0x29f)] ? (this[_0x17c8fc(0x472)][_0x17c8fc(0x3db)][_0x17c8fc(0x14e)] = _0x5d9b6e[_0x17c8fc(0x14e)] || 0x0, this['walletInfos'][_0x17c8fc(0x3db)]['availableAmount'] = _0x5d9b6e[_0x17c8fc(0x357)] || 0x0, this[_0x17c8fc(0x29f)] = _0x5d9b6e['version'], _0x5f4000 = !0x0) : _0x42182d['default'][_0x17c8fc(0x469)]('my\x20wallet\x20CANNOT\x20update\x20main\x20wallet.\x20current\x20version\x20[%s],\x20new\x20version\x20[%s],\x20wallet:\x20%j', this[_0x17c8fc(0x29f)], _0x5d9b6e[_0x17c8fc(0x29f)], this[_0x17c8fc(0x472)])), isNaN(_0x5d9b6e[_0x17c8fc(0x370)]) || isNaN(_0x5d9b6e[_0x17c8fc(0x1f0)]) || !this[_0x17c8fc(0x472)]['promotion'] || (!this[_0x17c8fc(0x29f)] || this['version'] <= _0x5d9b6e[_0x17c8fc(0x370)] ? (this[_0x17c8fc(0x472)][_0x17c8fc(0x118)]['amount'] = _0x5d9b6e[_0x17c8fc(0x1f0)] || 0x0, this[_0x17c8fc(0x472)][_0x17c8fc(0x118)][_0x17c8fc(0x357)] = _0x5d9b6e[_0x17c8fc(0x42f)] || 0x0, this['version'] = _0x5d9b6e[_0x17c8fc(0x370)], _0x5f4000 = !0x0) : _0x42182d['default'][_0x17c8fc(0x469)](_0x17c8fc(0x11c), this[_0x17c8fc(0x29f)], _0x5d9b6e[_0x17c8fc(0x370)], this[_0x17c8fc(0x472)])), _0x5f4000 && (_0x42182d['default'][_0x17c8fc(0x469)](_0x17c8fc(0x1e8), this[_0x17c8fc(0x472)]), this[_0x17c8fc(0x1a0)][_0x17c8fc(0x24e)](_0x17c8fc(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x17e)] = function (_0x36a35d) {
                  var _0x204e20 = _0xa3689a,
                      _0x292b30 = this,
                      _0x33113b = _0x36a35d[_0x204e20(0x1c5)],
                      _0x3ed457 = !0x1;

                  !isNaN(_0x33113b['v']) && _0x33113b['wl'] && _0x33113b['wl'][_0x204e20(0x1b1)] > 0x0 && (this[_0x204e20(0x29f)] = _0x33113b['v'], _0x3ed457 = !0x0, _0x33113b['wl']['forEach'](function (_0x4bb126) {
                    var _0x59379e = _0x204e20;
                    _0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]] && (_0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]][_0x59379e(0x14e)] = _0x4bb126['a'], _0x292b30[_0x59379e(0x472)][_0x9271ca[_0x4bb126['t']]][_0x59379e(0x357)] = _0x4bb126['av']);
                  })), _0x3ed457 && (_0x42182d[_0x204e20(0x2b7)][_0x204e20(0x469)](_0x204e20(0x1e8), this['walletInfos']), this[_0x204e20(0x1a0)][_0x204e20(0x24e)](_0x204e20(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x3c4)] = function (_0x497420) {
                  var _0x1463fb = _0xa3689a,
                      _0x11dc78 = this;

                  _0x497420 && (_0x497420[_0x1463fb(0x293)](function (_0x3b06ea) {
                    var _0x5de35b = _0x1463fb;
                    _0x11dc78['walletInfos'][_0x3b06ea[_0x5de35b(0x156)]] && (_0x11dc78['walletInfos'][_0x3b06ea['type']][_0x5de35b(0x14e)] = _0x3b06ea[_0x5de35b(0x14e)], _0x11dc78[_0x5de35b(0x472)][_0x3b06ea[_0x5de35b(0x156)]]['availableAmount'] = _0x3b06ea[_0x5de35b(0x14e)]);
                  }), _0x42182d[_0x1463fb(0x2b7)]['debug'](_0x1463fb(0x1e8), this[_0x1463fb(0x472)]), this[_0x1463fb(0x1a0)][_0x1463fb(0x24e)](_0x1463fb(0x1da)));
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletBalance'] = function () {
                  var _0x4d22b8 = _0xa3689a;
                  return this[_0x4d22b8(0x472)]['main'] ? this[_0x4d22b8(0x472)][_0x4d22b8(0x3db)][_0x4d22b8(0x14e)] : 0x0;
                }, _0x23f8b5['prototype'][_0xa3689a(0x123)] = function () {
                  var _0x361808 = _0xa3689a;
                  return {
                    'amount': this[_0x361808(0x472)][_0x361808(0x3db)] ? this['walletInfos']['main'][_0x361808(0x14e)] : 0x0,
                    'pAmount': this['walletInfos'][_0x361808(0x118)] ? this[_0x361808(0x472)][_0x361808(0x118)][_0x361808(0x14e)] : 0x0
                  };
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x13a)] = function () {
                  var _0x293a2f = _0xa3689a;
                  return JSON[_0x293a2f(0x288)](JSON[_0x293a2f(0x296)](this[_0x293a2f(0x472)]));
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletByType'] = function (_0x18086a) {
                  var _0x33be2b = _0xa3689a;
                  return this['walletInfos'][_0x18086a] ? JSON[_0x33be2b(0x288)](JSON[_0x33be2b(0x296)](this['walletInfos'][_0x18086a])) : {
                    'amount': 0x0,
                    'availableAmount': 0x0
                  };
                }, _0x23f8b5['prototype']['hasMainWalletType'] = function () {
                  var _0x1e0190 = _0xa3689a;
                  return !!this[_0x1e0190(0x472)]['main'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x29c)] = function () {
                  var _0x3fda99 = _0xa3689a;
                  return !!this[_0x3fda99(0x472)]['promotion'];
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getWalletTypes'] = function () {
                  var _0xe83285 = _0xa3689a;
                  return Object[_0xe83285(0x44d)](this[_0xe83285(0x472)]);
                }, _0x23f8b5[_0xa3689a(0x1b3)]['setWalletTypes'] = function (_0x1e531d) {
                  var _0x914d7e = _0xa3689a,
                      _0x1400ca = this;

                  _0x1e531d && _0x1e531d[_0x914d7e(0x293)](function (_0x51f42d) {
                    var _0xfcf2a8 = _0x914d7e;
                    _0x1400ca[_0xfcf2a8(0x472)][_0x51f42d] || (_0x1400ca['walletInfos'][_0x51f42d] = {
                      'amount': 0x0,
                      'availableAmount': 0x0
                    });
                  });
                }, _0x23f8b5['prototype'][_0xa3689a(0x438)] = function (_0x1d1c3c) {
                  this['userId'] = _0x1d1c3c;
                }, _0x23f8b5['prototype'][_0xa3689a(0x1d1)] = function () {
                  var _0x2f06e8 = _0xa3689a;
                  return this[_0x2f06e8(0x25e)] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x336)] = function (_0x2589e1) {
                  this['token'] = _0x2589e1;
                }, _0x23f8b5['prototype'][_0xa3689a(0x1a5)] = function () {
                  return this['token'] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)]['setDisplayName'] = function (_0x3f0d50) {
                  var _0x33e41c = _0xa3689a;
                  this[_0x33e41c(0x14f)] = _0x3f0d50;
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x3ea)] = function () {
                  var _0x3f7f19 = _0xa3689a;
                  return this[_0x3f7f19(0x14f)] || '';
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x42e)] = function (_0x5c5431) {
                  var _0x4dd097 = _0xa3689a;
                  this[_0x4dd097(0x1c8)] = _0x5c5431;
                }, _0x23f8b5['prototype'][_0xa3689a(0x46e)] = function () {
                  var _0x224ed4 = _0xa3689a;
                  return this[_0x224ed4(0x1c8)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x1cd)] = function (_0x5308df) {
                  var _0xb82028 = _0xa3689a;
                  this[_0xb82028(0x29d)] = _0x5308df;
                }, _0x23f8b5['prototype']['getCurrency'] = function () {
                  return this['currency'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x322)] = function (_0x54ce99) {
                  var _0x1173ad = _0xa3689a;
                  this[_0x1173ad(0x16e)] = _0x54ce99;
                }, _0x23f8b5[_0xa3689a(0x1b3)]['getUserType'] = function () {
                  return this['userType'];
                }, _0x23f8b5[_0xa3689a(0x1b3)]['isRealUser'] = function () {
                  var _0x577ab2 = _0xa3689a;
                  return !!this['userType'] && _0x577ab2(0x16b) !== this[_0x577ab2(0x16e)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x493)] = function () {
                  var _0x1e08f1 = _0xa3689a;
                  return !!this[_0x1e08f1(0x16e)] && _0x1e08f1(0x16b) === this[_0x1e08f1(0x16e)];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x101)] = function () {
                  return this['ssid'];
                }, _0x23f8b5[_0xa3689a(0x1b3)][_0xa3689a(0x168)] = function () {
                  var _0x5b7bf1 = _0xa3689a;

                  this[_0x5b7bf1(0x1a0)][_0x5b7bf1(0x146)]();
                }, _0x23f8b5;
              }();

              _0x547017[_0x576e90(0x3f9)] = _0x5bd598;
            },
            0x19be: function _(_0x5f118d, _0x11dd7d, _0x42ff92) {
              var _0x5ed68b = a0_0x107f;

              var _0x2a3f20 = this && this[_0x5ed68b(0x1d4)] || function (_0x42607e) {
                var _0x4f4d52 = _0x5ed68b;
                return _0x42607e && _0x42607e[_0x4f4d52(0x223)] ? _0x42607e : {
                  'default': _0x42607e
                };
              };

              Object[_0x5ed68b(0xf2)](_0x11dd7d, '__esModule', {
                'value': !0x0
              }), _0x11dd7d[_0x5ed68b(0x2b1)] = void 0x0;

              var _0x2a3be1 = _0x2a3f20(_0x42ff92(0x28a)),
                  _0xb4f606 = _0x2a3f20(_0x42ff92(0x1c13)),
                  _0x3ba48b = _0x42ff92(0x1542),
                  _0x37d4fd = _0x42ff92(0x758),
                  _0x5c675f = _0x42ff92(0x233a),
                  _0x4d731f = _0x42ff92(0x1d8f),
                  _0x3aaeac = _0x42ff92(0x1531),
                  _0x24e47b = _0x42ff92(0xb46),
                  _0x3761d6 = _0x2a3f20(_0x42ff92(0x7e9)),
                  _0xb1089c = function () {
                var _0x4ee1f1 = _0x5ed68b;

                function _0x249e9b() {
                  var _0x351e7b = a0_0x107f;
                  this[_0x351e7b(0x43a)] = {}, this['_cachedMessage'] = [], this['_socketManager'] = null, this[_0x351e7b(0x1a0)] = new _0xb4f606['default'](), this[_0x351e7b(0x1a6)] = new _0x5c675f[_0x351e7b(0x174)](), this[_0x351e7b(0x382)] = new _0x3ba48b['Duplicate'](0x3e8), this[_0x351e7b(0x434)] = new _0x2a3be1['default'](), this[_0x351e7b(0x4b7)] = _0x3aaeac[_0x351e7b(0x3f9)][_0x351e7b(0x49b)](), this[_0x351e7b(0x31e)] = null;
                }

                return _0x249e9b['getInstance'] = function () {
                  var _0x31fc49 = a0_0x107f;
                  return _0x249e9b['instance'] || (_0x249e9b[_0x31fc49(0x23e)] = new _0x249e9b()), _0x249e9b[_0x31fc49(0x23e)];
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x279)] = function (_0x39969c) {
                  var _0x4f3e5d = _0x4ee1f1,
                      _0x3b54b3 = this,
                      _0x5d5fdf = _0x39969c[_0x4f3e5d(0x111)],
                      _0xdb1100 = _0x39969c[_0x4f3e5d(0x362)],
                      _0x15d021 = _0x39969c[_0x4f3e5d(0x1be)],
                      _0x447e64 = _0x39969c[_0x4f3e5d(0x165)],
                      _0x3b48d9 = _0x39969c[_0x4f3e5d(0x13c)],
                      _0xf84fff = _0x39969c['device'],
                      _0x1eb86a = void 0x0 === _0xf84fff ? {} : _0xf84fff;

                  if (!_0x5d5fdf) return Promise[_0x4f3e5d(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x4f3e5d(0x35f)
                  });
                  if (!_0xdb1100) return Promise[_0x4f3e5d(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x4f3e5d(0x119)
                  });

                  if (this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x362)] === _0xdb1100) {
                    if (Array[_0x4f3e5d(0x423)](_0x5d5fdf)) {
                      if (_0x5d5fdf[_0x4f3e5d(0x3f3)](this['_config'][_0x4f3e5d(0x147)])) return Promise[_0x4f3e5d(0x107)]({
                        'isSuccess': !0x0,
                        'message': _0x4f3e5d(0x17b)
                      });
                    } else {
                      if (_0x5d5fdf === this['_config'][_0x4f3e5d(0x147)]) return Promise['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x4f3e5d(0x17b)
                      });
                    }
                  }

                  _0x3761d6[_0x4f3e5d(0x2b7)][_0x4f3e5d(0x469)]('MessageManager\x20-\x20Update\x20new\x20config:\x20%j', {
                    'socketUrl': _0x5d5fdf,
                    'token': _0xdb1100
                  }), this['closeAndCleanUp']();

                  var _0x3a6ea6;

                  if (_0x3a6ea6 = Array[_0x4f3e5d(0x423)](_0x5d5fdf) ? _0x5d5fdf[parseInt(0x2710 * Math[_0x4f3e5d(0x234)]()) % _0x5d5fdf[_0x4f3e5d(0x1b1)]] : _0x5d5fdf, this['_config'][_0x4f3e5d(0x147)] = _0x3a6ea6, this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x362)] = _0xdb1100, this['_config'][_0x4f3e5d(0x1be)] = _0x15d021, this['_config'][_0x4f3e5d(0x165)] = _0x447e64, this[_0x4f3e5d(0x43a)][_0x4f3e5d(0x2ce)] = _0x39969c, this[_0x4f3e5d(0x4b7)][_0x4f3e5d(0x4c0)](this), this[_0x4f3e5d(0x4b7)]['setToken'](_0xdb1100), _0x3b48d9) {
                    _0x3761d6[_0x4f3e5d(0x2b7)][_0x4f3e5d(0x469)]('MessageManager\x20-\x20Authen\x20token:\x20%s', _0xdb1100), _0x1eb86a && (_0x1eb86a[_0x4f3e5d(0x126)] = this[_0x4f3e5d(0x4b7)][_0x4f3e5d(0x101)]());

                    var _0x5aef1d = this['doLogin'](_0x39969c);

                    return _0x5aef1d[_0x4f3e5d(0x397)](function (_0x52856c) {
                      var _0x5ed210 = _0x4f3e5d;
                      return _0x52856c[_0x5ed210(0x47f)] ? _0x3b54b3[_0x5ed210(0x3f4)]() : (_0x3b54b3[_0x5ed210(0x1a6)][_0x5ed210(0x2fe)](), _0x3b54b3['closeAndCleanUp']()), _0x52856c['isSuccess'];
                    }), _0x5aef1d;
                  }

                  return this[_0x4f3e5d(0x3f4)](), Promise[_0x4f3e5d(0x107)]({
                    'isSuccess': !0x0,
                    'message': _0x4f3e5d(0x31a)
                  });
                }, _0x249e9b['prototype'][_0x4ee1f1(0x274)] = function (_0x11b762) {
                  var _0x5e9bb4 = _0x4ee1f1,
                      _0x2fe793 = this,
                      _0x52da2a = _0x11b762[_0x5e9bb4(0x111)],
                      _0x10769e = _0x11b762['token'],
                      _0x4eb239 = _0x11b762[_0x5e9bb4(0x1be)],
                      _0x532cfb = _0x11b762['games'],
                      _0x2a44e1 = _0x11b762[_0x5e9bb4(0x13c)],
                      _0x3992ae = _0x11b762[_0x5e9bb4(0x35c)],
                      _0x14cbc0 = void 0x0 === _0x3992ae ? {} : _0x3992ae;

                  if (!_0x52da2a) return Promise[_0x5e9bb4(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x5e9bb4(0x35f)
                  });
                  if (!_0x10769e) return Promise[_0x5e9bb4(0x257)]({
                    'isSuccess': !0x1,
                    'message': _0x5e9bb4(0x119)
                  });

                  if (this[_0x5e9bb4(0x43a)]['token'] === _0x10769e) {
                    if (Array[_0x5e9bb4(0x423)](_0x52da2a)) {
                      if (_0x52da2a['includes'](this['_config'][_0x5e9bb4(0x147)])) return Promise[_0x5e9bb4(0x107)]({
                        'isSuccess': !0x0,
                        'message': _0x5e9bb4(0x17b)
                      });
                    } else {
                      if (_0x52da2a === this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x147)]) return Promise['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x5e9bb4(0x17b)
                      });
                    }
                  }

                  _0x3761d6[_0x5e9bb4(0x2b7)][_0x5e9bb4(0x469)](_0x5e9bb4(0x3fc), {
                    'token': _0x10769e
                  });

                  var _0x97fb43 = [];
                  this[_0x5e9bb4(0x131)] && (_0x97fb43 = this[_0x5e9bb4(0x131)][_0x5e9bb4(0x13b)](), this[_0x5e9bb4(0x131)]['close'](), this['_socketManager'] = null);

                  var _0x447709;

                  if (_0x447709 = Array[_0x5e9bb4(0x423)](_0x52da2a) ? _0x52da2a[parseInt(0x2710 * Math[_0x5e9bb4(0x234)]()) % _0x52da2a[_0x5e9bb4(0x1b1)]] : _0x52da2a, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x147)] = _0x447709, this['_config'][_0x5e9bb4(0x362)] = _0x10769e, this['_config'][_0x5e9bb4(0x1be)] = _0x4eb239, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x165)] = _0x532cfb, this[_0x5e9bb4(0x43a)][_0x5e9bb4(0x2ce)] = _0x11b762, this['playerStateInfo']['setToken'](_0x10769e), _0x2a44e1) {
                    _0x3761d6['default'][_0x5e9bb4(0x469)](_0x5e9bb4(0x18f), _0x10769e), _0x14cbc0 && (_0x14cbc0[_0x5e9bb4(0x126)] = this[_0x5e9bb4(0x4b7)][_0x5e9bb4(0x101)]());

                    var _0x59ff27 = this[_0x5e9bb4(0x161)](_0x11b762);

                    return _0x59ff27[_0x5e9bb4(0x397)](function (_0x5a331d) {
                      var _0x4b18d4 = _0x5e9bb4;
                      return _0x5a331d[_0x4b18d4(0x47f)] ? (_0x2fe793[_0x4b18d4(0x3f4)](), _0x97fb43['forEach'](function (_0x1618b1) {
                        var _0x21b193 = _0x4b18d4;

                        _0x2fe793[_0x21b193(0x131)][_0x21b193(0x2fb)](_0x1618b1);
                      })) : (_0x2fe793[_0x4b18d4(0x1a6)][_0x4b18d4(0x2fe)](), _0x2fe793[_0x4b18d4(0x177)]()), _0x5a331d[_0x4b18d4(0x47f)];
                    }), _0x59ff27;
                  }

                  return this[_0x5e9bb4(0x3f4)](), Promise['resolve']({
                    'isSuccess': !0x0,
                    'message': _0x5e9bb4(0x31a)
                  });
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2fb)] = function (_0x4a27b1) {
                  var _0x1270d6 = _0x4ee1f1;
                  if (!this[_0x1270d6(0x131)]) throw new Error(_0x1270d6(0x44f));

                  this[_0x1270d6(0x131)]['subscribe'](_0x4a27b1);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x130)] = function (_0x42fc91) {
                  var _0x591c5a = _0x4ee1f1;
                  this[_0x591c5a(0x131)] && this[_0x591c5a(0x131)]['unSubscribe'](_0x42fc91);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2be)] = function (_0x38af0c, _0x35f270, _0x29abc0) {
                  var _0x6ef7f3 = _0x4ee1f1;
                  return void 0x0 === _0x38af0c && (_0x38af0c = ''), void 0x0 === _0x35f270 && (_0x35f270 = {}), void 0x0 === _0x29abc0 && (_0x29abc0 = ''), _0x29abc0 = _0x29abc0 || (0, _0x37d4fd[_0x6ef7f3(0x45c)])(), this[_0x6ef7f3(0x434)][_0x6ef7f3(0x4ba)](_0x29abc0, _0x38af0c), this['_socketManager'] ? this[_0x6ef7f3(0x131)]['isSocketAvailable']() ? this[_0x6ef7f3(0x131)][_0x6ef7f3(0x339)]() ? (_0x3761d6[_0x6ef7f3(0x2b7)][_0x6ef7f3(0x469)](_0x6ef7f3(0x439), _0x38af0c, _0x35f270), this[_0x6ef7f3(0x131)][_0x6ef7f3(0x2be)]({
                    'messageId': _0x29abc0,
                    'data': _0x35f270
                  })) : this[_0x6ef7f3(0x15d)][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }) : (this[_0x6ef7f3(0x15d)][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }), this[_0x6ef7f3(0x3f4)]()) : this['_cachedMessage'][_0x6ef7f3(0x41c)]({
                    'serviceId': _0x38af0c,
                    'payload': _0x35f270,
                    'messageId': _0x29abc0
                  }), _0x29abc0;
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x1ff)] = function (_0x1b3bf1) {
                  var _0x563650 = _0x4ee1f1;

                  if (void 0x0 === _0x1b3bf1 && (_0x1b3bf1 = {}), this[_0x563650(0x131)]) {
                    var _0x13e2b8 = {
                      'messageId': (0, _0x37d4fd[_0x563650(0x45c)])(),
                      'data': _0x1b3bf1
                    };
                    _0x3761d6[_0x563650(0x2b7)][_0x563650(0x469)](_0x563650(0x2f8), _0x13e2b8), this[_0x563650(0x131)]['sendChatMessage'](_0x13e2b8);
                  } else _0x3761d6['default'][_0x563650(0x122)](_0x563650(0x3f2));
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x425)] = function (_0x4a497e) {
                  var _0x373bd5 = _0x4ee1f1;
                  this[_0x373bd5(0x131)] && this['_socketManager']['removeSendingMessage'](_0x4a497e), this[_0x373bd5(0x15d)] && (this[_0x373bd5(0x15d)] = this[_0x373bd5(0x15d)][_0x373bd5(0x241)](function (_0x2f2535) {
                    var _0x4f44e9 = _0x373bd5;
                    return !_0x4a497e[_0x4f44e9(0x3f3)](_0x2f2535['messageId']);
                  }));
                }, _0x249e9b['prototype'][_0x4ee1f1(0x2e2)] = function (_0x3f42ec, _0x53afea, _0x338d1a) {
                  var _0xbef917 = _0x4ee1f1;
                  void 0x0 === _0x3f42ec && (_0x3f42ec = ''), this[_0xbef917(0x1a6)][_0xbef917(0x2e2)](_0x3f42ec, _0x53afea, _0x338d1a);
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['addCommandManager'] = function (_0x203d78, _0x5dd49b) {
                  var _0x16933 = _0x4ee1f1;
                  void 0x0 === _0x203d78 && (_0x203d78 = ''), this[_0x16933(0x1a6)][_0x16933(0x450)](_0x203d78, _0x5dd49b);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x2e7)] = function (_0x37d0fc) {
                  var _0x490d66 = _0x4ee1f1;
                  void 0x0 === _0x37d0fc && (_0x37d0fc = ''), this[_0x490d66(0x1a6)][_0x490d66(0x2e7)](_0x37d0fc);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x1cc)] = function (_0x7a63c, _0x47e6fb) {
                  var _0x2306ed = _0x4ee1f1;

                  this[_0x2306ed(0x1a0)]['on'](_0x7a63c, _0x47e6fb);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x19f)] = function (_0x567b7a, _0x41df2f) {
                  var _0x4c7d8e = _0x4ee1f1;

                  this['_emitter'][_0x4c7d8e(0x198)](_0x567b7a, _0x41df2f);
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x177)] = function () {
                  var _0x26f248 = _0x4ee1f1;
                  _0x3761d6[_0x26f248(0x2b7)][_0x26f248(0x469)](_0x26f248(0x2de)), this[_0x26f248(0x1a6)][_0x26f248(0xfa)](), this[_0x26f248(0x1a6)][_0x26f248(0x168)](), this[_0x26f248(0x43a)] = {}, this['_duplicateMessageId']['clearAll'](), this[_0x26f248(0x434)]['clear'](), this['_cachedMessage'] = [], this[_0x26f248(0x131)] && (this['_socketManager'][_0x26f248(0x166)](), this[_0x26f248(0x131)] = null), this[_0x26f248(0x4b7)][_0x26f248(0x168)](), this[_0x26f248(0x2c5)]();
                }, _0x249e9b['prototype']['doLogin'] = function (_0x15f1b7) {
                  var _0xeb650c = _0x4ee1f1,
                      _0xc43b4b = this,
                      _0x193aa7 = _0x15f1b7[_0xeb650c(0x200)],
                      _0x525ad6 = _0x15f1b7[_0xeb650c(0x125)],
                      _0x116f62 = _0x15f1b7['token'],
                      _0x3ec1fc = _0x15f1b7[_0xeb650c(0x13c)],
                      _0x93fb0b = _0x15f1b7[_0xeb650c(0x35c)],
                      _0xeb718d = void 0x0 === _0x93fb0b ? {} : _0x93fb0b,
                      _0x1bb02a = new _0x24e47b[_0xeb650c(0x392)]();

                  return _0x3ec1fc['post']({
                    'apiUrl': _0x193aa7,
                    'url': _0x525ad6 + _0xeb650c(0x4b1),
                    'params': {},
                    'data': {
                      'token': _0x116f62,
                      'device': JSON[_0xeb650c(0x296)](_0xeb718d)
                    },
                    'callback': function callback(_0x1e3f30) {
                      var _0x10387a = _0xeb650c,
                          _0x504202 = _0x1e3f30[_0x10387a(0x1c5)];

                      _0x504202['data'] && _0x504202[_0x10387a(0x1c5)][_0x10387a(0x25e)] ? (_0x3761d6[_0x10387a(0x2b7)][_0x10387a(0x469)](_0x10387a(0x39b), _0x504202), '2' == (_0x504202 = _0x504202[_0x10387a(0x1c5)])['v'] ? _0xc43b4b['playerStateInfo'][_0x10387a(0x438)](function (_0x3b8a9c) {
                        var _0x43afde = _0x10387a;

                        if (_0x3b8a9c) {
                          for (var _0x1eb632 = [], _0x1eb9f8 = 0x0; _0x1eb9f8 < _0x3b8a9c[_0x43afde(0x1b1)]; _0x1eb9f8++) _0x1eb632[_0x43afde(0x41c)](_0x3b8a9c[_0x43afde(0x309)](_0x1eb9f8) ^ _0x1ddd44[_0x43afde(0x309)](_0x1eb9f8 % _0x1ddd44[_0x43afde(0x1b1)]));

                          return String[_0x43afde(0x290)]['apply'](String, _0x1eb632);
                        }

                        return _0x3b8a9c;
                      }(_0x504202[_0x10387a(0x25e)])) : _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x438)](_0x504202['userId']), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x336)](_0x504202['token']), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x426)](_0x504202[_0x10387a(0x14f)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x1cd)](_0x504202['currency']), _0xc43b4b[_0x10387a(0x4b7)]['setWalletTypes'](_0x504202[_0x10387a(0x452)] || [_0x10387a(0x3db)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x4cd)]({
                        'data': {
                          'amount': parseFloat(_0x504202[_0x10387a(0x251)]),
                          'availableAmount': parseFloat(_0x504202['wallet']),
                          'version': parseInt(_0x504202[_0x10387a(0x378)]),
                          'pAmt': parseFloat(_0x504202[_0x10387a(0x10e)]),
                          'pAvaiAmt': parseFloat(_0x504202[_0x10387a(0x10e)]),
                          'pVer': parseInt(_0x504202['walletVersion'])
                        }
                      }), _0x504202[_0x10387a(0x472)] && _0xc43b4b[_0x10387a(0x4b7)]['setWalletInfos'](_0x504202[_0x10387a(0x472)]), _0xc43b4b[_0x10387a(0x4b7)][_0x10387a(0x322)](_0x504202[_0x10387a(0x156)]), _0x1bb02a['resolve']({
                        'isSuccess': !0x0,
                        'message': _0x10387a(0x306)
                      })) : (_0x3761d6[_0x10387a(0x2b7)][_0x10387a(0x469)](_0x10387a(0x2a0), _0x504202), _0x1bb02a[_0x10387a(0x107)]({
                        'isSuccess': !0x1,
                        'message': 'Login\x20fail.\x20Clean\x20up.'
                      }));
                    },
                    'callbackErr': function callbackErr() {
                      var _0x4f93c3 = _0xeb650c;
                      _0x3761d6['default'][_0x4f93c3(0x469)]('Authen\x20token\x20error'), _0x1bb02a[_0x4f93c3(0x107)]({
                        'isSuccess': !0x1,
                        'message': _0x4f93c3(0x461)
                      });
                    }
                  }), _0x1bb02a[_0xeb650c(0x418)]();
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x47b)] = function () {
                  var _0x5f3f40 = _0x4ee1f1,
                      _0x3828c6 = this;

                  this[_0x5f3f40(0x2c5)](), this[_0x5f3f40(0x31e)] = setInterval(function () {
                    var _0xf8dfc3 = _0x5f3f40;

                    _0x3828c6[_0xf8dfc3(0x2be)](_0xf8dfc3(0x385), {
                      'event': _0xf8dfc3(0x117),
                      'data': {
                        'tkn': _0x3828c6[_0xf8dfc3(0x4b7)][_0xf8dfc3(0x1a5)](),
                        'cId': (0, _0x37d4fd['uuid'])(),
                        'sId': _0xf8dfc3(0x385)
                      }
                    });
                  }, 0x493e0);
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['_stopIntervalExtendToken'] = function () {
                  var _0x447114 = _0x4ee1f1;
                  clearInterval(this[_0x447114(0x31e)]), this['_intervalExtendToken'] = null;
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x3f4)] = function () {
                  var _0x20da22 = _0x4ee1f1;
                  _0x3761d6[_0x20da22(0x2b7)][_0x20da22(0x469)](_0x20da22(0x345)), this['_socketManager'] && this['_socketManager'][_0x20da22(0x339)]() ? _0x3761d6[_0x20da22(0x2b7)][_0x20da22(0x469)](_0x20da22(0x30c)) : (_0x3761d6[_0x20da22(0x2b7)]['debug']('MessageManager\x20-\x20_initSocket\x20-\x20new\x20socket.'), this[_0x20da22(0x131)] = new _0x4d731f[_0x20da22(0x3dc)]({
                    'url': this[_0x20da22(0x43a)][_0x20da22(0x147)],
                    'token': this['_config']['token'],
                    'env': this[_0x20da22(0x43a)][_0x20da22(0x1be)],
                    'games': this['_config']['games'],
                    'reconnectionAttempts': 0xf423f,
                    'reconnectionDelay': 0x1f4,
                    'nextTickIn': 0x96,
                    'numberRetrySendingMessage': 0xa,
                    'ssid': this[_0x20da22(0x4b7)][_0x20da22(0x101)]()
                  }), this[_0x20da22(0x3bc)](), this['_handleSocketStatus']());
                }, _0x249e9b[_0x4ee1f1(0x1b3)][_0x4ee1f1(0x3bc)] = function () {
                  var _0x16d6fa = _0x4ee1f1,
                      _0x5f4a5a = this;

                  _0x3761d6[_0x16d6fa(0x2b7)][_0x16d6fa(0x469)](_0x16d6fa(0x328)), this['_socketManager'] ? (this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f['SocketManager'][_0x16d6fa(0x324)], function (_0x4c851e) {
                    var _0x38ca98 = _0x16d6fa;
                    _0x5f4a5a[_0x38ca98(0x382)][_0x38ca98(0x28a)](_0x4c851e['messageId']) || (_0x5f4a5a[_0x38ca98(0x382)][_0x38ca98(0x173)](_0x4c851e[_0x38ca98(0x270)]), _0x5f4a5a[_0x38ca98(0x1a6)][_0x38ca98(0x180)](_0x4c851e['data']));
                  }), this[_0x16d6fa(0x131)]['registerEvent'](_0x4d731f[_0x16d6fa(0x3dc)][_0x16d6fa(0x470)], function (_0x2cd630) {
                    var _0x20a3f6 = _0x16d6fa,
                        _0x490749 = _0x5f4a5a[_0x20a3f6(0x434)][_0x20a3f6(0x283)](_0x2cd630);

                    _0x490749 && (_0x5f4a5a[_0x20a3f6(0x1a6)]['onAck'](_0x490749, _0x2cd630), _0x5f4a5a[_0x20a3f6(0x434)][_0x20a3f6(0xfd)](_0x2cd630));
                  }), this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f[_0x16d6fa(0x3dc)][_0x16d6fa(0x43d)], function (_0x46ac9e) {
                    var _0xfb716a = _0x16d6fa,
                        _0x50bafb = _0x5f4a5a['_messageIdServiceIdMap'][_0xfb716a(0x283)](_0x46ac9e);

                    _0x50bafb && (_0x5f4a5a[_0xfb716a(0x434)][_0xfb716a(0xfd)](_0x46ac9e), _0x5f4a5a[_0xfb716a(0x1a6)]['onCannotSendMessage'](_0x50bafb, _0x46ac9e));
                  }), this[_0x16d6fa(0x131)][_0x16d6fa(0x1cc)](_0x4d731f['SocketManager'][_0x16d6fa(0x431)], function (_0x4358b5) {
                    var _0x22685a = _0x16d6fa,
                        _0x2f3fb5 = _0x4358b5[_0x22685a(0x362)];

                    _0x5f4a5a[_0x22685a(0x4b7)]['setToken'](_0x2f3fb5);
                  })) : _0x3761d6['default']['error']('MessageManager\x20-\x20_handleSocketEvent\x20with\x20null\x20_socketManager');
                }, _0x249e9b[_0x4ee1f1(0x1b3)]['_handleSocketStatus'] = function () {
                  var _0x5fc32f = _0x4ee1f1,
                      _0x319164 = this;

                  _0x3761d6['default'][_0x5fc32f(0x469)](_0x5fc32f(0x3ab)), this[_0x5fc32f(0x131)] ? (this[_0x5fc32f(0x131)]['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x120)], function () {
                    var _0x50250a = _0x5fc32f;
                    _0x319164[_0x50250a(0x1a6)][_0x50250a(0xfa)](), _0x319164['closeAndCleanUp']();
                  }), this['_socketManager']['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x409)], function () {
                    var _0x1fdd80 = _0x5fc32f;
                    _0x319164[_0x1fdd80(0x1a0)][_0x1fdd80(0x24e)](_0x249e9b['CONNECTED_CONNECTION']), _0x319164[_0x1fdd80(0x15d)]['forEach'](function (_0x37e144) {
                      var _0x5ed0f8 = _0x1fdd80,
                          _0xdc76b0 = _0x37e144[_0x5ed0f8(0x4c9)],
                          _0x576fbf = void 0x0 === _0xdc76b0 ? '' : _0xdc76b0,
                          _0x268fa1 = _0x37e144[_0x5ed0f8(0x142)],
                          _0x125ec2 = void 0x0 === _0x268fa1 ? {} : _0x268fa1,
                          _0x277aa5 = _0x37e144[_0x5ed0f8(0x270)],
                          _0x2b23bf = void 0x0 === _0x277aa5 ? '' : _0x277aa5;

                      _0x319164[_0x5ed0f8(0x2be)](_0x576fbf, _0x125ec2, _0x2b23bf);
                    }), _0x319164[_0x1fdd80(0x15d)] = [], _0x319164['_routingEventHandler'][_0x1fdd80(0x158)]();
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x182)], function () {
                    var _0x1a3f89 = _0x5fc32f;

                    _0x319164[_0x1a3f89(0x1a6)][_0x1a3f89(0x49f)](_0x4d731f[_0x1a3f89(0x3dc)][_0x1a3f89(0x182)]);
                  }), this[_0x5fc32f(0x131)]['registerEvent'](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x273)], function () {
                    var _0xa0cd68 = _0x5fc32f;
                    _0x319164[_0xa0cd68(0x1a0)]['emit'](_0x249e9b[_0xa0cd68(0x273)]), _0x319164['_routingEventHandler'][_0xa0cd68(0x3e2)](_0x4d731f[_0xa0cd68(0x3dc)]['DISCONNECTED_CONNECTION']);
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f['SocketManager'][_0x5fc32f(0x310)], function () {
                    var _0x3b5979 = _0x5fc32f;

                    _0x319164[_0x3b5979(0x1a6)][_0x3b5979(0x47e)](_0x4d731f[_0x3b5979(0x3dc)]['POPUP_DISCONNECTED_EVENT']);
                  }), this['_socketManager'][_0x5fc32f(0x1cc)](_0x4d731f[_0x5fc32f(0x3dc)][_0x5fc32f(0x300)], function (_0x5b15c0) {
                    var _0x26ea1c = _0x5fc32f;

                    _0x319164[_0x26ea1c(0x1a6)][_0x26ea1c(0x361)](_0x5b15c0);
                  })) : _0x3761d6[_0x5fc32f(0x2b7)][_0x5fc32f(0x122)](_0x5fc32f(0x410));
                }, _0x249e9b[_0x4ee1f1(0x12e)] = _0x4ee1f1(0x3af), _0x249e9b[_0x4ee1f1(0x273)] = _0x4ee1f1(0x2db), _0x249e9b;
              }();

              _0x11dd7d[_0x5ed68b(0x2b1)] = _0xb1089c;

              var _0x1ddd44 = _0x5ed68b(0x441);
            },
            0x233a: function _(_0x38d62f, _0x1a13ee, _0x296da2) {
              var _0x469e4a = a0_0x107f;

              var _0x2c8fbb = this && this['__importDefault'] || function (_0x5380bf) {
                var _0x1fc0ed = a0_0x107f;
                return _0x5380bf && _0x5380bf[_0x1fc0ed(0x223)] ? _0x5380bf : {
                  'default': _0x5380bf
                };
              };

              Object['defineProperty'](_0x1a13ee, '__esModule', {
                'value': !0x0
              }), _0x1a13ee[_0x469e4a(0x174)] = void 0x0;

              var _0x531498 = _0x2c8fbb(_0x296da2(0x28a)),
                  _0x2ecf60 = function () {
                var _0x25a499 = _0x469e4a;

                function _0x3effc7() {
                  var _0x2ebf0f = a0_0x107f;
                  this[_0x2ebf0f(0x1f5)] = new _0x531498[_0x2ebf0f(0x2b7)](), this[_0x2ebf0f(0x2d5)] = new _0x531498['default']();
                }

                return _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2e2)] = function (_0x1b7c5, _0x4c5629, _0x103e3f) {
                  var _0x3021a0 = _0x25a499;
                  void 0x0 === _0x1b7c5 && (_0x1b7c5 = ''), Array[_0x3021a0(0x423)](_0x4c5629) ? this[_0x3021a0(0x1f5)][_0x3021a0(0x4ba)](_0x1b7c5, _0x4c5629) : this[_0x3021a0(0x1f5)][_0x3021a0(0x4ba)](_0x1b7c5, [_0x4c5629]), Array[_0x3021a0(0x423)](_0x103e3f) ? this[_0x3021a0(0x2d5)][_0x3021a0(0x4ba)](_0x1b7c5, _0x103e3f) : this[_0x3021a0(0x2d5)][_0x3021a0(0x4ba)](_0x1b7c5, [_0x103e3f]);
                }, _0x3effc7[_0x25a499(0x1b3)]['addCommandManager'] = function (_0x5f9ad7, _0x168902) {
                  var _0x5b0bc9 = _0x25a499;
                  void 0x0 === _0x5f9ad7 && (_0x5f9ad7 = '');

                  var _0x41648c = this[_0x5b0bc9(0x1f5)][_0x5b0bc9(0x283)](_0x5f9ad7);

                  _0x41648c && (_0x41648c[_0x5b0bc9(0x3f3)](_0x168902) || _0x41648c['push'](_0x168902));
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2e7)] = function (_0x52a74e) {
                  var _0x3ce77c = _0x25a499;
                  void 0x0 === _0x52a74e && (_0x52a74e = ''), this[_0x3ce77c(0x1f5)][_0x3ce77c(0xfd)](_0x52a74e), this[_0x3ce77c(0x2d5)]['delete'](_0x52a74e);
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x3c2)] = function (_0xff5433, _0x5e96df) {
                  var _0x42b894 = _0x25a499;
                  void 0x0 === _0xff5433 && (_0xff5433 = ''), void 0x0 === _0x5e96df && (_0x5e96df = '');

                  var _0x51c1c8 = this[_0x42b894(0x1f5)]['get'](_0xff5433);

                  _0x51c1c8 && _0x51c1c8[_0x42b894(0x293)](function (_0x5b516a) {
                    var _0x597c4 = _0x42b894;

                    _0x5b516a[_0x597c4(0x3c2)](_0x5e96df);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onCannotSendMessage'] = function (_0x5ddd69, _0x1fc6c9) {
                  var _0x305ee9 = _0x25a499;
                  void 0x0 === _0x5ddd69 && (_0x5ddd69 = ''), void 0x0 === _0x1fc6c9 && (_0x1fc6c9 = '');

                  var _0x583911 = this[_0x305ee9(0x1f5)][_0x305ee9(0x283)](_0x5ddd69);

                  _0x583911 && _0x583911[_0x305ee9(0x293)](function (_0x5def01) {
                    var _0x476dec = _0x305ee9;

                    _0x5def01[_0x476dec(0x41e)](_0x1fc6c9);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0xfa)] = function () {
                  var _0x3a4be3 = _0x25a499,
                      _0xccc8ed = this;

                  this[_0x3a4be3(0x2d5)][_0x3a4be3(0x44d)]()[_0x3a4be3(0x293)](function (_0x38bf79) {
                    var _0xcd3ed = _0x3a4be3;
                    void 0x0 === _0x38bf79 && (_0x38bf79 = '');

                    var _0x346ac6 = _0xccc8ed['_eventHandlerMap'][_0xcd3ed(0x283)](_0x38bf79);

                    _0x346ac6 && _0x346ac6[_0xcd3ed(0x293)](function (_0x399475) {
                      var _0x2b6469 = _0xcd3ed;

                      _0x399475[_0x2b6469(0xfa)]();
                    });
                  });
                }, _0x3effc7['prototype'][_0x25a499(0x49f)] = function (_0x36a093) {
                  var _0xc23627 = _0x25a499,
                      _0x409fda = this;

                  this[_0xc23627(0x2d5)][_0xc23627(0x44d)]()[_0xc23627(0x293)](function (_0x7dee52) {
                    var _0x1c3894 = _0xc23627;
                    void 0x0 === _0x7dee52 && (_0x7dee52 = '');

                    var _0x358896 = _0x409fda['_eventHandlerMap'][_0x1c3894(0x283)](_0x7dee52);

                    _0x358896 && _0x358896[_0x1c3894(0x293)](function (_0xa98f83) {
                      var _0x194cdc = _0x1c3894;
                      _0xa98f83 && _0xa98f83[_0x194cdc(0x49f)] && _0xa98f83[_0x194cdc(0x49f)](_0x36a093);
                    });
                  });
                }, _0x3effc7['prototype']['onNetworkWarning'] = function (_0x47bef2) {
                  var _0x1fb905 = _0x25a499,
                      _0x527a99 = this;

                  this['_eventHandlerMap'][_0x1fb905(0x44d)]()[_0x1fb905(0x293)](function (_0x52fdf4) {
                    var _0x8a4b1b = _0x1fb905;
                    void 0x0 === _0x52fdf4 && (_0x52fdf4 = '');

                    var _0x465a3c = _0x527a99[_0x8a4b1b(0x2d5)][_0x8a4b1b(0x283)](_0x52fdf4);

                    _0x465a3c && _0x465a3c['forEach'](function (_0x29b31d) {
                      var _0x3d4d78 = _0x8a4b1b;
                      _0x29b31d && _0x29b31d['onNetworkWarning'] && _0x29b31d[_0x3d4d78(0x3e2)](_0x47bef2);
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x47e)] = function (_0x4fe993) {
                  var _0x157a02 = _0x25a499,
                      _0x4bd45d = this;

                  this[_0x157a02(0x2d5)][_0x157a02(0x44d)]()[_0x157a02(0x293)](function (_0xdb4c20) {
                    var _0x546af8 = _0x157a02;
                    void 0x0 === _0xdb4c20 && (_0xdb4c20 = '');

                    var _0x2ee075 = _0x4bd45d[_0x546af8(0x2d5)]['get'](_0xdb4c20);

                    _0x2ee075 && _0x2ee075[_0x546af8(0x293)](function (_0x41fb93) {
                      var _0x421821 = _0x546af8;
                      _0x41fb93 && _0x41fb93[_0x421821(0x47e)] && _0x41fb93[_0x421821(0x47e)]();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x2fe)] = function () {
                  var _0x4a2fab = _0x25a499,
                      _0x4b639f = this;

                  this[_0x4a2fab(0x2d5)][_0x4a2fab(0x44d)]()[_0x4a2fab(0x293)](function (_0xc581d7) {
                    var _0x3b309a = _0x4a2fab;
                    void 0x0 === _0xc581d7 && (_0xc581d7 = '');

                    var _0x3059eb = _0x4b639f[_0x3b309a(0x2d5)]['get'](_0xc581d7);

                    _0x3059eb && _0x3059eb[_0x3b309a(0x293)](function (_0x42302b) {
                      var _0x4bcaae = _0x3b309a;
                      _0x42302b && _0x42302b[_0x4bcaae(0x2fe)] && _0x42302b[_0x4bcaae(0x2fe)]();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onConnected'] = function () {
                  var _0x286dc3 = _0x25a499,
                      _0x549d3e = this;

                  this[_0x286dc3(0x2d5)][_0x286dc3(0x44d)]()[_0x286dc3(0x293)](function (_0x2dea2b) {
                    var _0x14d730 = _0x286dc3;
                    void 0x0 === _0x2dea2b && (_0x2dea2b = '');

                    var _0x5114fe = _0x549d3e[_0x14d730(0x2d5)][_0x14d730(0x283)](_0x2dea2b);

                    _0x5114fe && _0x5114fe[_0x14d730(0x293)](function (_0x293c6e) {
                      var _0x39c491 = _0x14d730;
                      _0x293c6e && _0x293c6e[_0x39c491(0x158)] && _0x293c6e['onConnected']();
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)]['onPong'] = function (_0x48a6ae) {
                  var _0x13d5a3 = _0x25a499,
                      _0x3c52d3 = this;

                  this[_0x13d5a3(0x2d5)]['keys']()[_0x13d5a3(0x293)](function (_0x43a021) {
                    var _0xd103ab = _0x13d5a3;
                    void 0x0 === _0x43a021 && (_0x43a021 = '');

                    var _0x2fe873 = _0x3c52d3[_0xd103ab(0x2d5)][_0xd103ab(0x283)](_0x43a021);

                    _0x2fe873 && _0x2fe873[_0xd103ab(0x293)](function (_0x10a589) {
                      var _0x5abec0 = _0xd103ab;
                      _0x10a589 && _0x10a589[_0x5abec0(0x361)] && _0x10a589[_0x5abec0(0x361)](_0x48a6ae);
                    });
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x180)] = function (_0x35232b) {
                  var _0x1238a7 = _0x25a499,
                      _0x1d5b84 = this[_0x1238a7(0x2d5)][_0x1238a7(0x283)](_0x35232b[_0x1238a7(0x4c9)]);

                  _0x1d5b84 && _0x1d5b84[_0x1238a7(0x293)](function (_0x1506b2) {
                    _0x1506b2['onEvent'](_0x35232b);
                  });
                }, _0x3effc7[_0x25a499(0x1b3)][_0x25a499(0x168)] = function () {
                  var _0x598dca = _0x25a499;
                  this[_0x598dca(0x1f5)]['clear'](), this[_0x598dca(0x2d5)][_0x598dca(0x44a)]();
                }, _0x3effc7;
              }();

              _0x1a13ee[_0x469e4a(0x174)] = _0x2ecf60;
            },
            0xa79: function _(_0x17641d, _0x4af313) {
              var _0x19cad9 = a0_0x107f;
              Object['defineProperty'](_0x4af313, '__esModule', {
                'value': !0x0
              }), _0x4af313[_0x19cad9(0x1c9)] = void 0x0;

              var _0x4e1c4c = function () {
                var _0x7876cb = _0x19cad9;

                function _0x427411(_0x335c9a) {
                  var _0x84272c = a0_0x107f;
                  void 0x0 === _0x335c9a && (_0x335c9a = 0x3), this[_0x84272c(0x30e)] = {}, this[_0x84272c(0x3ad)] = 0x0, this['maxRetry'] = _0x335c9a;
                }

                return _0x427411['prototype']['hasPacket'] = function () {
                  var _0x4699b2 = a0_0x107f;
                  return Object[_0x4699b2(0x44d)](this['_ackPacket'])[_0x4699b2(0x1b1)] > 0x0;
                }, _0x427411[_0x7876cb(0x1b3)]['addNew'] = function (_0x28501) {
                  var _0x19dc9a = _0x7876cb,
                      _0x5c9aef = this[_0x19dc9a(0x3ad)]++;

                  return this[_0x19dc9a(0x30e)][_0x5c9aef] = {
                    'counter': 0x0,
                    'message': _0x28501
                  }, _0x5c9aef;
                }, _0x427411[_0x7876cb(0x1b3)][_0x7876cb(0x425)] = function (_0x10013d) {
                  var _0x68db68 = _0x7876cb,
                      _0x2813de = this;

                  Object[_0x68db68(0x44d)](this[_0x68db68(0x30e)])[_0x68db68(0x293)](function (_0x39cf4c) {
                    var _0x566227 = _0x68db68,
                        _0xe82fd3 = _0x2813de[_0x566227(0x30e)][_0x39cf4c][_0x566227(0x3dd)];

                    _0x10013d(_0xe82fd3) && delete _0x2813de[_0x566227(0x30e)][_0x39cf4c];
                  });
                }, _0x427411['prototype'][_0x7876cb(0x2bc)] = function (_0x25d9a5, _0x9fc85c) {
                  var _0x14ec50 = _0x7876cb,
                      _0x1f7dc6,
                      _0x3485f1 = this;

                  Object[_0x14ec50(0x44d)](this[_0x14ec50(0x30e)])[_0x14ec50(0x293)](function (_0x100031) {
                    var _0x120358 = _0x14ec50;
                    0x0 === (_0x1f7dc6 = _0x3485f1[_0x120358(0x30e)][_0x100031])[_0x120358(0x1e0)] ? _0x1f7dc6[_0x120358(0x1e0)]++ : _0x1f7dc6[_0x120358(0x1e0)] < _0x3485f1[_0x120358(0x478)] ? (_0x25d9a5(_0x100031, _0x1f7dc6[_0x120358(0x3dd)], _0x1f7dc6[_0x120358(0x1e0)]), _0x1f7dc6[_0x120358(0x1e0)]++) : (delete _0x3485f1[_0x120358(0x30e)][_0x100031], _0x9fc85c(_0x1f7dc6[_0x120358(0x3dd)]));
                  });
                }, _0x427411[_0x7876cb(0x1b3)]['ackPacket'] = function (_0x1aa007) {
                  var _0x199c52 = this['_ackPacket'][_0x1aa007];
                  return delete this['_ackPacket'][_0x1aa007], _0x199c52 ? _0x199c52['message'] : null;
                }, _0x427411[_0x7876cb(0x1b3)][_0x7876cb(0x280)] = function (_0x52c2f5) {
                  var _0xf417cf = _0x7876cb,
                      _0x1fa912 = this;

                  Object['keys'](this['_ackPacket'])[_0xf417cf(0x293)](function (_0x3620d6) {
                    var _0x391e89 = _0xf417cf;
                    _0x1fa912[_0x391e89(0x30e)][_0x3620d6][_0x391e89(0x1e0)] = _0x52c2f5;
                  });
                }, _0x427411['prototype'][_0x7876cb(0x2df)] = function (_0x45e2b5, _0x2d89d3) {
                  var _0x1231d8 = _0x7876cb;
                  this['_ackPacket'][_0x45e2b5][_0x1231d8(0x1e0)] = _0x2d89d3;
                }, _0x427411['prototype']['clearAll'] = function () {
                  var _0x44bf5c = _0x7876cb;
                  this[_0x44bf5c(0x30e)] = {};
                }, _0x427411;
              }();

              _0x4af313[_0x19cad9(0x1c9)] = _0x4e1c4c;
            },
            0x1d8f: function _(_0x4d7f0a, _0x37ca5f, _0x3d33d5) {
              var _0x4bf96f = a0_0x107f;

              var _0x2af7b8 = this && this[_0x4bf96f(0x24c)] || function (_0x3097c1, _0x505c23, _0x465f2c) {
                var _0x1a5901 = _0x4bf96f;

                if (_0x465f2c || 0x2 === arguments[_0x1a5901(0x1b1)]) {
                  for (var _0x39b771, _0x5d3dfc = 0x0, _0x45dec1 = _0x505c23[_0x1a5901(0x1b1)]; _0x5d3dfc < _0x45dec1; _0x5d3dfc++) !_0x39b771 && _0x5d3dfc in _0x505c23 || (_0x39b771 || (_0x39b771 = Array[_0x1a5901(0x1b3)][_0x1a5901(0x389)]['call'](_0x505c23, 0x0, _0x5d3dfc)), _0x39b771[_0x5d3dfc] = _0x505c23[_0x5d3dfc]);
                }

                return _0x3097c1['concat'](_0x39b771 || Array['prototype'][_0x1a5901(0x389)]['call'](_0x505c23));
              },
                  _0x496045 = this && this['__importDefault'] || function (_0x11540b) {
                var _0x58734c = _0x4bf96f;
                return _0x11540b && _0x11540b[_0x58734c(0x223)] ? _0x11540b : {
                  'default': _0x11540b
                };
              };

              Object[_0x4bf96f(0xf2)](_0x37ca5f, _0x4bf96f(0x223), {
                'value': !0x0
              }), _0x37ca5f[_0x4bf96f(0x3dc)] = void 0x0;

              var _0x26303f = _0x3d33d5(0xa79),
                  _0x5ba825 = _0x496045(_0x3d33d5(0x7e9)),
                  _0x412b2c = _0x496045(_0x3d33d5(0x1c13)),
                  _0x3dc4e4 = _0x3d33d5(0x1a99),
                  _0x1957f4 = _0x496045(_0x3d33d5(0x2501)),
                  _0x524566 = _0x3d33d5(0x11f2),
                  _0xf8a57f = 'v5',
                  _0x26b9ef = 'v4',
                  _0x3ea7a3 = 'v5',
                  _0x46a01f = function () {
                var _0x1a7887 = _0x4bf96f;

                function _0x31b704(_0x657bd) {
                  var _0x43247b = a0_0x107f;
                  this[_0x43247b(0x282)] = [], this['_pendingSubscribeChannelList'] = [], this[_0x43247b(0x1e4)] = 0x0, this[_0x43247b(0x3ee)] = _0xf8a57f, this[_0x43247b(0x211)] = {
                    'listLastLatency': [],
                    'maxLastLatency': 0x5,
                    'currentLatencyIdx': -0x1,
                    'averageLatency': 0x96
                  }, this[_0x43247b(0x14d)] = 0x0, this[_0x43247b(0x276)] = null, this['_sId'] = '', this[_0x43247b(0x48a)] = null, this['_opt'] = this['defaultOption'](_0x657bd), this[_0x43247b(0x1a0)] = new _0x412b2c[_0x43247b(0x2b7)](), this[_0x43247b(0x224)] = new _0x26303f[_0x43247b(0x1c9)](this[_0x43247b(0x1a7)][_0x43247b(0x34c)]), this[_0x43247b(0x249)] = _0x31b704[_0x43247b(0x221)], this['_initNewConnection']();
                }

                return _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x35b)] = function () {
                  var _0x4b0a0c = _0x1a7887;
                  return 'token='['concat'](this[_0x4b0a0c(0x1a7)][_0x4b0a0c(0x362)], '&sv=')[_0x4b0a0c(0x23c)](_0xf8a57f, _0x4b0a0c(0x19c))[_0x4b0a0c(0x23c)](this[_0x4b0a0c(0x1a7)]['env'], _0x4b0a0c(0x40c))[_0x4b0a0c(0x23c)](this[_0x4b0a0c(0x1a7)][_0x4b0a0c(0x165)], _0x4b0a0c(0x3ac))['concat'](this[_0x4b0a0c(0x1a7)]['ssid']);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x37e)] = function () {
                  var _0x29d0ab = _0x1a7887,
                      _0x2c66fa = this;

                  Object['keys'](_0x3dc4e4['managers'])[_0x29d0ab(0x293)](function (_0x4e3e95) {
                    var _0x5e18a4 = _0x29d0ab;
                    delete _0x3dc4e4[_0x5e18a4(0x1af)][_0x4e3e95];
                  }), this[_0x29d0ab(0x249)] !== _0x31b704['STATUS_KILLED'] ? (this[_0x29d0ab(0x276)] = _0x3dc4e4(''[_0x29d0ab(0x23c)](this[_0x29d0ab(0x1a7)][_0x29d0ab(0x147)], '/?')[_0x29d0ab(0x23c)](this['buildSocketUrlQueryParam']()), {
                    'transports': this[_0x29d0ab(0x1a7)][_0x29d0ab(0x24b)],
                    'reconnection': !0x0,
                    'forceNew': this['_opt']['forceNew'],
                    'reconnectionAttempts': this['_opt']['reconnectionAttempts'] || 0xa,
                    'reconnectionDelay': this['_opt'][_0x29d0ab(0x285)] || 0x1f4,
                    'randomizationFactor': 0x0,
                    'rememberUpgrade': !0x0,
                    'timestampRequests': !0x0,
                    'parser': _0x1957f4['default']
                  }), this['_reconnect_attempt'] = 0x0, this[_0x29d0ab(0x4ca)](this[_0x29d0ab(0x276)]), this['_handleConnectionStatus'](this['_socket']), this[_0x29d0ab(0x282)][_0x29d0ab(0x293)](function (_0x36a0a0) {
                    var _0x15ea9a = _0x29d0ab;

                    _0x2c66fa[_0x15ea9a(0x1aa)](_0x36a0a0);
                  }), _0x5ba825[_0x29d0ab(0x2b7)]['debug'](_0x29d0ab(0x427))) : _0x5ba825['default'][_0x29d0ab(0x469)](_0x29d0ab(0x2e8));
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x348)] = function (_0x49f1fc) {
                  var _0x21edb3 = _0x1a7887;
                  return {
                    'url': _0x49f1fc[_0x21edb3(0x147)] || '',
                    'token': _0x49f1fc[_0x21edb3(0x362)] || '',
                    'numberRetrySendingMessage': _0x49f1fc[_0x21edb3(0x34c)] || 0x2,
                    'forceNew': _0x49f1fc[_0x21edb3(0x2f3)] || !0x1,
                    'transports': _0x49f1fc[_0x21edb3(0x24b)] || ['websocket'],
                    'reconnectionDelay': _0x49f1fc[_0x21edb3(0x285)] || 0x3e8,
                    'reconnectionDelayMax': _0x49f1fc[_0x21edb3(0x2c8)] || 0xbb8,
                    'reconnectionAttempts': _0x49f1fc[_0x21edb3(0x18c)] || 0x3,
                    'nextTickIn': _0x49f1fc['nextTickIn'] || 0xc8,
                    'pingTimeoutWarning': 0x258,
                    'env': _0x49f1fc['env'] || 'portal',
                    'games': _0x49f1fc[_0x21edb3(0x165)] || 'all',
                    'ssid': _0x49f1fc[_0x21edb3(0x126)] || _0x49f1fc[_0x21edb3(0x362)] || ''
                  };
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x4ca)] = function (_0x119b87) {
                  var _0x18dce7 = _0x1a7887,
                      _0x185934 = this;

                  _0x119b87['on'](_0x31b704[_0x18dce7(0x3b4)], function (_0x32fb47, _0x377e0e) {
                    var _0x1b274e = _0x18dce7;
                    _0x377e0e && _0x377e0e(), _0x32fb47 && (_0x32fb47['v'] === _0x26b9ef && (_0x32fb47 = {
                      'messageId': _0x32fb47['id'],
                      'data': {
                        'event': _0x32fb47['da']['ev'],
                        'svt': _0x32fb47['da']['svt'],
                        'serviceId': _0x32fb47['da'][_0x1b274e(0x36b)],
                        'eventId': _0x32fb47['da'][_0x1b274e(0x3df)],
                        'data': _0x32fb47['da']['da'],
                        'channelType': _0x32fb47['da']['ch']
                      },
                      'version': _0x32fb47['v']
                    }), _0x185934[_0x1b274e(0x1a0)][_0x1b274e(0x24e)](_0x31b704['NEW_MESSAGE_EVENT'], _0x32fb47));
                  }), _0x119b87['on'](_0x31b704[_0x18dce7(0x1df)], function (_0xb86496, _0x234de3) {
                    var _0x30f045 = _0x18dce7;

                    if (_0x234de3 && _0x234de3(), _0xb86496) {
                      for (var _0x34c0cb = new Uint8Array(_0xb86496), _0x5ef4c7 = 0x0; _0x5ef4c7 < _0x34c0cb['length']; _0x5ef4c7++) _0x34c0cb[_0x5ef4c7]--;

                      _0xb86496 = _0x524566[_0x30f045(0x220)]['decode'](_0x34c0cb), _0x5ba825['default']['debug']('SocketManagerNewMessage:\x20%s', _0xb86496), _0xb86496 = {
                        'messageId': (_0xb86496 = JSON[_0x30f045(0x288)](_0xb86496))['id'],
                        'data': {
                          'event': _0xb86496['da']['ev'],
                          'svt': _0xb86496['da'][_0x30f045(0x404)],
                          'serviceId': _0xb86496['da'][_0x30f045(0x36b)],
                          'eventId': _0xb86496['da'][_0x30f045(0x3df)],
                          'data': _0xb86496['da']['da'],
                          'channelType': _0xb86496['da']['ch']
                        },
                        'version': _0xb86496['v']
                      }, _0x185934[_0x30f045(0x1a0)][_0x30f045(0x24e)](_0x31b704[_0x30f045(0x324)], _0xb86496);
                    }
                  }), _0x119b87['on'](_0x31b704[_0x18dce7(0x2ca)], function (_0xb3ca98, _0x474a13) {
                    var _0x18597b = _0x18dce7;

                    if (_0x474a13 && _0x474a13(), _0xb3ca98 && _0x185934[_0x18597b(0x48a)]) {
                      for (var _0x100950 = new Uint8Array(_0xb3ca98), _0x4b5a0f = 0x0; _0x4b5a0f < _0x100950[_0x18597b(0x1b1)]; _0x4b5a0f++) _0x100950[_0x4b5a0f] = _0x100950[_0x4b5a0f] ^ _0x185934[_0x18597b(0x48a)][_0x4b5a0f % _0x185934[_0x18597b(0x48a)]['length']];

                      _0xb3ca98 = _0x524566[_0x18597b(0x220)]['decode'](_0x100950), _0x5ba825[_0x18597b(0x2b7)]['debug'](_0x18597b(0x2ee), _0xb3ca98), _0xb3ca98 = {
                        'messageId': (_0xb3ca98 = JSON[_0x18597b(0x288)](_0xb3ca98))['id'],
                        'data': {
                          'event': _0xb3ca98['da']['ev'],
                          'svt': _0xb3ca98['da']['svt'],
                          'serviceId': _0xb3ca98['da'][_0x18597b(0x36b)],
                          'eventId': _0xb3ca98['da']['eid'],
                          'data': _0xb3ca98['da']['da'],
                          'channelType': _0xb3ca98['da']['ch']
                        },
                        'version': _0xb3ca98['v']
                      }, _0x185934[_0x18597b(0x1a0)][_0x18597b(0x24e)](_0x31b704[_0x18597b(0x324)], _0xb3ca98);
                    } else _0x5ba825['default'][_0x18597b(0x31c)](_0x18597b(0x47a), _0xb3ca98, _0x185934[_0x18597b(0x48a)]);
                  }), _0x119b87['on'](_0x18dce7(0x187), function (_0xb20ee0) {
                    var _0x12a7de = _0x18dce7;
                    _0xb20ee0 && (_0x5ba825[_0x12a7de(0x2b7)][_0x12a7de(0x469)](_0x12a7de(0x3c3), _0xb20ee0), _0x185934[_0x12a7de(0x1a0)][_0x12a7de(0x24e)](_0x31b704[_0x12a7de(0x324)], {
                      'messageId': _0xb20ee0['messageId'],
                      'data': {
                        'event': 'chat-event',
                        'eventId': _0xb20ee0['messageId'],
                        'serviceId': _0xb20ee0[_0x12a7de(0x1c5)][_0x12a7de(0x4c9)],
                        'channelType': 'presence',
                        'data': _0xb20ee0['data']
                      }
                    }));
                  }), _0x119b87['on'](_0x18dce7(0x110), function (_0x5c5fd1) {
                    var _0x163799 = _0x18dce7,
                        _0x12c39c = _0x5c5fd1['token'];
                    _0x185934[_0x163799(0x1a0)][_0x163799(0x24e)](_0x31b704[_0x163799(0x431)], {
                      'token': _0x12c39c
                    }), _0x185934['updateToken'](_0x12c39c);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x4b9)] = function (_0xc845fc) {
                  var _0x5b92aa = _0x1a7887,
                      _0x377701,
                      _0x11616c,
                      _0x4ee011,
                      _0xb1579e = this,
                      _0x12f88c = function _0x12f88c() {
                    var _0x455233 = a0_0x107f,
                        _0x142732 = !0x1,
                        _0x59cf4a = [];

                    if (_0xb1579e['_packetManager'][_0x455233(0x2bc)](function (_0x1ca9ee, _0x238ac2, _0x475e45) {
                      var _0x254f91 = _0x455233;

                      _0xb1579e[_0x254f91(0x224)]['updateCounter'](_0x1ca9ee, _0x475e45 + 0x1);
                    }, function (_0x541644) {
                      var _0x4d49f4 = _0x455233;
                      _0x59cf4a['push'](_0x541644[_0x4d49f4(0x270)]), _0x142732 = !0x0;
                    }), _0x142732 && _0x59cf4a[_0x455233(0x293)](function (_0x5e80b3) {
                      var _0x5170a9 = _0x455233;
                      _0x5ba825[_0x5170a9(0x2b7)][_0x5170a9(0x469)]('SocketManager\x20-\x20CAN_NOT_SEND_MESSAGE_EVENT\x20:\x20%s.', _0x5e80b3), _0xb1579e['_emitter'][_0x5170a9(0x24e)](_0x31b704[_0x5170a9(0x43d)], _0x5e80b3);
                    }), _0xb1579e[_0x455233(0x224)][_0x455233(0x1d5)]()) {
                      var _0xc1c9f2 = _0xb1579e[_0x455233(0x211)][_0x455233(0x303)];

                      _0x377701 = setTimeout(function () {
                        _0x12f88c();
                      }, _0xc1c9f2);
                    } else _0x377701 = setTimeout(function () {
                      _0x12f88c();
                    }, 0x96);
                  },
                      _0x199e9e = function _0x199e9e() {
                    var _0x5d414b = a0_0x107f;
                    _0x5ba825['default'][_0x5d414b(0x469)]('SocketManager\x20-\x20Clear\x20interval\x20sending\x20message!'), clearTimeout(_0x377701), clearTimeout(_0x11616c), clearTimeout(_0x4ee011), _0xb1579e[_0x5d414b(0x224)][_0x5d414b(0x4a7)]();
                  };

                  _0xc845fc['on'](_0x5b92aa(0x33f), function () {
                    var _0xa27bb7 = _0x5b92aa;
                    _0xb1579e[_0xa27bb7(0x249)] = _0x31b704[_0xa27bb7(0x4d3)], _0xb1579e[_0xa27bb7(0x1e4)] = 0x0, _0xb1579e[_0xa27bb7(0x488)]['length'] > 0x0 && _0xb1579e[_0xa27bb7(0x488)][_0xa27bb7(0x293)](function (_0x59f924) {
                      var _0x3c1aaf = _0xa27bb7;

                      _0xb1579e[_0x3c1aaf(0x2fb)](_0x59f924);
                    }), _0xb1579e[_0xa27bb7(0x488)] = [], clearTimeout(_0x11616c), clearTimeout(_0x4ee011), _0x5ba825[_0xa27bb7(0x2b7)][_0xa27bb7(0x469)]('SockerManager\x20-\x20health-check\x20CONNECTED!');
                  }), _0xc845fc['on'](_0x5b92aa(0x106), function () {
                    var _0x194708 = _0x5b92aa;
                    _0x5ba825[_0x194708(0x2b7)][_0x194708(0x469)](_0x194708(0x4b8)), _0x5ba825[_0x194708(0x2b7)][_0x194708(0x469)](_0x194708(0x483)), clearTimeout(_0x377701), _0xb1579e['_keyAB'] = null, _0x11616c = setTimeout(function () {
                      var _0x2848a3 = _0x194708;

                      _0xb1579e[_0x2848a3(0x1a0)][_0x2848a3(0x24e)](_0x31b704[_0x2848a3(0x273)]);
                    }, 0x2710), _0x4ee011 = setTimeout(function () {
                      var _0x2c6357 = _0x194708;

                      _0xb1579e['_emitter']['emit'](_0x31b704[_0x2c6357(0x310)]);
                    }, 0x3a98);
                  }), _0xc845fc['on'](_0x5b92aa(0x369), function (_0x353cab) {
                    _0xb1579e['_reconnect_attempt'] = _0x353cab;
                  }), _0xc845fc['on'](_0x5b92aa(0x151), function (_0x1b035e) {
                    var _0x1cf75a = _0x5b92aa;
                    _0x5ba825[_0x1cf75a(0x2b7)]['debug'](_0x1cf75a(0x46a)[_0x1cf75a(0x23c)](_0xb1579e[_0x1cf75a(0x14d)], _0x1cf75a(0x468))['concat'](_0xb1579e[_0x1cf75a(0x1a7)]['reconnectionAttempts'])), _0xb1579e[_0x1cf75a(0x14d)] >= _0xb1579e[_0x1cf75a(0x1a7)][_0x1cf75a(0x18c)] ? (_0xb1579e[_0x1cf75a(0x417)](), _0xb1579e[_0x1cf75a(0x249)] = _0x31b704[_0x1cf75a(0x4a6)], _0x199e9e(), _0x5ba825['default'][_0x1cf75a(0x469)](_0x1cf75a(0x242)), _0xb1579e[_0x1cf75a(0x1a0)][_0x1cf75a(0x24e)](_0x31b704[_0x1cf75a(0x120)])) : _0xb1579e[_0x1cf75a(0x1a0)][_0x1cf75a(0x24e)](_0x31b704['POOR_CONNECTION']);
                  }), _0xc845fc['on'](_0x5b92aa(0x222), function (_0x37b2f5) {
                    var _0x3225bc = _0x5b92aa;
                    _0x5ba825['default']['debug'](_0x3225bc(0x33e)), _0xb1579e[_0x3225bc(0x417)](), _0xb1579e[_0x3225bc(0x249)] = _0x31b704['STATUS_KILLED'], _0x199e9e(), _0x5ba825[_0x3225bc(0x2b7)]['debug'](_0x3225bc(0x2aa)), _0xb1579e['_emitter'][_0x3225bc(0x24e)](_0x31b704[_0x3225bc(0x120)]);
                  }), _0xc845fc['on'](_0x5b92aa(0x477), function () {
                    var _0x2d92f1 = _0x5b92aa;

                    _0x5ba825[_0x2d92f1(0x2b7)][_0x2d92f1(0x469)](_0x2d92f1(0x477));
                  }), _0xc845fc['on']('pong', function (_0x2212b5) {
                    var _0xa1733d = _0x5b92aa;
                    _0x2212b5 > _0xb1579e[_0xa1733d(0x1a7)][_0xa1733d(0x2f2)] ? _0xb1579e[_0xa1733d(0x1e4)]++ : _0xb1579e[_0xa1733d(0x1e4)] = 0x0, _0xb1579e['_countPingOverTime'] >= 0x5 && (_0xb1579e[_0xa1733d(0x1a0)][_0xa1733d(0x24e)](_0x31b704[_0xa1733d(0x182)]), _0xb1579e[_0xa1733d(0x1e4)] = 0x0), _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)] = ++_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)] % _0xb1579e[_0xa1733d(0x211)]['maxLastLatency'], _0xb1579e['_latency'][_0xa1733d(0x297)][_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x465)]] = _0x2212b5, _0xb1579e['_latency']['averageLatency'] = _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x297)]['reduce'](function (_0x2c6a81, _0x4dd222) {
                      return _0x2c6a81 + _0x4dd222;
                    }, 0x0) / _0xb1579e['_latency'][_0xa1733d(0x297)]['length'], _0xb1579e['_latency'][_0xa1733d(0x303)] < 0x96 && (_0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x303)] = 0x96), _0x5ba825[_0xa1733d(0x2b7)]['debug'](_0xa1733d(0x1b0), _0x2212b5, _0xb1579e[_0xa1733d(0x211)][_0xa1733d(0x303)]), _0xb1579e[_0xa1733d(0x1a0)]['emit'](_0x31b704[_0xa1733d(0x300)], {
                      'latency': _0x2212b5,
                      'averageLatency': _0xb1579e['_latency'][_0xa1733d(0x303)]
                    });
                  }), _0xc845fc['on'](_0x5b92aa(0x1a2), function (_0x3836c3) {
                    var _0xe38246 = _0x5b92aa;
                    _0x3836c3[_0xe38246(0x20a)];

                    var _0x112476 = _0x3836c3[_0xe38246(0x39f)];

                    _0xb1579e[_0xe38246(0x3ee)] = _0xf8a57f, _0xb1579e[_0xe38246(0x1f1)] = _0x112476, _0xb1579e['updateKeyAB'](_0x112476), _0xb1579e[_0xe38246(0x1a0)][_0xe38246(0x24e)](_0x31b704['CONNECTED_EVENT']), _0x12f88c();
                  });
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x321)] = function (_0x2e97c5, _0x43954d, _0x4780e6) {
                  var _0x5ae2ea = _0x1a7887,
                      _0x4fe18f = this;

                  if (this['_socket'] && this[_0x5ae2ea(0x276)][_0x5ae2ea(0x292)]) {
                    var _0x1bcbfa = _0x43954d;
                    this[_0x5ae2ea(0x3ee)] !== _0x26b9ef && this[_0x5ae2ea(0x3ee)] !== _0x3ea7a3 || (_0x1bcbfa = {
                      'id': _0x43954d[_0x5ae2ea(0x270)],
                      'da': {
                        'ev': _0x43954d['data'][_0x5ae2ea(0x476)],
                        'da': _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x1c5)],
                        'v': _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x29f)] ? _0x43954d[_0x5ae2ea(0x1c5)][_0x5ae2ea(0x29f)] : 0x1
                      }
                    });

                    var _0x23c5c4 = this[_0x5ae2ea(0x269)](_0x2e97c5, _0x1bcbfa);

                    this['_socket'][_0x5ae2ea(0x1e2)][_0x2e97c5] = function () {
                      var _0x569049 = _0x5ae2ea,
                          _0x5e4365 = _0x4fe18f['_packetManager'][_0x569049(0x407)](_0x2e97c5);

                      _0x5e4365 && (_0x5ba825['default'][_0x569049(0x469)](_0x569049(0x235), _0x5e4365['messageId']), _0x4fe18f[_0x569049(0x1a0)][_0x569049(0x24e)](_0x31b704['SEND_MESSAGE_SUCCESS_EVENT'], _0x5e4365[_0x569049(0x270)]));
                    }, _0x5ba825[_0x5ae2ea(0x2b7)][_0x5ae2ea(0x469)](_0x5ae2ea(0x171), _0x4780e6, _0x43954d[_0x5ae2ea(0x270)]), this[_0x5ae2ea(0x276)][_0x5ae2ea(0x162)](_0x23c5c4);
                  } else this[_0x5ae2ea(0x224)][_0x5ae2ea(0x2df)](_0x2e97c5, _0x4780e6 + 0x1);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x269)] = function (_0x3930de, _0x54b60a) {
                  return {
                    'type': this['_getPacketType'](),
                    'options': {
                      'compress': !0x0
                    },
                    'id': _0x3930de,
                    'data': this['_encrypt'](_0x54b60a)
                  };
                }, _0x31b704[_0x1a7887(0x1b3)]['_getPacketType'] = function () {
                  var _0x513889 = _0x1a7887;
                  return this[_0x513889(0x3ee)] === _0x3ea7a3 ? 0x5 : 0x2;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x1e7)] = function (_0x12a547) {
                  var _0x39d5c9 = _0x1a7887,
                      _0x427c6c = _0x31b704[_0x39d5c9(0x386)];

                  return this[_0x39d5c9(0x3ee)] === _0x26b9ef ? _0x427c6c = _0x31b704[_0x39d5c9(0x442)] : this['_serverSocketVersion'] === _0x3ea7a3 && (_0x12a547 = JSON[_0x39d5c9(0x296)](_0x12a547), _0x427c6c = _0x31b704[_0x39d5c9(0x305)], _0x12a547 = this[_0x39d5c9(0x376)](_0x12a547)), [_0x427c6c, _0x12a547];
                }, _0x31b704[_0x1a7887(0x1b3)]['_encrypt_5_1'] = function (_0x237eb3) {
                  var _0x2806bc = _0x1a7887;

                  for (var _0x235203 = _0x524566[_0x2806bc(0x4cf)][_0x2806bc(0x263)](_0x237eb3), _0xf1cf4c = 0x0; _0xf1cf4c < _0x235203[_0x2806bc(0x1b1)]; _0xf1cf4c++) _0x235203[_0xf1cf4c]++;

                  return _0x235203[_0x2806bc(0x314)];
                }, _0x31b704['prototype'][_0x1a7887(0x376)] = function (_0x5522b6) {
                  var _0x87575f = _0x1a7887;

                  if (this[_0x87575f(0x48a)]) {
                    for (var _0x46610e = _0x524566[_0x87575f(0x4cf)][_0x87575f(0x263)](_0x5522b6), _0x44b763 = 0x0; _0x44b763 < _0x46610e[_0x87575f(0x1b1)]; _0x44b763++) _0x46610e[_0x44b763] = _0x46610e[_0x44b763] ^ this[_0x87575f(0x48a)][_0x44b763 % this[_0x87575f(0x48a)][_0x87575f(0x1b1)]];

                    return _0x46610e[_0x87575f(0x314)];
                  }

                  return _0x5ba825[_0x87575f(0x2b7)]['error']('_encrypt_5_2\x20CANNOT\x20encrypt:\x20%s', _0x5522b6), null;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x274)] = function (_0x42f98c) {
                  var _0x29817a = _0x1a7887;
                  this['_socket'] && (this['_opt']['token'] = _0x42f98c, this['_socket']['io'][_0x29817a(0x420)][_0x29817a(0x189)] = this[_0x29817a(0x35b)](), this[_0x29817a(0x276)]['io']['uri'] = ''[_0x29817a(0x23c)](this[_0x29817a(0x1a7)]['url'], '/?')[_0x29817a(0x23c)](this[_0x29817a(0x35b)]())), this[_0x29817a(0x1a7)]['token'] = _0x42f98c;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x2be)] = function (_0x53cc00) {
                  var _0x1f312e = _0x1a7887;

                  _0x5ba825[_0x1f312e(0x2b7)][_0x1f312e(0x469)]('SocketManager\x20-\x20Add\x20message\x20to\x20queue:\x20%j', _0x53cc00);

                  var _0x30ad2c = this[_0x1f312e(0x224)]['addNew'](_0x53cc00);

                  this[_0x1f312e(0x321)](_0x30ad2c, _0x53cc00, 0x0);
                }, _0x31b704['prototype'][_0x1a7887(0x425)] = function (_0x20a8e8) {
                  var _0x1c037b = _0x1a7887;
                  _0x20a8e8 = _0x20a8e8 || [], this[_0x1c037b(0x224)][_0x1c037b(0x425)](function (_0x1f8e4a) {
                    return _0x20a8e8['includes'](_0x1f8e4a['messageId']);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)]['sendChatMessage'] = function (_0x5aaae2) {
                  var _0x22a624 = _0x1a7887;
                  _0x5ba825[_0x22a624(0x2b7)][_0x22a624(0x469)](_0x22a624(0x1f6), _0x5aaae2), this['_socket']['emit']('chat-emit', _0x5aaae2);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x1cc)] = function (_0x5098a3, _0x4c4abd) {
                  var _0x1b1858 = _0x1a7887;

                  this[_0x1b1858(0x1a0)]['on'](_0x5098a3, _0x4c4abd);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x19f)] = function (_0x59a61a, _0x5b4aff) {
                  var _0x221f52 = _0x1a7887;

                  this[_0x221f52(0x1a0)][_0x221f52(0x198)](_0x59a61a, _0x5b4aff);
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x2fb)] = function (_0x2f092f) {
                  var _0x4ef30b = _0x1a7887;
                  _0x2f092f && (_0x2f092f = _0x2f092f[_0x4ef30b(0x3d9)](_0x4ef30b(0x475), 'p'), this[_0x4ef30b(0x282)][_0x4ef30b(0x3f3)](_0x2f092f) || (this[_0x4ef30b(0x276)][_0x4ef30b(0x292)] ? (this[_0x4ef30b(0x282)][_0x4ef30b(0x41c)](_0x2f092f), this[_0x4ef30b(0x1aa)](_0x2f092f)) : this['_pendingSubscribeChannelList']['push'](_0x2f092f)));
                }, _0x31b704[_0x1a7887(0x1b3)]['_subscribe'] = function (_0x4695d2) {
                  var _0x27b6a4 = _0x1a7887,
                      _0x39ac9f = _0x3dc4e4(''[_0x27b6a4(0x23c)](this['_opt'][_0x27b6a4(0x147)], '/')[_0x27b6a4(0x23c)](_0x4695d2, _0x27b6a4(0x149))[_0x27b6a4(0x23c)](this[_0x27b6a4(0x1a7)][_0x27b6a4(0x362)], '&sv=')[_0x27b6a4(0x23c)](_0xf8a57f));

                  this[_0x27b6a4(0x4ca)](_0x39ac9f);
                }, _0x31b704[_0x1a7887(0x1b3)]['unSubscribe'] = function (_0xb924cd) {
                  var _0x3807ad = _0x1a7887;
                  _0xb924cd && (_0xb924cd = _0xb924cd['replace'](_0x3807ad(0x475), 'p'), this[_0x3807ad(0x282)][_0x3807ad(0x3f3)](_0xb924cd) && (this[_0x3807ad(0x282)][_0x3807ad(0x479)](this[_0x3807ad(0x282)][_0x3807ad(0x22a)](_0xb924cd), 0x1), this[_0x3807ad(0xf7)](_0xb924cd)), this[_0x3807ad(0x488)][_0x3807ad(0x3f3)](_0xb924cd) && this[_0x3807ad(0x488)][_0x3807ad(0x479)](this[_0x3807ad(0x488)]['indexOf'](_0xb924cd), 0x1));
                }, _0x31b704['prototype']['_unSubscribe'] = function (_0x4d8e50) {
                  var _0x32959b = _0x1a7887,
                      _0x37341d = this[_0x32959b(0x276)]['io'][_0x32959b(0x32e)]['/'[_0x32959b(0x23c)](_0x4d8e50)];

                  _0x37341d && (_0x37341d[_0x32959b(0x166)](), _0x37341d['removeAllListeners'](), delete this[_0x32959b(0x276)]['io'][_0x32959b(0x32e)]['/'[_0x32959b(0x23c)](_0x4d8e50)]);
                }, _0x31b704['prototype'][_0x1a7887(0x417)] = function () {
                  var _0x25eaf3 = _0x1a7887,
                      _0x3ba89c = this;

                  Object[_0x25eaf3(0x44d)](this[_0x25eaf3(0x276)]['io']['nsps'])['forEach'](function (_0x411f2a) {
                    var _0x28e586 = _0x25eaf3,
                        _0x24f9f9 = _0x3ba89c[_0x28e586(0x276)]['io'][_0x28e586(0x32e)][_0x411f2a];

                    _0x24f9f9 && (_0x24f9f9['close'](), _0x24f9f9[_0x28e586(0x146)](), delete _0x3ba89c['_socket']['io'][_0x28e586(0x32e)][_0x411f2a]);
                  });
                }, _0x31b704[_0x1a7887(0x1b3)]['close'] = function () {
                  var _0x229f07 = _0x1a7887;
                  this[_0x229f07(0x417)](), this[_0x229f07(0x249)] = _0x31b704['STATUS_KILLED'], this['_emitter'][_0x229f07(0x146)](), this[_0x229f07(0x224)][_0x229f07(0x4a7)]();
                }, _0x31b704[_0x1a7887(0x1b3)]['_reconnect'] = function () {
                  var _0x338ed7 = _0x1a7887;
                  this[_0x338ed7(0x417)](), this[_0x338ed7(0x37e)]();
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x337)] = function () {
                  var _0x55bb1c = _0x1a7887;
                  return this[_0x55bb1c(0x249)] !== _0x31b704[_0x55bb1c(0x4a6)];
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x339)] = function () {
                  var _0x4d5ae6 = _0x1a7887;
                  return !!this[_0x4d5ae6(0x48a)];
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x499)] = function (_0x58ce2c) {
                  var _0x57c767 = _0x1a7887,
                      _0x22eb03 = 'abcd';
                  _0x58ce2c && (_0x22eb03 = _0x58ce2c[_0x57c767(0x4a5)](0x9, 0xd));

                  for (var _0x1bfcbe = new ArrayBuffer(0x4), _0x43e6e1 = new Uint8Array(_0x1bfcbe), _0x30588a = 0x0; _0x30588a < _0x22eb03['length']; _0x30588a++) _0x43e6e1[_0x30588a] = _0x22eb03[_0x57c767(0x309)](_0x30588a) % 0x80;

                  this[_0x57c767(0x48a)] = _0x43e6e1;
                }, _0x31b704[_0x1a7887(0x1b3)][_0x1a7887(0x13b)] = function () {
                  var _0xb4aa1d = _0x1a7887;
                  return _0x2af7b8(_0x2af7b8([], this[_0xb4aa1d(0x282)], !0x0), this[_0xb4aa1d(0x488)], !0x0);
                }, _0x31b704['SOCKET_REQUEST_EVENT'] = 'q', _0x31b704[_0x1a7887(0x3b4)] = 'p', _0x31b704[_0x1a7887(0x1df)] = '1', _0x31b704[_0x1a7887(0x2ca)] = '2', _0x31b704[_0x1a7887(0x386)] = 'q', _0x31b704[_0x1a7887(0x442)] = 'q4', _0x31b704[_0x1a7887(0x3fe)] = _0x1a7887(0x247), _0x31b704[_0x1a7887(0x305)] = 'q52', _0x31b704[_0x1a7887(0x409)] = _0x1a7887(0x292), _0x31b704['CAN_NOT_CONNECT_EVENT'] = 'can-not-connect', _0x31b704['CAN_NOT_SEND_MESSAGE_EVENT'] = _0x1a7887(0x186), _0x31b704[_0x1a7887(0x470)] = _0x1a7887(0x32c), _0x31b704[_0x1a7887(0x324)] = 'new-message', _0x31b704[_0x1a7887(0x2bd)] = _0x1a7887(0x217), _0x31b704[_0x1a7887(0x300)] = _0x1a7887(0x2e6), _0x31b704[_0x1a7887(0x431)] = _0x1a7887(0x110), _0x31b704['POOR_CONNECTION'] = _0x1a7887(0x3aa), _0x31b704[_0x1a7887(0x310)] = _0x1a7887(0x134), _0x31b704[_0x1a7887(0x273)] = _0x1a7887(0x2db), _0x31b704[_0x1a7887(0x221)] = _0x1a7887(0x150), _0x31b704[_0x1a7887(0x4d3)] = _0x1a7887(0x18a), _0x31b704[_0x1a7887(0x4a6)] = _0x1a7887(0x3e7), _0x31b704;
              }();

              _0x37ca5f[_0x4bf96f(0x3dc)] = _0x46a01f;
            },
            0x35: function _(_0x34ee72, _0x278386, _0x18f530) {
              var _0x406381 = a0_0x107f;

              var _0x28ef3f = _0x18f530(0x16c2),
                  _0x4a537b = _0x18f530(0x141a),
                  _0x195028 = Object[_0x406381(0x1b3)][_0x406381(0x436)],
                  _0x3b8773 = _0x406381(0x17d) == typeof Blob || _0x406381(0x364) != typeof Blob && _0x406381(0x432) === _0x195028[_0x406381(0x229)](Blob),
                  _0x10bb8d = _0x406381(0x17d) == typeof File || _0x406381(0x364) != typeof File && _0x406381(0x4a4) === _0x195028[_0x406381(0x229)](File);

              function _0x3ef584(_0x57fa85, _0x45d31a) {
                var _0x571e56 = _0x406381;
                if (!_0x57fa85) return _0x57fa85;

                if (_0x4a537b(_0x57fa85)) {
                  var _0x561ade = {
                    'p': 0x1,
                    'n': _0x45d31a[_0x571e56(0x1b1)]
                  };
                  return _0x45d31a[_0x571e56(0x41c)](_0x57fa85), _0x561ade;
                }

                if (_0x28ef3f(_0x57fa85)) {
                  for (var _0x15c604 = new Array(_0x57fa85[_0x571e56(0x1b1)]), _0x2ce4f1 = 0x0; _0x2ce4f1 < _0x57fa85[_0x571e56(0x1b1)]; _0x2ce4f1++) _0x15c604[_0x2ce4f1] = _0x3ef584(_0x57fa85[_0x2ce4f1], _0x45d31a);

                  return _0x15c604;
                }

                if ('object' == typeof _0x57fa85 && !(_0x57fa85 instanceof Date)) {
                  for (var _0x1d520a in _0x15c604 = {}, _0x57fa85) _0x15c604[_0x1d520a] = _0x3ef584(_0x57fa85[_0x1d520a], _0x45d31a);

                  return _0x15c604;
                }

                return _0x57fa85;
              }

              function _0x271ac9(_0x2c10be, _0x1d570f) {
                var _0x541046 = _0x406381;
                if (!_0x2c10be) return _0x2c10be;
                if (_0x2c10be && _0x2c10be[_0x541046(0x4c8)]) return _0x1d570f[_0x2c10be[_0x541046(0x1fd)]];
                if (_0x2c10be && _0x541046(0x268) == typeof _0x2c10be && _0x2c10be[_0x541046(0x39d)]('b')) return _0x1d570f[parseInt(_0x2c10be[_0x541046(0x4a5)](0x1))];

                if (_0x28ef3f(_0x2c10be)) {
                  for (var _0xf70f85 = 0x0; _0xf70f85 < _0x2c10be[_0x541046(0x1b1)]; _0xf70f85++) _0x2c10be[_0xf70f85] = _0x271ac9(_0x2c10be[_0xf70f85], _0x1d570f);
                } else {
                  if (_0x541046(0x33c) == typeof _0x2c10be) {
                    for (var _0xf4fe03 in _0x2c10be) _0x2c10be[_0xf4fe03] = _0x271ac9(_0x2c10be[_0xf4fe03], _0x1d570f);
                  }
                }

                return _0x2c10be;
              }

              _0x278386[_0x406381(0x43c)] = function (_0x423b29) {
                var _0x39d14a = _0x406381,
                    _0x33cc42 = [],
                    _0x24a126 = _0x423b29[_0x39d14a(0x1c5)],
                    _0x3617a5 = _0x423b29;

                return _0x3617a5[_0x39d14a(0x1c5)] = _0x3ef584(_0x24a126, _0x33cc42), _0x3617a5['attachments'] = _0x33cc42['length'], {
                  'packet': _0x3617a5,
                  'buffers': _0x33cc42
                };
              }, _0x278386[_0x406381(0x371)] = function (_0xe5dbeb, _0x1333b2) {
                var _0x489e8d = _0x406381;
                return _0xe5dbeb[_0x489e8d(0x1c5)] = _0x271ac9(_0xe5dbeb[_0x489e8d(0x1c5)], _0x1333b2), _0xe5dbeb['attachments'] = void 0x0, _0xe5dbeb;
              }, _0x278386['removeBlobs'] = function (_0x3d73b6, _0x311e6e) {
                var _0x1ca2b9 = 0x0,
                    _0x118474 = _0x3d73b6;
                !function _0x2df206(_0x3e7542, _0x481675, _0x5bc9f1) {
                  var _0x3afa79 = a0_0x107f;
                  if (!_0x3e7542) return _0x3e7542;

                  if (_0x3b8773 && _0x3e7542 instanceof Blob || _0x10bb8d && _0x3e7542 instanceof File) {
                    _0x1ca2b9++;

                    var _0x27c41d = new FileReader();

                    _0x27c41d['onload'] = function () {
                      var _0x165e63 = a0_0x107f;
                      _0x5bc9f1 ? _0x5bc9f1[_0x481675] = this['result'] : _0x118474 = this[_0x165e63(0x1c0)], --_0x1ca2b9 || _0x311e6e(_0x118474);
                    }, _0x27c41d[_0x3afa79(0x4a8)](_0x3e7542);
                  } else {
                    if (_0x28ef3f(_0x3e7542)) {
                      for (var _0x55996b = 0x0; _0x55996b < _0x3e7542[_0x3afa79(0x1b1)]; _0x55996b++) _0x2df206(_0x3e7542[_0x55996b], _0x55996b, _0x3e7542);
                    } else {
                      if ('object' == typeof _0x3e7542 && !_0x4a537b(_0x3e7542)) {
                        for (var _0x35f13a in _0x3e7542) _0x2df206(_0x3e7542[_0x35f13a], _0x35f13a, _0x3e7542);
                      }
                    }
                  }
                }(_0x118474), _0x1ca2b9 || _0x311e6e(_0x118474);
              };
            },
            0x2501: function _(_0xff5376, _0x3aff2c, _0x38b887) {
              var _0x4f94d6 = a0_0x107f;

              var _0xfa2f66 = _0x38b887(0x4cb)(_0x4f94d6(0x3b7)),
                  _0x3d49c2 = _0x38b887(0x223f),
                  _0x15b188 = _0x38b887(0x35),
                  _0x2d2029 = _0x38b887(0x16c2),
                  _0x489f48 = _0x38b887(0x141a);

              function _0x517c8a() {}

              _0x3aff2c['protocol'] = 0x4, _0x3aff2c[_0x4f94d6(0x24d)] = [_0x4f94d6(0x236), _0x4f94d6(0x203), 'EVENT', _0x4f94d6(0x2a1), 'ERROR', _0x4f94d6(0x2fd), 'BINARY_ACK'], _0x3aff2c[_0x4f94d6(0x236)] = 0x0, _0x3aff2c[_0x4f94d6(0x203)] = 0x1, _0x3aff2c['EVENT'] = 0x2, _0x3aff2c[_0x4f94d6(0x2a1)] = 0x3, _0x3aff2c[_0x4f94d6(0x4ac)] = 0x4, _0x3aff2c[_0x4f94d6(0x2fd)] = 0x5, _0x3aff2c[_0x4f94d6(0x133)] = 0x6, _0x3aff2c[_0x4f94d6(0x137)] = _0x517c8a, _0x3aff2c['Decoder'] = _0x229ac9;

              var _0x466e67 = _0x3aff2c[_0x4f94d6(0x4ac)] + _0x4f94d6(0x281);

              function _0x23862e(_0x152a28) {
                var _0x1ad9d8 = _0x4f94d6,
                    _0xca254 = '' + _0x152a28['type'];

                if (_0x3aff2c[_0x1ad9d8(0x2fd)] !== _0x152a28[_0x1ad9d8(0x156)] && _0x3aff2c['BINARY_ACK'] !== _0x152a28[_0x1ad9d8(0x156)] || (_0xca254 += _0x152a28[_0x1ad9d8(0x1d8)] + '-'), _0x152a28[_0x1ad9d8(0x201)] && '/' !== _0x152a28['nsp'] && (_0xca254 += _0x152a28[_0x1ad9d8(0x201)] + ','), null != _0x152a28['id'] && (_0xca254 += _0x152a28['id']), null != _0x152a28[_0x1ad9d8(0x1c5)]) {
                  var _0x397068 = function (_0x3280cf) {
                    var _0x266060 = _0x1ad9d8;

                    try {
                      return JSON[_0x266060(0x296)](_0x3280cf);
                    } catch (_0x2de2a6) {
                      return !0x1;
                    }
                  }(_0x152a28[_0x1ad9d8(0x1c5)]);

                  if (!0x1 === _0x397068) return _0x466e67;
                  _0xca254 += _0x397068;
                }

                return _0xfa2f66(_0x1ad9d8(0x1b7), _0x152a28, _0xca254), _0xca254;
              }

              function _0x229ac9() {
                var _0x597b64 = _0x4f94d6;
                this[_0x597b64(0xf1)] = null;
              }

              function _0x4888ec(_0x5ec5ab) {
                var _0xcad97a = _0x4f94d6;
                this[_0xcad97a(0x102)] = _0x5ec5ab, this[_0xcad97a(0x2b8)] = [];
              }

              function _0x4aa26c(_0x2ab754) {
                var _0x331f56 = _0x4f94d6;
                return {
                  'type': _0x3aff2c[_0x331f56(0x4ac)],
                  'data': _0x331f56(0x195) + _0x2ab754
                };
              }

              _0x517c8a[_0x4f94d6(0x1b3)][_0x4f94d6(0x263)] = function (_0x4d70a1, _0x1a174e) {
                var _0x3e9aa4 = _0x4f94d6;
                _0xfa2f66(_0x3e9aa4(0x4cb), _0x4d70a1), _0x3aff2c[_0x3e9aa4(0x2fd)] === _0x4d70a1[_0x3e9aa4(0x156)] || _0x3aff2c[_0x3e9aa4(0x133)] === _0x4d70a1['type'] ? function (_0x304ff8, _0x5fba7) {
                  _0x15b188['removeBlobs'](_0x304ff8, function (_0x4f51d8) {
                    var _0x4a6cf0 = a0_0x107f,
                        _0x2bd7ef = _0x15b188['deconstructPacket'](_0x4f51d8),
                        _0x12b897 = _0x23862e(_0x2bd7ef['packet']),
                        _0x4a4de1 = _0x2bd7ef[_0x4a6cf0(0x2b8)];

                    _0x4a4de1[_0x4a6cf0(0x393)](_0x12b897), _0x5fba7(_0x4a4de1);
                  });
                }(_0x4d70a1, _0x1a174e) : _0x1a174e([_0x23862e(_0x4d70a1)]);
              }, _0x3d49c2(_0x229ac9['prototype']), _0x229ac9[_0x4f94d6(0x1b3)][_0x4f94d6(0x2fc)] = function (_0x507c05) {
                var _0xea137b = _0x4f94d6,
                    _0x179043;

                if (_0xea137b(0x268) == typeof _0x507c05) _0x179043 = function (_0x40051d) {
                  var _0xc2fe59 = _0xea137b,
                      _0x3355d8 = 0x0,
                      _0x786482 = {
                    'type': Number(_0x40051d[_0xc2fe59(0x144)](0x0))
                  };
                  if (null == _0x3aff2c['types'][_0x786482[_0xc2fe59(0x156)]]) return _0x4aa26c(_0xc2fe59(0x3e9) + _0x786482[_0xc2fe59(0x156)]);

                  if (_0x3aff2c[_0xc2fe59(0x2fd)] === _0x786482[_0xc2fe59(0x156)] || _0x3aff2c[_0xc2fe59(0x133)] === _0x786482[_0xc2fe59(0x156)]) {
                    for (var _0x57e1a2 = _0x3355d8 + 0x1; '-' !== _0x40051d[_0xc2fe59(0x144)](++_0x3355d8) && _0x3355d8 != _0x40051d['length'];);

                    var _0x34d032 = _0x40051d[_0xc2fe59(0x4a5)](_0x57e1a2, _0x3355d8);

                    if (_0x34d032 != Number(_0x34d032) || '-' !== _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) throw new Error(_0xc2fe59(0x456));
                    _0x786482[_0xc2fe59(0x1d8)] = Number(_0x34d032);
                  }

                  if ('/' === _0x40051d[_0xc2fe59(0x144)](_0x3355d8 + 0x1)) {
                    for (_0x57e1a2 = _0x3355d8 + 0x1; ++_0x3355d8 && ',' !== (_0x4b55d9 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) && _0x3355d8 !== _0x40051d[_0xc2fe59(0x1b1)];);

                    _0x786482[_0xc2fe59(0x201)] = _0x40051d[_0xc2fe59(0x4a5)](_0x57e1a2, _0x3355d8);
                  } else _0x786482['nsp'] = '/';

                  var _0x376820 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8 + 0x1);

                  if ('' !== _0x376820 && Number(_0x376820) == _0x376820) {
                    for (_0x57e1a2 = _0x3355d8 + 0x1; ++_0x3355d8;) {
                      var _0x4b55d9;

                      if (null == (_0x4b55d9 = _0x40051d[_0xc2fe59(0x144)](_0x3355d8)) || Number(_0x4b55d9) != _0x4b55d9) {
                        --_0x3355d8;
                        break;
                      }

                      if (_0x3355d8 === _0x40051d['length']) break;
                    }

                    _0x786482['id'] = Number(_0x40051d['substring'](_0x57e1a2, _0x3355d8 + 0x1));
                  }

                  if (_0x40051d['charAt'](++_0x3355d8)) {
                    var _0x5e653d = function (_0x1776ba) {
                      try {
                        return JSON['parse'](_0x1776ba);
                      } catch (_0x490294) {
                        return !0x1;
                      }
                    }(_0x40051d['substr'](_0x3355d8));

                    if (!0x1 === _0x5e653d || _0x786482[_0xc2fe59(0x156)] !== _0x3aff2c[_0xc2fe59(0x4ac)] && !_0x2d2029(_0x5e653d)) return _0x4aa26c(_0xc2fe59(0x346));
                    _0x786482[_0xc2fe59(0x1c5)] = _0x5e653d;
                  }

                  return _0xfa2f66(_0xc2fe59(0x3a8), _0x40051d, _0x786482), _0x786482;
                }(_0x507c05), _0x3aff2c[_0xea137b(0x2fd)] === _0x179043['type'] || _0x3aff2c[_0xea137b(0x133)] === _0x179043[_0xea137b(0x156)] ? (this['reconstructor'] = new _0x4888ec(_0x179043), 0x0 === this[_0xea137b(0xf1)][_0xea137b(0x102)]['attachments'] && this['emit'](_0xea137b(0x3e0), _0x179043)) : this[_0xea137b(0x24e)](_0xea137b(0x3e0), _0x179043);else {
                  if (!_0x489f48(_0x507c05) && !_0x507c05[_0xea137b(0x275)]) throw new Error(_0xea137b(0x45e) + _0x507c05);
                  if (!this[_0xea137b(0xf1)]) throw new Error(_0xea137b(0x1ab));
                  (_0x179043 = this['reconstructor'][_0xea137b(0x341)](_0x507c05)) && (this['reconstructor'] = null, this[_0xea137b(0x24e)](_0xea137b(0x3e0), _0x179043));
                }
              }, _0x229ac9[_0x4f94d6(0x1b3)][_0x4f94d6(0x1eb)] = function () {
                var _0x12a57c = _0x4f94d6;
                this[_0x12a57c(0xf1)] && this[_0x12a57c(0xf1)][_0x12a57c(0x401)]();
              }, _0x4888ec[_0x4f94d6(0x1b3)][_0x4f94d6(0x341)] = function (_0x3ac75a) {
                var _0x378ae1 = _0x4f94d6;

                if (this['buffers'][_0x378ae1(0x41c)](_0x3ac75a), this[_0x378ae1(0x2b8)]['length'] === this[_0x378ae1(0x102)][_0x378ae1(0x1d8)]) {
                  var _0x4cdbe4 = _0x15b188['reconstructPacket'](this[_0x378ae1(0x102)], this['buffers']);

                  return this[_0x378ae1(0x401)](), _0x4cdbe4;
                }

                return null;
              }, _0x4888ec[_0x4f94d6(0x1b3)][_0x4f94d6(0x401)] = function () {
                var _0x2446db = _0x4f94d6;
                this[_0x2446db(0x102)] = null, this[_0x2446db(0x2b8)] = [];
              };
            },
            0x141a: function _(_0x4e9052) {
              var _0x4bed14 = a0_0x107f;

              _0x4e9052[_0x4bed14(0x38d)] = function (_0x488cd2) {
                var _0x11e615 = _0x4bed14;
                return _0x5b6e08 && Buffer[_0x11e615(0x160)](_0x488cd2) || _0x2abffa && (_0x488cd2 instanceof ArrayBuffer || function (_0x56cf0f) {
                  var _0x379fd4 = _0x11e615;
                  return _0x379fd4(0x17d) == typeof ArrayBuffer['isView'] ? ArrayBuffer[_0x379fd4(0x37b)](_0x56cf0f) : _0x56cf0f[_0x379fd4(0x314)] instanceof ArrayBuffer;
                }(_0x488cd2));
              };

              var _0x5b6e08 = _0x4bed14(0x17d) == typeof Buffer && _0x4bed14(0x17d) == typeof Buffer['isBuffer'],
                  _0x2abffa = 'function' == typeof ArrayBuffer;
            },
            0x7e9: function _(_0x10031b, _0x2397ba) {
              var _0x178068 = a0_0x107f;
              Object[_0x178068(0xf2)](_0x2397ba, _0x178068(0x223), {
                'value': !0x0
              }), _0x2397ba[_0x178068(0x3ba)] = void 0x0;

              var _0x56fc6b = console['log'],
                  _0x1ef1c5 = console[_0x178068(0x31c)],
                  _0x4138b4 = function () {
                var _0x43186c = _0x178068;

                function _0x276499(_0x3e0c2a, _0x76a9f1, _0x55df81) {
                  var _0x3c58e5 = a0_0x107f;
                  this[_0x3c58e5(0x11d)] = !!_0x3e0c2a, this[_0x3c58e5(0x384)] = _0x3e0c2a, this['logFnError'] = _0x76a9f1, this[_0x3c58e5(0x437)] = _0x55df81;
                }

                return _0x276499[_0x43186c(0x1b3)][_0x43186c(0x469)] = function (_0x524ad0) {
                  var _0x2448e1 = _0x43186c;

                  for (var _0x3c4ed6 = [], _0x22d4be = 0x1; _0x22d4be < arguments['length']; _0x22d4be++) _0x3c4ed6[_0x22d4be - 0x1] = arguments[_0x22d4be];

                  var _0x29498f = _0x524ad0;
                  this[_0x2448e1(0x11d)] && (_0x29498f += JSON['stringify'](_0x3c4ed6)), this[_0x2448e1(0x11d)] && this[_0x2448e1(0x384)](_0x29498f);
                }, _0x276499['prototype'][_0x43186c(0x31c)] = function (_0x264373) {
                  var _0x13def2 = _0x43186c;

                  for (var _0x596777 = [], _0x441d95 = 0x1; _0x441d95 < arguments[_0x13def2(0x1b1)]; _0x441d95++) _0x596777[_0x441d95 - 0x1] = arguments[_0x441d95];

                  var _0x2dfaf5 = _0x264373;
                  this[_0x13def2(0x11d)] && (_0x2dfaf5 += JSON[_0x13def2(0x296)](_0x596777)), this[_0x13def2(0x11d)] && this['logFnWarn'](_0x2dfaf5);
                }, _0x276499[_0x43186c(0x1b3)][_0x43186c(0x122)] = function (_0x1e3a7d) {
                  var _0x3850e3 = _0x43186c;

                  for (var _0x58477a = [], _0x1c6677 = 0x1; _0x1c6677 < arguments[_0x3850e3(0x1b1)]; _0x1c6677++) _0x58477a[_0x1c6677 - 0x1] = arguments[_0x1c6677];

                  var _0x472b16 = _0x1e3a7d;
                  this['isDebugging'] && (_0x472b16 += JSON['stringify'](_0x58477a)), this[_0x3850e3(0x11d)] && this['logFnError'](_0x472b16);
                }, _0x276499['prototype'][_0x43186c(0x419)] = function (_0x3486fa, _0x4a1c28, _0x564ef9) {
                  var _0x33dea3 = _0x43186c;
                  this[_0x33dea3(0x384)] = _0x3486fa, this[_0x33dea3(0x2af)] = _0x4a1c28, this['logFnWarn'] = _0x564ef9;
                }, _0x276499;
              }();

              _0x2397ba[_0x178068(0x3ba)] = _0x4138b4, _0x2397ba[_0x178068(0x2b7)] = new _0x4138b4(_0x56fc6b, _0x1ef1c5, _0x1ef1c5);
            },
            0x1518: function _(_0x3c3f9a, _0x409fea) {
              var _0x59f793 = a0_0x107f;
              Object['defineProperty'](_0x409fea, _0x59f793(0x223), {
                'value': !0x0
              }), _0x409fea['XMLHttpServiceRest'] = _0x409fea[_0x59f793(0x267)] = void 0x0;

              var _0x493b7d = function () {
                var _0x2deaa4 = _0x59f793;

                function _0x5bcb47() {}

                return _0x5bcb47[_0x2deaa4(0x49b)] = function (_0x3bcf98) {
                  return new _0x296cbe();
                }, _0x5bcb47;
              }();

              _0x409fea['ServiceRest'] = _0x493b7d;

              var _0x296cbe = function () {
                var _0x2f9307 = _0x59f793;

                function _0x28085c() {}

                return _0x28085c['prototype']['encodeQueryData'] = function (_0x29a7ea) {
                  var _0x1b37f3 = a0_0x107f;
                  return Object['keys'](_0x29a7ea)[_0x1b37f3(0x435)](function (_0x239112) {
                    var _0x374fd9 = _0x1b37f3;
                    return [_0x239112, _0x29a7ea[_0x239112]][_0x374fd9(0x435)](encodeURIComponent)[_0x374fd9(0x2b4)]('=');
                  })[_0x1b37f3(0x2b4)]('&');
                }, _0x28085c[_0x2f9307(0x1b3)]['post'] = function (_0x18336b) {
                  var _0x5f3b2b = _0x2f9307,
                      _0x454b63 = _0x18336b[_0x5f3b2b(0x147)],
                      _0x2c372a = _0x18336b[_0x5f3b2b(0x1c5)],
                      _0x588c51 = _0x18336b[_0x5f3b2b(0x200)],
                      _0x38ed69 = _0x18336b[_0x5f3b2b(0x411)],
                      _0x43d864 = _0x18336b[_0x5f3b2b(0x113)],
                      _0x3b4081 = this[_0x5f3b2b(0x1ea)](_0x2c372a),
                      _0x2804f2 = _0x588c51 + _0x454b63,
                      _0x523ab8 = new XMLHttpRequest();

                  _0x523ab8[_0x5f3b2b(0x412)](_0x5f3b2b(0x250), _0x2804f2, !0x0), _0x523ab8[_0x5f3b2b(0xee)] = 0x3a98, _0x523ab8[_0x5f3b2b(0x2d4)]('Content-type', 'application/x-www-form-urlencoded'), _0x523ab8[_0x5f3b2b(0x255)] = function () {
                    var _0x3ba5aa = _0x5f3b2b;
                    0x4 == _0x523ab8[_0x3ba5aa(0x3d0)] ? _0x523ab8[_0x3ba5aa(0x1f8)] ? _0x38ed69({
                      'status': _0x523ab8[_0x3ba5aa(0x21e)],
                      'data': JSON[_0x3ba5aa(0x288)](_0x523ab8['responseText'])
                    }) : _0x43d864() : 0x0 === _0x523ab8[_0x3ba5aa(0x3d0)] && _0x43d864(), 0xc8 !== _0x523ab8['status'] && _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x335)] = function (_0x42a55f) {
                    _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x112)] = function (_0x41db42) {
                    _0x43d864();
                  }, _0x523ab8[_0x5f3b2b(0x262)](_0x3b4081);
                }, _0x28085c;
              }();

              _0x409fea[_0x59f793(0x20c)] = _0x296cbe;
            },
            0x11f2: function _(_0x1a4698, _0x4440fb) {
              var _0x2c4e5f = a0_0x107f;
              Object['defineProperty'](_0x4440fb, '__esModule', {
                'value': !0x0
              }), _0x4440fb['TextDecoder'] = _0x4440fb[_0x2c4e5f(0x4cf)] = void 0x0;

              var _0x2ab75b = function () {
                var _0x19402c = _0x2c4e5f;

                function _0x50a37c() {}

                return _0x50a37c[_0x19402c(0x263)] = function (_0x59b14d) {
                  var _0x27d475 = _0x19402c;

                  for (var _0x3dbb15 = [], _0x472536 = _0x59b14d['length'], _0x3eabc8 = 0x0; _0x3eabc8 < _0x472536;) {
                    var _0x2df1b6 = _0x59b14d[_0x27d475(0x491)](_0x3eabc8),
                        _0x46f2be = 0x0,
                        _0x422b35 = 0x0;

                    for (_0x2df1b6 <= 0x7f ? (_0x46f2be = 0x0, _0x422b35 = 0x0) : _0x2df1b6 <= 0x7ff ? (_0x46f2be = 0x6, _0x422b35 = 0xc0) : _0x2df1b6 <= 0xffff ? (_0x46f2be = 0xc, _0x422b35 = 0xe0) : _0x2df1b6 <= 0x1fffff && (_0x46f2be = 0x12, _0x422b35 = 0xf0), _0x3dbb15[_0x27d475(0x41c)](_0x422b35 | _0x2df1b6 >> _0x46f2be), _0x46f2be -= 0x6; _0x46f2be >= 0x0;) _0x3dbb15[_0x27d475(0x41c)](0x80 | _0x2df1b6 >> _0x46f2be & 0x3f), _0x46f2be -= 0x6;

                    _0x3eabc8 += _0x2df1b6 >= 0x10000 ? 0x2 : 0x1;
                  }

                  return new Uint8Array(_0x3dbb15);
                }, _0x50a37c;
              }();

              _0x4440fb[_0x2c4e5f(0x4cf)] = _0x2ab75b;

              var _0x570350 = function () {
                var _0x253a10 = _0x2c4e5f;

                function _0x34debf() {}

                return _0x34debf[_0x253a10(0x3f1)] = function (_0x5861ca) {
                  var _0x5867cf = _0x253a10;

                  for (var _0x25ee04 = Array['from'](_0x5861ca), _0x23ac36 = '', _0x4ca702 = 0x0; _0x4ca702 < _0x25ee04[_0x5867cf(0x1b1)];) {
                    var _0xde5183 = _0x25ee04[_0x4ca702],
                        _0x405e3b = 0x0,
                        _0x97702a = 0x0;

                    if (_0xde5183 <= 0x7f ? (_0x405e3b = 0x0, _0x97702a = 0xff & _0xde5183) : _0xde5183 <= 0xdf ? (_0x405e3b = 0x1, _0x97702a = 0x1f & _0xde5183) : _0xde5183 <= 0xef ? (_0x405e3b = 0x2, _0x97702a = 0xf & _0xde5183) : _0xde5183 <= 0xf4 && (_0x405e3b = 0x3, _0x97702a = 0x7 & _0xde5183), _0x25ee04[_0x5867cf(0x1b1)] - _0x4ca702 - _0x405e3b > 0x0) {
                      for (var _0x386fba = 0x0; _0x386fba < _0x405e3b;) _0x97702a = _0x97702a << 0x6 | 0x3f & (_0xde5183 = _0x25ee04[_0x4ca702 + _0x386fba + 0x1]), _0x386fba += 0x1;
                    } else _0x97702a = 0xfffd, _0x405e3b = _0x25ee04[_0x5867cf(0x1b1)] - _0x4ca702;

                    _0x23ac36 += String[_0x5867cf(0x258)](_0x97702a), _0x4ca702 += _0x405e3b + 0x1;
                  }

                  return _0x23ac36;
                }, _0x34debf;
              }();

              _0x4440fb[_0x2c4e5f(0x220)] = _0x570350;
            },
            0x758: function _(_0x17541c, _0x4e9b9d) {
              var _0x2974fc = a0_0x107f;
              Object[_0x2974fc(0xf2)](_0x4e9b9d, _0x2974fc(0x223), {
                'value': !0x0
              }), _0x4e9b9d[_0x2974fc(0x45c)] = void 0x0, _0x4e9b9d[_0x2974fc(0x45c)] = function () {
                var _0xc3b79a = _0x2974fc;
                return _0xc3b79a(0x291)[_0xc3b79a(0x3d9)](/[xy]/g, function (_0x1457ef) {
                  var _0x5af270 = _0xc3b79a,
                      _0x8d288a = 0x10 * Math[_0x5af270(0x234)]() | 0x0;

                  return ('x' === _0x1457ef ? _0x8d288a : 0x3 & _0x8d288a | 0x8)[_0x5af270(0x436)](0x10);
                })[_0xc3b79a(0x3d9)](/-/gi, '');
              };
            },
            0x1afa: function _(_0x551248) {
              function _0x531d7a() {}

              _0x551248['exports'] = function (_0x57afdb, _0x978bd, _0x5c44d2) {
                var _0x52ed22 = !0x1;

                return _0x5c44d2 = _0x5c44d2 || _0x531d7a, _0x1baba4['count'] = _0x57afdb, 0x0 === _0x57afdb ? _0x978bd() : _0x1baba4;

                function _0x1baba4(_0x27d8c3, _0x35f9c9) {
                  var _0x99d427 = a0_0x107f;
                  if (_0x1baba4[_0x99d427(0x1b2)] <= 0x0) throw new Error(_0x99d427(0x458));
                  --_0x1baba4['count'], _0x27d8c3 ? (_0x52ed22 = !0x0, _0x978bd(_0x27d8c3), _0x978bd = _0x5c44d2) : 0x0 !== _0x1baba4[_0x99d427(0x1b2)] || _0x52ed22 || _0x978bd(null, _0x35f9c9);
                }
              };
            },
            0x25f6: function _(_0x50a53b) {
              var _0x3685ee = a0_0x107f;

              _0x50a53b[_0x3685ee(0x38d)] = function (_0x43920e, _0x288c0d, _0x330c75) {
                var _0x19aabf = _0x3685ee,
                    _0x2139f7 = _0x43920e['byteLength'];
                if (_0x288c0d = _0x288c0d || 0x0, _0x330c75 = _0x330c75 || _0x2139f7, _0x43920e['slice']) return _0x43920e[_0x19aabf(0x389)](_0x288c0d, _0x330c75);
                if (_0x288c0d < 0x0 && (_0x288c0d += _0x2139f7), _0x330c75 < 0x0 && (_0x330c75 += _0x2139f7), _0x330c75 > _0x2139f7 && (_0x330c75 = _0x2139f7), _0x288c0d >= _0x2139f7 || _0x288c0d >= _0x330c75 || 0x0 === _0x2139f7) return new ArrayBuffer(0x0);

                for (var _0x456f81 = new Uint8Array(_0x43920e), _0x159a8c = new Uint8Array(_0x330c75 - _0x288c0d), _0x1166a2 = _0x288c0d, _0x178010 = 0x0; _0x1166a2 < _0x330c75; _0x1166a2++, _0x178010++) _0x159a8c[_0x178010] = _0x456f81[_0x1166a2];

                return _0x159a8c['buffer'];
              };
            },
            0xbc2: function _(_0x5b78bc) {
              var _0x43352a = a0_0x107f;

              function _0x29cee4(_0x261f69) {
                var _0x468889 = a0_0x107f;
                _0x261f69 = _0x261f69 || {}, this['ms'] = _0x261f69[_0x468889(0x2a3)] || 0x64, this[_0x468889(0x3ca)] = _0x261f69['max'] || 0x2710, this[_0x468889(0x1fe)] = _0x261f69[_0x468889(0x1fe)] || 0x2, this[_0x468889(0x340)] = _0x261f69[_0x468889(0x340)] > 0x0 && _0x261f69[_0x468889(0x340)] <= 0x1 ? _0x261f69[_0x468889(0x340)] : 0x0, this[_0x468889(0x3e8)] = 0x0;
              }

              _0x5b78bc[_0x43352a(0x38d)] = _0x29cee4, _0x29cee4[_0x43352a(0x1b3)]['duration'] = function () {
                var _0x499989 = _0x43352a,
                    _0x478752 = this['ms'] * Math[_0x499989(0x22b)](this['factor'], this[_0x499989(0x3e8)]++);

                if (this[_0x499989(0x340)]) {
                  var _0xfbfeb3 = Math[_0x499989(0x234)](),
                      _0x3edd9d = Math['floor'](_0xfbfeb3 * this['jitter'] * _0x478752);

                  _0x478752 = 0x0 == (0x1 & Math[_0x499989(0x330)](0xa * _0xfbfeb3)) ? _0x478752 - _0x3edd9d : _0x478752 + _0x3edd9d;
                }

                return 0x0 | Math[_0x499989(0x2a3)](_0x478752, this[_0x499989(0x3ca)]);
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x1ca)] = function () {
                var _0x5ccdcc = _0x43352a;
                this[_0x5ccdcc(0x3e8)] = 0x0;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x2d8)] = function (_0x1571f5) {
                this['ms'] = _0x1571f5;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x22e)] = function (_0x55fea9) {
                this['max'] = _0x55fea9;
              }, _0x29cee4[_0x43352a(0x1b3)][_0x43352a(0x41b)] = function (_0x33deae) {
                this['jitter'] = _0x33deae;
              };
            },
            0xe78: function _(_0x342b55, _0x15aef1) {
              !function (_0x5ca5d0) {
                var _0x4e53d8 = a0_0x107f;
                _0x15aef1['encode'] = function (_0x17bc2c) {
                  var _0x38597f = a0_0x107f,
                      _0x3697bc,
                      _0x27061e = new Uint8Array(_0x17bc2c),
                      _0x5c363c = _0x27061e[_0x38597f(0x1b1)],
                      _0x391fa0 = '';

                  for (_0x3697bc = 0x0; _0x3697bc < _0x5c363c; _0x3697bc += 0x3) _0x391fa0 += _0x5ca5d0[_0x27061e[_0x3697bc] >> 0x2], _0x391fa0 += _0x5ca5d0[(0x3 & _0x27061e[_0x3697bc]) << 0x4 | _0x27061e[_0x3697bc + 0x1] >> 0x4], _0x391fa0 += _0x5ca5d0[(0xf & _0x27061e[_0x3697bc + 0x1]) << 0x2 | _0x27061e[_0x3697bc + 0x2] >> 0x6], _0x391fa0 += _0x5ca5d0[0x3f & _0x27061e[_0x3697bc + 0x2]];

                  return _0x5c363c % 0x3 == 0x2 ? _0x391fa0 = _0x391fa0[_0x38597f(0x4a5)](0x0, _0x391fa0['length'] - 0x1) + '=' : _0x5c363c % 0x3 == 0x1 && (_0x391fa0 = _0x391fa0['substring'](0x0, _0x391fa0[_0x38597f(0x1b1)] - 0x2) + '=='), _0x391fa0;
                }, _0x15aef1[_0x4e53d8(0x3f1)] = function (_0xb226b8) {
                  var _0xb7099d = _0x4e53d8,
                      _0xb7ac92,
                      _0x1302bc,
                      _0x1bbd81,
                      _0x36b706,
                      _0x19b690,
                      _0x5d7f33 = 0.75 * _0xb226b8[_0xb7099d(0x1b1)],
                      _0x5a7049 = _0xb226b8[_0xb7099d(0x1b1)],
                      _0x14ec7c = 0x0;

                  '=' === _0xb226b8[_0xb226b8['length'] - 0x1] && (_0x5d7f33--, '=' === _0xb226b8[_0xb226b8[_0xb7099d(0x1b1)] - 0x2] && _0x5d7f33--);

                  var _0x4f2137 = new ArrayBuffer(_0x5d7f33),
                      _0x395387 = new Uint8Array(_0x4f2137);

                  for (_0xb7ac92 = 0x0; _0xb7ac92 < _0x5a7049; _0xb7ac92 += 0x4) _0x1302bc = _0x5ca5d0['indexOf'](_0xb226b8[_0xb7ac92]), _0x1bbd81 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x1]), _0x36b706 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x2]), _0x19b690 = _0x5ca5d0[_0xb7099d(0x22a)](_0xb226b8[_0xb7ac92 + 0x3]), _0x395387[_0x14ec7c++] = _0x1302bc << 0x2 | _0x1bbd81 >> 0x4, _0x395387[_0x14ec7c++] = (0xf & _0x1bbd81) << 0x4 | _0x36b706 >> 0x2, _0x395387[_0x14ec7c++] = (0x3 & _0x36b706) << 0x6 | 0x3f & _0x19b690;

                  return _0x4f2137;
                };
              }('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');
            },
            0x15ac: function _(_0x4c14ff) {
              var _0x4848ef = a0_0x107f,
                  _0x5d5a96 = void 0x0 !== _0x5d5a96 ? _0x5d5a96 : 'undefined' != typeof WebKitBlobBuilder ? WebKitBlobBuilder : _0x4848ef(0x364) != typeof MSBlobBuilder ? MSBlobBuilder : _0x4848ef(0x364) != typeof MozBlobBuilder && MozBlobBuilder,
                  _0x335c22 = function () {
                var _0x57677d = _0x4848ef;

                try {
                  return 0x2 === new Blob(['hi'])[_0x57677d(0x318)];
                } catch (_0x4c6ce7) {
                  return !0x1;
                }
              }(),
                  _0x55a2c2 = _0x335c22 && function () {
                var _0x32c954 = _0x4848ef;

                try {
                  return 0x2 === new Blob([new Uint8Array([0x1, 0x2])])[_0x32c954(0x318)];
                } catch (_0x42c796) {
                  return !0x1;
                }
              }(),
                  _0x35de82 = _0x5d5a96 && _0x5d5a96[_0x4848ef(0x1b3)][_0x4848ef(0x22d)] && _0x5d5a96[_0x4848ef(0x1b3)][_0x4848ef(0x25b)];

              function _0x23ac3a(_0x4cf646) {
                var _0xde7d2b = _0x4848ef;
                return _0x4cf646[_0xde7d2b(0x435)](function (_0x38f16d) {
                  var _0x550b70 = _0xde7d2b;

                  if (_0x38f16d[_0x550b70(0x314)] instanceof ArrayBuffer) {
                    var _0x5aef95 = _0x38f16d['buffer'];

                    if (_0x38f16d[_0x550b70(0x3e1)] !== _0x5aef95[_0x550b70(0x3e1)]) {
                      var _0x5881db = new Uint8Array(_0x38f16d[_0x550b70(0x3e1)]);

                      _0x5881db['set'](new Uint8Array(_0x5aef95, _0x38f16d[_0x550b70(0x2e0)], _0x38f16d[_0x550b70(0x3e1)])), _0x5aef95 = _0x5881db[_0x550b70(0x314)];
                    }

                    return _0x5aef95;
                  }

                  return _0x38f16d;
                });
              }

              function _0x4ac2ab(_0x118149, _0x42476b) {
                var _0x606328 = _0x4848ef;
                _0x42476b = _0x42476b || {};

                var _0x2349b7 = new _0x5d5a96();

                return _0x23ac3a(_0x118149)[_0x606328(0x293)](function (_0x4bd571) {
                  var _0x270a97 = _0x606328;

                  _0x2349b7[_0x270a97(0x22d)](_0x4bd571);
                }), _0x42476b['type'] ? _0x2349b7[_0x606328(0x25b)](_0x42476b['type']) : _0x2349b7[_0x606328(0x25b)]();
              }

              function _0x542e9e(_0x11a239, _0x5bb24d) {
                return new Blob(_0x23ac3a(_0x11a239), _0x5bb24d || {});
              }

              _0x4848ef(0x364) != typeof Blob && (_0x4ac2ab['prototype'] = Blob[_0x4848ef(0x1b3)], _0x542e9e[_0x4848ef(0x1b3)] = Blob[_0x4848ef(0x1b3)]), _0x4c14ff[_0x4848ef(0x38d)] = _0x335c22 ? _0x55a2c2 ? Blob : _0x542e9e : _0x35de82 ? _0x4ac2ab : void 0x0;
            },
            0x17bd: function _(_0x1fb229) {
              var _0xdaf75b = []['slice'];

              _0x1fb229['exports'] = function (_0x507317, _0x2698d9) {
                var _0x1e56eb = a0_0x107f;
                if (_0x1e56eb(0x268) == typeof _0x2698d9 && (_0x2698d9 = _0x507317[_0x2698d9]), _0x1e56eb(0x17d) != typeof _0x2698d9) throw new Error('bind()\x20requires\x20a\x20function');

                var _0x3eb2ef = _0xdaf75b[_0x1e56eb(0x229)](arguments, 0x2);

                return function () {
                  var _0x20ec92 = _0x1e56eb;
                  return _0x2698d9['apply'](_0x507317, _0x3eb2ef[_0x20ec92(0x23c)](_0xdaf75b[_0x20ec92(0x229)](arguments)));
                };
              };
            },
            0x223f: function _(_0x363bb9) {
              var _0x1dd322 = a0_0x107f;

              function _0x104721(_0x52da09) {
                if (_0x52da09) return function (_0x45f160) {
                  var _0x1fdd4d = a0_0x107f;

                  for (var _0x497234 in _0x104721[_0x1fdd4d(0x1b3)]) _0x45f160[_0x497234] = _0x104721[_0x1fdd4d(0x1b3)][_0x497234];

                  return _0x45f160;
                }(_0x52da09);
              }

              _0x363bb9[_0x1dd322(0x38d)] = _0x104721, _0x104721[_0x1dd322(0x1b3)]['on'] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x466)] = function (_0x3e057f, _0x2532c6) {
                var _0x45d9bd = _0x1dd322;
                return this[_0x45d9bd(0x3b6)] = this[_0x45d9bd(0x3b6)] || {}, (this[_0x45d9bd(0x3b6)]['$' + _0x3e057f] = this[_0x45d9bd(0x3b6)]['$' + _0x3e057f] || [])['push'](_0x2532c6), this;
              }, _0x104721['prototype'][_0x1dd322(0x319)] = function (_0x5e2d12, _0x550fb0) {
                function _0x5b774f() {
                  var _0x72bfe7 = a0_0x107f;
                  this['off'](_0x5e2d12, _0x5b774f), _0x550fb0[_0x72bfe7(0x394)](this, arguments);
                }

                return _0x5b774f['fn'] = _0x550fb0, this['on'](_0x5e2d12, _0x5b774f), this;
              }, _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x4bf)] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x198)] = _0x104721['prototype'][_0x1dd322(0x146)] = _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x1de)] = function (_0x439a43, _0x484724) {
                var _0x464cd4 = _0x1dd322;
                if (this[_0x464cd4(0x3b6)] = this[_0x464cd4(0x3b6)] || {}, 0x0 == arguments[_0x464cd4(0x1b1)]) return this['_callbacks'] = {}, this;

                var _0x4cf28c,
                    _0x1e9395 = this['_callbacks']['$' + _0x439a43];

                if (!_0x1e9395) return this;
                if (0x1 == arguments[_0x464cd4(0x1b1)]) return delete this[_0x464cd4(0x3b6)]['$' + _0x439a43], this;

                for (var _0x52f1c9 = 0x0; _0x52f1c9 < _0x1e9395[_0x464cd4(0x1b1)]; _0x52f1c9++) if ((_0x4cf28c = _0x1e9395[_0x52f1c9]) === _0x484724 || _0x4cf28c['fn'] === _0x484724) {
                  _0x1e9395[_0x464cd4(0x479)](_0x52f1c9, 0x1);

                  break;
                }

                return 0x0 === _0x1e9395[_0x464cd4(0x1b1)] && delete this[_0x464cd4(0x3b6)]['$' + _0x439a43], this;
              }, _0x104721[_0x1dd322(0x1b3)]['emit'] = function (_0x22545f) {
                var _0x4b2e53 = _0x1dd322;
                this[_0x4b2e53(0x3b6)] = this[_0x4b2e53(0x3b6)] || {};

                for (var _0x90d38a = new Array(arguments[_0x4b2e53(0x1b1)] - 0x1), _0x1f0b57 = this[_0x4b2e53(0x3b6)]['$' + _0x22545f], _0x15f8db = 0x1; _0x15f8db < arguments['length']; _0x15f8db++) _0x90d38a[_0x15f8db - 0x1] = arguments[_0x15f8db];

                if (_0x1f0b57) {
                  _0x15f8db = 0x0;

                  for (var _0x36d6b3 = (_0x1f0b57 = _0x1f0b57['slice'](0x0))['length']; _0x15f8db < _0x36d6b3; ++_0x15f8db) _0x1f0b57[_0x15f8db][_0x4b2e53(0x394)](this, _0x90d38a);
                }

                return this;
              }, _0x104721['prototype'][_0x1dd322(0x4c3)] = function (_0x3b4a39) {
                var _0x14586d = _0x1dd322;
                return this['_callbacks'] = this['_callbacks'] || {}, this[_0x14586d(0x3b6)]['$' + _0x3b4a39] || [];
              }, _0x104721[_0x1dd322(0x1b3)][_0x1dd322(0x358)] = function (_0x4879f4) {
                var _0x284303 = _0x1dd322;
                return !!this[_0x284303(0x4c3)](_0x4879f4)[_0x284303(0x1b1)];
              };
            },
            0xf15: function _(_0x218f40) {
              _0x218f40['exports'] = function (_0x394c07, _0xc0f761) {
                var _0x3f07a4 = a0_0x107f,
                    _0x3198bc = function _0x3198bc() {};

                _0x3198bc['prototype'] = _0xc0f761[_0x3f07a4(0x1b3)], _0x394c07[_0x3f07a4(0x1b3)] = new _0x3198bc(), _0x394c07['prototype']['constructor'] = _0x394c07;
              };
            },
            0x4cb: function _(_0x574543, _0xa1575a, _0x18c2f6) {
              var _0x17322c = a0_0x107f;

              function _0x2fe92a() {
                var _0x25a230 = a0_0x107f,
                    _0x8024cb;

                try {
                  _0x8024cb = _0xa1575a['storage'][_0x25a230(0x469)];
                } catch (_0x10c5fc) {}

                return !_0x8024cb && _0x25a230(0x364) != typeof process && 'env' in process && (_0x8024cb = process[_0x25a230(0x1be)][_0x25a230(0x16f)]), _0x8024cb;
              }

              (_0xa1575a = _0x574543['exports'] = _0x18c2f6(0x67a))[_0x17322c(0x42d)] = function () {
                var _0x557b4b = _0x17322c;
                return 'object' == typeof console && console['log'] && Function[_0x557b4b(0x1b3)][_0x557b4b(0x394)][_0x557b4b(0x229)](console[_0x557b4b(0x42d)], console, arguments);
              }, _0xa1575a[_0x17322c(0x3c6)] = function (_0xa78019) {
                var _0x344d05 = _0x17322c,
                    _0x378331 = this['useColors'];

                if (_0xa78019[0x0] = (_0x378331 ? '%c' : '') + this[_0x344d05(0x1bc)] + (_0x378331 ? _0x344d05(0x209) : '\x20') + _0xa78019[0x0] + (_0x378331 ? _0x344d05(0x3da) : '\x20') + '+' + _0xa1575a['humanize'](this[_0x344d05(0x230)]), _0x378331) {
                  var _0x1f60b1 = _0x344d05(0x26c) + this[_0x344d05(0x138)];

                  _0xa78019[_0x344d05(0x479)](0x1, 0x0, _0x1f60b1, _0x344d05(0x400));

                  var _0x347d7f = 0x0,
                      _0x57be41 = 0x0;
                  _0xa78019[0x0][_0x344d05(0x3d9)](/%[a-zA-Z%]/g, function (_0x24a5d5) {
                    '%%' !== _0x24a5d5 && (_0x347d7f++, '%c' === _0x24a5d5 && (_0x57be41 = _0x347d7f));
                  }), _0xa78019[_0x344d05(0x479)](_0x57be41, 0x0, _0x1f60b1);
                }
              }, _0xa1575a['save'] = function (_0x266aa6) {
                var _0x11a64f = _0x17322c;

                try {
                  null == _0x266aa6 ? _0xa1575a[_0x11a64f(0x344)][_0x11a64f(0x2dd)](_0x11a64f(0x469)) : _0xa1575a[_0x11a64f(0x344)][_0x11a64f(0x469)] = _0x266aa6;
                } catch (_0x222c45) {}
              }, _0xa1575a[_0x17322c(0x3e6)] = _0x2fe92a, _0xa1575a[_0x17322c(0x299)] = function () {
                var _0x42d0ea = _0x17322c;
                return !(_0x42d0ea(0x364) == typeof window || !window[_0x42d0ea(0x2d2)] || _0x42d0ea(0x1dd) !== window['process'][_0x42d0ea(0x156)]) || (_0x42d0ea(0x364) == typeof navigator || !navigator[_0x42d0ea(0x323)] || !navigator[_0x42d0ea(0x323)][_0x42d0ea(0x317)]()[_0x42d0ea(0x2b5)](/(edge|trident)\/(\d+)/)) && (_0x42d0ea(0x364) != typeof document && document[_0x42d0ea(0x2cd)] && document[_0x42d0ea(0x2cd)][_0x42d0ea(0x239)] && document[_0x42d0ea(0x2cd)][_0x42d0ea(0x239)][_0x42d0ea(0x4b2)] || _0x42d0ea(0x364) != typeof window && window[_0x42d0ea(0x228)] && (window[_0x42d0ea(0x228)][_0x42d0ea(0x3b2)] || window[_0x42d0ea(0x228)][_0x42d0ea(0x272)] && window[_0x42d0ea(0x228)][_0x42d0ea(0x34d)]) || _0x42d0ea(0x364) != typeof navigator && navigator['userAgent'] && navigator[_0x42d0ea(0x323)]['toLowerCase']()[_0x42d0ea(0x2b5)](/firefox\/(\d+)/) && parseInt(RegExp['$1'], 0xa) >= 0x1f || _0x42d0ea(0x364) != typeof navigator && navigator[_0x42d0ea(0x323)] && navigator[_0x42d0ea(0x323)]['toLowerCase']()[_0x42d0ea(0x2b5)](/applewebkit\/(\d+)/));
              }, _0xa1575a[_0x17322c(0x344)] = _0x17322c(0x364) != typeof chrome && void 0x0 !== chrome[_0x17322c(0x344)] ? chrome[_0x17322c(0x344)][_0x17322c(0x444)] : function () {
                var _0x35eefd = _0x17322c;

                try {
                  return window[_0x35eefd(0x260)];
                } catch (_0x4b4baa) {}
              }(), _0xa1575a[_0x17322c(0x176)] = [_0x17322c(0x13f), _0x17322c(0x45a), _0x17322c(0x3d4), _0x17322c(0x4b4), '#0066CC', _0x17322c(0x440), '#0099CC', _0x17322c(0x213), _0x17322c(0x140), _0x17322c(0x109), _0x17322c(0x2ad), '#00CC99', _0x17322c(0x42a), _0x17322c(0x4ad), _0x17322c(0x48e), _0x17322c(0x28c), _0x17322c(0x4a0), _0x17322c(0x448), _0x17322c(0x188), '#3366FF', _0x17322c(0x184), _0x17322c(0x21a), '#33CC00', _0x17322c(0x47c), '#33CC66', _0x17322c(0x334), '#33CCCC', _0x17322c(0x27c), _0x17322c(0x49c), _0x17322c(0x199), _0x17322c(0x240), '#6633FF', _0x17322c(0x22f), _0x17322c(0x4b0), _0x17322c(0x4a2), '#9900FF', _0x17322c(0x26d), _0x17322c(0x368), _0x17322c(0x3c0), _0x17322c(0x422), _0x17322c(0x3b3), _0x17322c(0x2da), _0x17322c(0x1a4), '#CC0099', '#CC00CC', _0x17322c(0x39e), _0x17322c(0x2b0), _0x17322c(0x15c), _0x17322c(0x414), _0x17322c(0x3fb), _0x17322c(0x43e), _0x17322c(0x474), '#CC6600', '#CC6633', _0x17322c(0x185), '#CC9933', _0x17322c(0x1b9), _0x17322c(0x2ed), _0x17322c(0x193), _0x17322c(0x1c2), _0x17322c(0x4af), '#FF0099', _0x17322c(0x3ec), _0x17322c(0x48d), _0x17322c(0x3d3), _0x17322c(0x1dc), '#FF3366', _0x17322c(0x105), _0x17322c(0x2ff), _0x17322c(0x124), _0x17322c(0x25c), _0x17322c(0x204), _0x17322c(0x3fa), '#FF9933', _0x17322c(0x190), '#FFCC33'], _0xa1575a[_0x17322c(0x49d)]['j'] = function (_0x5c2a23) {
                var _0x13d634 = _0x17322c;

                try {
                  return JSON[_0x13d634(0x296)](_0x5c2a23);
                } catch (_0x130e2a) {
                  return _0x13d634(0x135) + _0x130e2a[_0x13d634(0x3dd)];
                }
              }, _0xa1575a['enable'](_0x2fe92a());
            },
            0x67a: function _(_0x51829d, _0x598d9e, _0x146891) {
              var _0x4083cd = a0_0x107f;

              function _0x673c19(_0x24a63f) {
                var _0x4f3575 = a0_0x107f,
                    _0x30415d;

                function _0x374dfe() {
                  var _0x270fa0 = a0_0x107f;

                  if (_0x374dfe[_0x270fa0(0x15b)]) {
                    var _0x478852 = _0x374dfe,
                        _0x3e4d6b = +new Date(),
                        _0xfd3195 = _0x3e4d6b - (_0x30415d || _0x3e4d6b);

                    _0x478852[_0x270fa0(0x230)] = _0xfd3195, _0x478852[_0x270fa0(0x399)] = _0x30415d, _0x478852['curr'] = _0x3e4d6b, _0x30415d = _0x3e4d6b;

                    for (var _0x23b577 = new Array(arguments[_0x270fa0(0x1b1)]), _0x55fb43 = 0x0; _0x55fb43 < _0x23b577[_0x270fa0(0x1b1)]; _0x55fb43++) _0x23b577[_0x55fb43] = arguments[_0x55fb43];

                    _0x23b577[0x0] = _0x598d9e[_0x270fa0(0x246)](_0x23b577[0x0]), _0x270fa0(0x268) != typeof _0x23b577[0x0] && _0x23b577['unshift']('%O');
                    var _0x2ffaed = 0x0;
                    _0x23b577[0x0] = _0x23b577[0x0][_0x270fa0(0x3d9)](/%([a-zA-Z%])/g, function (_0x1c66e0, _0x49d190) {
                      var _0x754202 = _0x270fa0;
                      if ('%%' === _0x1c66e0) return _0x1c66e0;
                      _0x2ffaed++;
                      var _0x36b16a = _0x598d9e['formatters'][_0x49d190];

                      if (_0x754202(0x17d) == typeof _0x36b16a) {
                        var _0x9dcb54 = _0x23b577[_0x2ffaed];
                        _0x1c66e0 = _0x36b16a['call'](_0x478852, _0x9dcb54), _0x23b577[_0x754202(0x479)](_0x2ffaed, 0x1), _0x2ffaed--;
                      }

                      return _0x1c66e0;
                    }), _0x598d9e[_0x270fa0(0x3c6)][_0x270fa0(0x229)](_0x478852, _0x23b577);

                    var _0x2ef4d4 = _0x374dfe[_0x270fa0(0x42d)] || _0x598d9e['log'] || console[_0x270fa0(0x42d)][_0x270fa0(0x1f3)](console);

                    _0x2ef4d4['apply'](_0x478852, _0x23b577);
                  }
                }

                return _0x374dfe[_0x4f3575(0x1bc)] = _0x24a63f, _0x374dfe[_0x4f3575(0x15b)] = _0x598d9e[_0x4f3575(0x15b)](_0x24a63f), _0x374dfe[_0x4f3575(0x299)] = _0x598d9e[_0x4f3575(0x299)](), _0x374dfe[_0x4f3575(0x138)] = function (_0x1c5311) {
                  var _0x18bd63 = _0x4f3575,
                      _0x5c72a6,
                      _0x45145b = 0x0;

                  for (_0x5c72a6 in _0x1c5311) _0x45145b = (_0x45145b << 0x5) - _0x45145b + _0x1c5311['charCodeAt'](_0x5c72a6), _0x45145b |= 0x0;

                  return _0x598d9e[_0x18bd63(0x176)][Math[_0x18bd63(0x2f0)](_0x45145b) % _0x598d9e['colors'][_0x18bd63(0x1b1)]];
                }(_0x24a63f), _0x374dfe[_0x4f3575(0x1eb)] = _0x42509c, _0x4f3575(0x17d) == typeof _0x598d9e[_0x4f3575(0x150)] && _0x598d9e[_0x4f3575(0x150)](_0x374dfe), _0x598d9e[_0x4f3575(0x27b)][_0x4f3575(0x41c)](_0x374dfe), _0x374dfe;
              }

              function _0x42509c() {
                var _0x226b97 = a0_0x107f,
                    _0x2d7fec = _0x598d9e[_0x226b97(0x27b)][_0x226b97(0x22a)](this);

                return -0x1 !== _0x2d7fec && (_0x598d9e[_0x226b97(0x27b)]['splice'](_0x2d7fec, 0x1), !0x0);
              }

              (_0x598d9e = _0x51829d[_0x4083cd(0x38d)] = _0x673c19['debug'] = _0x673c19['default'] = _0x673c19)[_0x4083cd(0x246)] = function (_0x156fa8) {
                var _0x409e8d = _0x4083cd;
                return _0x156fa8 instanceof Error ? _0x156fa8['stack'] || _0x156fa8[_0x409e8d(0x3dd)] : _0x156fa8;
              }, _0x598d9e['disable'] = function () {
                var _0x13d4ee = _0x4083cd;

                _0x598d9e[_0x13d4ee(0x31f)]('');
              }, _0x598d9e[_0x4083cd(0x31f)] = function (_0x3789dd) {
                var _0xba5c7d = _0x4083cd,
                    _0x54615f;

                _0x598d9e[_0xba5c7d(0x34f)](_0x3789dd), _0x598d9e[_0xba5c7d(0x231)] = [], _0x598d9e['skips'] = [];

                var _0x2d5086 = ('string' == typeof _0x3789dd ? _0x3789dd : '')[_0xba5c7d(0x460)](/[\s,]+/),
                    _0x1bd7e1 = _0x2d5086[_0xba5c7d(0x1b1)];

                for (_0x54615f = 0x0; _0x54615f < _0x1bd7e1; _0x54615f++) _0x2d5086[_0x54615f] && ('-' === (_0x3789dd = _0x2d5086[_0x54615f][_0xba5c7d(0x3d9)](/\*/g, _0xba5c7d(0x157)))[0x0] ? _0x598d9e['skips'][_0xba5c7d(0x41c)](new RegExp('^' + _0x3789dd['substr'](0x1) + '$')) : _0x598d9e[_0xba5c7d(0x231)][_0xba5c7d(0x41c)](new RegExp('^' + _0x3789dd + '$')));

                for (_0x54615f = 0x0; _0x54615f < _0x598d9e[_0xba5c7d(0x27b)]['length']; _0x54615f++) {
                  var _0x5012a5 = _0x598d9e[_0xba5c7d(0x27b)][_0x54615f];

                  _0x5012a5[_0xba5c7d(0x15b)] = _0x598d9e[_0xba5c7d(0x15b)](_0x5012a5[_0xba5c7d(0x1bc)]);
                }
              }, _0x598d9e['enabled'] = function (_0x293022) {
                var _0x9bc95d = _0x4083cd;
                if ('*' === _0x293022[_0x293022[_0x9bc95d(0x1b1)] - 0x1]) return !0x0;

                var _0x377011, _0x178ce5;

                for (_0x377011 = 0x0, _0x178ce5 = _0x598d9e['skips']['length']; _0x377011 < _0x178ce5; _0x377011++) if (_0x598d9e[_0x9bc95d(0x3f8)][_0x377011]['test'](_0x293022)) return !0x1;

                for (_0x377011 = 0x0, _0x178ce5 = _0x598d9e[_0x9bc95d(0x231)][_0x9bc95d(0x1b1)]; _0x377011 < _0x178ce5; _0x377011++) if (_0x598d9e[_0x9bc95d(0x231)][_0x377011][_0x9bc95d(0x4c7)](_0x293022)) return !0x0;

                return !0x1;
              }, _0x598d9e[_0x4083cd(0x10f)] = _0x146891(0x1e90), _0x598d9e[_0x4083cd(0x27b)] = [], _0x598d9e[_0x4083cd(0x231)] = [], _0x598d9e[_0x4083cd(0x3f8)] = [], _0x598d9e[_0x4083cd(0x49d)] = {};
            },
            0xddd: function _(_0x3f7d19) {
              var _0x382911 = a0_0x107f;
              _0x3f7d19[_0x382911(0x38d)] = _0x382911(0x364) != typeof self ? self : _0x382911(0x364) != typeof window ? window : Function('return\x20this')();
            },
            0x175f: function _(_0x5e13b4, _0x30d580, _0x2b77a8) {
              var _0x44c258 = a0_0x107f;
              _0x5e13b4[_0x44c258(0x38d)] = _0x2b77a8(0x890), _0x5e13b4[_0x44c258(0x38d)]['parser'] = _0x2b77a8(0x1167);
            },
            0x890: function _(_0xcdce7b, _0x25c680, _0x4842d3) {
              var _0x2c78b1 = a0_0x107f,
                  _0x1ddcdd = _0x4842d3(0xd18),
                  _0x5ed50a = _0x4842d3(0x223f),
                  _0x4918c6 = _0x4842d3(0x4cb)(_0x2c78b1(0x349)),
                  _0x41f7c1 = _0x4842d3(0x1cbb),
                  _0x5a3c1f = _0x4842d3(0x1167),
                  _0xe249ce = _0x4842d3(0x105b),
                  _0x1d2803 = _0x4842d3(0x726);

              function _0x1129b2(_0x1910a1, _0x3f2b02) {
                var _0x299568 = _0x2c78b1;
                if (!(this instanceof _0x1129b2)) return new _0x1129b2(_0x1910a1, _0x3f2b02);
                _0x3f2b02 = _0x3f2b02 || {}, _0x1910a1 && _0x299568(0x33c) == typeof _0x1910a1 && (_0x3f2b02 = _0x1910a1, _0x1910a1 = null), _0x1910a1 ? (_0x1910a1 = _0xe249ce(_0x1910a1), _0x3f2b02[_0x299568(0x34a)] = _0x1910a1[_0x299568(0x395)], _0x3f2b02[_0x299568(0x487)] = _0x299568(0x312) === _0x1910a1[_0x299568(0x1c7)] || 'wss' === _0x1910a1[_0x299568(0x1c7)], _0x3f2b02['port'] = _0x1910a1[_0x299568(0x4be)], _0x1910a1[_0x299568(0x189)] && (_0x3f2b02['query'] = _0x1910a1['query'])) : _0x3f2b02[_0x299568(0x395)] && (_0x3f2b02['hostname'] = _0xe249ce(_0x3f2b02[_0x299568(0x395)])['host']), this['secure'] = null != _0x3f2b02[_0x299568(0x487)] ? _0x3f2b02['secure'] : _0x299568(0x364) != typeof location && _0x299568(0x1d9) === location['protocol'], _0x3f2b02[_0x299568(0x34a)] && !_0x3f2b02[_0x299568(0x4be)] && (_0x3f2b02[_0x299568(0x4be)] = this[_0x299568(0x487)] ? _0x299568(0x3f5) : '80'), this[_0x299568(0x3a2)] = _0x3f2b02['agent'] || !0x1, this[_0x299568(0x34a)] = _0x3f2b02[_0x299568(0x34a)] || (_0x299568(0x364) != typeof location ? location[_0x299568(0x34a)] : 'localhost'), this['port'] = _0x3f2b02[_0x299568(0x4be)] || (_0x299568(0x364) != typeof location && location[_0x299568(0x4be)] ? location['port'] : this[_0x299568(0x487)] ? 0x1bb : 0x50), this[_0x299568(0x189)] = _0x3f2b02[_0x299568(0x189)] || {}, 'string' == typeof this[_0x299568(0x189)] && (this[_0x299568(0x189)] = _0x1d2803[_0x299568(0x3f1)](this[_0x299568(0x189)])), this[_0x299568(0x21c)] = !0x1 !== _0x3f2b02[_0x299568(0x21c)], this[_0x299568(0x1ad)] = (_0x3f2b02[_0x299568(0x1ad)] || _0x299568(0x2fa))[_0x299568(0x3d9)](/\/$/, '') + '/', this[_0x299568(0x2b9)] = !!_0x3f2b02[_0x299568(0x2b9)], this[_0x299568(0x210)] = !0x1 !== _0x3f2b02[_0x299568(0x210)], this[_0x299568(0xed)] = !!_0x3f2b02[_0x299568(0xed)], this['enablesXDR'] = !!_0x3f2b02[_0x299568(0x403)], this[_0x299568(0x26b)] = !0x1 !== _0x3f2b02['withCredentials'], this[_0x299568(0x4b3)] = _0x3f2b02[_0x299568(0x4b3)] || 't', this['timestampRequests'] = _0x3f2b02[_0x299568(0x153)], this[_0x299568(0x24b)] = _0x3f2b02['transports'] || [_0x299568(0x396), _0x299568(0x38b)], this[_0x299568(0x12f)] = _0x3f2b02[_0x299568(0x12f)] || {}, this[_0x299568(0x3d0)] = '', this['writeBuffer'] = [], this[_0x299568(0x45f)] = 0x0, this[_0x299568(0x116)] = _0x3f2b02[_0x299568(0x116)] || 0x34b, this[_0x299568(0x35a)] = _0x3f2b02[_0x299568(0x35a)] || !0x1, this[_0x299568(0x286)] = null, this[_0x299568(0x2cc)] = _0x3f2b02['onlyBinaryUpgrades'], this[_0x299568(0x2b6)] = !0x1 !== _0x3f2b02[_0x299568(0x2b6)] && (_0x3f2b02['perMessageDeflate'] || {}), !0x0 === this[_0x299568(0x2b6)] && (this[_0x299568(0x2b6)] = {}), this['perMessageDeflate'] && null == this['perMessageDeflate'][_0x299568(0x219)] && (this[_0x299568(0x2b6)][_0x299568(0x219)] = 0x400), this[_0x299568(0x1f4)] = _0x3f2b02[_0x299568(0x1f4)] || void 0x0, this['key'] = _0x3f2b02[_0x299568(0x1a9)] || void 0x0, this[_0x299568(0x4c6)] = _0x3f2b02[_0x299568(0x4c6)] || void 0x0, this['cert'] = _0x3f2b02[_0x299568(0x1db)] || void 0x0, this['ca'] = _0x3f2b02['ca'] || void 0x0, this['ciphers'] = _0x3f2b02[_0x299568(0x2ac)] || void 0x0, this[_0x299568(0x19e)] = void 0x0 === _0x3f2b02[_0x299568(0x19e)] || _0x3f2b02[_0x299568(0x19e)], this['forceNode'] = !!_0x3f2b02['forceNode'], this[_0x299568(0x17a)] = 'undefined' != typeof navigator && 'string' == typeof navigator[_0x299568(0x20d)] && 'reactnative' === navigator[_0x299568(0x20d)][_0x299568(0x317)](), ('undefined' == typeof self || this[_0x299568(0x17a)]) && (_0x3f2b02[_0x299568(0xf3)] && Object[_0x299568(0x44d)](_0x3f2b02[_0x299568(0xf3)])[_0x299568(0x1b1)] > 0x0 && (this[_0x299568(0xf3)] = _0x3f2b02[_0x299568(0xf3)]), _0x3f2b02[_0x299568(0x2e4)] && (this[_0x299568(0x2e4)] = _0x3f2b02['localAddress'])), this['id'] = null, this[_0x299568(0x295)] = null, this[_0x299568(0x373)] = null, this[_0x299568(0x30a)] = null, this[_0x299568(0x154)] = null, this[_0x299568(0x2a5)] = null, this[_0x299568(0x412)]();
              }

              _0xcdce7b[_0x2c78b1(0x38d)] = _0x1129b2, _0x1129b2['priorWebsocketSuccess'] = !0x1, _0x5ed50a(_0x1129b2[_0x2c78b1(0x1b3)]), _0x1129b2[_0x2c78b1(0x1c7)] = _0x5a3c1f[_0x2c78b1(0x1c7)], _0x1129b2[_0x2c78b1(0x355)] = _0x1129b2, _0x1129b2[_0x2c78b1(0x23f)] = _0x4842d3(0x1960), _0x1129b2['transports'] = _0x4842d3(0xd18), _0x1129b2[_0x2c78b1(0x3b0)] = _0x4842d3(0x1167), _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x40b)] = function (_0x1fd5f6) {
                var _0x4fc8a7 = _0x2c78b1;

                _0x4918c6(_0x4fc8a7(0x19b), _0x1fd5f6);

                var _0x5bd8a1 = function (_0x1d6d6b) {
                  var _0x38714b = _0x4fc8a7,
                      _0x38a2f2 = {};

                  for (var _0x1f3d0b in _0x1d6d6b) _0x1d6d6b[_0x38714b(0x32a)](_0x1f3d0b) && (_0x38a2f2[_0x1f3d0b] = _0x1d6d6b[_0x1f3d0b]);

                  return _0x38a2f2;
                }(this[_0x4fc8a7(0x189)]);

                _0x5bd8a1[_0x4fc8a7(0x4a3)] = _0x5a3c1f[_0x4fc8a7(0x1c7)], _0x5bd8a1[_0x4fc8a7(0x287)] = _0x1fd5f6;

                var _0x382553 = this[_0x4fc8a7(0x12f)][_0x1fd5f6] || {};

                return this['id'] && (_0x5bd8a1[_0x4fc8a7(0x36b)] = this['id']), new _0x1ddcdd[_0x1fd5f6]({
                  'query': _0x5bd8a1,
                  'socket': this,
                  'agent': _0x382553[_0x4fc8a7(0x3a2)] || this[_0x4fc8a7(0x3a2)],
                  'hostname': _0x382553[_0x4fc8a7(0x34a)] || this['hostname'],
                  'port': _0x382553[_0x4fc8a7(0x4be)] || this[_0x4fc8a7(0x4be)],
                  'secure': _0x382553[_0x4fc8a7(0x487)] || this['secure'],
                  'path': _0x382553[_0x4fc8a7(0x1ad)] || this[_0x4fc8a7(0x1ad)],
                  'forceJSONP': _0x382553[_0x4fc8a7(0x2b9)] || this[_0x4fc8a7(0x2b9)],
                  'jsonp': _0x382553[_0x4fc8a7(0x210)] || this['jsonp'],
                  'forceBase64': _0x382553[_0x4fc8a7(0xed)] || this[_0x4fc8a7(0xed)],
                  'enablesXDR': _0x382553[_0x4fc8a7(0x403)] || this[_0x4fc8a7(0x403)],
                  'withCredentials': _0x382553[_0x4fc8a7(0x26b)] || this[_0x4fc8a7(0x26b)],
                  'timestampRequests': _0x382553[_0x4fc8a7(0x153)] || this[_0x4fc8a7(0x153)],
                  'timestampParam': _0x382553[_0x4fc8a7(0x4b3)] || this[_0x4fc8a7(0x4b3)],
                  'policyPort': _0x382553['policyPort'] || this[_0x4fc8a7(0x116)],
                  'pfx': _0x382553['pfx'] || this[_0x4fc8a7(0x1f4)],
                  'key': _0x382553[_0x4fc8a7(0x1a9)] || this[_0x4fc8a7(0x1a9)],
                  'passphrase': _0x382553[_0x4fc8a7(0x4c6)] || this[_0x4fc8a7(0x4c6)],
                  'cert': _0x382553[_0x4fc8a7(0x1db)] || this[_0x4fc8a7(0x1db)],
                  'ca': _0x382553['ca'] || this['ca'],
                  'ciphers': _0x382553['ciphers'] || this['ciphers'],
                  'rejectUnauthorized': _0x382553[_0x4fc8a7(0x19e)] || this[_0x4fc8a7(0x19e)],
                  'perMessageDeflate': _0x382553['perMessageDeflate'] || this['perMessageDeflate'],
                  'extraHeaders': _0x382553[_0x4fc8a7(0xf3)] || this[_0x4fc8a7(0xf3)],
                  'forceNode': _0x382553['forceNode'] || this[_0x4fc8a7(0x43f)],
                  'localAddress': _0x382553[_0x4fc8a7(0x2e4)] || this[_0x4fc8a7(0x2e4)],
                  'requestTimeout': _0x382553['requestTimeout'] || this['requestTimeout'],
                  'protocols': _0x382553[_0x4fc8a7(0x253)] || void 0x0,
                  'isReactNative': this['isReactNative']
                });
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x412)] = function () {
                var _0x11919f = _0x2c78b1,
                    _0x3eb5e3;

                if (this[_0x11919f(0x35a)] && _0x1129b2[_0x11919f(0x494)] && -0x1 !== this['transports']['indexOf'](_0x11919f(0x38b))) _0x3eb5e3 = _0x11919f(0x38b);else {
                  if (0x0 === this[_0x11919f(0x24b)]['length']) {
                    var _0x91f976 = this;

                    return void setTimeout(function () {
                      var _0x2a0057 = _0x11919f;

                      _0x91f976[_0x2a0057(0x24e)](_0x2a0057(0x122), _0x2a0057(0x315));
                    }, 0x0);
                  }

                  _0x3eb5e3 = this[_0x11919f(0x24b)][0x0];
                }
                this[_0x11919f(0x3d0)] = _0x11919f(0x163);

                try {
                  _0x3eb5e3 = this['createTransport'](_0x3eb5e3);
                } catch (_0xdb8f78) {
                  return this[_0x11919f(0x24b)][_0x11919f(0x18d)](), void this[_0x11919f(0x412)]();
                }

                _0x3eb5e3['open'](), this[_0x11919f(0x464)](_0x3eb5e3);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x464)] = function (_0x27a284) {
                var _0x53f4b3 = _0x2c78b1;

                _0x4918c6(_0x53f4b3(0x208), _0x27a284[_0x53f4b3(0x32f)]);

                var _0x305917 = this;

                this[_0x53f4b3(0x287)] && (_0x4918c6('clearing\x20existing\x20transport\x20%s', this[_0x53f4b3(0x287)][_0x53f4b3(0x32f)]), this[_0x53f4b3(0x287)][_0x53f4b3(0x146)]()), this[_0x53f4b3(0x287)] = _0x27a284, _0x27a284['on'](_0x53f4b3(0x266), function () {
                  _0x305917['onDrain']();
                })['on'](_0x53f4b3(0x162), function (_0x22d5e8) {
                  var _0x52b5d3 = _0x53f4b3;

                  _0x305917[_0x52b5d3(0x347)](_0x22d5e8);
                })['on'](_0x53f4b3(0x122), function (_0x36e42a) {
                  var _0x473450 = _0x53f4b3;

                  _0x305917[_0x473450(0x2f4)](_0x36e42a);
                })['on'](_0x53f4b3(0x166), function () {
                  var _0x230c08 = _0x53f4b3;

                  _0x305917[_0x230c08(0x449)](_0x230c08(0x1cf));
                });
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x13d)] = function (_0x3c4583) {
                var _0x3e7dfb = _0x2c78b1;

                _0x4918c6(_0x3e7dfb(0x17c), _0x3c4583);

                var _0x265b3b = this[_0x3e7dfb(0x40b)](_0x3c4583, {
                  'probe': 0x1
                }),
                    _0x236ca4 = !0x1,
                    _0x528962 = this;

                function _0x41cad1() {
                  var _0x97e4e = _0x3e7dfb;

                  if (_0x528962[_0x97e4e(0x2cc)]) {
                    var _0x39b833 = !this['supportsBinary'] && _0x528962[_0x97e4e(0x287)][_0x97e4e(0x192)];

                    _0x236ca4 = _0x236ca4 || _0x39b833;
                  }

                  _0x236ca4 || (_0x4918c6('probe\x20transport\x20\x22%s\x22\x20opened', _0x3c4583), _0x265b3b[_0x97e4e(0x262)]([{
                    'type': _0x97e4e(0x477),
                    'data': _0x97e4e(0x13d)
                  }]), _0x265b3b[_0x97e4e(0x319)](_0x97e4e(0x162), function (_0x55684a) {
                    var _0x589511 = _0x97e4e;

                    if (!_0x236ca4) {
                      if ('pong' === _0x55684a['type'] && 'probe' === _0x55684a[_0x589511(0x1c5)]) {
                        if (_0x4918c6('probe\x20transport\x20\x22%s\x22\x20pong', _0x3c4583), _0x528962[_0x589511(0x36d)] = !0x0, _0x528962[_0x589511(0x24e)](_0x589511(0x36d), _0x265b3b), !_0x265b3b) return;
                        _0x1129b2[_0x589511(0x494)] = _0x589511(0x38b) === _0x265b3b[_0x589511(0x32f)], _0x4918c6(_0x589511(0x132), _0x528962[_0x589511(0x287)]['name']), _0x528962[_0x589511(0x287)][_0x589511(0x489)](function () {
                          var _0x56a730 = _0x589511;
                          _0x236ca4 || _0x56a730(0x183) !== _0x528962['readyState'] && (_0x4918c6(_0x56a730(0x214)), _0x17b105(), _0x528962[_0x56a730(0x464)](_0x265b3b), _0x265b3b[_0x56a730(0x262)]([{
                            'type': _0x56a730(0x21c)
                          }]), _0x528962[_0x56a730(0x24e)](_0x56a730(0x21c), _0x265b3b), _0x265b3b = null, _0x528962[_0x56a730(0x36d)] = !0x1, _0x528962['flush']());
                        });
                      } else {
                        _0x4918c6(_0x589511(0x271), _0x3c4583);

                        var _0x430279 = new Error('probe\x20error');

                        _0x430279['transport'] = _0x265b3b[_0x589511(0x32f)], _0x528962[_0x589511(0x24e)](_0x589511(0x367), _0x430279);
                      }
                    }
                  }));
                }

                function _0x162d73() {
                  var _0xe8d46c = _0x3e7dfb;
                  _0x236ca4 || (_0x236ca4 = !0x0, _0x17b105(), _0x265b3b[_0xe8d46c(0x166)](), _0x265b3b = null);
                }

                function _0x3fb93b(_0x59783c) {
                  var _0x3ae945 = _0x3e7dfb,
                      _0x1ffcda = new Error(_0x3ae945(0x3fd) + _0x59783c);

                  _0x1ffcda[_0x3ae945(0x287)] = _0x265b3b[_0x3ae945(0x32f)], _0x162d73(), _0x4918c6(_0x3ae945(0x2ba), _0x3c4583, _0x59783c), _0x528962[_0x3ae945(0x24e)](_0x3ae945(0x367), _0x1ffcda);
                }

                function _0xb72f60() {
                  var _0x369994 = _0x3e7dfb;

                  _0x3fb93b(_0x369994(0x1bb));
                }

                function _0x224e47() {
                  _0x3fb93b('socket\x20closed');
                }

                function _0x2408e7(_0x5722ce) {
                  var _0x447ebc = _0x3e7dfb;
                  _0x265b3b && _0x5722ce[_0x447ebc(0x32f)] !== _0x265b3b[_0x447ebc(0x32f)] && (_0x4918c6(_0x447ebc(0x1f7), _0x5722ce['name'], _0x265b3b[_0x447ebc(0x32f)]), _0x162d73());
                }

                function _0x17b105() {
                  var _0x43664d = _0x3e7dfb;
                  _0x265b3b[_0x43664d(0x198)](_0x43664d(0x412), _0x41cad1), _0x265b3b[_0x43664d(0x198)](_0x43664d(0x122), _0x3fb93b), _0x265b3b[_0x43664d(0x198)](_0x43664d(0x166), _0xb72f60), _0x528962['removeListener']('close', _0x224e47), _0x528962['removeListener'](_0x43664d(0x36d), _0x2408e7);
                }

                _0x1129b2[_0x3e7dfb(0x494)] = !0x1, _0x265b3b[_0x3e7dfb(0x319)]('open', _0x41cad1), _0x265b3b[_0x3e7dfb(0x319)](_0x3e7dfb(0x122), _0x3fb93b), _0x265b3b[_0x3e7dfb(0x319)](_0x3e7dfb(0x166), _0xb72f60), this[_0x3e7dfb(0x319)](_0x3e7dfb(0x166), _0x224e47), this[_0x3e7dfb(0x319)](_0x3e7dfb(0x36d), _0x2408e7), _0x265b3b[_0x3e7dfb(0x412)]();
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x36f)] = function () {
                var _0x2ab906 = _0x2c78b1;

                if (_0x4918c6(_0x2ab906(0x172)), this['readyState'] = _0x2ab906(0x412), _0x1129b2[_0x2ab906(0x494)] = _0x2ab906(0x38b) === this[_0x2ab906(0x287)][_0x2ab906(0x32f)], this[_0x2ab906(0x24e)](_0x2ab906(0x412)), this[_0x2ab906(0x413)](), _0x2ab906(0x412) === this[_0x2ab906(0x3d0)] && this['upgrade'] && this[_0x2ab906(0x287)][_0x2ab906(0x489)]) {
                  _0x4918c6(_0x2ab906(0x3cc));

                  for (var _0x3f03d3 = 0x0, _0x3ab1e6 = this[_0x2ab906(0x295)]['length']; _0x3f03d3 < _0x3ab1e6; _0x3f03d3++) this[_0x2ab906(0x13d)](this[_0x2ab906(0x295)][_0x3f03d3]);
                }
              }, _0x1129b2[_0x2c78b1(0x1b3)]['onPacket'] = function (_0x212dca) {
                var _0x46f03d = _0x2c78b1;
                if (_0x46f03d(0x163) === this[_0x46f03d(0x3d0)] || _0x46f03d(0x412) === this[_0x46f03d(0x3d0)] || _0x46f03d(0x12b) === this[_0x46f03d(0x3d0)]) switch (_0x4918c6(_0x46f03d(0x350), _0x212dca[_0x46f03d(0x156)], _0x212dca[_0x46f03d(0x1c5)]), this[_0x46f03d(0x24e)](_0x46f03d(0x162), _0x212dca), this[_0x46f03d(0x24e)](_0x46f03d(0x405)), _0x212dca['type']) {
                  case 'open':
                    this[_0x46f03d(0x37a)](JSON[_0x46f03d(0x288)](_0x212dca[_0x46f03d(0x1c5)]));

                    break;

                  case _0x46f03d(0x48c):
                    this['setPing'](), this[_0x46f03d(0x24e)](_0x46f03d(0x48c));
                    break;

                  case _0x46f03d(0x122):
                    var _0xd3e829 = new Error(_0x46f03d(0x178));

                    _0xd3e829[_0x46f03d(0x3ef)] = _0x212dca['data'], this['onError'](_0xd3e829);
                    break;

                  case _0x46f03d(0x3dd):
                    this['emit'](_0x46f03d(0x1c5), _0x212dca[_0x46f03d(0x1c5)]), this[_0x46f03d(0x24e)](_0x46f03d(0x3dd), _0x212dca['data']);
                } else _0x4918c6(_0x46f03d(0x40a), this[_0x46f03d(0x3d0)]);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x37a)] = function (_0x4a0149) {
                var _0x47e2ac = _0x2c78b1;
                this[_0x47e2ac(0x24e)](_0x47e2ac(0x36e), _0x4a0149), this['id'] = _0x4a0149['sid'], this[_0x47e2ac(0x287)]['query'][_0x47e2ac(0x36b)] = _0x4a0149[_0x47e2ac(0x36b)], this[_0x47e2ac(0x295)] = this[_0x47e2ac(0x1e1)](_0x4a0149[_0x47e2ac(0x295)]), this[_0x47e2ac(0x373)] = _0x4a0149['pingInterval'], this[_0x47e2ac(0x30a)] = _0x4a0149[_0x47e2ac(0x30a)], this[_0x47e2ac(0x36f)](), _0x47e2ac(0x183) !== this[_0x47e2ac(0x3d0)] && (this[_0x47e2ac(0x333)](), this[_0x47e2ac(0x198)](_0x47e2ac(0x405), this[_0x47e2ac(0x127)]), this['on'](_0x47e2ac(0x405), this[_0x47e2ac(0x127)]));
              }, _0x1129b2[_0x2c78b1(0x1b3)]['onHeartbeat'] = function (_0x3d4965) {
                var _0x445627 = _0x2c78b1;
                clearTimeout(this[_0x445627(0x2a5)]);

                var _0x427030 = this;

                _0x427030[_0x445627(0x2a5)] = setTimeout(function () {
                  var _0x67a86 = _0x445627;
                  _0x67a86(0x183) !== _0x427030[_0x67a86(0x3d0)] && _0x427030[_0x67a86(0x449)](_0x67a86(0x2e5));
                }, _0x3d4965 || _0x427030[_0x445627(0x373)] + _0x427030[_0x445627(0x30a)]);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x333)] = function () {
                var _0x4e0f8d = _0x2c78b1,
                    _0x42d566 = this;

                clearTimeout(_0x42d566['pingIntervalTimer']), _0x42d566[_0x4e0f8d(0x154)] = setTimeout(function () {
                  var _0x346f7c = _0x4e0f8d;
                  _0x4918c6(_0x346f7c(0x16d), _0x42d566[_0x346f7c(0x30a)]), _0x42d566[_0x346f7c(0x477)](), _0x42d566[_0x346f7c(0x127)](_0x42d566[_0x346f7c(0x30a)]);
                }, _0x42d566[_0x4e0f8d(0x373)]);
              }, _0x1129b2['prototype'][_0x2c78b1(0x477)] = function () {
                var _0x195f3c = _0x2c78b1,
                    _0x58b342 = this;

                this['sendPacket'](_0x195f3c(0x477), function () {
                  var _0x2110e3 = _0x195f3c;

                  _0x58b342[_0x2110e3(0x24e)]('ping');
                });
              }, _0x1129b2['prototype'][_0x2c78b1(0x308)] = function () {
                var _0xe3148b = _0x2c78b1;
                this[_0xe3148b(0x20b)]['splice'](0x0, this[_0xe3148b(0x45f)]), this[_0xe3148b(0x45f)] = 0x0, 0x0 === this[_0xe3148b(0x20b)][_0xe3148b(0x1b1)] ? this[_0xe3148b(0x24e)](_0xe3148b(0x266)) : this[_0xe3148b(0x413)]();
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x413)] = function () {
                var _0x459f0f = _0x2c78b1;
                _0x459f0f(0x183) !== this[_0x459f0f(0x3d0)] && this[_0x459f0f(0x287)][_0x459f0f(0x3d1)] && !this['upgrading'] && this['writeBuffer'][_0x459f0f(0x1b1)] && (_0x4918c6(_0x459f0f(0x32d), this[_0x459f0f(0x20b)][_0x459f0f(0x1b1)]), this[_0x459f0f(0x287)][_0x459f0f(0x262)](this[_0x459f0f(0x20b)]), this[_0x459f0f(0x45f)] = this[_0x459f0f(0x20b)][_0x459f0f(0x1b1)], this[_0x459f0f(0x24e)]('flush'));
              }, _0x1129b2['prototype'][_0x2c78b1(0x4ce)] = _0x1129b2[_0x2c78b1(0x1b3)]['send'] = function (_0x1f6d6a, _0x2f5a68, _0x3ec016) {
                var _0x394863 = _0x2c78b1;
                return this[_0x394863(0x1ae)](_0x394863(0x3dd), _0x1f6d6a, _0x2f5a68, _0x3ec016), this;
              }, _0x1129b2['prototype']['sendPacket'] = function (_0x118511, _0x3892fa, _0x21ae6d, _0x48bf08) {
                var _0x5bd22b = _0x2c78b1;

                if (_0x5bd22b(0x17d) == typeof _0x3892fa && (_0x48bf08 = _0x3892fa, _0x3892fa = void 0x0), 'function' == typeof _0x21ae6d && (_0x48bf08 = _0x21ae6d, _0x21ae6d = null), _0x5bd22b(0x12b) !== this['readyState'] && _0x5bd22b(0x183) !== this[_0x5bd22b(0x3d0)]) {
                  (_0x21ae6d = _0x21ae6d || {})[_0x5bd22b(0x473)] = !0x1 !== _0x21ae6d[_0x5bd22b(0x473)];
                  var _0x3c8363 = {
                    'type': _0x118511,
                    'data': _0x3892fa,
                    'options': _0x21ae6d
                  };
                  this[_0x5bd22b(0x24e)](_0x5bd22b(0x304), _0x3c8363), this[_0x5bd22b(0x20b)][_0x5bd22b(0x41c)](_0x3c8363), _0x48bf08 && this['once'](_0x5bd22b(0x413), _0x48bf08), this['flush']();
                }
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x166)] = function () {
                var _0x3ab27b = _0x2c78b1;

                if (_0x3ab27b(0x163) === this[_0x3ab27b(0x3d0)] || _0x3ab27b(0x412) === this[_0x3ab27b(0x3d0)]) {
                  this[_0x3ab27b(0x3d0)] = _0x3ab27b(0x12b);

                  var _0x292f30 = this;

                  this[_0x3ab27b(0x20b)][_0x3ab27b(0x1b1)] ? this['once'](_0x3ab27b(0x266), function () {
                    var _0x4bdb67 = _0x3ab27b;
                    this[_0x4bdb67(0x36d)] ? _0x3abf03() : _0x58fcd7();
                  }) : this[_0x3ab27b(0x36d)] ? _0x3abf03() : _0x58fcd7();
                }

                function _0x58fcd7() {
                  var _0x1ba3c3 = _0x3ab27b;
                  _0x292f30[_0x1ba3c3(0x449)](_0x1ba3c3(0x16c)), _0x4918c6(_0x1ba3c3(0x26f)), _0x292f30[_0x1ba3c3(0x287)][_0x1ba3c3(0x166)]();
                }

                function _0x3bd710() {
                  var _0x36ec0e = _0x3ab27b;
                  _0x292f30[_0x36ec0e(0x198)](_0x36ec0e(0x21c), _0x3bd710), _0x292f30[_0x36ec0e(0x198)](_0x36ec0e(0x367), _0x3bd710), _0x58fcd7();
                }

                function _0x3abf03() {
                  var _0x18dc06 = _0x3ab27b;
                  _0x292f30['once'](_0x18dc06(0x21c), _0x3bd710), _0x292f30[_0x18dc06(0x319)](_0x18dc06(0x367), _0x3bd710);
                }

                return this;
              }, _0x1129b2['prototype'][_0x2c78b1(0x2f4)] = function (_0x246b32) {
                var _0x500391 = _0x2c78b1;
                _0x4918c6(_0x500391(0x1c1), _0x246b32), _0x1129b2[_0x500391(0x494)] = !0x1, this['emit'](_0x500391(0x122), _0x246b32), this[_0x500391(0x449)](_0x500391(0x2a7), _0x246b32);
              }, _0x1129b2[_0x2c78b1(0x1b3)][_0x2c78b1(0x449)] = function (_0x11423e, _0x3122e7) {
                var _0x43e3f2 = _0x2c78b1;
                _0x43e3f2(0x163) !== this['readyState'] && _0x43e3f2(0x412) !== this['readyState'] && _0x43e3f2(0x12b) !== this[_0x43e3f2(0x3d0)] || (_0x4918c6(_0x43e3f2(0x1b4), _0x11423e), clearTimeout(this[_0x43e3f2(0x154)]), clearTimeout(this[_0x43e3f2(0x2a5)]), this['transport'][_0x43e3f2(0x146)](_0x43e3f2(0x166)), this['transport'][_0x43e3f2(0x166)](), this[_0x43e3f2(0x287)][_0x43e3f2(0x146)](), this[_0x43e3f2(0x3d0)] = _0x43e3f2(0x183), this['id'] = null, this[_0x43e3f2(0x24e)](_0x43e3f2(0x166), _0x11423e, _0x3122e7), this[_0x43e3f2(0x20b)] = [], this[_0x43e3f2(0x45f)] = 0x0);
              }, _0x1129b2['prototype'][_0x2c78b1(0x1e1)] = function (_0x29d718) {
                var _0x5f2fe0 = _0x2c78b1;

                for (var _0x3d8363 = [], _0x698e59 = 0x0, _0x295a7c = _0x29d718[_0x5f2fe0(0x1b1)]; _0x698e59 < _0x295a7c; _0x698e59++) ~_0x41f7c1(this[_0x5f2fe0(0x24b)], _0x29d718[_0x698e59]) && _0x3d8363[_0x5f2fe0(0x41c)](_0x29d718[_0x698e59]);

                return _0x3d8363;
              };
            },
            0x1960: function _(_0x7ec485, _0x48cc2b, _0x3fca7f) {
              var _0x10a561 = a0_0x107f,
                  _0x2367ec = _0x3fca7f(0x1167),
                  _0x476e0f = _0x3fca7f(0x223f);

              function _0x26873e(_0xc4e71c) {
                var _0x306e7a = a0_0x107f;
                this['path'] = _0xc4e71c['path'], this[_0x306e7a(0x34a)] = _0xc4e71c[_0x306e7a(0x34a)], this[_0x306e7a(0x4be)] = _0xc4e71c[_0x306e7a(0x4be)], this[_0x306e7a(0x487)] = _0xc4e71c['secure'], this[_0x306e7a(0x189)] = _0xc4e71c['query'], this[_0x306e7a(0x4b3)] = _0xc4e71c[_0x306e7a(0x4b3)], this[_0x306e7a(0x153)] = _0xc4e71c[_0x306e7a(0x153)], this[_0x306e7a(0x3d0)] = '', this[_0x306e7a(0x3a2)] = _0xc4e71c[_0x306e7a(0x3a2)] || !0x1, this[_0x306e7a(0x136)] = _0xc4e71c['socket'], this[_0x306e7a(0x403)] = _0xc4e71c['enablesXDR'], this[_0x306e7a(0x26b)] = _0xc4e71c[_0x306e7a(0x26b)], this[_0x306e7a(0x1f4)] = _0xc4e71c[_0x306e7a(0x1f4)], this[_0x306e7a(0x1a9)] = _0xc4e71c[_0x306e7a(0x1a9)], this[_0x306e7a(0x4c6)] = _0xc4e71c[_0x306e7a(0x4c6)], this[_0x306e7a(0x1db)] = _0xc4e71c[_0x306e7a(0x1db)], this['ca'] = _0xc4e71c['ca'], this[_0x306e7a(0x2ac)] = _0xc4e71c[_0x306e7a(0x2ac)], this[_0x306e7a(0x19e)] = _0xc4e71c[_0x306e7a(0x19e)], this[_0x306e7a(0x43f)] = _0xc4e71c[_0x306e7a(0x43f)], this[_0x306e7a(0x17a)] = _0xc4e71c[_0x306e7a(0x17a)], this[_0x306e7a(0xf3)] = _0xc4e71c[_0x306e7a(0xf3)], this['localAddress'] = _0xc4e71c[_0x306e7a(0x2e4)];
              }

              _0x7ec485[_0x10a561(0x38d)] = _0x26873e, _0x476e0f(_0x26873e[_0x10a561(0x1b3)]), _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x2f4)] = function (_0x498c07, _0x3450ca) {
                var _0x41dcd0 = _0x10a561,
                    _0x1ca704 = new Error(_0x498c07);

                return _0x1ca704['type'] = _0x41dcd0(0x366), _0x1ca704[_0x41dcd0(0x12a)] = _0x3450ca, this['emit'](_0x41dcd0(0x122), _0x1ca704), this;
              }, _0x26873e[_0x10a561(0x1b3)]['open'] = function () {
                var _0x27d7b0 = _0x10a561;
                return _0x27d7b0(0x183) !== this[_0x27d7b0(0x3d0)] && '' !== this[_0x27d7b0(0x3d0)] || (this[_0x27d7b0(0x3d0)] = _0x27d7b0(0x163), this[_0x27d7b0(0x1fb)]()), this;
              }, _0x26873e['prototype']['close'] = function () {
                var _0x4874cd = _0x10a561;
                return _0x4874cd(0x163) !== this[_0x4874cd(0x3d0)] && _0x4874cd(0x412) !== this[_0x4874cd(0x3d0)] || (this[_0x4874cd(0x164)](), this[_0x4874cd(0x449)]()), this;
              }, _0x26873e[_0x10a561(0x1b3)]['send'] = function (_0x338bcd) {
                var _0x21b4d9 = _0x10a561;
                if (_0x21b4d9(0x412) !== this[_0x21b4d9(0x3d0)]) throw new Error('Transport\x20not\x20open');

                this[_0x21b4d9(0x4ce)](_0x338bcd);
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x36f)] = function () {
                var _0x38832d = _0x10a561;
                this['readyState'] = _0x38832d(0x412), this['writable'] = !0x0, this[_0x38832d(0x24e)]('open');
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x2cb)] = function (_0x2a14c7) {
                var _0x614944 = _0x10a561,
                    _0x5bc6b7 = _0x2367ec[_0x614944(0x2f5)](_0x2a14c7, this['socket'][_0x614944(0x286)]);

                this[_0x614944(0x347)](_0x5bc6b7);
              }, _0x26873e[_0x10a561(0x1b3)][_0x10a561(0x347)] = function (_0x464f55) {
                var _0x14f378 = _0x10a561;

                this[_0x14f378(0x24e)](_0x14f378(0x162), _0x464f55);
              }, _0x26873e['prototype'][_0x10a561(0x449)] = function () {
                var _0x47a013 = _0x10a561;
                this[_0x47a013(0x3d0)] = _0x47a013(0x183), this[_0x47a013(0x24e)]('close');
              };
            },
            0xd18: function _(_0x25d91e, _0x15f290, _0x58c514) {
              var _0x34d75a = a0_0x107f,
                  _0x5b407c = _0x58c514(0xad9),
                  _0x42ed7f = _0x58c514(0xd58),
                  _0x2ee597 = _0x58c514(0x2639),
                  _0x3f22c9 = _0x58c514(0x115a);

              _0x15f290[_0x34d75a(0x396)] = function (_0x5931dd) {
                var _0x350990 = _0x34d75a,
                    _0x94b154 = !0x1,
                    _0x22296b = !0x1,
                    _0x5e6c1b = !0x1 !== _0x5931dd[_0x350990(0x210)];

                if ('undefined' != typeof location) {
                  var _0x3bf4ff = _0x350990(0x1d9) === location[_0x350990(0x1c7)],
                      _0x23b128 = location[_0x350990(0x4be)];

                  _0x23b128 || (_0x23b128 = _0x3bf4ff ? 0x1bb : 0x50), _0x94b154 = _0x5931dd['hostname'] !== location[_0x350990(0x34a)] || _0x23b128 !== _0x5931dd['port'], _0x22296b = _0x5931dd['secure'] !== _0x3bf4ff;
                }

                if (_0x5931dd['xdomain'] = _0x94b154, _0x5931dd['xscheme'] = _0x22296b, _0x350990(0x412) in new _0x5b407c(_0x5931dd) && !_0x5931dd[_0x350990(0x2b9)]) return new _0x42ed7f(_0x5931dd);
                if (!_0x5e6c1b) throw new Error(_0x350990(0x313));
                return new _0x2ee597(_0x5931dd);
              }, _0x15f290[_0x34d75a(0x38b)] = _0x3f22c9;
            },
            0x2639: function _(_0x38e97b, _0x63ad42, _0x5767e6) {
              var _0xa95b7b = a0_0x107f,
                  _0x1f649f = _0x5767e6(0x2337),
                  _0x212d0b = _0x5767e6(0xf15),
                  _0x1b443e = _0x5767e6(0xddd);

              _0x38e97b[_0xa95b7b(0x38d)] = _0x17ec58;

              var _0x3f6120,
                  _0x2fc919 = /\n/g,
                  _0x57605e = /\\n/g;

              function _0x25475a() {}

              function _0x17ec58(_0x5abcce) {
                var _0x569f18 = _0xa95b7b;
                _0x1f649f[_0x569f18(0x229)](this, _0x5abcce), this[_0x569f18(0x189)] = this['query'] || {}, _0x3f6120 || (_0x3f6120 = _0x1b443e[_0x569f18(0x3d7)] = _0x1b443e[_0x569f18(0x3d7)] || []), this['index'] = _0x3f6120[_0x569f18(0x1b1)];

                var _0x15f2e9 = this;

                _0x3f6120[_0x569f18(0x41c)](function (_0x2849ff) {
                  var _0x22de17 = _0x569f18;

                  _0x15f2e9[_0x22de17(0x2cb)](_0x2849ff);
                }), this['query']['j'] = this['index'], _0x569f18(0x17d) == typeof addEventListener && addEventListener('beforeunload', function () {
                  var _0x9e245 = _0x569f18;
                  _0x15f2e9[_0x9e245(0x48b)] && (_0x15f2e9['script'][_0x9e245(0x112)] = _0x25475a);
                }, !0x1);
              }

              _0x212d0b(_0x17ec58, _0x1f649f), _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x192)] = !0x1, _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x164)] = function () {
                var _0x4c85df = _0xa95b7b;
                this[_0x4c85df(0x48b)] && (this[_0x4c85df(0x48b)][_0x4c85df(0x3a1)][_0x4c85df(0x481)](this[_0x4c85df(0x48b)]), this[_0x4c85df(0x48b)] = null), this[_0x4c85df(0x421)] && (this['form'][_0x4c85df(0x3a1)][_0x4c85df(0x481)](this['form']), this[_0x4c85df(0x421)] = null, this[_0x4c85df(0x2cf)] = null), _0x1f649f['prototype'][_0x4c85df(0x164)][_0x4c85df(0x229)](this);
              }, _0x17ec58[_0xa95b7b(0x1b3)][_0xa95b7b(0x3cb)] = function () {
                var _0x897b7e = _0xa95b7b,
                    _0x3bec9c = this,
                    _0x2ee7a9 = document['createElement']('script');

                this[_0x897b7e(0x48b)] && (this['script'][_0x897b7e(0x3a1)][_0x897b7e(0x481)](this[_0x897b7e(0x48b)]), this[_0x897b7e(0x48b)] = null), _0x2ee7a9[_0x897b7e(0x447)] = !0x0, _0x2ee7a9[_0x897b7e(0x433)] = this['uri'](), _0x2ee7a9[_0x897b7e(0x112)] = function (_0x3eb41f) {
                  var _0x41b57b = _0x897b7e;

                  _0x3bec9c[_0x41b57b(0x2f4)](_0x41b57b(0x3ed), _0x3eb41f);
                };
                var _0x20b053 = document['getElementsByTagName'](_0x897b7e(0x48b))[0x0];
                _0x20b053 ? _0x20b053[_0x897b7e(0x3a1)]['insertBefore'](_0x2ee7a9, _0x20b053) : (document[_0x897b7e(0x1cb)] || document[_0x897b7e(0x14a)])[_0x897b7e(0x496)](_0x2ee7a9), this['script'] = _0x2ee7a9, _0x897b7e(0x364) != typeof navigator && /gecko/i[_0x897b7e(0x4c7)](navigator['userAgent']) && setTimeout(function () {
                  var _0xd60930 = _0x897b7e,
                      _0x147e8a = document[_0xd60930(0x377)]('iframe');

                  document['body'][_0xd60930(0x496)](_0x147e8a), document[_0xd60930(0x14a)]['removeChild'](_0x147e8a);
                }, 0x64);
              }, _0x17ec58[_0xa95b7b(0x1b3)]['doWrite'] = function (_0xa1487e, _0x4e6d37) {
                var _0x1e77fd = _0xa95b7b,
                    _0x519595 = this;

                if (!this[_0x1e77fd(0x421)]) {
                  var _0x1a1453,
                      _0x583a65 = document['createElement'](_0x1e77fd(0x421)),
                      _0x2a76f1 = document[_0x1e77fd(0x377)](_0x1e77fd(0x3d8)),
                      _0x395f56 = this[_0x1e77fd(0x424)] = _0x1e77fd(0x49e) + this[_0x1e77fd(0x34b)];

                  _0x583a65[_0x1e77fd(0x252)] = _0x1e77fd(0x196), _0x583a65['style'][_0x1e77fd(0x167)] = 'absolute', _0x583a65['style'][_0x1e77fd(0x1a1)] = _0x1e77fd(0x467), _0x583a65['style'][_0x1e77fd(0x2c7)] = _0x1e77fd(0x467), _0x583a65[_0x1e77fd(0x2d9)] = _0x395f56, _0x583a65[_0x1e77fd(0x351)] = 'POST', _0x583a65['setAttribute'](_0x1e77fd(0x320), _0x1e77fd(0x28e)), _0x2a76f1[_0x1e77fd(0x32f)] = 'd', _0x583a65['appendChild'](_0x2a76f1), document[_0x1e77fd(0x14a)][_0x1e77fd(0x496)](_0x583a65), this[_0x1e77fd(0x421)] = _0x583a65, this[_0x1e77fd(0x316)] = _0x2a76f1;
                }

                function _0x498353() {
                  _0x38db0c(), _0x4e6d37();
                }

                function _0x38db0c() {
                  var _0xd16021 = _0x1e77fd;
                  if (_0x519595[_0xd16021(0x2cf)]) try {
                    _0x519595[_0xd16021(0x421)]['removeChild'](_0x519595[_0xd16021(0x2cf)]);
                  } catch (_0x17649a) {
                    _0x519595[_0xd16021(0x2f4)](_0xd16021(0x218), _0x17649a);
                  }

                  try {
                    var _0x4c0831 = '<iframe\x20src=\x22javascript:0\x22\x20name=\x22' + _0x519595[_0xd16021(0x424)] + '\x22>';

                    _0x1a1453 = document[_0xd16021(0x377)](_0x4c0831);
                  } catch (_0x2834a9) {
                    (_0x1a1453 = document[_0xd16021(0x377)](_0xd16021(0x2cf)))['name'] = _0x519595['iframeId'], _0x1a1453[_0xd16021(0x433)] = _0xd16021(0x2dc);
                  }

                  _0x1a1453['id'] = _0x519595[_0xd16021(0x424)], _0x519595[_0xd16021(0x421)][_0xd16021(0x496)](_0x1a1453), _0x519595['iframe'] = _0x1a1453;
                }

                this[_0x1e77fd(0x421)][_0x1e77fd(0x2d7)] = this['uri'](), _0x38db0c(), _0xa1487e = _0xa1487e[_0x1e77fd(0x3d9)](_0x57605e, '\x5c\x0a'), this[_0x1e77fd(0x316)][_0x1e77fd(0x1e6)] = _0xa1487e[_0x1e77fd(0x3d9)](_0x2fc919, '\x5cn');

                try {
                  this[_0x1e77fd(0x421)][_0x1e77fd(0x3b9)]();
                } catch (_0x39229d) {}

                this['iframe'][_0x1e77fd(0x277)] ? this[_0x1e77fd(0x2cf)][_0x1e77fd(0x255)] = function () {
                  var _0x44f98d = _0x1e77fd;
                  'complete' === _0x519595['iframe'][_0x44f98d(0x3d0)] && _0x498353();
                } : this[_0x1e77fd(0x2cf)]['onload'] = _0x498353;
              };
            },
            0xd58: function _(_0x119a3e, _0x51d4b8, _0x258200) {
              var _0x53cff6 = a0_0x107f,
                  _0x5289ae = _0x258200(0xad9),
                  _0x34a529 = _0x258200(0x2337),
                  _0x57d205 = _0x258200(0x223f),
                  _0x203338 = _0x258200(0xf15),
                  _0xc655c2 = _0x258200(0x4cb)(_0x53cff6(0x16a)),
                  _0x35b5c2 = _0x258200(0xddd);

              function _0x12aa46() {}

              function _0x500d20(_0x54b790) {
                var _0x15b7bf = _0x53cff6;

                if (_0x34a529[_0x15b7bf(0x229)](this, _0x54b790), this[_0x15b7bf(0x3a6)] = _0x54b790[_0x15b7bf(0x3a6)], this[_0x15b7bf(0xf3)] = _0x54b790[_0x15b7bf(0xf3)], _0x15b7bf(0x364) != typeof location) {
                  var _0x5d6a11 = _0x15b7bf(0x1d9) === location[_0x15b7bf(0x1c7)],
                      _0x58ff2f = location['port'];

                  _0x58ff2f || (_0x58ff2f = _0x5d6a11 ? 0x1bb : 0x50), this['xd'] = _0x15b7bf(0x364) != typeof location && _0x54b790[_0x15b7bf(0x34a)] !== location['hostname'] || _0x58ff2f !== _0x54b790[_0x15b7bf(0x4be)], this['xs'] = _0x54b790[_0x15b7bf(0x487)] !== _0x5d6a11;
                }
              }

              function _0x201b9e(_0x5f1272) {
                var _0x81696e = _0x53cff6;
                this[_0x81696e(0x351)] = _0x5f1272[_0x81696e(0x351)] || 'GET', this['uri'] = _0x5f1272[_0x81696e(0x2d0)], this['xd'] = !!_0x5f1272['xd'], this['xs'] = !!_0x5f1272['xs'], this[_0x81696e(0x447)] = !0x1 !== _0x5f1272[_0x81696e(0x447)], this[_0x81696e(0x1c5)] = void 0x0 !== _0x5f1272['data'] ? _0x5f1272[_0x81696e(0x1c5)] : null, this['agent'] = _0x5f1272[_0x81696e(0x3a2)], this[_0x81696e(0x159)] = _0x5f1272[_0x81696e(0x159)], this[_0x81696e(0x192)] = _0x5f1272[_0x81696e(0x192)], this[_0x81696e(0x403)] = _0x5f1272[_0x81696e(0x403)], this[_0x81696e(0x26b)] = _0x5f1272['withCredentials'], this[_0x81696e(0x3a6)] = _0x5f1272['requestTimeout'], this[_0x81696e(0x1f4)] = _0x5f1272[_0x81696e(0x1f4)], this[_0x81696e(0x1a9)] = _0x5f1272['key'], this['passphrase'] = _0x5f1272['passphrase'], this['cert'] = _0x5f1272[_0x81696e(0x1db)], this['ca'] = _0x5f1272['ca'], this[_0x81696e(0x2ac)] = _0x5f1272[_0x81696e(0x2ac)], this[_0x81696e(0x19e)] = _0x5f1272[_0x81696e(0x19e)], this[_0x81696e(0xf3)] = _0x5f1272[_0x81696e(0xf3)], this['create']();
              }

              function _0x3d3f06() {
                var _0x573f46 = _0x53cff6;

                for (var _0x3aa409 in _0x201b9e[_0x573f46(0x21d)]) _0x201b9e['requests'][_0x573f46(0x32a)](_0x3aa409) && _0x201b9e[_0x573f46(0x21d)][_0x3aa409][_0x573f46(0x4bb)]();
              }

              _0x119a3e[_0x53cff6(0x38d)] = _0x500d20, _0x119a3e[_0x53cff6(0x38d)][_0x53cff6(0x4bd)] = _0x201b9e, _0x203338(_0x500d20, _0x34a529), _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x192)] = !0x0, _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x15f)] = function (_0x3ef4ba) {
                var _0x330e99 = _0x53cff6;
                return (_0x3ef4ba = _0x3ef4ba || {})['uri'] = this[_0x330e99(0x2d0)](), _0x3ef4ba['xd'] = this['xd'], _0x3ef4ba['xs'] = this['xs'], _0x3ef4ba[_0x330e99(0x3a2)] = this[_0x330e99(0x3a2)] || !0x1, _0x3ef4ba['supportsBinary'] = this[_0x330e99(0x192)], _0x3ef4ba[_0x330e99(0x403)] = this['enablesXDR'], _0x3ef4ba[_0x330e99(0x26b)] = this[_0x330e99(0x26b)], _0x3ef4ba[_0x330e99(0x1f4)] = this[_0x330e99(0x1f4)], _0x3ef4ba[_0x330e99(0x1a9)] = this[_0x330e99(0x1a9)], _0x3ef4ba['passphrase'] = this[_0x330e99(0x4c6)], _0x3ef4ba[_0x330e99(0x1db)] = this[_0x330e99(0x1db)], _0x3ef4ba['ca'] = this['ca'], _0x3ef4ba[_0x330e99(0x2ac)] = this['ciphers'], _0x3ef4ba[_0x330e99(0x19e)] = this['rejectUnauthorized'], _0x3ef4ba[_0x330e99(0x3a6)] = this['requestTimeout'], _0x3ef4ba['extraHeaders'] = this[_0x330e99(0xf3)], new _0x201b9e(_0x3ef4ba);
              }, _0x500d20[_0x53cff6(0x1b3)][_0x53cff6(0x408)] = function (_0x4e2efe, _0x2c2a8f) {
                var _0x8f0175 = _0x53cff6,
                    _0x4f6d56 = 'string' != typeof _0x4e2efe && void 0x0 !== _0x4e2efe,
                    _0xfafe14 = this[_0x8f0175(0x15f)]({
                  'method': 'POST',
                  'data': _0x4e2efe,
                  'isBinary': _0x4f6d56
                }),
                    _0x160cb4 = this;

                _0xfafe14['on'](_0x8f0175(0x175), _0x2c2a8f), _0xfafe14['on'](_0x8f0175(0x122), function (_0x1a1ebd) {
                  _0x160cb4['onError']('xhr\x20post\x20error', _0x1a1ebd);
                }), this[_0x8f0175(0x2ec)] = _0xfafe14;
              }, _0x500d20[_0x53cff6(0x1b3)]['doPoll'] = function () {
                var _0xa594f4 = _0x53cff6;

                _0xc655c2(_0xa594f4(0x2d3));

                var _0x2b05d4 = this[_0xa594f4(0x15f)](),
                    _0x18e979 = this;

                _0x2b05d4['on'](_0xa594f4(0x1c5), function (_0x462f20) {
                  _0x18e979['onData'](_0x462f20);
                }), _0x2b05d4['on']('error', function (_0x3f01aa) {
                  var _0x3bbd99 = _0xa594f4;

                  _0x18e979['onError'](_0x3bbd99(0x3d2), _0x3f01aa);
                }), this[_0xa594f4(0x103)] = _0x2b05d4;
              }, _0x57d205(_0x201b9e[_0x53cff6(0x1b3)]), _0x201b9e['prototype'][_0x53cff6(0x39c)] = function () {
                var _0x11587e = _0x53cff6,
                    _0x58e3b0 = {
                  'agent': this['agent'],
                  'xdomain': this['xd'],
                  'xscheme': this['xs'],
                  'enablesXDR': this[_0x11587e(0x403)]
                };
                _0x58e3b0[_0x11587e(0x1f4)] = this['pfx'], _0x58e3b0[_0x11587e(0x1a9)] = this[_0x11587e(0x1a9)], _0x58e3b0['passphrase'] = this[_0x11587e(0x4c6)], _0x58e3b0[_0x11587e(0x1db)] = this[_0x11587e(0x1db)], _0x58e3b0['ca'] = this['ca'], _0x58e3b0[_0x11587e(0x2ac)] = this[_0x11587e(0x2ac)], _0x58e3b0[_0x11587e(0x19e)] = this['rejectUnauthorized'];

                var _0x3074f7 = this['xhr'] = new _0x5289ae(_0x58e3b0),
                    _0x5f50ae = this;

                try {
                  _0xc655c2('xhr\x20open\x20%s:\x20%s', this[_0x11587e(0x351)], this[_0x11587e(0x2d0)]), _0x3074f7[_0x11587e(0x412)](this[_0x11587e(0x351)], this['uri'], this[_0x11587e(0x447)]);

                  try {
                    if (this[_0x11587e(0xf3)]) {
                      for (var _0x546eec in _0x3074f7['setDisableHeaderCheck'] && _0x3074f7[_0x11587e(0x485)](!0x0), this['extraHeaders']) this[_0x11587e(0xf3)][_0x11587e(0x32a)](_0x546eec) && _0x3074f7['setRequestHeader'](_0x546eec, this[_0x11587e(0xf3)][_0x546eec]);
                    }
                  } catch (_0x449f97) {}

                  if ('POST' === this[_0x11587e(0x351)]) try {
                    this[_0x11587e(0x159)] ? _0x3074f7['setRequestHeader'](_0x11587e(0x3be), _0x11587e(0xfb)) : _0x3074f7[_0x11587e(0x2d4)]('Content-type', _0x11587e(0x129));
                  } catch (_0x10de65) {}

                  try {
                    _0x3074f7[_0x11587e(0x2d4)](_0x11587e(0x1d3), _0x11587e(0x248));
                  } catch (_0x4f8612) {}

                  _0x11587e(0x26b) in _0x3074f7 && (_0x3074f7[_0x11587e(0x26b)] = this['withCredentials']), this['requestTimeout'] && (_0x3074f7[_0x11587e(0xee)] = this[_0x11587e(0x3a6)]), this['hasXDR']() ? (_0x3074f7['onload'] = function () {
                    var _0x1cf70b = _0x11587e;

                    _0x5f50ae[_0x1cf70b(0x207)]();
                  }, _0x3074f7['onerror'] = function () {
                    var _0x5ead8b = _0x11587e;

                    _0x5f50ae[_0x5ead8b(0x2f4)](_0x3074f7['responseText']);
                  }) : _0x3074f7[_0x11587e(0x255)] = function () {
                    var _0x3c5b94 = _0x11587e;
                    if (0x2 === _0x3074f7[_0x3c5b94(0x3d0)]) try {
                      var _0x573faa = _0x3074f7[_0x3c5b94(0x46f)](_0x3c5b94(0x19a));

                      (_0x5f50ae[_0x3c5b94(0x192)] && 'application/octet-stream' === _0x573faa || _0x3c5b94(0x115) === _0x573faa) && (_0x3074f7[_0x3c5b94(0x1ed)] = _0x3c5b94(0x1c4));
                    } catch (_0x5345af) {}
                    0x4 === _0x3074f7['readyState'] && (0xc8 === _0x3074f7[_0x3c5b94(0x21e)] || 0x4c7 === _0x3074f7[_0x3c5b94(0x21e)] ? _0x5f50ae[_0x3c5b94(0x207)]() : setTimeout(function () {
                      var _0xa3f4f8 = _0x3c5b94;

                      _0x5f50ae[_0xa3f4f8(0x2f4)](_0xa3f4f8(0x11f) == typeof _0x3074f7[_0xa3f4f8(0x21e)] ? _0x3074f7[_0xa3f4f8(0x21e)] : 0x0);
                    }, 0x0));
                  }, _0xc655c2(_0x11587e(0x4d2), this[_0x11587e(0x1c5)]), _0x3074f7['send'](this[_0x11587e(0x1c5)]);
                } catch (_0xcaa82e) {
                  return void setTimeout(function () {
                    var _0x252a81 = _0x11587e;

                    _0x5f50ae[_0x252a81(0x2f4)](_0xcaa82e);
                  }, 0x0);
                }

                _0x11587e(0x364) != typeof document && (this[_0x11587e(0x34b)] = _0x201b9e['requestsCount']++, _0x201b9e[_0x11587e(0x21d)][this[_0x11587e(0x34b)]] = this);
              }, _0x201b9e['prototype']['onSuccess'] = function () {
                var _0xbf6ef5 = _0x53cff6;
                this[_0xbf6ef5(0x24e)](_0xbf6ef5(0x175)), this['cleanup']();
              }, _0x201b9e[_0x53cff6(0x1b3)]['onData'] = function (_0x2e9e4c) {
                var _0x3c1033 = _0x53cff6;
                this['emit'](_0x3c1033(0x1c5), _0x2e9e4c), this['onSuccess']();
              }, _0x201b9e[_0x53cff6(0x1b3)]['onError'] = function (_0x1d2cf4) {
                var _0x8661db = _0x53cff6;
                this[_0x8661db(0x24e)]('error', _0x1d2cf4), this[_0x8661db(0x42b)](!0x0);
              }, _0x201b9e[_0x53cff6(0x1b3)][_0x53cff6(0x42b)] = function (_0x4c18b8) {
                var _0x421bc7 = _0x53cff6;

                if (void 0x0 !== this[_0x421bc7(0x4bc)] && null !== this[_0x421bc7(0x4bc)]) {
                  if (this[_0x421bc7(0x29b)]() ? this[_0x421bc7(0x4bc)][_0x421bc7(0x18e)] = this[_0x421bc7(0x4bc)]['onerror'] = _0x12aa46 : this[_0x421bc7(0x4bc)][_0x421bc7(0x255)] = _0x12aa46, _0x4c18b8) try {
                    this[_0x421bc7(0x4bc)]['abort']();
                  } catch (_0x1c9a05) {}
                  _0x421bc7(0x364) != typeof document && delete _0x201b9e[_0x421bc7(0x21d)][this[_0x421bc7(0x34b)]], this['xhr'] = null;
                }
              }, _0x201b9e[_0x53cff6(0x1b3)][_0x53cff6(0x207)] = function () {
                var _0x54e580 = _0x53cff6,
                    _0x5047d4;

                try {
                  var _0x1c2055;

                  try {
                    _0x1c2055 = this[_0x54e580(0x4bc)]['getResponseHeader']('Content-Type');
                  } catch (_0x4b1f3c) {}

                  _0x5047d4 = ('application/octet-stream' === _0x1c2055 || _0x54e580(0x115) === _0x1c2055) && this[_0x54e580(0x4bc)][_0x54e580(0x446)] || this[_0x54e580(0x4bc)][_0x54e580(0x1f8)];
                } catch (_0x11f6ca) {
                  this[_0x54e580(0x2f4)](_0x11f6ca);
                }

                null != _0x5047d4 && this[_0x54e580(0x2cb)](_0x5047d4);
              }, _0x201b9e['prototype']['hasXDR'] = function () {
                var _0x2fe46f = _0x53cff6;
                return _0x2fe46f(0x364) != typeof XDomainRequest && !this['xs'] && this[_0x2fe46f(0x403)];
              }, _0x201b9e['prototype'][_0x53cff6(0x4bb)] = function () {
                this['cleanup']();
              }, _0x201b9e[_0x53cff6(0x3cd)] = 0x0, _0x201b9e[_0x53cff6(0x21d)] = {}, _0x53cff6(0x364) != typeof document && ('function' == typeof attachEvent ? attachEvent(_0x53cff6(0x25d), _0x3d3f06) : _0x53cff6(0x17d) == typeof addEventListener && addEventListener('onpagehide' in _0x35b5c2 ? _0x53cff6(0x27d) : 'unload', _0x3d3f06, !0x1));
            },
            0x2337: function _(_0x3dadd7, _0x4dedb0, _0x570a6d) {
              var _0x218ae2 = a0_0x107f,
                  _0x1fc880 = _0x570a6d(0x1960),
                  _0x3bc183 = _0x570a6d(0x726),
                  _0x3dcf8e = _0x570a6d(0x1167),
                  _0x16b1d0 = _0x570a6d(0xf15),
                  _0x4b01c0 = _0x570a6d(0x8e9),
                  _0x445853 = _0x570a6d(0x4cb)('engine.io-client:polling');

              _0x3dadd7['exports'] = _0x4a9717;

              var _0x1f45a9 = null != new (_0x570a6d(0xad9))({
                'xdomain': !0x1
              })[_0x218ae2(0x1ed)];

              function _0x4a9717(_0x4e47de) {
                var _0x4e7ac7 = _0x218ae2,
                    _0x396701 = _0x4e47de && _0x4e47de[_0x4e7ac7(0xed)];

                _0x1f45a9 && !_0x396701 || (this[_0x4e7ac7(0x192)] = !0x1), _0x1fc880['call'](this, _0x4e47de);
              }

              _0x16b1d0(_0x4a9717, _0x1fc880), _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x32f)] = 'polling', _0x4a9717[_0x218ae2(0x1b3)]['doOpen'] = function () {
                var _0x51ae04 = _0x218ae2;

                this[_0x51ae04(0x2e9)]();
              }, _0x4a9717[_0x218ae2(0x1b3)]['pause'] = function (_0x5181b6) {
                var _0x2545f6 = _0x218ae2,
                    _0x5651a0 = this;

                function _0x4e08e3() {
                  var _0x490365 = a0_0x107f;
                  _0x445853(_0x490365(0x3ff)), _0x5651a0['readyState'] = _0x490365(0x3ff), _0x5181b6();
                }

                if (this['readyState'] = _0x2545f6(0x104), this[_0x2545f6(0x396)] || !this['writable']) {
                  var _0x5237ca = 0x0;
                  this['polling'] && (_0x445853('we\x20are\x20currently\x20polling\x20-\x20waiting\x20to\x20pause'), _0x5237ca++, this[_0x2545f6(0x319)](_0x2545f6(0x23b), function () {
                    _0x445853('pre-pause\x20polling\x20complete'), --_0x5237ca || _0x4e08e3();
                  })), this[_0x2545f6(0x3d1)] || (_0x445853(_0x2545f6(0x490)), _0x5237ca++, this[_0x2545f6(0x319)](_0x2545f6(0x266), function () {
                    var _0x4f982b = _0x2545f6;
                    _0x445853(_0x4f982b(0xf0)), --_0x5237ca || _0x4e08e3();
                  }));
                } else _0x4e08e3();
              }, _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x2e9)] = function () {
                var _0x123ea3 = _0x218ae2;
                _0x445853(_0x123ea3(0x396)), this[_0x123ea3(0x396)] = !0x0, this['doPoll'](), this[_0x123ea3(0x24e)](_0x123ea3(0x2e9));
              }, _0x4a9717[_0x218ae2(0x1b3)]['onData'] = function (_0x10f191) {
                var _0x5e69ba = _0x218ae2,
                    _0x86f705 = this;

                _0x445853('polling\x20got\x20data\x20%s', _0x10f191), _0x3dcf8e['decodePayload'](_0x10f191, this[_0x5e69ba(0x136)][_0x5e69ba(0x286)], function (_0x310549, _0x4b4287, _0xdaa125) {
                  var _0x471a24 = _0x5e69ba;
                  if (_0x471a24(0x163) === _0x86f705[_0x471a24(0x3d0)] && _0x471a24(0x412) === _0x310549['type'] && _0x86f705[_0x471a24(0x36f)](), _0x471a24(0x166) === _0x310549[_0x471a24(0x156)]) return _0x86f705[_0x471a24(0x449)](), !0x1;

                  _0x86f705['onPacket'](_0x310549);
                }), _0x5e69ba(0x183) !== this['readyState'] && (this['polling'] = !0x1, this[_0x5e69ba(0x24e)](_0x5e69ba(0x23b)), _0x5e69ba(0x412) === this[_0x5e69ba(0x3d0)] ? this['poll']() : _0x445853(_0x5e69ba(0x3b5), this[_0x5e69ba(0x3d0)]));
              }, _0x4a9717[_0x218ae2(0x1b3)][_0x218ae2(0x164)] = function () {
                var _0x125e3d = _0x218ae2,
                    _0xef21e1 = this;

                function _0x4cb8fb() {
                  var _0x557ff6 = a0_0x107f;
                  _0x445853(_0x557ff6(0x388)), _0xef21e1[_0x557ff6(0x4ce)]([{
                    'type': _0x557ff6(0x166)
                  }]);
                }

                _0x125e3d(0x412) === this[_0x125e3d(0x3d0)] ? (_0x445853('transport\x20open\x20-\x20closing'), _0x4cb8fb()) : (_0x445853(_0x125e3d(0x33b)), this['once']('open', _0x4cb8fb));
              }, _0x4a9717[_0x218ae2(0x1b3)]['write'] = function (_0x40efdf) {
                var _0x56e493 = _0x218ae2,
                    _0x144732 = this;

                this[_0x56e493(0x3d1)] = !0x1;

                var _0x58f35a = function _0x58f35a() {
                  var _0x3ceb14 = _0x56e493;
                  _0x144732[_0x3ceb14(0x3d1)] = !0x0, _0x144732['emit'](_0x3ceb14(0x266));
                };

                _0x3dcf8e[_0x56e493(0x3de)](_0x40efdf, this[_0x56e493(0x192)], function (_0x54a003) {
                  var _0x226eb5 = _0x56e493;

                  _0x144732[_0x226eb5(0x408)](_0x54a003, _0x58f35a);
                });
              }, _0x4a9717['prototype'][_0x218ae2(0x2d0)] = function () {
                var _0x30f538 = _0x218ae2,
                    _0x3e856d = this[_0x30f538(0x189)] || {},
                    _0x4bbf83 = this[_0x30f538(0x487)] ? _0x30f538(0x312) : 'http',
                    _0x54d15b = '';

                return !0x1 !== this[_0x30f538(0x153)] && (_0x3e856d[this[_0x30f538(0x4b3)]] = _0x4b01c0()), this['supportsBinary'] || _0x3e856d[_0x30f538(0x36b)] || (_0x3e856d[_0x30f538(0x121)] = 0x1), _0x3e856d = _0x3bc183[_0x30f538(0x263)](_0x3e856d), this[_0x30f538(0x4be)] && (_0x30f538(0x312) === _0x4bbf83 && 0x1bb !== Number(this[_0x30f538(0x4be)]) || _0x30f538(0x15a) === _0x4bbf83 && 0x50 !== Number(this['port'])) && (_0x54d15b = ':' + this['port']), _0x3e856d['length'] && (_0x3e856d = '?' + _0x3e856d), _0x4bbf83 + _0x30f538(0x23a) + (-0x1 !== this[_0x30f538(0x34a)]['indexOf'](':') ? '[' + this[_0x30f538(0x34a)] + ']' : this['hostname']) + _0x54d15b + this[_0x30f538(0x1ad)] + _0x3e856d;
              };
            },
            0x115a: function _(_0x51187c, _0x446418, _0x50d45c) {
              var _0x2e7fb8 = a0_0x107f,
                  _0x3e390c,
                  _0x23ec37,
                  _0x195c3c = _0x50d45c(0x1960),
                  _0x4a7f8f = _0x50d45c(0x1167),
                  _0x4f2576 = _0x50d45c(0x726),
                  _0xc01301 = _0x50d45c(0xf15),
                  _0x5f4bb9 = _0x50d45c(0x8e9),
                  _0x51e332 = _0x50d45c(0x4cb)(_0x2e7fb8(0xfc));

              if (_0x2e7fb8(0x364) != typeof WebSocket ? _0x3e390c = WebSocket : _0x2e7fb8(0x364) != typeof self && (_0x3e390c = self[_0x2e7fb8(0x398)] || self[_0x2e7fb8(0x338)]), _0x2e7fb8(0x364) == typeof window) try {
                _0x23ec37 = _0x50d45c(0x1b6c);
              } catch (_0x1fd111) {}

              var _0x650b34 = _0x3e390c || _0x23ec37;

              function _0x556e8d(_0x5eed98) {
                var _0x5892c9 = _0x2e7fb8;
                _0x5eed98 && _0x5eed98[_0x5892c9(0xed)] && (this[_0x5892c9(0x192)] = !0x1), this['perMessageDeflate'] = _0x5eed98[_0x5892c9(0x2b6)], this[_0x5892c9(0x4ae)] = _0x3e390c && !_0x5eed98['forceNode'], this['protocols'] = _0x5eed98['protocols'], this[_0x5892c9(0x4ae)] || (_0x650b34 = _0x23ec37), _0x195c3c[_0x5892c9(0x229)](this, _0x5eed98);
              }

              _0x51187c[_0x2e7fb8(0x38d)] = _0x556e8d, _0xc01301(_0x556e8d, _0x195c3c), _0x556e8d['prototype']['name'] = 'websocket', _0x556e8d['prototype'][_0x2e7fb8(0x192)] = !0x0, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x1fb)] = function () {
                var _0x141407 = _0x2e7fb8;

                if (this[_0x141407(0x27e)]()) {
                  var _0x1c4899 = this[_0x141407(0x2d0)](),
                      _0x3c86ee = this[_0x141407(0x253)],
                      _0x58824e = {};

                  this[_0x141407(0x17a)] || (_0x58824e[_0x141407(0x3a2)] = this['agent'], _0x58824e[_0x141407(0x2b6)] = this[_0x141407(0x2b6)], _0x58824e['pfx'] = this['pfx'], _0x58824e[_0x141407(0x1a9)] = this[_0x141407(0x1a9)], _0x58824e['passphrase'] = this['passphrase'], _0x58824e[_0x141407(0x1db)] = this[_0x141407(0x1db)], _0x58824e['ca'] = this['ca'], _0x58824e[_0x141407(0x2ac)] = this['ciphers'], _0x58824e[_0x141407(0x19e)] = this[_0x141407(0x19e)]), this[_0x141407(0xf3)] && (_0x58824e[_0x141407(0x31d)] = this[_0x141407(0xf3)]), this[_0x141407(0x2e4)] && (_0x58824e[_0x141407(0x2e4)] = this[_0x141407(0x2e4)]);

                  try {
                    this['ws'] = this['usingBrowserWebSocket'] && !this['isReactNative'] ? _0x3c86ee ? new _0x650b34(_0x1c4899, _0x3c86ee) : new _0x650b34(_0x1c4899) : new _0x650b34(_0x1c4899, _0x3c86ee, _0x58824e);
                  } catch (_0x21b481) {
                    return this[_0x141407(0x24e)]('error', _0x21b481);
                  }

                  void 0x0 === this['ws'][_0x141407(0x286)] && (this[_0x141407(0x192)] = !0x1), this['ws'][_0x141407(0x24a)] && this['ws']['supports'][_0x141407(0x197)] ? (this[_0x141407(0x192)] = !0x0, this['ws']['binaryType'] = 'nodebuffer') : this['ws'][_0x141407(0x286)] = _0x141407(0x1c4), this[_0x141407(0x363)]();
                }
              }, _0x556e8d['prototype']['addEventListeners'] = function () {
                var _0x22c2da = _0x2e7fb8,
                    _0x221ce6 = this;

                this['ws'][_0x22c2da(0x3e5)] = function () {
                  _0x221ce6['onOpen']();
                }, this['ws'][_0x22c2da(0xff)] = function () {
                  var _0x18679f = _0x22c2da;

                  _0x221ce6[_0x18679f(0x449)]();
                }, this['ws'][_0x22c2da(0x100)] = function (_0x11596d) {
                  var _0xa47557 = _0x22c2da;

                  _0x221ce6[_0xa47557(0x2cb)](_0x11596d[_0xa47557(0x1c5)]);
                }, this['ws'][_0x22c2da(0x112)] = function (_0x40259e) {
                  _0x221ce6['onError']('websocket\x20error', _0x40259e);
                };
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x4ce)] = function (_0x20ad5e) {
                var _0x4b9c1b = _0x2e7fb8,
                    _0x368166 = this;

                this['writable'] = !0x1;

                for (var _0x374fb4 = _0x20ad5e[_0x4b9c1b(0x1b1)], _0x182b28 = 0x0, _0xa2b6fb = _0x374fb4; _0x182b28 < _0xa2b6fb; _0x182b28++) !function (_0x13df2b) {
                  var _0x2b6bb6 = _0x4b9c1b;

                  _0x4a7f8f[_0x2b6bb6(0xf5)](_0x13df2b, _0x368166[_0x2b6bb6(0x192)], function (_0x485bd2) {
                    var _0x63bacc = _0x2b6bb6;

                    if (!_0x368166[_0x63bacc(0x4ae)]) {
                      var _0x527b96 = {};
                      _0x13df2b[_0x63bacc(0x1a3)] && (_0x527b96[_0x63bacc(0x473)] = _0x13df2b[_0x63bacc(0x1a3)]['compress']), _0x368166[_0x63bacc(0x2b6)] && ('string' == typeof _0x485bd2 ? Buffer[_0x63bacc(0x3e1)](_0x485bd2) : _0x485bd2[_0x63bacc(0x1b1)]) < _0x368166[_0x63bacc(0x2b6)][_0x63bacc(0x219)] && (_0x527b96[_0x63bacc(0x473)] = !0x1);
                    }

                    try {
                      _0x368166[_0x63bacc(0x4ae)] ? _0x368166['ws'][_0x63bacc(0x262)](_0x485bd2) : _0x368166['ws'][_0x63bacc(0x262)](_0x485bd2, _0x527b96);
                    } catch (_0x8d944a) {
                      _0x51e332('websocket\x20closed\x20before\x20onclose\x20event');
                    }

                    --_0x374fb4 || (_0x368166[_0x63bacc(0x24e)](_0x63bacc(0x413)), setTimeout(function () {
                      var _0x5e1f3b = _0x63bacc;
                      _0x368166[_0x5e1f3b(0x3d1)] = !0x0, _0x368166['emit'](_0x5e1f3b(0x266));
                    }, 0x0));
                  });
                }(_0x20ad5e[_0x182b28]);
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x449)] = function () {
                var _0x3b0dec = _0x2e7fb8;

                _0x195c3c[_0x3b0dec(0x1b3)][_0x3b0dec(0x449)][_0x3b0dec(0x229)](this);
              }, _0x556e8d[_0x2e7fb8(0x1b3)]['doClose'] = function () {
                var _0x3a5f69 = _0x2e7fb8;
                void 0x0 !== this['ws'] && this['ws'][_0x3a5f69(0x166)]();
              }, _0x556e8d[_0x2e7fb8(0x1b3)][_0x2e7fb8(0x2d0)] = function () {
                var _0x22ba13 = _0x2e7fb8,
                    _0x5ae1c7 = this['query'] || {},
                    _0x4d337d = this[_0x22ba13(0x487)] ? 'wss' : 'ws',
                    _0x6f9c10 = '';

                return this[_0x22ba13(0x4be)] && (_0x22ba13(0x429) === _0x4d337d && 0x1bb !== Number(this[_0x22ba13(0x4be)]) || 'ws' === _0x4d337d && 0x50 !== Number(this[_0x22ba13(0x4be)])) && (_0x6f9c10 = ':' + this[_0x22ba13(0x4be)]), this['timestampRequests'] && (_0x5ae1c7[this[_0x22ba13(0x4b3)]] = _0x5f4bb9()), this[_0x22ba13(0x192)] || (_0x5ae1c7[_0x22ba13(0x121)] = 0x1), (_0x5ae1c7 = _0x4f2576['encode'](_0x5ae1c7))[_0x22ba13(0x1b1)] && (_0x5ae1c7 = '?' + _0x5ae1c7), _0x4d337d + _0x22ba13(0x23a) + (-0x1 !== this['hostname'][_0x22ba13(0x22a)](':') ? '[' + this[_0x22ba13(0x34a)] + ']' : this[_0x22ba13(0x34a)]) + _0x6f9c10 + this[_0x22ba13(0x1ad)] + _0x5ae1c7;
              }, _0x556e8d['prototype'][_0x2e7fb8(0x27e)] = function () {
                var _0xc19bb6 = _0x2e7fb8;
                return !(!_0x650b34 || _0xc19bb6(0x311) in _0x650b34 && this[_0xc19bb6(0x32f)] === _0x556e8d[_0xc19bb6(0x1b3)]['name']);
              };
            },
            0xad9: function _(_0x4c4ef8, _0x5ed5d3, _0x42b152) {
              var _0x58553a = a0_0x107f,
                  _0x4ded18 = _0x42b152(0x1f7a),
                  _0x29741d = _0x42b152(0xddd);

              _0x4c4ef8[_0x58553a(0x38d)] = function (_0x127856) {
                var _0x322a11 = _0x58553a,
                    _0x1058b6 = _0x127856['xdomain'],
                    _0x88800e = _0x127856[_0x322a11(0x480)],
                    _0x55f3b6 = _0x127856[_0x322a11(0x403)];

                try {
                  if (_0x322a11(0x364) != typeof XMLHttpRequest && (!_0x1058b6 || _0x4ded18)) return new XMLHttpRequest();
                } catch (_0x80dc1d) {}

                try {
                  if ('undefined' != typeof XDomainRequest && !_0x88800e && _0x55f3b6) return new XDomainRequest();
                } catch (_0x2c3f4d) {}

                if (!_0x1058b6) try {
                  return new _0x29741d[[_0x322a11(0x498)][_0x322a11(0x23c)](_0x322a11(0x4d0))[_0x322a11(0x2b4)]('X')](_0x322a11(0x43b));
                } catch (_0x4d92b1) {}
              };
            },
            0x1167: function _(_0x5c08b2, _0x1820cf, _0x50d8e2) {
              var _0x5df7ec = a0_0x107f,
                  _0x49ce19,
                  _0x15d63a = _0x50d8e2(0x1f36),
                  _0x224b8d = _0x50d8e2(0xd8a),
                  _0x675352 = _0x50d8e2(0x25f6),
                  _0x1aa41d = _0x50d8e2(0x1afa),
                  _0x8b404a = _0x50d8e2(0xd56);

              _0x5df7ec(0x364) != typeof ArrayBuffer && (_0x49ce19 = _0x50d8e2(0xe78));

              var _0x863378 = 'undefined' != typeof navigator && /Android/i['test'](navigator[_0x5df7ec(0x323)]),
                  _0x49d27b = _0x5df7ec(0x364) != typeof navigator && /PhantomJS/i[_0x5df7ec(0x4c7)](navigator[_0x5df7ec(0x323)]),
                  _0x256d71 = _0x863378 || _0x49d27b;

              _0x1820cf[_0x5df7ec(0x1c7)] = 0x3;

              var _0x2c148e = _0x1820cf['packets'] = {
                'open': 0x0,
                'close': 0x1,
                'ping': 0x2,
                'pong': 0x3,
                'message': 0x4,
                'upgrade': 0x5,
                'noop': 0x6
              },
                  _0xa94474 = _0x15d63a(_0x2c148e),
                  _0x561b5e = {
                'type': _0x5df7ec(0x122),
                'data': _0x5df7ec(0x3f6)
              },
                  _0xa50d65 = _0x50d8e2(0x15ac);

              function _0x25f64f(_0x241f89, _0x1a3dcc, _0x4a5f58) {
                var _0xccbea1 = _0x5df7ec;

                for (var _0x2a3972 = new Array(_0x241f89[_0xccbea1(0x1b1)]), _0x1ee483 = _0x1aa41d(_0x241f89[_0xccbea1(0x1b1)], _0x4a5f58), _0x54917a = function _0x54917a(_0x2c7fa3, _0x5f53cf, _0x36390b) {
                  _0x1a3dcc(_0x5f53cf, function (_0x206eba, _0x1def01) {
                    _0x2a3972[_0x2c7fa3] = _0x1def01, _0x36390b(_0x206eba, _0x2a3972);
                  });
                }, _0x8304a6 = 0x0; _0x8304a6 < _0x241f89[_0xccbea1(0x1b1)]; _0x8304a6++) _0x54917a(_0x8304a6, _0x241f89[_0x8304a6], _0x1ee483);
              }

              _0x1820cf[_0x5df7ec(0xf5)] = function (_0xe1a0c2, _0x170a2b, _0x830791, _0x447cd9) {
                var _0x1601e7 = _0x5df7ec;
                _0x1601e7(0x17d) == typeof _0x170a2b && (_0x447cd9 = _0x170a2b, _0x170a2b = !0x1), _0x1601e7(0x17d) == typeof _0x830791 && (_0x447cd9 = _0x830791, _0x830791 = null);

                var _0x4cca95 = void 0x0 === _0xe1a0c2[_0x1601e7(0x1c5)] ? void 0x0 : _0xe1a0c2[_0x1601e7(0x1c5)][_0x1601e7(0x314)] || _0xe1a0c2[_0x1601e7(0x1c5)];

                if (_0x1601e7(0x364) != typeof ArrayBuffer && _0x4cca95 instanceof ArrayBuffer) return function (_0x217052, _0x579cd0, _0x12e1db) {
                  var _0x3d7d8f = _0x1601e7;
                  if (!_0x579cd0) return _0x1820cf[_0x3d7d8f(0x259)](_0x217052, _0x12e1db);

                  var _0x1b940c = _0x217052[_0x3d7d8f(0x1c5)],
                      _0x44ec35 = new Uint8Array(_0x1b940c),
                      _0x41181a = new Uint8Array(0x1 + _0x1b940c[_0x3d7d8f(0x3e1)]);

                  _0x41181a[0x0] = _0x2c148e[_0x217052[_0x3d7d8f(0x156)]];

                  for (var _0x20e234 = 0x0; _0x20e234 < _0x44ec35[_0x3d7d8f(0x1b1)]; _0x20e234++) _0x41181a[_0x20e234 + 0x1] = _0x44ec35[_0x20e234];

                  return _0x12e1db(_0x41181a[_0x3d7d8f(0x314)]);
                }(_0xe1a0c2, _0x170a2b, _0x447cd9);
                if (void 0x0 !== _0xa50d65 && _0x4cca95 instanceof _0xa50d65) return function (_0x4d0f8c, _0x25ec67, _0x20c768) {
                  var _0x2aebbb = _0x1601e7;
                  if (!_0x25ec67) return _0x1820cf[_0x2aebbb(0x259)](_0x4d0f8c, _0x20c768);
                  if (_0x256d71) return function (_0x101601, _0x1dbade, _0x541878) {
                    var _0x4cab58 = _0x2aebbb;
                    if (!_0x1dbade) return _0x1820cf[_0x4cab58(0x259)](_0x101601, _0x541878);

                    var _0x56d751 = new FileReader();

                    return _0x56d751[_0x4cab58(0x18e)] = function () {
                      var _0x45b6f1 = _0x4cab58;

                      _0x1820cf[_0x45b6f1(0xf5)]({
                        'type': _0x101601[_0x45b6f1(0x156)],
                        'data': _0x56d751[_0x45b6f1(0x1c0)]
                      }, _0x1dbade, !0x0, _0x541878);
                    }, _0x56d751[_0x4cab58(0x4a8)](_0x101601[_0x4cab58(0x1c5)]);
                  }(_0x4d0f8c, _0x25ec67, _0x20c768);

                  var _0x46f225 = new Uint8Array(0x1);

                  return _0x46f225[0x0] = _0x2c148e[_0x4d0f8c[_0x2aebbb(0x156)]], _0x20c768(new _0xa50d65([_0x46f225[_0x2aebbb(0x314)], _0x4d0f8c[_0x2aebbb(0x1c5)]]));
                }(_0xe1a0c2, _0x170a2b, _0x447cd9);
                if (_0x4cca95 && _0x4cca95[_0x1601e7(0x275)]) return function (_0x4511c0, _0x48025c) {
                  var _0x25f69a = _0x1601e7;
                  return _0x48025c('b' + _0x1820cf[_0x25f69a(0x3c8)][_0x4511c0[_0x25f69a(0x156)]] + _0x4511c0[_0x25f69a(0x1c5)][_0x25f69a(0x1c5)]);
                }(_0xe1a0c2, _0x447cd9);
                var _0x159d93 = _0x2c148e[_0xe1a0c2['type']];
                return void 0x0 !== _0xe1a0c2[_0x1601e7(0x1c5)] && (_0x159d93 += _0x830791 ? _0x8b404a['encode'](String(_0xe1a0c2[_0x1601e7(0x1c5)]), {
                  'strict': !0x1
                }) : String(_0xe1a0c2['data'])), _0x447cd9('' + _0x159d93);
              }, _0x1820cf[_0x5df7ec(0x259)] = function (_0x56dd20, _0x5a2835) {
                var _0x48abd4 = _0x5df7ec,
                    _0xe45070,
                    _0x388aae = 'b' + _0x1820cf[_0x48abd4(0x3c8)][_0x56dd20[_0x48abd4(0x156)]];

                if (void 0x0 !== _0xa50d65 && _0x56dd20['data'] instanceof _0xa50d65) {
                  var _0x5e20b4 = new FileReader();

                  return _0x5e20b4[_0x48abd4(0x18e)] = function () {
                    var _0x9a6f0 = _0x48abd4,
                        _0xf83e11 = _0x5e20b4[_0x9a6f0(0x1c0)][_0x9a6f0(0x460)](',')[0x1];

                    _0x5a2835(_0x388aae + _0xf83e11);
                  }, _0x5e20b4[_0x48abd4(0x1ef)](_0x56dd20[_0x48abd4(0x1c5)]);
                }

                try {
                  _0xe45070 = String[_0x48abd4(0x290)]['apply'](null, new Uint8Array(_0x56dd20[_0x48abd4(0x1c5)]));
                } catch (_0x685384) {
                  for (var _0x2f4150 = new Uint8Array(_0x56dd20[_0x48abd4(0x1c5)]), _0x13bccd = new Array(_0x2f4150[_0x48abd4(0x1b1)]), _0x44c095 = 0x0; _0x44c095 < _0x2f4150[_0x48abd4(0x1b1)]; _0x44c095++) _0x13bccd[_0x44c095] = _0x2f4150[_0x44c095];

                  _0xe45070 = String[_0x48abd4(0x290)]['apply'](null, _0x13bccd);
                }

                return _0x388aae += btoa(_0xe45070), _0x5a2835(_0x388aae);
              }, _0x1820cf[_0x5df7ec(0x2f5)] = function (_0x266531, _0x21b646, _0x50559e) {
                var _0xc9d663 = _0x5df7ec;
                if (void 0x0 === _0x266531) return _0x561b5e;

                if ('string' == typeof _0x266531) {
                  if ('b' === _0x266531[_0xc9d663(0x144)](0x0)) return _0x1820cf[_0xc9d663(0x4d1)](_0x266531[_0xc9d663(0x40e)](0x1), _0x21b646);
                  if (_0x50559e && !0x1 === (_0x266531 = function (_0x425d68) {
                    var _0x1c09ab = _0xc9d663;

                    try {
                      _0x425d68 = _0x8b404a[_0x1c09ab(0x3f1)](_0x425d68, {
                        'strict': !0x1
                      });
                    } catch (_0xd0fc68) {
                      return !0x1;
                    }

                    return _0x425d68;
                  }(_0x266531))) return _0x561b5e;

                  var _0x565681 = _0x266531[_0xc9d663(0x144)](0x0);

                  return Number(_0x565681) == _0x565681 && _0xa94474[_0x565681] ? _0x266531[_0xc9d663(0x1b1)] > 0x1 ? {
                    'type': _0xa94474[_0x565681],
                    'data': _0x266531[_0xc9d663(0x4a5)](0x1)
                  } : {
                    'type': _0xa94474[_0x565681]
                  } : _0x561b5e;
                }

                _0x565681 = new Uint8Array(_0x266531)[0x0];

                var _0x13b18d = _0x675352(_0x266531, 0x1);

                return _0xa50d65 && _0xc9d663(0x2f1) === _0x21b646 && (_0x13b18d = new _0xa50d65([_0x13b18d])), {
                  'type': _0xa94474[_0x565681],
                  'data': _0x13b18d
                };
              }, _0x1820cf[_0x5df7ec(0x4d1)] = function (_0x24a552, _0x4458cc) {
                var _0x3746e3 = _0x5df7ec,
                    _0x297e60 = _0xa94474[_0x24a552[_0x3746e3(0x144)](0x0)];

                if (!_0x49ce19) return {
                  'type': _0x297e60,
                  'data': {
                    'base64': !0x0,
                    'data': _0x24a552[_0x3746e3(0x40e)](0x1)
                  }
                };

                var _0x12347c = _0x49ce19['decode'](_0x24a552['substr'](0x1));

                return _0x3746e3(0x2f1) === _0x4458cc && _0xa50d65 && (_0x12347c = new _0xa50d65([_0x12347c])), {
                  'type': _0x297e60,
                  'data': _0x12347c
                };
              }, _0x1820cf[_0x5df7ec(0x3de)] = function (_0x3e50f6, _0x441068, _0x4e87a6) {
                var _0x1eb818 = _0x5df7ec;
                _0x1eb818(0x17d) == typeof _0x441068 && (_0x4e87a6 = _0x441068, _0x441068 = null);

                var _0x4eb078 = _0x224b8d(_0x3e50f6);

                return _0x441068 && _0x4eb078 ? _0xa50d65 && !_0x256d71 ? _0x1820cf['encodePayloadAsBlob'](_0x3e50f6, _0x4e87a6) : _0x1820cf[_0x1eb818(0x206)](_0x3e50f6, _0x4e87a6) : _0x3e50f6[_0x1eb818(0x1b1)] ? void _0x25f64f(_0x3e50f6, function (_0x585a7e, _0x2645bf) {
                  var _0x2bd108 = _0x1eb818;

                  _0x1820cf[_0x2bd108(0xf5)](_0x585a7e, !!_0x4eb078 && _0x441068, !0x1, function (_0x3f72f7) {
                    _0x2645bf(null, function (_0x1a362a) {
                      var _0x32cb12 = a0_0x107f;
                      return _0x1a362a[_0x32cb12(0x1b1)] + ':' + _0x1a362a;
                    }(_0x3f72f7));
                  });
                }, function (_0x89a6, _0x3914cb) {
                  return _0x4e87a6(_0x3914cb['join'](''));
                }) : _0x4e87a6('0:');
              }, _0x1820cf[_0x5df7ec(0x1b8)] = function (_0x5da84a, _0x4e1d44, _0x153e54) {
                var _0x2b885c = _0x5df7ec;
                if (_0x2b885c(0x268) != typeof _0x5da84a) return _0x1820cf['decodePayloadAsBinary'](_0x5da84a, _0x4e1d44, _0x153e54);

                var _0x1e06d1;

                if (_0x2b885c(0x17d) == typeof _0x4e1d44 && (_0x153e54 = _0x4e1d44, _0x4e1d44 = null), '' === _0x5da84a) return _0x153e54(_0x561b5e, 0x0, 0x1);

                for (var _0x59f047, _0x1d5b70, _0x337f85 = '', _0x1f6582 = 0x0, _0x489efb = _0x5da84a[_0x2b885c(0x1b1)]; _0x1f6582 < _0x489efb; _0x1f6582++) {
                  var _0x26174e = _0x5da84a[_0x2b885c(0x144)](_0x1f6582);

                  if (':' === _0x26174e) {
                    if ('' === _0x337f85 || _0x337f85 != (_0x59f047 = Number(_0x337f85))) return _0x153e54(_0x561b5e, 0x0, 0x1);
                    if (_0x337f85 != (_0x1d5b70 = _0x5da84a[_0x2b885c(0x40e)](_0x1f6582 + 0x1, _0x59f047))[_0x2b885c(0x1b1)]) return _0x153e54(_0x561b5e, 0x0, 0x1);

                    if (_0x1d5b70[_0x2b885c(0x1b1)]) {
                      if (_0x1e06d1 = _0x1820cf[_0x2b885c(0x2f5)](_0x1d5b70, _0x4e1d44, !0x1), _0x561b5e[_0x2b885c(0x156)] === _0x1e06d1['type'] && _0x561b5e[_0x2b885c(0x1c5)] === _0x1e06d1['data']) return _0x153e54(_0x561b5e, 0x0, 0x1);
                      if (!0x1 === _0x153e54(_0x1e06d1, _0x1f6582 + _0x59f047, _0x489efb)) return;
                    }

                    _0x1f6582 += _0x59f047, _0x337f85 = '';
                  } else _0x337f85 += _0x26174e;
                }

                return '' !== _0x337f85 ? _0x153e54(_0x561b5e, 0x0, 0x1) : void 0x0;
              }, _0x1820cf[_0x5df7ec(0x206)] = function (_0x4d857d, _0x570a88) {
                if (!_0x4d857d['length']) return _0x570a88(new ArrayBuffer(0x0));

                _0x25f64f(_0x4d857d, function (_0xbe5fa5, _0x458922) {
                  _0x1820cf['encodePacket'](_0xbe5fa5, !0x0, !0x0, function (_0x13efac) {
                    return _0x458922(null, _0x13efac);
                  });
                }, function (_0x522675, _0x51e3e3) {
                  var _0x4fd578 = a0_0x107f,
                      _0x3e3a31 = _0x51e3e3[_0x4fd578(0x225)](function (_0x121bca, _0x2b9681) {
                    var _0x54351e = _0x4fd578,
                        _0x1c5fd9;

                    return _0x121bca + (_0x1c5fd9 = _0x54351e(0x268) == typeof _0x2b9681 ? _0x2b9681[_0x54351e(0x1b1)] : _0x2b9681[_0x54351e(0x3e1)])[_0x54351e(0x436)]()[_0x54351e(0x1b1)] + _0x1c5fd9 + 0x2;
                  }, 0x0),
                      _0x4d845c = new Uint8Array(_0x3e3a31),
                      _0x370174 = 0x0;

                  return _0x51e3e3[_0x4fd578(0x293)](function (_0x9cf7f0) {
                    var _0x4cf6c9 = _0x4fd578,
                        _0x122a9e = _0x4cf6c9(0x268) == typeof _0x9cf7f0,
                        _0x45f24b = _0x9cf7f0;

                    if (_0x122a9e) {
                      for (var _0x43a2b1 = new Uint8Array(_0x9cf7f0['length']), _0x2a660f = 0x0; _0x2a660f < _0x9cf7f0['length']; _0x2a660f++) _0x43a2b1[_0x2a660f] = _0x9cf7f0[_0x4cf6c9(0x309)](_0x2a660f);

                      _0x45f24b = _0x43a2b1['buffer'];
                    }

                    _0x4d845c[_0x370174++] = _0x122a9e ? 0x0 : 0x1;

                    var _0x400f60 = _0x45f24b['byteLength'][_0x4cf6c9(0x436)]();

                    for (_0x2a660f = 0x0; _0x2a660f < _0x400f60['length']; _0x2a660f++) _0x4d845c[_0x370174++] = parseInt(_0x400f60[_0x2a660f]);

                    for (_0x4d845c[_0x370174++] = 0xff, _0x43a2b1 = new Uint8Array(_0x45f24b), _0x2a660f = 0x0; _0x2a660f < _0x43a2b1[_0x4cf6c9(0x1b1)]; _0x2a660f++) _0x4d845c[_0x370174++] = _0x43a2b1[_0x2a660f];
                  }), _0x570a88(_0x4d845c[_0x4fd578(0x314)]);
                });
              }, _0x1820cf[_0x5df7ec(0x37d)] = function (_0x14a0ef, _0x5abad6) {
                _0x25f64f(_0x14a0ef, function (_0x4a7c5c, _0x2deaf4) {
                  var _0x1efe0d = a0_0x107f;

                  _0x1820cf[_0x1efe0d(0xf5)](_0x4a7c5c, !0x0, !0x0, function (_0x5ba61a) {
                    var _0x448caf = _0x1efe0d,
                        _0x4b98ff = new Uint8Array(0x1);

                    if (_0x4b98ff[0x0] = 0x1, _0x448caf(0x268) == typeof _0x5ba61a) {
                      for (var _0x8461e0 = new Uint8Array(_0x5ba61a['length']), _0x3bd430 = 0x0; _0x3bd430 < _0x5ba61a[_0x448caf(0x1b1)]; _0x3bd430++) _0x8461e0[_0x3bd430] = _0x5ba61a['charCodeAt'](_0x3bd430);

                      _0x5ba61a = _0x8461e0[_0x448caf(0x314)], _0x4b98ff[0x0] = 0x0;
                    }

                    var _0x121e44 = (_0x5ba61a instanceof ArrayBuffer ? _0x5ba61a[_0x448caf(0x3e1)] : _0x5ba61a[_0x448caf(0x318)])['toString'](),
                        _0x52074c = new Uint8Array(_0x121e44['length'] + 0x1);

                    for (_0x3bd430 = 0x0; _0x3bd430 < _0x121e44[_0x448caf(0x1b1)]; _0x3bd430++) _0x52074c[_0x3bd430] = parseInt(_0x121e44[_0x3bd430]);

                    if (_0x52074c[_0x121e44['length']] = 0xff, _0xa50d65) {
                      var _0x4f7375 = new _0xa50d65([_0x4b98ff['buffer'], _0x52074c[_0x448caf(0x314)], _0x5ba61a]);

                      _0x2deaf4(null, _0x4f7375);
                    }
                  });
                }, function (_0x4593e3, _0x26bad7) {
                  return _0x5abad6(new _0xa50d65(_0x26bad7));
                });
              }, _0x1820cf[_0x5df7ec(0x21f)] = function (_0x15bf3c, _0x27c128, _0x4b34c4) {
                var _0x3b85b2 = _0x5df7ec;
                _0x3b85b2(0x17d) == typeof _0x27c128 && (_0x4b34c4 = _0x27c128, _0x27c128 = null);

                for (var _0x395f8e = _0x15bf3c, _0x324498 = []; _0x395f8e[_0x3b85b2(0x3e1)] > 0x0;) {
                  for (var _0xcb57e9 = new Uint8Array(_0x395f8e), _0x344a55 = 0x0 === _0xcb57e9[0x0], _0x47a847 = '', _0x26ffd9 = 0x1; 0xff !== _0xcb57e9[_0x26ffd9]; _0x26ffd9++) {
                    if (_0x47a847[_0x3b85b2(0x1b1)] > 0x136) return _0x4b34c4(_0x561b5e, 0x0, 0x1);
                    _0x47a847 += _0xcb57e9[_0x26ffd9];
                  }

                  _0x395f8e = _0x675352(_0x395f8e, 0x2 + _0x47a847['length']), _0x47a847 = parseInt(_0x47a847);

                  var _0x18e5b0 = _0x675352(_0x395f8e, 0x0, _0x47a847);

                  if (_0x344a55) try {
                    _0x18e5b0 = String[_0x3b85b2(0x290)]['apply'](null, new Uint8Array(_0x18e5b0));
                  } catch (_0x4adfff) {
                    var _0x2a5172 = new Uint8Array(_0x18e5b0);

                    for (_0x18e5b0 = '', _0x26ffd9 = 0x0; _0x26ffd9 < _0x2a5172[_0x3b85b2(0x1b1)]; _0x26ffd9++) _0x18e5b0 += String[_0x3b85b2(0x290)](_0x2a5172[_0x26ffd9]);
                  }
                  _0x324498[_0x3b85b2(0x41c)](_0x18e5b0), _0x395f8e = _0x675352(_0x395f8e, _0x47a847);
                }

                var _0x591fc9 = _0x324498['length'];

                _0x324498[_0x3b85b2(0x293)](function (_0x31614c, _0x4702e0) {
                  var _0x49a292 = _0x3b85b2;

                  _0x4b34c4(_0x1820cf[_0x49a292(0x2f5)](_0x31614c, _0x27c128, !0x0), _0x4702e0, _0x591fc9);
                });
              };
            },
            0x1f36: function _(_0xee388b) {
              var _0x53f5f6 = a0_0x107f;

              _0xee388b[_0x53f5f6(0x38d)] = Object[_0x53f5f6(0x44d)] || function (_0x398c78) {
                var _0x1c189d = _0x53f5f6,
                    _0x27b5f1 = [],
                    _0x3afd47 = Object[_0x1c189d(0x1b3)][_0x1c189d(0x32a)];

                for (var _0xfc246 in _0x398c78) _0x3afd47[_0x1c189d(0x229)](_0x398c78, _0xfc246) && _0x27b5f1[_0x1c189d(0x41c)](_0xfc246);

                return _0x27b5f1;
              };
            },
            0xd56: function _(_0x1ac269) {
              var _0x565c6a = a0_0x107f,
                  _0x164e52,
                  _0x2e49ae,
                  _0x233d88,
                  _0xa1fb00 = String[_0x565c6a(0x290)];

              function _0x54c980(_0x325ac3) {
                var _0x5d5d91 = _0x565c6a;

                for (var _0x262d3d, _0xf85ba4, _0xf757e7 = [], _0x78d04a = 0x0, _0x2e398f = _0x325ac3[_0x5d5d91(0x1b1)]; _0x78d04a < _0x2e398f;) (_0x262d3d = _0x325ac3['charCodeAt'](_0x78d04a++)) >= 0xd800 && _0x262d3d <= 0xdbff && _0x78d04a < _0x2e398f ? 0xdc00 == (0xfc00 & (_0xf85ba4 = _0x325ac3['charCodeAt'](_0x78d04a++))) ? _0xf757e7[_0x5d5d91(0x41c)](((0x3ff & _0x262d3d) << 0xa) + (0x3ff & _0xf85ba4) + 0x10000) : (_0xf757e7[_0x5d5d91(0x41c)](_0x262d3d), _0x78d04a--) : _0xf757e7[_0x5d5d91(0x41c)](_0x262d3d);

                return _0xf757e7;
              }

              function _0x4b7e5e(_0x18d514, _0x6563da) {
                var _0x12a7e3 = _0x565c6a;

                if (_0x18d514 >= 0xd800 && _0x18d514 <= 0xdfff) {
                  if (_0x6563da) throw Error(_0x12a7e3(0x3c7) + _0x18d514[_0x12a7e3(0x436)](0x10)[_0x12a7e3(0x10c)]() + _0x12a7e3(0x32b));
                  return !0x1;
                }

                return !0x0;
              }

              function _0x5e9427(_0x11bec4, _0x4d3f7f) {
                return _0xa1fb00(_0x11bec4 >> _0x4d3f7f & 0x3f | 0x80);
              }

              function _0x26d0e8(_0x34f1b8, _0x30988f) {
                if (0x0 == (0xffffff80 & _0x34f1b8)) return _0xa1fb00(_0x34f1b8);
                var _0x15bea2 = '';
                return 0x0 == (0xfffff800 & _0x34f1b8) ? _0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0x6 & 0x1f | 0xc0) : 0x0 == (0xffff0000 & _0x34f1b8) ? (_0x4b7e5e(_0x34f1b8, _0x30988f) || (_0x34f1b8 = 0xfffd), _0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0xc & 0xf | 0xe0), _0x15bea2 += _0x5e9427(_0x34f1b8, 0x6)) : 0x0 == (0xffe00000 & _0x34f1b8) && (_0x15bea2 = _0xa1fb00(_0x34f1b8 >> 0x12 & 0x7 | 0xf0), _0x15bea2 += _0x5e9427(_0x34f1b8, 0xc), _0x15bea2 += _0x5e9427(_0x34f1b8, 0x6)), _0x15bea2 + _0xa1fb00(0x3f & _0x34f1b8 | 0x80);
              }

              function _0x25944f() {
                var _0x3631ab = _0x565c6a;
                if (_0x233d88 >= _0x2e49ae) throw Error(_0x3631ab(0x3c5));

                var _0x9bffc6 = 0xff & _0x164e52[_0x233d88];

                if (_0x233d88++, 0x80 == (0xc0 & _0x9bffc6)) return 0x3f & _0x9bffc6;
                throw Error(_0x3631ab(0x1ec));
              }

              function _0xfcd7aa(_0x369730) {
                var _0x5bdb47 = _0x565c6a,
                    _0x39dbb2,
                    _0x16cc2e;

                if (_0x233d88 > _0x2e49ae) throw Error(_0x5bdb47(0x3c5));
                if (_0x233d88 == _0x2e49ae) return !0x1;
                if (_0x39dbb2 = 0xff & _0x164e52[_0x233d88], _0x233d88++, 0x0 == (0x80 & _0x39dbb2)) return _0x39dbb2;

                if (0xc0 == (0xe0 & _0x39dbb2)) {
                  if ((_0x16cc2e = (0x1f & _0x39dbb2) << 0x6 | _0x25944f()) >= 0x80) return _0x16cc2e;
                  throw Error(_0x5bdb47(0x1ec));
                }

                if (0xe0 == (0xf0 & _0x39dbb2)) {
                  if ((_0x16cc2e = (0xf & _0x39dbb2) << 0xc | _0x25944f() << 0x6 | _0x25944f()) >= 0x800) return _0x4b7e5e(_0x16cc2e, _0x369730) ? _0x16cc2e : 0xfffd;
                  throw Error(_0x5bdb47(0x1ec));
                }

                if (0xf0 == (0xf8 & _0x39dbb2) && (_0x16cc2e = (0x7 & _0x39dbb2) << 0x12 | _0x25944f() << 0xc | _0x25944f() << 0x6 | _0x25944f()) >= 0x10000 && _0x16cc2e <= 0x10ffff) return _0x16cc2e;
                throw Error(_0x5bdb47(0x381));
              }

              _0x1ac269['exports'] = {
                'version': _0x565c6a(0x38c),
                'encode': function encode(_0x47c10b, _0x552ec3) {
                  var _0x306862 = _0x565c6a;

                  for (var _0x2ec935 = !0x1 !== (_0x552ec3 = _0x552ec3 || {})[_0x306862(0x3c1)], _0x53e8b1 = _0x54c980(_0x47c10b), _0xece1d7 = _0x53e8b1[_0x306862(0x1b1)], _0x2ff167 = -0x1, _0x518aa2 = ''; ++_0x2ff167 < _0xece1d7;) _0x518aa2 += _0x26d0e8(_0x53e8b1[_0x2ff167], _0x2ec935);

                  return _0x518aa2;
                },
                'decode': function decode(_0x3252e4, _0x291ac6) {
                  var _0x91153d = _0x565c6a,
                      _0x13a79a = !0x1 !== (_0x291ac6 = _0x291ac6 || {})[_0x91153d(0x3c1)];

                  _0x164e52 = _0x54c980(_0x3252e4), _0x2e49ae = _0x164e52[_0x91153d(0x1b1)], _0x233d88 = 0x0;

                  for (var _0x228652, _0x4486af = []; !0x1 !== (_0x228652 = _0xfcd7aa(_0x13a79a));) _0x4486af[_0x91153d(0x41c)](_0x228652);

                  return function (_0x59ebd8) {
                    var _0xd9deda = _0x91153d;

                    for (var _0x23c0e0, _0x20e88a = _0x59ebd8[_0xd9deda(0x1b1)], _0x4efa4a = -0x1, _0x2a1258 = ''; ++_0x4efa4a < _0x20e88a;) (_0x23c0e0 = _0x59ebd8[_0x4efa4a]) > 0xffff && (_0x2a1258 += _0xa1fb00((_0x23c0e0 -= 0x10000) >>> 0xa & 0x3ff | 0xd800), _0x23c0e0 = 0xdc00 | 0x3ff & _0x23c0e0), _0x2a1258 += _0xa1fb00(_0x23c0e0);

                    return _0x2a1258;
                  }(_0x4486af);
                }
              };
            },
            0x1c13: function _(_0xe85f6) {
              var _0x17388d = a0_0x107f;

              var _0x49ca49,
                  _0x3ffb9d = _0x17388d(0x33c) == typeof Reflect ? Reflect : null,
                  _0xaaa83d = _0x3ffb9d && _0x17388d(0x17d) == typeof _0x3ffb9d[_0x17388d(0x394)] ? _0x3ffb9d[_0x17388d(0x394)] : function (_0x10c1ca, _0x27fd13, _0x45e90a) {
                var _0x7dec58 = _0x17388d;
                return Function[_0x7dec58(0x1b3)]['apply'][_0x7dec58(0x229)](_0x10c1ca, _0x27fd13, _0x45e90a);
              };

              _0x49ca49 = _0x3ffb9d && _0x17388d(0x17d) == typeof _0x3ffb9d[_0x17388d(0x28b)] ? _0x3ffb9d[_0x17388d(0x28b)] : Object[_0x17388d(0x1c6)] ? function (_0x5ed035) {
                var _0x4da747 = _0x17388d;
                return Object[_0x4da747(0x2c4)](_0x5ed035)[_0x4da747(0x23c)](Object[_0x4da747(0x1c6)](_0x5ed035));
              } : function (_0x440c92) {
                var _0x5226a7 = _0x17388d;
                return Object[_0x5226a7(0x2c4)](_0x440c92);
              };

              var _0x4430d4 = Number['isNaN'] || function (_0x4cb7af) {
                return _0x4cb7af != _0x4cb7af;
              };

              function _0x5d8fb5() {
                var _0x2ffa76 = _0x17388d;

                _0x5d8fb5[_0x2ffa76(0x150)][_0x2ffa76(0x229)](this);
              }

              _0xe85f6[_0x17388d(0x38d)] = _0x5d8fb5, _0xe85f6[_0x17388d(0x38d)][_0x17388d(0x319)] = function (_0x4e74a5, _0x237563) {
                return new Promise(function (_0x1b168c, _0x3798e5) {
                  var _0x46bcbe = a0_0x107f;

                  function _0x38f743(_0x509edf) {
                    var _0x5a101 = a0_0x107f;
                    _0x4e74a5[_0x5a101(0x198)](_0x237563, _0x4ef860), _0x3798e5(_0x509edf);
                  }

                  function _0x4ef860() {
                    var _0x105df9 = a0_0x107f;
                    _0x105df9(0x17d) == typeof _0x4e74a5[_0x105df9(0x198)] && _0x4e74a5[_0x105df9(0x198)]('error', _0x38f743), _0x1b168c([][_0x105df9(0x389)]['call'](arguments));
                  }

                  _0x546ef1(_0x4e74a5, _0x237563, _0x4ef860, {
                    'once': !0x0
                  }), _0x46bcbe(0x122) !== _0x237563 && function (_0x1276ee, _0x34b523, _0x55458f) {
                    var _0x1c4b0e = _0x46bcbe;
                    _0x1c4b0e(0x17d) == typeof _0x1276ee['on'] && _0x546ef1(_0x1276ee, _0x1c4b0e(0x122), _0x34b523, {
                      'once': !0x0
                    });
                  }(_0x4e74a5, _0x38f743);
                });
              }, _0x5d8fb5['EventEmitter'] = _0x5d8fb5, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x49a)] = void 0x0, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x212)] = 0x0, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x2a9)] = void 0x0;
              var _0x4a1cc6 = 0xa;

              function _0x1ae696(_0x31b21c) {
                var _0x881391 = _0x17388d;
                if (_0x881391(0x17d) != typeof _0x31b21c) throw new TypeError(_0x881391(0x2bb) + typeof _0x31b21c);
              }

              function _0x314d7f(_0x1272d6) {
                var _0x30b93a = _0x17388d;
                return void 0x0 === _0x1272d6['_maxListeners'] ? _0x5d8fb5[_0x30b93a(0x3a7)] : _0x1272d6[_0x30b93a(0x2a9)];
              }

              function _0x544cd7(_0x1618f3, _0x59b6f6, _0x3b92f5, _0x130705) {
                var _0x251b2d = _0x17388d,
                    _0x540281,
                    _0x4100f3,
                    _0x39d651,
                    _0x2b5629;

                if (_0x1ae696(_0x3b92f5), void 0x0 === (_0x4100f3 = _0x1618f3[_0x251b2d(0x49a)]) ? (_0x4100f3 = _0x1618f3[_0x251b2d(0x49a)] = Object[_0x251b2d(0x39c)](null), _0x1618f3[_0x251b2d(0x212)] = 0x0) : (void 0x0 !== _0x4100f3['newListener'] && (_0x1618f3[_0x251b2d(0x24e)](_0x251b2d(0x37f), _0x59b6f6, _0x3b92f5['listener'] ? _0x3b92f5[_0x251b2d(0x343)] : _0x3b92f5), _0x4100f3 = _0x1618f3[_0x251b2d(0x49a)]), _0x39d651 = _0x4100f3[_0x59b6f6]), void 0x0 === _0x39d651) _0x39d651 = _0x4100f3[_0x59b6f6] = _0x3b92f5, ++_0x1618f3[_0x251b2d(0x212)];else {
                  if (_0x251b2d(0x17d) == typeof _0x39d651 ? _0x39d651 = _0x4100f3[_0x59b6f6] = _0x130705 ? [_0x3b92f5, _0x39d651] : [_0x39d651, _0x3b92f5] : _0x130705 ? _0x39d651['unshift'](_0x3b92f5) : _0x39d651['push'](_0x3b92f5), (_0x540281 = _0x314d7f(_0x1618f3)) > 0x0 && _0x39d651[_0x251b2d(0x1b1)] > _0x540281 && !_0x39d651['warned']) {
                    _0x39d651[_0x251b2d(0x3a5)] = !0x0;

                    var _0xe1fb81 = new Error(_0x251b2d(0x332) + _0x39d651['length'] + '\x20' + String(_0x59b6f6) + _0x251b2d(0x463));

                    _0xe1fb81[_0x251b2d(0x32f)] = _0x251b2d(0x10d), _0xe1fb81['emitter'] = _0x1618f3, _0xe1fb81[_0x251b2d(0x156)] = _0x59b6f6, _0xe1fb81[_0x251b2d(0x1b2)] = _0x39d651['length'], _0x2b5629 = _0xe1fb81, console && console['warn'] && console[_0x251b2d(0x31c)](_0x2b5629);
                  }
                }
                return _0x1618f3;
              }

              function _0x3f2cf9() {
                var _0x3ed4d3 = _0x17388d;
                if (!this[_0x3ed4d3(0x40d)]) return this[_0x3ed4d3(0x2d9)][_0x3ed4d3(0x198)](this[_0x3ed4d3(0x156)], this[_0x3ed4d3(0x3f7)]), this[_0x3ed4d3(0x40d)] = !0x0, 0x0 === arguments[_0x3ed4d3(0x1b1)] ? this[_0x3ed4d3(0x343)][_0x3ed4d3(0x229)](this[_0x3ed4d3(0x2d9)]) : this[_0x3ed4d3(0x343)]['apply'](this[_0x3ed4d3(0x2d9)], arguments);
              }

              function _0x978843(_0x5ec9d6, _0x5e4849, _0x47d162) {
                var _0x38ebd9 = _0x17388d,
                    _0x57f977 = {
                  'fired': !0x1,
                  'wrapFn': void 0x0,
                  'target': _0x5ec9d6,
                  'type': _0x5e4849,
                  'listener': _0x47d162
                },
                    _0x48b45e = _0x3f2cf9['bind'](_0x57f977);

                return _0x48b45e[_0x38ebd9(0x343)] = _0x47d162, _0x57f977[_0x38ebd9(0x3f7)] = _0x48b45e, _0x48b45e;
              }

              function _0xfe9f9c(_0x3a6712, _0x272895, _0x128a02) {
                var _0x52547b = _0x17388d,
                    _0x536aab = _0x3a6712['_events'];
                if (void 0x0 === _0x536aab) return [];
                var _0x1acf5b = _0x536aab[_0x272895];
                return void 0x0 === _0x1acf5b ? [] : _0x52547b(0x17d) == typeof _0x1acf5b ? _0x128a02 ? [_0x1acf5b[_0x52547b(0x343)] || _0x1acf5b] : [_0x1acf5b] : _0x128a02 ? function (_0x255724) {
                  var _0x45f08a = _0x52547b;

                  for (var _0x591bd6 = new Array(_0x255724[_0x45f08a(0x1b1)]), _0x3a7cd5 = 0x0; _0x3a7cd5 < _0x591bd6[_0x45f08a(0x1b1)]; ++_0x3a7cd5) _0x591bd6[_0x3a7cd5] = _0x255724[_0x3a7cd5][_0x45f08a(0x343)] || _0x255724[_0x3a7cd5];

                  return _0x591bd6;
                }(_0x1acf5b) : _0x3ce7cd(_0x1acf5b, _0x1acf5b[_0x52547b(0x1b1)]);
              }

              function _0x32232d(_0x3bd785) {
                var _0x4762f4 = _0x17388d,
                    _0x4d6283 = this['_events'];

                if (void 0x0 !== _0x4d6283) {
                  var _0x54ddde = _0x4d6283[_0x3bd785];
                  if (_0x4762f4(0x17d) == typeof _0x54ddde) return 0x1;
                  if (void 0x0 !== _0x54ddde) return _0x54ddde[_0x4762f4(0x1b1)];
                }

                return 0x0;
              }

              function _0x3ce7cd(_0x21a800, _0x3143ba) {
                for (var _0x3cc9f2 = new Array(_0x3143ba), _0x2d35e7 = 0x0; _0x2d35e7 < _0x3143ba; ++_0x2d35e7) _0x3cc9f2[_0x2d35e7] = _0x21a800[_0x2d35e7];

                return _0x3cc9f2;
              }

              function _0x546ef1(_0x67e97b, _0xf576d5, _0x50cc08, _0x2f3db0) {
                var _0x2b7dc3 = _0x17388d;
                if (_0x2b7dc3(0x17d) == typeof _0x67e97b['on']) _0x2f3db0[_0x2b7dc3(0x319)] ? _0x67e97b[_0x2b7dc3(0x319)](_0xf576d5, _0x50cc08) : _0x67e97b['on'](_0xf576d5, _0x50cc08);else {
                  if ('function' != typeof _0x67e97b[_0x2b7dc3(0x466)]) throw new TypeError(_0x2b7dc3(0x41d) + typeof _0x67e97b);

                  _0x67e97b[_0x2b7dc3(0x466)](_0xf576d5, function _0x576b2b(_0x303576) {
                    var _0x1bd292 = _0x2b7dc3;
                    _0x2f3db0[_0x1bd292(0x319)] && _0x67e97b[_0x1bd292(0x1de)](_0xf576d5, _0x576b2b), _0x50cc08(_0x303576);
                  });
                }
              }

              Object[_0x17388d(0xf2)](_0x5d8fb5, _0x17388d(0x3a7), {
                'enumerable': !0x0,
                'get': function get() {
                  return _0x4a1cc6;
                },
                'set': function set(_0x2370ac) {
                  var _0xad45c8 = _0x17388d;
                  if (_0xad45c8(0x11f) != typeof _0x2370ac || _0x2370ac < 0x0 || _0x4430d4(_0x2370ac)) throw new RangeError(_0xad45c8(0x1d0) + _0x2370ac + '.');
                  _0x4a1cc6 = _0x2370ac;
                }
              }), _0x5d8fb5[_0x17388d(0x150)] = function () {
                var _0x5ddcec = _0x17388d;
                void 0x0 !== this[_0x5ddcec(0x49a)] && this[_0x5ddcec(0x49a)] !== Object[_0x5ddcec(0x1bf)](this)['_events'] || (this[_0x5ddcec(0x49a)] = Object[_0x5ddcec(0x39c)](null), this[_0x5ddcec(0x212)] = 0x0), this['_maxListeners'] = this[_0x5ddcec(0x2a9)] || void 0x0;
              }, _0x5d8fb5['prototype'][_0x17388d(0x492)] = function (_0x154d19) {
                if ('number' != typeof _0x154d19 || _0x154d19 < 0x0 || _0x4430d4(_0x154d19)) throw new RangeError('The\x20value\x20of\x20\x22n\x22\x20is\x20out\x20of\x20range.\x20It\x20must\x20be\x20a\x20non-negative\x20number.\x20Received\x20' + _0x154d19 + '.');
                return this['_maxListeners'] = _0x154d19, this;
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x39a)] = function () {
                return _0x314d7f(this);
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x24e)] = function (_0x270f30) {
                var _0x1d35d1 = _0x17388d;

                for (var _0x7eb821 = [], _0x3c6ea2 = 0x1; _0x3c6ea2 < arguments[_0x1d35d1(0x1b1)]; _0x3c6ea2++) _0x7eb821[_0x1d35d1(0x41c)](arguments[_0x3c6ea2]);

                var _0x2c2df1 = _0x1d35d1(0x122) === _0x270f30,
                    _0x572b8c = this[_0x1d35d1(0x49a)];

                if (void 0x0 !== _0x572b8c) _0x2c2df1 = _0x2c2df1 && void 0x0 === _0x572b8c['error'];else {
                  if (!_0x2c2df1) return !0x1;
                }

                if (_0x2c2df1) {
                  var _0x46b84a;

                  if (_0x7eb821[_0x1d35d1(0x1b1)] > 0x0 && (_0x46b84a = _0x7eb821[0x0]), _0x46b84a instanceof Error) throw _0x46b84a;

                  var _0x5d2f36 = new Error(_0x1d35d1(0x12c) + (_0x46b84a ? '\x20(' + _0x46b84a[_0x1d35d1(0x3dd)] + ')' : ''));

                  throw _0x5d2f36['context'] = _0x46b84a, _0x5d2f36;
                }

                var _0x595e10 = _0x572b8c[_0x270f30];
                if (void 0x0 === _0x595e10) return !0x1;
                if (_0x1d35d1(0x17d) == typeof _0x595e10) _0xaaa83d(_0x595e10, this, _0x7eb821);else {
                  var _0x26a1a1 = _0x595e10[_0x1d35d1(0x1b1)],
                      _0x1a8f84 = _0x3ce7cd(_0x595e10, _0x26a1a1);

                  for (_0x3c6ea2 = 0x0; _0x3c6ea2 < _0x26a1a1; ++_0x3c6ea2) _0xaaa83d(_0x1a8f84[_0x3c6ea2], this, _0x7eb821);
                }
                return !0x0;
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x379)] = function (_0x3ba541, _0x26d08a) {
                return _0x544cd7(this, _0x3ba541, _0x26d08a, !0x1);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['on'] = _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x379)], _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x2c6)] = function (_0x8dde63, _0x335c2a) {
                return _0x544cd7(this, _0x8dde63, _0x335c2a, !0x0);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['once'] = function (_0x35caea, _0x1aa387) {
                return _0x1ae696(_0x1aa387), this['on'](_0x35caea, _0x978843(this, _0x35caea, _0x1aa387)), this;
              }, _0x5d8fb5['prototype'][_0x17388d(0x25a)] = function (_0x27a857, _0xd4ab99) {
                var _0x69e3fd = _0x17388d;
                return _0x1ae696(_0xd4ab99), this[_0x69e3fd(0x2c6)](_0x27a857, _0x978843(this, _0x27a857, _0xd4ab99)), this;
              }, _0x5d8fb5[_0x17388d(0x1b3)]['removeListener'] = function (_0x515d41, _0x3bf6b8) {
                var _0x5a9be0 = _0x17388d,
                    _0x2209c7,
                    _0x86e85b,
                    _0x42ea2d,
                    _0x1f4ebe,
                    _0x493707;

                if (_0x1ae696(_0x3bf6b8), void 0x0 === (_0x86e85b = this['_events'])) return this;
                if (void 0x0 === (_0x2209c7 = _0x86e85b[_0x515d41])) return this;
                if (_0x2209c7 === _0x3bf6b8 || _0x2209c7['listener'] === _0x3bf6b8) 0x0 == --this[_0x5a9be0(0x212)] ? this[_0x5a9be0(0x49a)] = Object[_0x5a9be0(0x39c)](null) : (delete _0x86e85b[_0x515d41], _0x86e85b[_0x5a9be0(0x198)] && this[_0x5a9be0(0x24e)]('removeListener', _0x515d41, _0x2209c7[_0x5a9be0(0x343)] || _0x3bf6b8));else {
                  if ('function' != typeof _0x2209c7) {
                    for (_0x42ea2d = -0x1, _0x1f4ebe = _0x2209c7[_0x5a9be0(0x1b1)] - 0x1; _0x1f4ebe >= 0x0; _0x1f4ebe--) if (_0x2209c7[_0x1f4ebe] === _0x3bf6b8 || _0x2209c7[_0x1f4ebe][_0x5a9be0(0x343)] === _0x3bf6b8) {
                      _0x493707 = _0x2209c7[_0x1f4ebe][_0x5a9be0(0x343)], _0x42ea2d = _0x1f4ebe;
                      break;
                    }

                    if (_0x42ea2d < 0x0) return this;
                    0x0 === _0x42ea2d ? _0x2209c7['shift']() : function (_0x84481a, _0x287012) {
                      var _0x31c7f4 = _0x5a9be0;

                      for (; _0x287012 + 0x1 < _0x84481a[_0x31c7f4(0x1b1)]; _0x287012++) _0x84481a[_0x287012] = _0x84481a[_0x287012 + 0x1];

                      _0x84481a['pop']();
                    }(_0x2209c7, _0x42ea2d), 0x1 === _0x2209c7[_0x5a9be0(0x1b1)] && (_0x86e85b[_0x515d41] = _0x2209c7[0x0]), void 0x0 !== _0x86e85b['removeListener'] && this['emit'](_0x5a9be0(0x198), _0x515d41, _0x493707 || _0x3bf6b8);
                  }
                }
                return this;
              }, _0x5d8fb5[_0x17388d(0x1b3)]['off'] = _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x198)], _0x5d8fb5[_0x17388d(0x1b3)]['removeAllListeners'] = function (_0x26aa6d) {
                var _0x569903 = _0x17388d,
                    _0x5c40c5,
                    _0x496c46,
                    _0x4e2e65;

                if (void 0x0 === (_0x496c46 = this[_0x569903(0x49a)])) return this;
                if (void 0x0 === _0x496c46['removeListener']) return 0x0 === arguments[_0x569903(0x1b1)] ? (this[_0x569903(0x49a)] = Object['create'](null), this[_0x569903(0x212)] = 0x0) : void 0x0 !== _0x496c46[_0x26aa6d] && (0x0 == --this['_eventsCount'] ? this[_0x569903(0x49a)] = Object[_0x569903(0x39c)](null) : delete _0x496c46[_0x26aa6d]), this;

                if (0x0 === arguments[_0x569903(0x1b1)]) {
                  var _0x585c8b,
                      _0x2172dc = Object[_0x569903(0x44d)](_0x496c46);

                  for (_0x4e2e65 = 0x0; _0x4e2e65 < _0x2172dc[_0x569903(0x1b1)]; ++_0x4e2e65) _0x569903(0x198) !== (_0x585c8b = _0x2172dc[_0x4e2e65]) && this[_0x569903(0x146)](_0x585c8b);

                  return this[_0x569903(0x146)]('removeListener'), this['_events'] = Object[_0x569903(0x39c)](null), this['_eventsCount'] = 0x0, this;
                }

                if ('function' == typeof (_0x5c40c5 = _0x496c46[_0x26aa6d])) this[_0x569903(0x198)](_0x26aa6d, _0x5c40c5);else {
                  if (void 0x0 !== _0x5c40c5) {
                    for (_0x4e2e65 = _0x5c40c5[_0x569903(0x1b1)] - 0x1; _0x4e2e65 >= 0x0; _0x4e2e65--) this['removeListener'](_0x26aa6d, _0x5c40c5[_0x4e2e65]);
                  }
                }
                return this;
              }, _0x5d8fb5['prototype'][_0x17388d(0x4c3)] = function (_0x357fab) {
                return _0xfe9f9c(this, _0x357fab, !0x0);
              }, _0x5d8fb5[_0x17388d(0x1b3)]['rawListeners'] = function (_0x390063) {
                return _0xfe9f9c(this, _0x390063, !0x1);
              }, _0x5d8fb5[_0x17388d(0x1f9)] = function (_0x1af358, _0x2733f6) {
                var _0x5e1582 = _0x17388d;
                return _0x5e1582(0x17d) == typeof _0x1af358[_0x5e1582(0x1f9)] ? _0x1af358[_0x5e1582(0x1f9)](_0x2733f6) : _0x32232d['call'](_0x1af358, _0x2733f6);
              }, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x1f9)] = _0x32232d, _0x5d8fb5[_0x17388d(0x1b3)][_0x17388d(0x46c)] = function () {
                var _0x392248 = _0x17388d;
                return this[_0x392248(0x212)] > 0x0 ? _0x49ca49(this[_0x392248(0x49a)]) : [];
              };
            },
            0xd8a: function _(_0x1943e5, _0x9e9be1, _0x436768) {
              var _0x526890 = a0_0x107f,
                  _0x18e132 = _0x436768(0x16c2),
                  _0x213215 = Object[_0x526890(0x1b3)][_0x526890(0x436)],
                  _0x361968 = _0x526890(0x17d) == typeof Blob || _0x526890(0x364) != typeof Blob && _0x526890(0x432) === _0x213215[_0x526890(0x229)](Blob),
                  _0x2a2789 = 'function' == typeof File || _0x526890(0x364) != typeof File && _0x526890(0x4a4) === _0x213215[_0x526890(0x229)](File);

              _0x1943e5[_0x526890(0x38d)] = function _0x34bab7(_0x407e39) {
                var _0x429ca1 = _0x526890;
                if (!_0x407e39 || _0x429ca1(0x33c) != typeof _0x407e39) return !0x1;

                if (_0x18e132(_0x407e39)) {
                  for (var _0x3c262d = 0x0, _0x3b2818 = _0x407e39[_0x429ca1(0x1b1)]; _0x3c262d < _0x3b2818; _0x3c262d++) if (_0x34bab7(_0x407e39[_0x3c262d])) return !0x0;

                  return !0x1;
                }

                if (_0x429ca1(0x17d) == typeof Buffer && Buffer[_0x429ca1(0x160)] && Buffer[_0x429ca1(0x160)](_0x407e39) || 'function' == typeof ArrayBuffer && _0x407e39 instanceof ArrayBuffer || _0x361968 && _0x407e39 instanceof Blob || _0x2a2789 && _0x407e39 instanceof File) return !0x0;
                if (_0x407e39[_0x429ca1(0x46d)] && _0x429ca1(0x17d) == typeof _0x407e39[_0x429ca1(0x46d)] && 0x1 === arguments[_0x429ca1(0x1b1)]) return _0x34bab7(_0x407e39[_0x429ca1(0x46d)](), !0x0);

                for (var _0x3f0eeb in _0x407e39) if (Object[_0x429ca1(0x1b3)][_0x429ca1(0x32a)][_0x429ca1(0x229)](_0x407e39, _0x3f0eeb) && _0x34bab7(_0x407e39[_0x3f0eeb])) return !0x0;

                return !0x1;
              };
            },
            0x1f7a: function _(_0xb1cefd) {
              var _0x55ccd2 = a0_0x107f;

              try {
                _0xb1cefd['exports'] = 'undefined' != typeof XMLHttpRequest && _0x55ccd2(0x26b) in new XMLHttpRequest();
              } catch (_0x4d3dff) {
                _0xb1cefd[_0x55ccd2(0x38d)] = !0x1;
              }
            },
            0x28a: function _(_0x1c8f8b, _0x403917) {
              var _0x2f7a0e = a0_0x107f,
                  _0x18db60,
                  _0xa5f633;

              _0x18db60 = function _0x18db60() {
                var _0x35ddfd = a0_0x107f;

                function _0xc67562(_0x312080) {
                  var _0x5e32a7 = a0_0x107f;

                  switch (this['clear'](), arguments[_0x5e32a7(0x1b1)]) {
                    case 0x0:
                      break;

                    case 0x1:
                      _0x5e32a7(0x1b1) in _0x312080 ? _0x1e95ed(this, Array['prototype'][_0x5e32a7(0x23c)][_0x5e32a7(0x394)]([], _0x312080)) : this[_0x5e32a7(0x445)](_0x312080);
                      break;

                    default:
                      _0x1e95ed(this, arguments);

                  }
                }

                var _0x4e6b5f = _0xc67562[_0x35ddfd(0x1b3)] = {
                  'constructor': _0xc67562,
                  'get': function get(_0x1e2fa8) {
                    var _0x31c7da = _0x35ddfd,
                        _0x1e1b0f = this[_0x31c7da(0xf8)][this[_0x31c7da(0x3bd)](_0x1e2fa8)];

                    return _0x1e1b0f && _0x1e1b0f[0x1];
                  },
                  'set': function set(_0x4cde3e, _0x145c2c) {
                    var _0x13f2fe = _0x35ddfd,
                        _0x352f10 = this[_0x13f2fe(0x3bd)](_0x4cde3e);

                    _0x352f10 in this[_0x13f2fe(0xf8)] || this[_0x13f2fe(0x318)]++, this[_0x13f2fe(0xf8)][_0x352f10] = [_0x4cde3e, _0x145c2c];
                  },
                  'multi': function multi() {
                    _0x1e95ed(this, arguments);
                  },
                  'copy': function copy(_0xca64ba) {
                    var _0x1bcfcb = _0x35ddfd;

                    for (var _0xc711e in _0xca64ba[_0x1bcfcb(0xf8)]) _0xc711e in this[_0x1bcfcb(0xf8)] || this[_0x1bcfcb(0x318)]++, this[_0x1bcfcb(0xf8)][_0xc711e] = _0xca64ba[_0x1bcfcb(0xf8)][_0xc711e];
                  },
                  'has': function has(_0x50b7ae) {
                    var _0x810e9f = _0x35ddfd;
                    return this[_0x810e9f(0x3bd)](_0x50b7ae) in this[_0x810e9f(0xf8)];
                  },
                  'search': function search(_0x551d86) {
                    var _0x52f0df = _0x35ddfd;

                    for (var _0x1e3f74 in this[_0x52f0df(0xf8)]) if (this['_data'][_0x1e3f74][0x1] === _0x551d86) return this[_0x52f0df(0xf8)][_0x1e3f74][0x0];

                    return null;
                  },
                  'delete': function _delete(_0xf7c5a4) {
                    var _0x2d50f5 = _0x35ddfd,
                        _0x3a426c = this[_0x2d50f5(0x3bd)](_0xf7c5a4);

                    _0x3a426c in this[_0x2d50f5(0xf8)] && (this[_0x2d50f5(0x318)]--, delete this[_0x2d50f5(0xf8)][_0x3a426c]);
                  },
                  'type': function type(_0x7bff04) {
                    var _0x56397c = _0x35ddfd,
                        _0x5b0cd7 = Object['prototype'][_0x56397c(0x436)][_0x56397c(0x229)](_0x7bff04)[_0x56397c(0x389)](0x8, -0x1)['toLowerCase']();

                    return _0x7bff04 || 'domwindow' !== _0x5b0cd7 && _0x56397c(0x13e) !== _0x5b0cd7 ? _0x5b0cd7 : _0x7bff04 + '';
                  },
                  'keys': function keys() {
                    var _0x470833 = _0x35ddfd,
                        _0x434ca2 = [];
                    return this[_0x470833(0x293)](function (_0x263824, _0x12b5f2) {
                      var _0x27e192 = _0x470833;

                      _0x434ca2[_0x27e192(0x41c)](_0x12b5f2);
                    }), _0x434ca2;
                  },
                  'values': function values() {
                    var _0x36ce3d = _0x35ddfd,
                        _0x3d2d5e = [];
                    return this[_0x36ce3d(0x293)](function (_0x20e2c2) {
                      var _0x522b7d = _0x36ce3d;

                      _0x3d2d5e[_0x522b7d(0x41c)](_0x20e2c2);
                    }), _0x3d2d5e;
                  },
                  'entries': function entries() {
                    var _0x56cdde = _0x35ddfd,
                        _0x5d74f2 = [];
                    return this[_0x56cdde(0x293)](function (_0x1ec74b, _0x10ff94) {
                      var _0x22cac5 = _0x56cdde;

                      _0x5d74f2[_0x22cac5(0x41c)]([_0x10ff94, _0x1ec74b]);
                    }), _0x5d74f2;
                  },
                  'count': function count() {
                    return this['size'];
                  },
                  'clear': function clear() {
                    var _0xc39345 = _0x35ddfd;
                    this[_0xc39345(0xf8)] = {}, this[_0xc39345(0x318)] = 0x0;
                  },
                  'clone': function clone() {
                    return new _0xc67562(this);
                  },
                  'hash': function hash(_0x2c4979) {
                    var _0x1fd58f = _0x35ddfd;

                    switch (this['type'](_0x2c4979)) {
                      case 'undefined':
                      case _0x1fd58f(0x471):
                      case _0x1fd58f(0x2a8):
                      case _0x1fd58f(0x11f):
                      case _0x1fd58f(0x4c2):
                        return _0x2c4979 + '';

                      case 'date':
                        return '♣' + _0x2c4979['getTime']();

                      case _0x1fd58f(0x268):
                        return '♠' + _0x2c4979;

                      case 'array':
                        for (var _0x2c1bdc = [], _0x41a0b5 = 0x0; _0x41a0b5 < _0x2c4979['length']; _0x41a0b5++) _0x2c1bdc[_0x41a0b5] = this[_0x1fd58f(0x3bd)](_0x2c4979[_0x41a0b5]);

                        return '♥' + _0x2c1bdc['join']('⁞');

                      default:
                        return _0x2c4979[_0x1fd58f(0x32a)](_0x1fd58f(0x21b)) || (_0x2c4979[_0x1fd58f(0x21b)] = ++_0xc67562['uid'], _0x26a584 = _0x2c4979, _0x462eb1 = _0x1fd58f(0x21b), Object[_0x1fd58f(0xf2)] && Object[_0x1fd58f(0xf2)](_0x26a584, _0x462eb1, {
                          'enumerable': !0x1
                        })), '♦' + _0x2c4979[_0x1fd58f(0x21b)];
                    }

                    var _0x26a584, _0x462eb1;
                  },
                  'forEach': function forEach(_0x22ec14, _0x598f25) {
                    var _0x658a40 = _0x35ddfd;

                    for (var _0x3ad735 in this[_0x658a40(0xf8)]) {
                      var _0x5593b1 = this[_0x658a40(0xf8)][_0x3ad735];

                      _0x22ec14[_0x658a40(0x229)](_0x598f25 || this, _0x5593b1[0x1], _0x5593b1[0x0]);
                    }
                  }
                };

                function _0x1e95ed(_0x5db2d2, _0x27964f) {
                  var _0x515449 = _0x35ddfd;

                  for (var _0x47a877 = 0x0; _0x47a877 < _0x27964f[_0x515449(0x1b1)]; _0x47a877 += 0x2) _0x5db2d2['set'](_0x27964f[_0x47a877], _0x27964f[_0x47a877 + 0x1]);
                }

                return _0xc67562[_0x35ddfd(0x10b)] = 0x0, _0x35ddfd(0x364) != typeof Symbol && void 0x0 !== Symbol[_0x35ddfd(0x406)] && (_0x4e6b5f[Symbol[_0x35ddfd(0x406)]] = function () {
                  var _0x242f5d = this['entries'](),
                      _0x15d552 = 0x0;

                  return {
                    'next': function next() {
                      if (_0x15d552 === _0x242f5d['length']) return {
                        'done': !0x0
                      };
                      var _0x30db07 = _0x242f5d[_0x15d552++];
                      return {
                        'value': {
                          'key': _0x30db07[0x0],
                          'value': _0x30db07[0x1]
                        },
                        'done': !0x1
                      };
                    }
                  };
                }), [_0x35ddfd(0x4ba), 'multi', _0x35ddfd(0x445), 'delete', _0x35ddfd(0x44a), 'forEach'][_0x35ddfd(0x293)](function (_0x4217a1) {
                  var _0x344ec5 = _0x4e6b5f[_0x4217a1];

                  _0x4e6b5f[_0x4217a1] = function () {
                    var _0x457366 = a0_0x107f;
                    return _0x344ec5[_0x457366(0x394)](this, arguments), this;
                  };
                }), _0xc67562[_0x35ddfd(0x1b3)][_0x35ddfd(0x1fc)] = _0xc67562[_0x35ddfd(0x1b3)][_0x35ddfd(0xfd)], _0xc67562;
              }, void 0x0 === (_0xa5f633 = _0x18db60[_0x2f7a0e(0x394)](_0x403917, [])) || (_0x1c8f8b[_0x2f7a0e(0x38d)] = _0xa5f633);
            },
            0x1cbb: function _(_0x1b0327) {
              var _0x28caec = a0_0x107f,
                  _0x3f32d9 = [][_0x28caec(0x22a)];

              _0x1b0327[_0x28caec(0x38d)] = function (_0x543e06, _0x400ad7) {
                var _0x553591 = _0x28caec;
                if (_0x3f32d9) return _0x543e06['indexOf'](_0x400ad7);

                for (var _0x5ca30a = 0x0; _0x5ca30a < _0x543e06[_0x553591(0x1b1)]; ++_0x5ca30a) if (_0x543e06[_0x5ca30a] === _0x400ad7) return _0x5ca30a;

                return -0x1;
              };
            },
            0x16c2: function _(_0x532fd4) {
              var _0x2f4e04 = a0_0x107f,
                  _0x57bd81 = {}[_0x2f4e04(0x436)];

              _0x532fd4['exports'] = Array[_0x2f4e04(0x423)] || function (_0x50fa79) {
                var _0x3caa2b = _0x2f4e04;
                return '[object\x20Array]' == _0x57bd81[_0x3caa2b(0x229)](_0x50fa79);
              };
            },
            0x1e90: function _(_0x2e128d) {
              var _0x342679 = 0x3e8,
                  _0x1ee293 = 0x3c * _0x342679,
                  _0x5c75dd = 0x3c * _0x1ee293,
                  _0x192763 = 0x18 * _0x5c75dd;

              function _0x5752e4(_0x558144, _0xc9771d, _0x15d187) {
                var _0x58848f = a0_0x107f;
                if (!(_0x558144 < _0xc9771d)) return _0x558144 < 1.5 * _0xc9771d ? Math[_0x58848f(0x330)](_0x558144 / _0xc9771d) + '\x20' + _0x15d187 : Math[_0x58848f(0x41f)](_0x558144 / _0xc9771d) + '\x20' + _0x15d187 + 's';
              }

              _0x2e128d['exports'] = function (_0x44f7bf, _0x431b32) {
                var _0x2ea289 = a0_0x107f;
                _0x431b32 = _0x431b32 || {};

                var _0x40b966,
                    _0x45faa9 = typeof _0x44f7bf;

                if ('string' === _0x45faa9 && _0x44f7bf[_0x2ea289(0x1b1)] > 0x0) return function (_0x41883d) {
                  var _0x1033f2 = _0x2ea289;

                  if (!((_0x41883d = String(_0x41883d))[_0x1033f2(0x1b1)] > 0x64)) {
                    var _0x29d7cf = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i[_0x1033f2(0x2d6)](_0x41883d);

                    if (_0x29d7cf) {
                      var _0x49598a = parseFloat(_0x29d7cf[0x1]);

                      switch ((_0x29d7cf[0x2] || 'ms')[_0x1033f2(0x317)]()) {
                        case _0x1033f2(0x238):
                        case _0x1033f2(0x4aa):
                        case _0x1033f2(0xf4):
                        case 'yr':
                        case 'y':
                          return 0x758fac300 * _0x49598a;

                        case _0x1033f2(0x33a):
                        case _0x1033f2(0x1ac):
                        case 'd':
                          return _0x49598a * _0x192763;

                        case _0x1033f2(0x265):
                        case _0x1033f2(0x2a4):
                        case _0x1033f2(0x205):
                        case 'hr':
                        case 'h':
                          return _0x49598a * _0x5c75dd;

                        case _0x1033f2(0x37c):
                        case _0x1033f2(0x1b5):
                        case _0x1033f2(0x4c1):
                        case _0x1033f2(0x2a3):
                        case 'm':
                          return _0x49598a * _0x1ee293;

                        case _0x1033f2(0x26a):
                        case _0x1033f2(0x4b6):
                        case _0x1033f2(0x155):
                        case 'sec':
                        case 's':
                          return _0x49598a * _0x342679;

                        case _0x1033f2(0x1e3):
                        case _0x1033f2(0x152):
                        case 'msecs':
                        case _0x1033f2(0x31b):
                        case 'ms':
                          return _0x49598a;

                        default:
                          return;
                      }
                    }
                  }
                }(_0x44f7bf);
                if ('number' === _0x45faa9 && !0x1 === isNaN(_0x44f7bf)) return _0x431b32[_0x2ea289(0x18b)] ? _0x5752e4(_0x40b966 = _0x44f7bf, _0x192763, _0x2ea289(0x1ac)) || _0x5752e4(_0x40b966, _0x5c75dd, 'hour') || _0x5752e4(_0x40b966, _0x1ee293, _0x2ea289(0x1b5)) || _0x5752e4(_0x40b966, _0x342679, _0x2ea289(0x4b6)) || _0x40b966 + _0x2ea289(0x3cf) : function (_0x349b04) {
                  var _0x2c282b = _0x2ea289;
                  return _0x349b04 >= _0x192763 ? Math['round'](_0x349b04 / _0x192763) + 'd' : _0x349b04 >= _0x5c75dd ? Math[_0x2c282b(0x4c5)](_0x349b04 / _0x5c75dd) + 'h' : _0x349b04 >= _0x1ee293 ? Math[_0x2c282b(0x4c5)](_0x349b04 / _0x1ee293) + 'm' : _0x349b04 >= _0x342679 ? Math['round'](_0x349b04 / _0x342679) + 's' : _0x349b04 + 'ms';
                }(_0x44f7bf);
                throw new Error('val\x20is\x20not\x20a\x20non-empty\x20string\x20or\x20a\x20valid\x20number.\x20val=' + JSON[_0x2ea289(0x296)](_0x44f7bf));
              };
            },
            0x726: function _(_0x1e409, _0x51c4d4) {
              var _0x72398f = a0_0x107f;
              _0x51c4d4[_0x72398f(0x263)] = function (_0x118453) {
                var _0x53b20d = _0x72398f,
                    _0x385d41 = '';

                for (var _0x94137d in _0x118453) _0x118453[_0x53b20d(0x32a)](_0x94137d) && (_0x385d41[_0x53b20d(0x1b1)] && (_0x385d41 += '&'), _0x385d41 += encodeURIComponent(_0x94137d) + '=' + encodeURIComponent(_0x118453[_0x94137d]));

                return _0x385d41;
              }, _0x51c4d4[_0x72398f(0x3f1)] = function (_0x12bc0a) {
                var _0x4b2c14 = _0x72398f;

                for (var _0x1f6463 = {}, _0x2d3c01 = _0x12bc0a[_0x4b2c14(0x460)]('&'), _0x3c1cb6 = 0x0, _0x2fa9db = _0x2d3c01['length']; _0x3c1cb6 < _0x2fa9db; _0x3c1cb6++) {
                  var _0x2183d8 = _0x2d3c01[_0x3c1cb6][_0x4b2c14(0x460)]('=');

                  _0x1f6463[decodeURIComponent(_0x2183d8[0x0])] = decodeURIComponent(_0x2183d8[0x1]);
                }

                return _0x1f6463;
              };
            },
            0x105b: function _(_0x1396f6) {
              var _0x51f1a5 = a0_0x107f,
                  _0x20cce3 = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
                  _0x1bc9d0 = ['source', 'protocol', _0x51f1a5(0x1d7), _0x51f1a5(0x359), 'user', _0x51f1a5(0x48f), _0x51f1a5(0x395), _0x51f1a5(0x4be), _0x51f1a5(0x3c9), _0x51f1a5(0x1ad), _0x51f1a5(0x38f), _0x51f1a5(0x3e4), 'query', _0x51f1a5(0x1a8)];

              _0x1396f6['exports'] = function (_0x274038) {
                var _0x294649 = _0x51f1a5,
                    _0x1b1686,
                    _0x48b85a,
                    _0x167855 = _0x274038,
                    _0x459abe = _0x274038[_0x294649(0x22a)]('['),
                    _0x4c913d = _0x274038[_0x294649(0x22a)](']');

                -0x1 != _0x459abe && -0x1 != _0x4c913d && (_0x274038 = _0x274038[_0x294649(0x4a5)](0x0, _0x459abe) + _0x274038[_0x294649(0x4a5)](_0x459abe, _0x4c913d)[_0x294649(0x3d9)](/:/g, ';') + _0x274038[_0x294649(0x4a5)](_0x4c913d, _0x274038['length']));

                for (var _0x5948ab, _0x4f2021, _0x278cd1 = _0x20cce3['exec'](_0x274038 || ''), _0x438808 = {}, _0x8b7782 = 0xe; _0x8b7782--;) _0x438808[_0x1bc9d0[_0x8b7782]] = _0x278cd1[_0x8b7782] || '';

                return -0x1 != _0x459abe && -0x1 != _0x4c913d && (_0x438808[_0x294649(0x34e)] = _0x167855, _0x438808[_0x294649(0x395)] = _0x438808[_0x294649(0x395)][_0x294649(0x4a5)](0x1, _0x438808[_0x294649(0x395)][_0x294649(0x1b1)] - 0x1)['replace'](/;/g, ':'), _0x438808[_0x294649(0x1d7)] = _0x438808[_0x294649(0x1d7)][_0x294649(0x3d9)]('[', '')[_0x294649(0x3d9)](']', '')['replace'](/;/g, ':'), _0x438808[_0x294649(0x1e5)] = !0x0), _0x438808[_0x294649(0x27a)] = (_0x1b1686 = _0x438808[_0x294649(0x1ad)], _0x48b85a = _0x1b1686[_0x294649(0x3d9)](/\/{2,9}/g, '/')[_0x294649(0x460)]('/'), '/' != _0x1b1686[_0x294649(0x40e)](0x0, 0x1) && 0x0 !== _0x1b1686['length'] || _0x48b85a['splice'](0x0, 0x1), '/' == _0x1b1686[_0x294649(0x40e)](_0x1b1686[_0x294649(0x1b1)] - 0x1, 0x1) && _0x48b85a[_0x294649(0x479)](_0x48b85a[_0x294649(0x1b1)] - 0x1, 0x1), _0x48b85a), _0x438808['queryKey'] = (_0x5948ab = _0x438808['query'], _0x4f2021 = {}, _0x5948ab[_0x294649(0x3d9)](/(?:^|&)([^&=]*)=?([^&]*)/g, function (_0x384d72, _0x47843d, _0x560cec) {
                  _0x47843d && (_0x4f2021[_0x47843d] = _0x560cec);
                }), _0x4f2021), _0x438808;
              };
            },
            0x1a99: function _(_0x2934b1, _0x524be6, _0x36b6c5) {
              var _0xb2e42b = a0_0x107f,
                  _0x4f0197 = _0x36b6c5(0xe5e),
                  _0xdfe7fb = _0x36b6c5(0x2399),
                  _0x2ffdc7 = _0x36b6c5(0xab3),
                  _0x847c23 = _0x36b6c5(0x4cb)(_0xb2e42b(0x331));

              _0x2934b1['exports'] = _0x524be6 = _0x591f25;

              var _0x33a0d0 = _0x524be6['managers'] = {};

              function _0x591f25(_0x46dc35, _0x2bb449) {
                var _0x1b625f = _0xb2e42b;
                'object' == typeof _0x46dc35 && (_0x2bb449 = _0x46dc35, _0x46dc35 = void 0x0), _0x2bb449 = _0x2bb449 || {};

                var _0x3804f7,
                    _0x91fd6b = _0x4f0197(_0x46dc35),
                    _0x4926e9 = _0x91fd6b[_0x1b625f(0x34e)],
                    _0x55ed0b = _0x91fd6b['id'],
                    _0x115cfc = _0x91fd6b['path'],
                    _0x236a57 = _0x33a0d0[_0x55ed0b] && _0x115cfc in _0x33a0d0[_0x55ed0b][_0x1b625f(0x32e)];

                return _0x2bb449[_0x1b625f(0x2f3)] || _0x2bb449['force\x20new\x20connection'] || !0x1 === _0x2bb449[_0x1b625f(0x2b2)] || _0x236a57 ? (_0x847c23(_0x1b625f(0x2b3), _0x4926e9), _0x3804f7 = _0x2ffdc7(_0x4926e9, _0x2bb449)) : (_0x33a0d0[_0x55ed0b] || (_0x847c23('new\x20io\x20instance\x20for\x20%s', _0x4926e9), _0x33a0d0[_0x55ed0b] = _0x2ffdc7(_0x4926e9, _0x2bb449)), _0x3804f7 = _0x33a0d0[_0x55ed0b]), _0x91fd6b['query'] && !_0x2bb449[_0x1b625f(0x189)] && (_0x2bb449['query'] = _0x91fd6b[_0x1b625f(0x189)]), _0x3804f7['socket'](_0x91fd6b[_0x1b625f(0x1ad)], _0x2bb449);
              }

              _0x524be6[_0xb2e42b(0x1c7)] = _0xdfe7fb['protocol'], _0x524be6[_0xb2e42b(0x33f)] = _0x591f25, _0x524be6['Manager'] = _0x36b6c5(0xab3), _0x524be6[_0xb2e42b(0x355)] = _0x36b6c5(0x2188);
            },
            0xab3: function _(_0x434b9d, _0x63082b, _0x429c8e) {
              var _0x346a7b = a0_0x107f,
                  _0x6653c4 = _0x429c8e(0x175f),
                  _0x3a6837 = _0x429c8e(0x2188),
                  _0x2300ef = _0x429c8e(0x223f),
                  _0x520e28 = _0x429c8e(0x2399),
                  _0x2df958 = _0x429c8e(0x1558),
                  _0x2c0fdd = _0x429c8e(0x17bd),
                  _0x18ad85 = _0x429c8e(0x4cb)(_0x346a7b(0x2ea)),
                  _0x3693c1 = _0x429c8e(0x1cbb),
                  _0x530ac4 = _0x429c8e(0xbc2),
                  _0x2efdf3 = Object[_0x346a7b(0x1b3)][_0x346a7b(0x32a)];

              function _0x15cd3f(_0x56b227, _0x1dcafc) {
                var _0x348d8a = _0x346a7b;
                if (!(this instanceof _0x15cd3f)) return new _0x15cd3f(_0x56b227, _0x1dcafc);
                _0x56b227 && _0x348d8a(0x33c) == typeof _0x56b227 && (_0x1dcafc = _0x56b227, _0x56b227 = void 0x0), (_0x1dcafc = _0x1dcafc || {})['path'] = _0x1dcafc['path'] || '/socket.io', this['nsps'] = {}, this['subs'] = [], this['opts'] = _0x1dcafc, this['reconnection'](!0x1 !== _0x1dcafc['reconnection']), this['reconnectionAttempts'](_0x1dcafc['reconnectionAttempts'] || 0x1 / 0x0), this[_0x348d8a(0x285)](_0x1dcafc[_0x348d8a(0x285)] || 0x3e8), this[_0x348d8a(0x2c8)](_0x1dcafc[_0x348d8a(0x2c8)] || 0x1388), this[_0x348d8a(0x455)](_0x1dcafc[_0x348d8a(0x455)] || 0.5), this[_0x348d8a(0x45b)] = new _0x530ac4({
                  'min': this[_0x348d8a(0x285)](),
                  'max': this[_0x348d8a(0x2c8)](),
                  'jitter': this['randomizationFactor']()
                }), this[_0x348d8a(0xee)](null == _0x1dcafc[_0x348d8a(0xee)] ? 0x4e20 : _0x1dcafc[_0x348d8a(0xee)]), this[_0x348d8a(0x3d0)] = _0x348d8a(0x183), this['uri'] = _0x56b227, this['connecting'] = [], this[_0x348d8a(0x17f)] = null, this[_0x348d8a(0x307)] = !0x1, this['packetBuffer'] = [];

                var _0x394d3b = _0x1dcafc[_0x348d8a(0x3b0)] || _0x520e28;

                this[_0x348d8a(0x278)] = new _0x394d3b['Encoder'](), this['decoder'] = new _0x394d3b[_0x348d8a(0x415)](), this[_0x348d8a(0x1f2)] = !0x1 !== _0x1dcafc[_0x348d8a(0x1f2)], this['autoConnect'] && this[_0x348d8a(0x412)]();
              }

              _0x434b9d[_0x346a7b(0x38d)] = _0x15cd3f, _0x15cd3f[_0x346a7b(0x1b3)]['emitAll'] = function () {
                var _0x26c495 = _0x346a7b;

                for (var _0x4edcc4 in this[_0x26c495(0x24e)]['apply'](this, arguments), this[_0x26c495(0x32e)]) _0x2efdf3[_0x26c495(0x229)](this['nsps'], _0x4edcc4) && this['nsps'][_0x4edcc4]['emit'][_0x26c495(0x394)](this['nsps'][_0x4edcc4], arguments);
              }, _0x15cd3f['prototype']['updateSocketIds'] = function () {
                var _0x97684a = _0x346a7b;

                for (var _0x412924 in this['nsps']) _0x2efdf3['call'](this[_0x97684a(0x32e)], _0x412924) && (this[_0x97684a(0x32e)][_0x412924]['id'] = this[_0x97684a(0x46b)](_0x412924));
              }, _0x15cd3f['prototype'][_0x346a7b(0x46b)] = function (_0x33082e) {
                var _0x22d9b7 = _0x346a7b;
                return ('/' === _0x33082e ? '' : _0x33082e + '#') + this[_0x22d9b7(0x2d1)]['id'];
              }, _0x2300ef(_0x15cd3f[_0x346a7b(0x1b3)]), _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x19d)] = function (_0x46e4d3) {
                return arguments['length'] ? (this['_reconnection'] = !!_0x46e4d3, this) : this['_reconnection'];
              }, _0x15cd3f['prototype']['reconnectionAttempts'] = function (_0x257aa0) {
                var _0x4346b1 = _0x346a7b;
                return arguments[_0x4346b1(0x1b1)] ? (this['_reconnectionAttempts'] = _0x257aa0, this) : this['_reconnectionAttempts'];
              }, _0x15cd3f['prototype'][_0x346a7b(0x285)] = function (_0x30cd3e) {
                var _0x503379 = _0x346a7b;
                return arguments['length'] ? (this['_reconnectionDelay'] = _0x30cd3e, this[_0x503379(0x45b)] && this['backoff'][_0x503379(0x2d8)](_0x30cd3e), this) : this['_reconnectionDelay'];
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x455)] = function (_0x5994db) {
                var _0x2ed314 = _0x346a7b;
                return arguments['length'] ? (this[_0x2ed314(0x3d5)] = _0x5994db, this[_0x2ed314(0x45b)] && this['backoff'][_0x2ed314(0x41b)](_0x5994db), this) : this[_0x2ed314(0x3d5)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['reconnectionDelayMax'] = function (_0x1d5aa0) {
                var _0x303dfb = _0x346a7b;
                return arguments['length'] ? (this['_reconnectionDelayMax'] = _0x1d5aa0, this['backoff'] && this[_0x303dfb(0x45b)][_0x303dfb(0x22e)](_0x1d5aa0), this) : this[_0x303dfb(0x289)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['timeout'] = function (_0x41d747) {
                var _0xeff28b = _0x346a7b;
                return arguments[_0xeff28b(0x1b1)] ? (this[_0xeff28b(0x254)] = _0x41d747, this) : this[_0xeff28b(0x254)];
              }, _0x15cd3f[_0x346a7b(0x1b3)]['maybeReconnectOnOpen'] = function () {
                var _0x187fc3 = _0x346a7b;
                !this[_0x187fc3(0x369)] && this[_0x187fc3(0x2a2)] && 0x0 === this[_0x187fc3(0x45b)]['attempts'] && this[_0x187fc3(0x33d)]();
              }, _0x15cd3f['prototype'][_0x346a7b(0x412)] = _0x15cd3f['prototype'][_0x346a7b(0x33f)] = function (_0x45a8f8, _0xab33e0) {
                var _0x491673 = _0x346a7b;
                if (_0x18ad85(_0x491673(0x428), this[_0x491673(0x3d0)]), ~this['readyState'][_0x491673(0x22a)]('open')) return this;
                _0x18ad85(_0x491673(0x484), this[_0x491673(0x2d0)]), this['engine'] = _0x6653c4(this[_0x491673(0x2d0)], this['opts']);

                var _0x58772d = this['engine'],
                    _0x2b23e4 = this;

                this[_0x491673(0x3d0)] = _0x491673(0x163), this[_0x491673(0x14c)] = !0x1;

                var _0x171435 = _0x2df958(_0x58772d, _0x491673(0x412), function () {
                  var _0x3ddabb = _0x491673;
                  _0x2b23e4[_0x3ddabb(0x3e5)](), _0x45a8f8 && _0x45a8f8();
                }),
                    _0x37e5d9 = _0x2df958(_0x58772d, _0x491673(0x122), function (_0x1645a6) {
                  var _0x26f1f2 = _0x491673;

                  if (_0x18ad85(_0x26f1f2(0x372)), _0x2b23e4[_0x26f1f2(0x42b)](), _0x2b23e4[_0x26f1f2(0x3d0)] = 'closed', _0x2b23e4[_0x26f1f2(0x2f7)](_0x26f1f2(0x372), _0x1645a6), _0x45a8f8) {
                    var _0x5a1c54 = new Error(_0x26f1f2(0x256));

                    _0x5a1c54['data'] = _0x1645a6, _0x45a8f8(_0x5a1c54);
                  } else _0x2b23e4[_0x26f1f2(0x2f9)]();
                });

                if (!0x1 !== this[_0x491673(0x254)]) {
                  var _0xf9704f = this[_0x491673(0x254)];

                  _0x18ad85(_0x491673(0x482), _0xf9704f), 0x0 === _0xf9704f && _0x171435[_0x491673(0x1eb)]();

                  var _0x3cffce = setTimeout(function () {
                    var _0x3f910a = _0x491673;
                    _0x18ad85('connect\x20attempt\x20timed\x20out\x20after\x20%d', _0xf9704f), _0x171435[_0x3f910a(0x1eb)](), _0x58772d[_0x3f910a(0x166)](), _0x58772d[_0x3f910a(0x24e)](_0x3f910a(0x122), _0x3f910a(0xee)), _0x2b23e4['emitAll'](_0x3f910a(0x329), _0xf9704f);
                  }, _0xf9704f);

                  this[_0x491673(0x1bd)][_0x491673(0x41c)]({
                    'destroy': function destroy() {
                      clearTimeout(_0x3cffce);
                    }
                  });
                }

                return this[_0x491673(0x1bd)][_0x491673(0x41c)](_0x171435), this[_0x491673(0x1bd)][_0x491673(0x41c)](_0x37e5d9), this;
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x3e5)] = function () {
                var _0x42bffb = _0x346a7b;
                _0x18ad85(_0x42bffb(0x412)), this[_0x42bffb(0x42b)](), this[_0x42bffb(0x3d0)] = 'open', this[_0x42bffb(0x24e)](_0x42bffb(0x412));
                var _0x307e71 = this['engine'];
                this[_0x42bffb(0x1bd)][_0x42bffb(0x41c)](_0x2df958(_0x307e71, 'data', _0x2c0fdd(this, _0x42bffb(0x24f)))), this['subs']['push'](_0x2df958(_0x307e71, 'ping', _0x2c0fdd(this, _0x42bffb(0xef)))), this['subs'][_0x42bffb(0x41c)](_0x2df958(_0x307e71, 'pong', _0x2c0fdd(this, _0x42bffb(0x141)))), this[_0x42bffb(0x1bd)]['push'](_0x2df958(_0x307e71, _0x42bffb(0x122), _0x2c0fdd(this, 'onerror'))), this['subs']['push'](_0x2df958(_0x307e71, 'close', _0x2c0fdd(this, _0x42bffb(0xff)))), this['subs']['push'](_0x2df958(this[_0x42bffb(0x30b)], _0x42bffb(0x3e0), _0x2c0fdd(this, _0x42bffb(0x44e))));
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0xef)] = function () {
                var _0x250cd3 = _0x346a7b;
                this['lastPing'] = new Date(), this[_0x250cd3(0x2f7)](_0x250cd3(0x477));
              }, _0x15cd3f[_0x346a7b(0x1b3)]['onpong'] = function () {
                var _0xefc598 = _0x346a7b;

                this[_0xefc598(0x2f7)]('pong', new Date() - this[_0xefc598(0x17f)]);
              }, _0x15cd3f['prototype'][_0x346a7b(0x24f)] = function (_0x577f9c) {
                var _0x1ff64b = _0x346a7b;

                this['decoder'][_0x1ff64b(0x2fc)](_0x577f9c);
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x44e)] = function (_0x54f25b) {
                var _0x3c217e = _0x346a7b;

                this[_0x3c217e(0x24e)]('packet', _0x54f25b);
              }, _0x15cd3f['prototype'][_0x346a7b(0x112)] = function (_0x5cebbe) {
                var _0x2fd3c2 = _0x346a7b;
                _0x18ad85('error', _0x5cebbe), this[_0x2fd3c2(0x2f7)]('error', _0x5cebbe);
              }, _0x15cd3f[_0x346a7b(0x1b3)]['socket'] = function (_0x24ddf6, _0x289b28) {
                var _0xcdf404 = _0x346a7b,
                    _0xf3664b = this[_0xcdf404(0x32e)][_0x24ddf6];

                if (!_0xf3664b) {
                  _0xf3664b = new _0x3a6837(this, _0x24ddf6, _0x289b28), this[_0xcdf404(0x32e)][_0x24ddf6] = _0xf3664b;

                  var _0x42c25d = this;

                  _0xf3664b['on'](_0xcdf404(0x443), _0x2ceb62), _0xf3664b['on'](_0xcdf404(0x33f), function () {
                    var _0x144484 = _0xcdf404;
                    _0xf3664b['id'] = _0x42c25d[_0x144484(0x46b)](_0x24ddf6);
                  }), this[_0xcdf404(0x1f2)] && _0x2ceb62();
                }

                function _0x2ceb62() {
                  var _0x39b9ae = _0xcdf404;
                  ~_0x3693c1(_0x42c25d[_0x39b9ae(0x443)], _0xf3664b) || _0x42c25d[_0x39b9ae(0x443)][_0x39b9ae(0x41c)](_0xf3664b);
                }

                return _0xf3664b;
              }, _0x15cd3f['prototype']['destroy'] = function (_0x53ca03) {
                var _0x1a615c = _0x346a7b,
                    _0x36afa4 = _0x3693c1(this[_0x1a615c(0x443)], _0x53ca03);

                ~_0x36afa4 && this[_0x1a615c(0x443)][_0x1a615c(0x479)](_0x36afa4, 0x1), this[_0x1a615c(0x443)][_0x1a615c(0x1b1)] || this[_0x1a615c(0x166)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)]['packet'] = function (_0x56f798) {
                var _0x380ca2 = _0x346a7b;

                _0x18ad85(_0x380ca2(0x261), _0x56f798);

                var _0x299c2a = this;

                _0x56f798['query'] && 0x0 === _0x56f798[_0x380ca2(0x156)] && (_0x56f798['nsp'] += '?' + _0x56f798[_0x380ca2(0x189)]), _0x299c2a[_0x380ca2(0x307)] ? _0x299c2a[_0x380ca2(0x2ef)][_0x380ca2(0x41c)](_0x56f798) : (_0x299c2a[_0x380ca2(0x307)] = !0x0, this[_0x380ca2(0x278)][_0x380ca2(0x263)](_0x56f798, function (_0x81e51d) {
                  var _0x3b9248 = _0x380ca2;

                  for (var _0x37ecea = 0x0; _0x37ecea < _0x81e51d[_0x3b9248(0x1b1)]; _0x37ecea++) _0x299c2a[_0x3b9248(0x2d1)]['write'](_0x81e51d[_0x37ecea], _0x56f798[_0x3b9248(0x1a3)]);

                  _0x299c2a[_0x3b9248(0x307)] = !0x1, _0x299c2a['processPacketQueue']();
                }));
              }, _0x15cd3f['prototype'][_0x346a7b(0x20f)] = function () {
                var _0xd325f5 = _0x346a7b;

                if (this[_0xd325f5(0x2ef)][_0xd325f5(0x1b1)] > 0x0 && !this[_0xd325f5(0x307)]) {
                  var _0x2712d8 = this[_0xd325f5(0x2ef)]['shift']();

                  this[_0xd325f5(0x162)](_0x2712d8);
                }
              }, _0x15cd3f['prototype'][_0x346a7b(0x42b)] = function () {
                var _0x6cb7f1 = _0x346a7b;

                _0x18ad85(_0x6cb7f1(0x42b));

                for (var _0x2a8a99 = this['subs'][_0x6cb7f1(0x1b1)], _0x392ceb = 0x0; _0x392ceb < _0x2a8a99; _0x392ceb++) this['subs']['shift']()['destroy']();

                this[_0x6cb7f1(0x2ef)] = [], this[_0x6cb7f1(0x307)] = !0x1, this[_0x6cb7f1(0x17f)] = null, this[_0x6cb7f1(0x30b)]['destroy']();
              }, _0x15cd3f['prototype'][_0x346a7b(0x166)] = _0x15cd3f['prototype'][_0x346a7b(0x106)] = function () {
                var _0xfffda5 = _0x346a7b;
                _0x18ad85(_0xfffda5(0x106)), this['skipReconnect'] = !0x0, this[_0xfffda5(0x369)] = !0x1, 'opening' === this[_0xfffda5(0x3d0)] && this[_0xfffda5(0x42b)](), this[_0xfffda5(0x45b)][_0xfffda5(0x1ca)](), this[_0xfffda5(0x3d0)] = 'closed', this[_0xfffda5(0x2d1)] && this['engine'][_0xfffda5(0x166)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0xff)] = function (_0x250443) {
                var _0x1122ed = _0x346a7b;
                _0x18ad85('onclose'), this[_0x1122ed(0x42b)](), this['backoff'][_0x1122ed(0x1ca)](), this[_0x1122ed(0x3d0)] = _0x1122ed(0x183), this[_0x1122ed(0x24e)](_0x1122ed(0x166), _0x250443), this[_0x1122ed(0x2a2)] && !this[_0x1122ed(0x14c)] && this[_0x1122ed(0x33d)]();
              }, _0x15cd3f[_0x346a7b(0x1b3)]['reconnect'] = function () {
                var _0x893533 = _0x346a7b;
                if (this[_0x893533(0x369)] || this[_0x893533(0x14c)]) return this;

                var _0x56fcf9 = this;

                if (this[_0x893533(0x45b)][_0x893533(0x3e8)] >= this[_0x893533(0x454)]) _0x18ad85(_0x893533(0x2f6)), this[_0x893533(0x45b)][_0x893533(0x1ca)](), this[_0x893533(0x2f7)](_0x893533(0x294)), this[_0x893533(0x369)] = !0x1;else {
                  var _0x253cb3 = this['backoff'][_0x893533(0x12d)]();

                  _0x18ad85(_0x893533(0x3e3), _0x253cb3), this[_0x893533(0x369)] = !0x0;

                  var _0x3b16ea = setTimeout(function () {
                    var _0x33d14a = _0x893533;
                    _0x56fcf9[_0x33d14a(0x14c)] || (_0x18ad85('attempting\x20reconnect'), _0x56fcf9[_0x33d14a(0x2f7)]('reconnect_attempt', _0x56fcf9['backoff'][_0x33d14a(0x3e8)]), _0x56fcf9['emitAll'](_0x33d14a(0x369), _0x56fcf9[_0x33d14a(0x45b)][_0x33d14a(0x3e8)]), _0x56fcf9['skipReconnect'] || _0x56fcf9[_0x33d14a(0x412)](function (_0x2231b4) {
                      var _0x5a7b8e = _0x33d14a;
                      _0x2231b4 ? (_0x18ad85('reconnect\x20attempt\x20error'), _0x56fcf9[_0x5a7b8e(0x369)] = !0x1, _0x56fcf9['reconnect'](), _0x56fcf9[_0x5a7b8e(0x2f7)](_0x5a7b8e(0x151), _0x2231b4[_0x5a7b8e(0x1c5)])) : (_0x18ad85(_0x5a7b8e(0x20e)), _0x56fcf9['onreconnect']());
                    }));
                  }, _0x253cb3);

                  this[_0x893533(0x1bd)][_0x893533(0x41c)]({
                    'destroy': function destroy() {
                      clearTimeout(_0x3b16ea);
                    }
                  });
                }
              }, _0x15cd3f[_0x346a7b(0x1b3)][_0x346a7b(0x2c3)] = function () {
                var _0x2036b0 = _0x346a7b,
                    _0x282c45 = this['backoff'][_0x2036b0(0x3e8)];

                this[_0x2036b0(0x369)] = !0x1, this['backoff']['reset'](), this['updateSocketIds'](), this[_0x2036b0(0x2f7)](_0x2036b0(0x33d), _0x282c45);
              };
            },
            0x1558: function _(_0x2a3876) {
              _0x2a3876['exports'] = function (_0x3c119b, _0x5104c4, _0x33a3cf) {
                return _0x3c119b['on'](_0x5104c4, _0x33a3cf), {
                  'destroy': function destroy() {
                    var _0x29b7be = a0_0x107f;

                    _0x3c119b[_0x29b7be(0x198)](_0x5104c4, _0x33a3cf);
                  }
                };
              };
            },
            0x2188: function _(_0x514008, _0x3bb29e, _0x24673f) {
              var _0x3d5ec0 = a0_0x107f,
                  _0x58f630 = _0x24673f(0x2399),
                  _0x244399 = _0x24673f(0x223f),
                  _0x1b002c = _0x24673f(0xfca),
                  _0x570d6c = _0x24673f(0x1558),
                  _0x597036 = _0x24673f(0x17bd),
                  _0x159835 = _0x24673f(0x4cb)(_0x3d5ec0(0x145)),
                  _0x1718b5 = _0x24673f(0x726),
                  _0x34a8e3 = _0x24673f(0xd8a);

              _0x514008['exports'] = _0x1c8949;

              var _0x1d9f46 = {
                'connect': 0x1,
                'connect_error': 0x1,
                'connect_timeout': 0x1,
                'connecting': 0x1,
                'disconnect': 0x1,
                'error': 0x1,
                'reconnect': 0x1,
                'reconnect_attempt': 0x1,
                'reconnect_failed': 0x1,
                'reconnect_error': 0x1,
                'reconnecting': 0x1,
                'ping': 0x1,
                'pong': 0x1
              },
                  _0x3e326b = _0x244399[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x24e)];

              function _0x1c8949(_0x3c5fba, _0x236133, _0x27bf09) {
                var _0x485812 = _0x3d5ec0;
                this['io'] = _0x3c5fba, this[_0x485812(0x201)] = _0x236133, this[_0x485812(0x3d6)] = this, this[_0x485812(0x28f)] = 0x0, this[_0x485812(0x1e2)] = {}, this[_0x485812(0x486)] = [], this[_0x485812(0x11b)] = [], this[_0x485812(0x292)] = !0x1, this[_0x485812(0x2ab)] = !0x0, this[_0x485812(0x380)] = {}, _0x27bf09 && _0x27bf09[_0x485812(0x189)] && (this[_0x485812(0x189)] = _0x27bf09['query']), this['io'][_0x485812(0x1f2)] && this['open']();
              }

              _0x244399(_0x1c8949[_0x3d5ec0(0x1b3)]), _0x1c8949['prototype'][_0x3d5ec0(0xf9)] = function () {
                var _0x4de02f = _0x3d5ec0;

                if (!this['subs']) {
                  var _0x5db200 = this['io'];
                  this[_0x4de02f(0x1bd)] = [_0x570d6c(_0x5db200, 'open', _0x597036(this, _0x4de02f(0x3e5))), _0x570d6c(_0x5db200, _0x4de02f(0x162), _0x597036(this, _0x4de02f(0x191))), _0x570d6c(_0x5db200, _0x4de02f(0x166), _0x597036(this, _0x4de02f(0xff)))];
                }
              }, _0x1c8949['prototype']['open'] = _0x1c8949[_0x3d5ec0(0x1b3)]['connect'] = function () {
                var _0x5116d6 = _0x3d5ec0;
                return this['connected'] || (this['subEvents'](), this['io'][_0x5116d6(0x369)] || this['io'][_0x5116d6(0x412)](), _0x5116d6(0x412) === this['io']['readyState'] && this[_0x5116d6(0x3e5)](), this[_0x5116d6(0x24e)](_0x5116d6(0x443))), this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)]['send'] = function () {
                var _0x40230f = _0x3d5ec0,
                    _0x403b51 = _0x1b002c(arguments);

                return _0x403b51[_0x40230f(0x393)](_0x40230f(0x3dd)), this[_0x40230f(0x24e)][_0x40230f(0x394)](this, _0x403b51), this;
              }, _0x1c8949['prototype'][_0x3d5ec0(0x24e)] = function (_0x461a37) {
                var _0x1de62a = _0x3d5ec0;
                if (_0x1d9f46[_0x1de62a(0x32a)](_0x461a37)) return _0x3e326b['apply'](this, arguments), this;

                var _0x39f45d = _0x1b002c(arguments),
                    _0x9349a5 = {
                  'type': (void 0x0 !== this[_0x1de62a(0x380)][_0x1de62a(0x197)] ? this[_0x1de62a(0x380)][_0x1de62a(0x197)] : _0x34a8e3(_0x39f45d)) ? _0x58f630[_0x1de62a(0x2fd)] : _0x58f630['EVENT'],
                  'data': _0x39f45d,
                  'options': {}
                };

                return _0x9349a5[_0x1de62a(0x1a3)][_0x1de62a(0x473)] = !this[_0x1de62a(0x380)] || !0x1 !== this[_0x1de62a(0x380)][_0x1de62a(0x473)], _0x1de62a(0x17d) == typeof _0x39f45d[_0x39f45d[_0x1de62a(0x1b1)] - 0x1] && (_0x159835('emitting\x20packet\x20with\x20ack\x20id\x20%d', this['ids']), this[_0x1de62a(0x1e2)][this[_0x1de62a(0x28f)]] = _0x39f45d[_0x1de62a(0x457)](), _0x9349a5['id'] = this[_0x1de62a(0x28f)]++), this[_0x1de62a(0x292)] ? this[_0x1de62a(0x162)](_0x9349a5) : this[_0x1de62a(0x11b)][_0x1de62a(0x41c)](_0x9349a5), this['flags'] = {}, this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x162)] = function (_0xd3bebb) {
                var _0x1b8ba7 = _0x3d5ec0;
                _0xd3bebb[_0x1b8ba7(0x201)] = this[_0x1b8ba7(0x201)], this['io']['packet'](_0xd3bebb);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x3e5)] = function () {
                var _0x3bf249 = _0x3d5ec0;

                if (_0x159835(_0x3bf249(0x2c2)), '/' !== this[_0x3bf249(0x201)]) {
                  if (this[_0x3bf249(0x189)]) {
                    var _0x178201 = _0x3bf249(0x33c) == typeof this[_0x3bf249(0x189)] ? _0x1718b5['encode'](this[_0x3bf249(0x189)]) : this[_0x3bf249(0x189)];

                    _0x159835(_0x3bf249(0x302), _0x178201), this[_0x3bf249(0x162)]({
                      'type': _0x58f630[_0x3bf249(0x236)],
                      'query': _0x178201
                    });
                  } else this[_0x3bf249(0x162)]({
                    'type': _0x58f630[_0x3bf249(0x236)]
                  });
                }
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0xff)] = function (_0x92ff70) {
                var _0x493bc6 = _0x3d5ec0;
                _0x159835(_0x493bc6(0x462), _0x92ff70), this[_0x493bc6(0x292)] = !0x1, this[_0x493bc6(0x2ab)] = !0x0, delete this['id'], this['emit']('disconnect', _0x92ff70);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x191)] = function (_0x42da63) {
                var _0xfa7558 = _0x3d5ec0,
                    _0x197151 = _0x42da63[_0xfa7558(0x201)] === this['nsp'],
                    _0x28ce6f = _0x42da63[_0xfa7558(0x156)] === _0x58f630['ERROR'] && '/' === _0x42da63[_0xfa7558(0x201)];

                if (_0x197151 || _0x28ce6f) switch (_0x42da63[_0xfa7558(0x156)]) {
                  case _0x58f630[_0xfa7558(0x236)]:
                    this['onconnect']();
                    break;

                  case _0x58f630[_0xfa7558(0x29a)]:
                  case _0x58f630[_0xfa7558(0x2fd)]:
                    this[_0xfa7558(0x108)](_0x42da63);

                    break;

                  case _0x58f630[_0xfa7558(0x2a1)]:
                  case _0x58f630[_0xfa7558(0x133)]:
                    this['onack'](_0x42da63);
                    break;

                  case _0x58f630[_0xfa7558(0x203)]:
                    this['ondisconnect']();
                    break;

                  case _0x58f630[_0xfa7558(0x4ac)]:
                    this[_0xfa7558(0x24e)](_0xfa7558(0x122), _0x42da63[_0xfa7558(0x1c5)]);

                }
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x108)] = function (_0x1cee06) {
                var _0x348f54 = _0x3d5ec0,
                    _0x280378 = _0x1cee06['data'] || [];

                _0x159835(_0x348f54(0x114), _0x280378), null != _0x1cee06['id'] && (_0x159835(_0x348f54(0x243)), _0x280378[_0x348f54(0x41c)](this[_0x348f54(0x36c)](_0x1cee06['id']))), this[_0x348f54(0x292)] ? _0x3e326b['apply'](this, _0x280378) : this[_0x348f54(0x486)][_0x348f54(0x41c)](_0x280378);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x36c)] = function (_0x3b317f) {
                var _0x5e691b = this,
                    _0x5032a2 = !0x1;

                return function () {
                  var _0x416507 = a0_0x107f;

                  if (!_0x5032a2) {
                    _0x5032a2 = !0x0;

                    var _0x232ccf = _0x1b002c(arguments);

                    _0x159835('sending\x20ack\x20%j', _0x232ccf), _0x5e691b[_0x416507(0x162)]({
                      'type': _0x34a8e3(_0x232ccf) ? _0x58f630[_0x416507(0x133)] : _0x58f630['ACK'],
                      'id': _0x3b317f,
                      'data': _0x232ccf
                    });
                  }
                };
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x25f)] = function (_0xec390) {
                var _0x4d78f9 = _0x3d5ec0,
                    _0x4c26cd = this[_0x4d78f9(0x1e2)][_0xec390['id']];

                _0x4d78f9(0x17d) == typeof _0x4c26cd ? (_0x159835(_0x4d78f9(0x2e3), _0xec390['id'], _0xec390[_0x4d78f9(0x1c5)]), _0x4c26cd['apply'](this, _0xec390[_0x4d78f9(0x1c5)]), delete this[_0x4d78f9(0x1e2)][_0xec390['id']]) : _0x159835(_0x4d78f9(0x227), _0xec390['id']);
              }, _0x1c8949['prototype'][_0x3d5ec0(0x23d)] = function () {
                var _0x136b0b = _0x3d5ec0;
                this[_0x136b0b(0x292)] = !0x0, this['disconnected'] = !0x1, this[_0x136b0b(0x1d6)](), this['emit']('connect');
              }, _0x1c8949['prototype'][_0x3d5ec0(0x1d6)] = function () {
                var _0x591dcd = _0x3d5ec0,
                    _0x3c8fdd;

                for (_0x3c8fdd = 0x0; _0x3c8fdd < this[_0x591dcd(0x486)][_0x591dcd(0x1b1)]; _0x3c8fdd++) _0x3e326b['apply'](this, this['receiveBuffer'][_0x3c8fdd]);

                for (this[_0x591dcd(0x486)] = [], _0x3c8fdd = 0x0; _0x3c8fdd < this[_0x591dcd(0x11b)][_0x591dcd(0x1b1)]; _0x3c8fdd++) this[_0x591dcd(0x162)](this['sendBuffer'][_0x3c8fdd]);

                this['sendBuffer'] = [];
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x30f)] = function () {
                var _0x223263 = _0x3d5ec0;
                _0x159835(_0x223263(0x416), this['nsp']), this['destroy'](), this[_0x223263(0xff)]('io\x20server\x20disconnect');
              }, _0x1c8949['prototype'][_0x3d5ec0(0x1eb)] = function () {
                var _0x52dd53 = _0x3d5ec0;

                if (this[_0x52dd53(0x1bd)]) {
                  for (var _0x20b9bb = 0x0; _0x20b9bb < this[_0x52dd53(0x1bd)][_0x52dd53(0x1b1)]; _0x20b9bb++) this['subs'][_0x20b9bb][_0x52dd53(0x1eb)]();

                  this[_0x52dd53(0x1bd)] = null;
                }

                this['io']['destroy'](this);
              }, _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x166)] = _0x1c8949[_0x3d5ec0(0x1b3)][_0x3d5ec0(0x106)] = function () {
                var _0x41de86 = _0x3d5ec0;
                return this[_0x41de86(0x292)] && (_0x159835(_0x41de86(0x356), this['nsp']), this[_0x41de86(0x162)]({
                  'type': _0x58f630[_0x41de86(0x203)]
                })), this['destroy'](), this[_0x41de86(0x292)] && this['onclose'](_0x41de86(0x4c4)), this;
              }, _0x1c8949[_0x3d5ec0(0x1b3)]['compress'] = function (_0x294f4c) {
                var _0x1b93c0 = _0x3d5ec0;
                return this[_0x1b93c0(0x380)][_0x1b93c0(0x473)] = _0x294f4c, this;
              }, _0x1c8949['prototype'][_0x3d5ec0(0x197)] = function (_0x1017f3) {
                var _0x3d0b7e = _0x3d5ec0;
                return this['flags'][_0x3d0b7e(0x197)] = _0x1017f3, this;
              };
            },
            0xe5e: function _(_0x300e57, _0x56fb21, _0x491f90) {
              var _0xa18035 = a0_0x107f,
                  _0xbe91aa = _0x491f90(0x105b),
                  _0x19186f = _0x491f90(0x4cb)(_0xa18035(0x4b5));

              _0x300e57[_0xa18035(0x38d)] = function (_0x2d9127, _0x319165) {
                var _0x34db8d = _0xa18035,
                    _0x4a3c5a = _0x2d9127;
                _0x319165 = _0x319165 || 'undefined' != typeof location && location, null == _0x2d9127 && (_0x2d9127 = _0x319165[_0x34db8d(0x1c7)] + '//' + _0x319165[_0x34db8d(0x395)]), 'string' == typeof _0x2d9127 && ('/' === _0x2d9127['charAt'](0x0) && (_0x2d9127 = '/' === _0x2d9127[_0x34db8d(0x144)](0x1) ? _0x319165[_0x34db8d(0x1c7)] + _0x2d9127 : _0x319165[_0x34db8d(0x395)] + _0x2d9127), /^(https?|wss?):\/\//[_0x34db8d(0x4c7)](_0x2d9127) || (_0x19186f('protocol-less\x20url\x20%s', _0x2d9127), _0x2d9127 = void 0x0 !== _0x319165 ? _0x319165[_0x34db8d(0x1c7)] + '//' + _0x2d9127 : _0x34db8d(0x36a) + _0x2d9127), _0x19186f(_0x34db8d(0x4ab), _0x2d9127), _0x4a3c5a = _0xbe91aa(_0x2d9127)), _0x4a3c5a[_0x34db8d(0x4be)] || (/^(http|ws)$/[_0x34db8d(0x4c7)](_0x4a3c5a[_0x34db8d(0x1c7)]) ? _0x4a3c5a[_0x34db8d(0x4be)] = '80' : /^(http|ws)s$/[_0x34db8d(0x4c7)](_0x4a3c5a[_0x34db8d(0x1c7)]) && (_0x4a3c5a['port'] = _0x34db8d(0x3f5))), _0x4a3c5a[_0x34db8d(0x1ad)] = _0x4a3c5a[_0x34db8d(0x1ad)] || '/';

                var _0x1af6cf = -0x1 !== _0x4a3c5a[_0x34db8d(0x395)][_0x34db8d(0x22a)](':') ? '[' + _0x4a3c5a['host'] + ']' : _0x4a3c5a['host'];

                return _0x4a3c5a['id'] = _0x4a3c5a[_0x34db8d(0x1c7)] + _0x34db8d(0x23a) + _0x1af6cf + ':' + _0x4a3c5a[_0x34db8d(0x4be)], _0x4a3c5a[_0x34db8d(0x453)] = _0x4a3c5a[_0x34db8d(0x1c7)] + _0x34db8d(0x23a) + _0x1af6cf + (_0x319165 && _0x319165['port'] === _0x4a3c5a['port'] ? '' : ':' + _0x4a3c5a[_0x34db8d(0x4be)]), _0x4a3c5a;
              };
            },
            0x916: function _(_0x46ad26, _0x14fdfc, _0x35d46e) {
              var _0x213205 = a0_0x107f,
                  _0x381b3e = _0x35d46e(0x16c2),
                  _0x405ade = _0x35d46e(0x17b2),
                  _0x3a7dc3 = Object[_0x213205(0x1b3)][_0x213205(0x436)],
                  _0x11e6b3 = _0x213205(0x17d) == typeof Blob || _0x213205(0x364) != typeof Blob && '[object\x20BlobConstructor]' === _0x3a7dc3[_0x213205(0x229)](Blob),
                  _0x190a46 = _0x213205(0x17d) == typeof File || _0x213205(0x364) != typeof File && _0x213205(0x4a4) === _0x3a7dc3[_0x213205(0x229)](File);

              function _0x27708f(_0x109863, _0x3de405) {
                var _0x5b9116 = _0x213205;
                if (!_0x109863) return _0x109863;

                if (_0x405ade(_0x109863)) {
                  var _0x15b2ba = {
                    '_placeholder': !0x0,
                    'num': _0x3de405['length']
                  };
                  return _0x3de405['push'](_0x109863), _0x15b2ba;
                }

                if (_0x381b3e(_0x109863)) {
                  for (var _0x43b187 = new Array(_0x109863['length']), _0xe1ae0f = 0x0; _0xe1ae0f < _0x109863[_0x5b9116(0x1b1)]; _0xe1ae0f++) _0x43b187[_0xe1ae0f] = _0x27708f(_0x109863[_0xe1ae0f], _0x3de405);

                  return _0x43b187;
                }

                if ('object' == typeof _0x109863 && !(_0x109863 instanceof Date)) {
                  for (var _0x4a0b56 in _0x43b187 = {}, _0x109863) _0x43b187[_0x4a0b56] = _0x27708f(_0x109863[_0x4a0b56], _0x3de405);

                  return _0x43b187;
                }

                return _0x109863;
              }

              function _0x185565(_0x348a89, _0x2c9c76) {
                var _0x5c20f9 = _0x213205;
                if (!_0x348a89) return _0x348a89;
                if (_0x348a89 && _0x348a89[_0x5c20f9(0x4c8)]) return _0x2c9c76[_0x348a89[_0x5c20f9(0x1fd)]];

                if (_0x381b3e(_0x348a89)) {
                  for (var _0x401c87 = 0x0; _0x401c87 < _0x348a89['length']; _0x401c87++) _0x348a89[_0x401c87] = _0x185565(_0x348a89[_0x401c87], _0x2c9c76);
                } else {
                  if ('object' == typeof _0x348a89) {
                    for (var _0x4738e3 in _0x348a89) _0x348a89[_0x4738e3] = _0x185565(_0x348a89[_0x4738e3], _0x2c9c76);
                  }
                }

                return _0x348a89;
              }

              _0x14fdfc[_0x213205(0x43c)] = function (_0x25a793) {
                var _0x54a151 = _0x213205,
                    _0x14435c = [],
                    _0x547ca8 = _0x25a793['data'],
                    _0x4a0948 = _0x25a793;
                return _0x4a0948['data'] = _0x27708f(_0x547ca8, _0x14435c), _0x4a0948[_0x54a151(0x1d8)] = _0x14435c[_0x54a151(0x1b1)], {
                  'packet': _0x4a0948,
                  'buffers': _0x14435c
                };
              }, _0x14fdfc['reconstructPacket'] = function (_0x334829, _0xaffa4a) {
                var _0x1b92e2 = _0x213205;
                return _0x334829[_0x1b92e2(0x1c5)] = _0x185565(_0x334829[_0x1b92e2(0x1c5)], _0xaffa4a), _0x334829['attachments'] = void 0x0, _0x334829;
              }, _0x14fdfc[_0x213205(0x327)] = function (_0x865efd, _0x1d6f26) {
                var _0x4d6eea = 0x0,
                    _0x25b3ce = _0x865efd;
                !function _0x44ed1f(_0x4c9c79, _0x495595, _0x586dff) {
                  var _0x28f9a2 = a0_0x107f;
                  if (!_0x4c9c79) return _0x4c9c79;

                  if (_0x11e6b3 && _0x4c9c79 instanceof Blob || _0x190a46 && _0x4c9c79 instanceof File) {
                    _0x4d6eea++;

                    var _0x558f83 = new FileReader();

                    _0x558f83[_0x28f9a2(0x18e)] = function () {
                      var _0x3484aa = _0x28f9a2;
                      _0x586dff ? _0x586dff[_0x495595] = this[_0x3484aa(0x1c0)] : _0x25b3ce = this['result'], --_0x4d6eea || _0x1d6f26(_0x25b3ce);
                    }, _0x558f83['readAsArrayBuffer'](_0x4c9c79);
                  } else {
                    if (_0x381b3e(_0x4c9c79)) {
                      for (var _0x53526c = 0x0; _0x53526c < _0x4c9c79[_0x28f9a2(0x1b1)]; _0x53526c++) _0x44ed1f(_0x4c9c79[_0x53526c], _0x53526c, _0x4c9c79);
                    } else {
                      if (_0x28f9a2(0x33c) == typeof _0x4c9c79 && !_0x405ade(_0x4c9c79)) {
                        for (var _0x10875a in _0x4c9c79) _0x44ed1f(_0x4c9c79[_0x10875a], _0x10875a, _0x4c9c79);
                      }
                    }
                  }
                }(_0x25b3ce), _0x4d6eea || _0x1d6f26(_0x25b3ce);
              };
            },
            0x2399: function _(_0x39fff8, _0x55a58a, _0x4c7453) {
              var _0x4acd4e = a0_0x107f,
                  _0x2a8bbd = _0x4c7453(0x4cb)(_0x4acd4e(0x3b7)),
                  _0x42b58c = _0x4c7453(0x223f),
                  _0x5c0dac = _0x4c7453(0x916),
                  _0x4a92b5 = _0x4c7453(0x16c2),
                  _0x3268d7 = _0x4c7453(0x17b2);

              function _0x3d8683() {}

              _0x55a58a[_0x4acd4e(0x1c7)] = 0x4, _0x55a58a[_0x4acd4e(0x24d)] = [_0x4acd4e(0x236), _0x4acd4e(0x203), _0x4acd4e(0x29a), _0x4acd4e(0x2a1), _0x4acd4e(0x4ac), 'BINARY_EVENT', _0x4acd4e(0x133)], _0x55a58a[_0x4acd4e(0x236)] = 0x0, _0x55a58a[_0x4acd4e(0x203)] = 0x1, _0x55a58a[_0x4acd4e(0x29a)] = 0x2, _0x55a58a[_0x4acd4e(0x2a1)] = 0x3, _0x55a58a[_0x4acd4e(0x4ac)] = 0x4, _0x55a58a['BINARY_EVENT'] = 0x5, _0x55a58a[_0x4acd4e(0x133)] = 0x6, _0x55a58a[_0x4acd4e(0x137)] = _0x3d8683, _0x55a58a['Decoder'] = _0x53eed1;

              var _0x59e063 = _0x55a58a['ERROR'] + _0x4acd4e(0x281);

              function _0x414f9a(_0x58e54d) {
                var _0x59f5f1 = _0x4acd4e,
                    _0x16ca00 = '' + _0x58e54d['type'];

                if (_0x55a58a[_0x59f5f1(0x2fd)] !== _0x58e54d[_0x59f5f1(0x156)] && _0x55a58a['BINARY_ACK'] !== _0x58e54d['type'] || (_0x16ca00 += _0x58e54d['attachments'] + '-'), _0x58e54d[_0x59f5f1(0x201)] && '/' !== _0x58e54d['nsp'] && (_0x16ca00 += _0x58e54d[_0x59f5f1(0x201)] + ','), null != _0x58e54d['id'] && (_0x16ca00 += _0x58e54d['id']), null != _0x58e54d[_0x59f5f1(0x1c5)]) {
                  var _0x1884a0 = function (_0xc0817f) {
                    var _0x4da44f = _0x59f5f1;

                    try {
                      return JSON[_0x4da44f(0x296)](_0xc0817f);
                    } catch (_0x2261c1) {
                      return !0x1;
                    }
                  }(_0x58e54d[_0x59f5f1(0x1c5)]);

                  if (!0x1 === _0x1884a0) return _0x59e063;
                  _0x16ca00 += _0x1884a0;
                }

                return _0x2a8bbd(_0x59f5f1(0x1b7), _0x58e54d, _0x16ca00), _0x16ca00;
              }

              function _0x53eed1() {
                var _0x53be65 = _0x4acd4e;
                this[_0x53be65(0xf1)] = null;
              }

              function _0x47050b(_0x5cd3b8) {
                var _0x3777f6 = _0x4acd4e;
                this[_0x3777f6(0x102)] = _0x5cd3b8, this[_0x3777f6(0x2b8)] = [];
              }

              function _0x2c0a0f(_0xb0869f) {
                var _0x54a4c6 = _0x4acd4e;
                return {
                  'type': _0x55a58a[_0x54a4c6(0x4ac)],
                  'data': 'parser\x20error:\x20' + _0xb0869f
                };
              }

              _0x3d8683[_0x4acd4e(0x1b3)]['encode'] = function (_0x5c23ca, _0x5dedd9) {
                var _0x246a81 = _0x4acd4e;
                _0x2a8bbd(_0x246a81(0x4cb), _0x5c23ca), _0x55a58a[_0x246a81(0x2fd)] === _0x5c23ca[_0x246a81(0x156)] || _0x55a58a['BINARY_ACK'] === _0x5c23ca[_0x246a81(0x156)] ? function (_0x11c7a9, _0x4e35f7) {
                  var _0x173008 = _0x246a81;

                  _0x5c0dac[_0x173008(0x327)](_0x11c7a9, function (_0x5613d3) {
                    var _0x425ebd = _0x173008,
                        _0x405526 = _0x5c0dac['deconstructPacket'](_0x5613d3),
                        _0x4aaa2c = _0x414f9a(_0x405526[_0x425ebd(0x162)]),
                        _0x1b28e3 = _0x405526[_0x425ebd(0x2b8)];

                    _0x1b28e3[_0x425ebd(0x393)](_0x4aaa2c), _0x4e35f7(_0x1b28e3);
                  });
                }(_0x5c23ca, _0x5dedd9) : _0x5dedd9([_0x414f9a(_0x5c23ca)]);
              }, _0x42b58c(_0x53eed1['prototype']), _0x53eed1[_0x4acd4e(0x1b3)][_0x4acd4e(0x2fc)] = function (_0x47f23f) {
                var _0x28617e = _0x4acd4e,
                    _0x860a70;

                if (_0x28617e(0x268) == typeof _0x47f23f) _0x860a70 = function (_0x54072d) {
                  var _0x4356b2 = _0x28617e,
                      _0x8d70e4 = 0x0,
                      _0x25f0f8 = {
                    'type': Number(_0x54072d[_0x4356b2(0x144)](0x0))
                  };
                  if (null == _0x55a58a[_0x4356b2(0x24d)][_0x25f0f8[_0x4356b2(0x156)]]) return _0x2c0a0f(_0x4356b2(0x3e9) + _0x25f0f8[_0x4356b2(0x156)]);

                  if (_0x55a58a[_0x4356b2(0x2fd)] === _0x25f0f8[_0x4356b2(0x156)] || _0x55a58a[_0x4356b2(0x133)] === _0x25f0f8[_0x4356b2(0x156)]) {
                    for (var _0x5bd91f = _0x8d70e4 + 0x1; '-' !== _0x54072d[_0x4356b2(0x144)](++_0x8d70e4) && _0x8d70e4 != _0x54072d[_0x4356b2(0x1b1)];);

                    var _0xfab0f8 = _0x54072d[_0x4356b2(0x4a5)](_0x5bd91f, _0x8d70e4);

                    if (_0xfab0f8 != Number(_0xfab0f8) || '-' !== _0x54072d[_0x4356b2(0x144)](_0x8d70e4)) throw new Error('Illegal\x20attachments');
                    _0x25f0f8[_0x4356b2(0x1d8)] = Number(_0xfab0f8);
                  }

                  if ('/' === _0x54072d[_0x4356b2(0x144)](_0x8d70e4 + 0x1)) {
                    for (_0x5bd91f = _0x8d70e4 + 0x1; ++_0x8d70e4 && ',' !== (_0x2a1e8e = _0x54072d['charAt'](_0x8d70e4)) && _0x8d70e4 !== _0x54072d[_0x4356b2(0x1b1)];);

                    _0x25f0f8[_0x4356b2(0x201)] = _0x54072d['substring'](_0x5bd91f, _0x8d70e4);
                  } else _0x25f0f8['nsp'] = '/';

                  var _0x26180c = _0x54072d[_0x4356b2(0x144)](_0x8d70e4 + 0x1);

                  if ('' !== _0x26180c && Number(_0x26180c) == _0x26180c) {
                    for (_0x5bd91f = _0x8d70e4 + 0x1; ++_0x8d70e4;) {
                      var _0x2a1e8e;

                      if (null == (_0x2a1e8e = _0x54072d[_0x4356b2(0x144)](_0x8d70e4)) || Number(_0x2a1e8e) != _0x2a1e8e) {
                        --_0x8d70e4;
                        break;
                      }

                      if (_0x8d70e4 === _0x54072d[_0x4356b2(0x1b1)]) break;
                    }

                    _0x25f0f8['id'] = Number(_0x54072d[_0x4356b2(0x4a5)](_0x5bd91f, _0x8d70e4 + 0x1));
                  }

                  if (_0x54072d[_0x4356b2(0x144)](++_0x8d70e4)) {
                    var _0x10bffc = function (_0x54a351) {
                      var _0x381d81 = _0x4356b2;

                      try {
                        return JSON[_0x381d81(0x288)](_0x54a351);
                      } catch (_0x1a3ab6) {
                        return !0x1;
                      }
                    }(_0x54072d[_0x4356b2(0x40e)](_0x8d70e4));

                    if (!0x1 === _0x10bffc || _0x25f0f8[_0x4356b2(0x156)] !== _0x55a58a['ERROR'] && !_0x4a92b5(_0x10bffc)) return _0x2c0a0f(_0x4356b2(0x346));
                    _0x25f0f8[_0x4356b2(0x1c5)] = _0x10bffc;
                  }

                  return _0x2a8bbd('decoded\x20%s\x20as\x20%j', _0x54072d, _0x25f0f8), _0x25f0f8;
                }(_0x47f23f), _0x55a58a['BINARY_EVENT'] === _0x860a70[_0x28617e(0x156)] || _0x55a58a[_0x28617e(0x133)] === _0x860a70['type'] ? (this['reconstructor'] = new _0x47050b(_0x860a70), 0x0 === this[_0x28617e(0xf1)][_0x28617e(0x102)][_0x28617e(0x1d8)] && this['emit']('decoded', _0x860a70)) : this['emit'](_0x28617e(0x3e0), _0x860a70);else {
                  if (!_0x3268d7(_0x47f23f) && !_0x47f23f[_0x28617e(0x275)]) throw new Error(_0x28617e(0x45e) + _0x47f23f);
                  if (!this[_0x28617e(0xf1)]) throw new Error(_0x28617e(0x1ab));
                  (_0x860a70 = this[_0x28617e(0xf1)][_0x28617e(0x341)](_0x47f23f)) && (this['reconstructor'] = null, this['emit'](_0x28617e(0x3e0), _0x860a70));
                }
              }, _0x53eed1[_0x4acd4e(0x1b3)][_0x4acd4e(0x1eb)] = function () {
                var _0x5b7d94 = _0x4acd4e;
                this[_0x5b7d94(0xf1)] && this[_0x5b7d94(0xf1)][_0x5b7d94(0x401)]();
              }, _0x47050b[_0x4acd4e(0x1b3)][_0x4acd4e(0x341)] = function (_0x379cb9) {
                var _0x217c42 = _0x4acd4e;

                if (this[_0x217c42(0x2b8)]['push'](_0x379cb9), this[_0x217c42(0x2b8)][_0x217c42(0x1b1)] === this['reconPack'][_0x217c42(0x1d8)]) {
                  var _0x316383 = _0x5c0dac[_0x217c42(0x371)](this[_0x217c42(0x102)], this[_0x217c42(0x2b8)]);

                  return this[_0x217c42(0x401)](), _0x316383;
                }

                return null;
              }, _0x47050b[_0x4acd4e(0x1b3)][_0x4acd4e(0x401)] = function () {
                var _0x317abd = _0x4acd4e;
                this[_0x317abd(0x102)] = null, this[_0x317abd(0x2b8)] = [];
              };
            },
            0x17b2: function _(_0x291aec) {
              var _0x3f84d0 = a0_0x107f;

              _0x291aec[_0x3f84d0(0x38d)] = function (_0x52fa6d) {
                var _0x3f1e53 = _0x3f84d0;
                return _0x3c0b0f && Buffer[_0x3f1e53(0x160)](_0x52fa6d) || _0x3d54c7 && (_0x52fa6d instanceof ArrayBuffer || function (_0x3e9182) {
                  var _0x37018c = _0x3f1e53;
                  return 'function' == typeof ArrayBuffer['isView'] ? ArrayBuffer[_0x37018c(0x37b)](_0x3e9182) : _0x3e9182['buffer'] instanceof ArrayBuffer;
                }(_0x52fa6d));
              };

              var _0x3c0b0f = _0x3f84d0(0x17d) == typeof Buffer && _0x3f84d0(0x17d) == typeof Buffer[_0x3f84d0(0x160)],
                  _0x3d54c7 = 'function' == typeof ArrayBuffer;
            },
            0xfca: function _(_0x380d45) {
              var _0x1f5fae = a0_0x107f;

              _0x380d45[_0x1f5fae(0x38d)] = function (_0x191559, _0x4854eb) {
                for (var _0x4167ca = [], _0x4f7eab = (_0x4854eb = _0x4854eb || 0x0) || 0x0; _0x4f7eab < _0x191559['length']; _0x4f7eab++) _0x4167ca[_0x4f7eab - _0x4854eb] = _0x191559[_0x4f7eab];

                return _0x4167ca;
              };
            },
            0x8e9: function _(_0x5085b0) {
              var _0x5a8e81 = a0_0x107f;

              var _0x22d8a7,
                  _0x3e91f5 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'[_0x5a8e81(0x460)](''),
                  _0x25398f = {},
                  _0x300919 = 0x0,
                  _0x3a78b3 = 0x0;

              function _0x40321d(_0x57cf33) {
                var _0x4ba9a3 = '';

                do {
                  _0x4ba9a3 = _0x3e91f5[_0x57cf33 % 0x40] + _0x4ba9a3, _0x57cf33 = Math['floor'](_0x57cf33 / 0x40);
                } while (_0x57cf33 > 0x0);

                return _0x4ba9a3;
              }

              function _0x1cdc79() {
                var _0xf10362 = _0x40321d(+new Date());

                return _0xf10362 !== _0x22d8a7 ? (_0x300919 = 0x0, _0x22d8a7 = _0xf10362) : _0xf10362 + '.' + _0x40321d(_0x300919++);
              }

              for (; _0x3a78b3 < 0x40; _0x3a78b3++) _0x25398f[_0x3e91f5[_0x3a78b3]] = _0x3a78b3;

              _0x1cdc79[_0x5a8e81(0x263)] = _0x40321d, _0x1cdc79[_0x5a8e81(0x3f1)] = function (_0x7e8dac) {
                var _0x3e0af3 = _0x5a8e81,
                    _0x142437 = 0x0;

                for (_0x3a78b3 = 0x0; _0x3a78b3 < _0x7e8dac[_0x3e0af3(0x1b1)]; _0x3a78b3++) _0x142437 = 0x40 * _0x142437 + _0x25398f[_0x7e8dac[_0x3e0af3(0x144)](_0x3a78b3)];

                return _0x142437;
              }, _0x5085b0['exports'] = _0x1cdc79;
            },
            0x1b6c: function _() {}
          },
              _0x2de417 = {},
              _0x10ca6e = function _0x460d82(_0x421da6) {
            var _0x1e4cd6 = a0_0x107f,
                _0xeaf771 = _0x2de417[_0x421da6];
            if (void 0x0 !== _0xeaf771) return _0xeaf771[_0x1e4cd6(0x38d)];

            var _0x39b422 = _0x2de417[_0x421da6] = {
              'exports': {}
            };

            return _0x1cc45a[_0x421da6][_0x1e4cd6(0x229)](_0x39b422[_0x1e4cd6(0x38d)], _0x39b422, _0x39b422[_0x1e4cd6(0x38d)], _0x460d82), _0x39b422['exports'];
          }(0x370);

          module[_0x172cd5(0x38d)] = _0x10ca6e;
        }(); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/gameCommonUtils.ts", ['cc', './loadConfigAsync.ts', './utils.ts'], function (exports) {
  var cclegacy, sys, rect, director, game, loadConfigAsync, setOpacity, setDeviceOrientation;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      rect = module.rect;
      director = module.director;
      game = module.game;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
      setDeviceOrientation = module.setDeviceOrientation;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57626ZrpD9Ds4C68txemV+u", "gameCommonUtils", undefined);

      var lodash = globalThis._;

      var GameCommonUtils = /*#__PURE__*/function () {
        function GameCommonUtils() {
          var _this = this;

          this.gameCanvasSize = {};

          this.getUrlParam = function (name) {
            if (sys.isNative) return null;
            var url = new URL(window.location);
            return url.searchParams.get(name);
          };

          this.checkConditionCloseGameIframe = function () {
            var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              return true;
            }

            var returnUrl = _this.getUrlParam('ru');

            return returnUrl && LOGIN_IFRAME;
          };

          this.handleCloseGameIframe = function () {
            var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              _this.handleBackToLobby();

              return;
            }

            var returnUrl = _this.getUrlParam('ru');

            if (returnUrl && LOGIN_IFRAME) {
              if (returnUrl.trim() === 'close') {
                window.close();
              } else {
                window.location.href = returnUrl;
              }
            } else {
              location.reload();
            }
          };

          this.handleFlowOutGame = function () {
            var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC3.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              _this.handleBackToLobby();
            }
          };

          this.handleBackLogin = function () {
            var _loadConfigAsync$getC4 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC4.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              _this.handleBackToLobby();
            }
          };

          this.getMessageSlot = function (mess) {
            if (mess === void 0) {
              mess = {};
            }

            var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC5.LOGIN_IFRAME;

            var language = LOGIN_IFRAME ? _this.getUrlParam('l') : sys.localStorage.getItem('l');
            var result = {};

            if (globalThis.slotLanguageData) {
              result = new globalThis.slotLanguageData(language).getMessageSlot(mess);
            }

            return result;
          };

          this.getBetValueWithGame = function (gameId, listBet) {
            if (!gameId) return '';
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = '';
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);

              if (lodash.isEmpty(listBet)) {
                return betValue[gameId];
              } else {
                if (lodash.isArray(listBet) && listBet.includes(betValue[gameId])) {
                  return betValue[gameId];
                } else {
                  var isExist = false;
                  Object.keys(listBet).map(function (betId) {
                    if (listBet[betId] === betValue[gameId]) {
                      isExist = true;
                    }
                  });

                  if (isExist) {
                    return betValue[gameId];
                  }
                }
              }
            }

            return '';
          };

          this.setBetValueWithGame = function (gameId, betId) {
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);
              betValue[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(betValue));
            }
          };

          this.getKeyWithGame = function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              return betLinesValue[gameId] ? betLinesValue[gameId] : value;
            }

            return value;
          };

          this.setKeyWithGame = function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              betLinesValue[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(betLinesValue));
            }
          };

          this.optimizeScrollView = function (listView) {
            var view = listView.parent;
            var viewRect = rect(-view.width / 2, -listView.y - view.height, view.width, view.height);

            for (var i = 0; i < listView.children.length; i++) {
              var node = listView.children[i];

              if (viewRect.intersects(node.getBoundingBox())) {
                setOpacity(node, 255);
              } else {
                setOpacity(node, 0);
              }
            }
          };
        }

        var _proto = GameCommonUtils.prototype;

        _proto.isLoginIframe = function isLoginIframe() {
          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME;

          return LOGIN_IFRAME === true;
        };

        _proto.handleBackToLobby = function handleBackToLobby() {
          var _loadConfigAsync$getC7 = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC7.IS_PRODUCTION,
              LOBBY_SCENE_NAME = _loadConfigAsync$getC7.LOBBY_SCENE_NAME,
              IS_LOBBY_PORTRAIT = _loadConfigAsync$getC7.IS_LOBBY_PORTRAIT;

          if (IS_PRODUCTION) {
            director.emit("INTEGRATION_BACK_TO_LOBBY");
          } else {
            var scene = director.getScene();
            var nodePersist = scene.getChildByName('OverlayPersistent');

            if (nodePersist) {
              game.removePersistRootNode(nodePersist);
            }

            setDeviceOrientation(IS_LOBBY_PORTRAIT ? true : false);
            director.preloadScene(LOBBY_SCENE_NAME, function () {
              director.loadScene(LOBBY_SCENE_NAME);
            });
          }
        };

        _proto.handleReleaseBundle = function handleReleaseBundle() {};

        return GameCommonUtils;
      }();

      var gameCommonUtils = exports('default', new GameCommonUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sys, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "698e2Ijr7hE3ZOE6T4o6wQQ", "GameMode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameMode = exports('GameMode', (_dec = ccclass('GameMode'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameMode, _Component);

        function GameMode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "garbageCollectWhenExit", _descriptor, _assertThisInitialized(_this));

          _this.callBackWhenHide = void 0;
          return _this;
        }

        var _proto = GameMode.prototype;

        _proto.onLoad = function onLoad() {
          this.node.init = this.init.bind(this);
          this.node.enter = this.enter.bind(this);
          this.node.exit = this.exit.bind(this);
          this.node.hide = this.hide.bind(this);
          this.node.show = this.show.bind(this);
          this.node.reset = this.reset.bind(this);
          this.node.stateUpdate = this.stateUpdate.bind(this);
          this.node.stateResume = this.stateResume.bind(this);
          this.node.resetCallbackWhenHide = this.resetCallbackWhenHide.bind(this);
        };

        _proto.init = function init(isActive) {
          if (isActive === void 0) {
            isActive = false;
          }

          this.node.emit('GAME_INIT');
          setOpacity(this.node, 1);
          this.node.active = false;

          if (isActive) {
            setOpacity(this.node, 255);
            this.node.active = true;
          }
        };

        _proto.stateResume = function stateResume(callback) {
          this.node.emit('GAME_RESUME');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.stateUpdate = function stateUpdate(callback) {
          this.node.emit('GAME_UPDATE');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.show = function show(callback) {
          if (callback === void 0) {
            callback = null;
          }

          this.node.active = true;
          setOpacity(this.node, 255);
          this.node.emit('GAME_SHOW');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.exit = function exit() {
          if (this.callBackWhenHide && typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide();
            this.callBackWhenHide = null;
          }

          this.hide();
          this.node.emit('GAME_EXIT');
          this.node.active = false;

          if (sys.isNative && this.garbageCollectWhenExit) {
            sys.garbageCollect();
          }
        };

        _proto.hide = function hide(callback) {
          if (callback === void 0) {
            callback = null;
          }

          setOpacity(this.node, 1);
          this.node.emit('GAME_HIDE');

          if (callback && typeof callback == "function") {
            callback();
          }

          this.node.active = false;
        };

        _proto.enter = function enter(data, callback) {
          this.node.active = true;
          this.show();
          this.callBackWhenHide = callback;
          this.node.emit('GAME_ENTER', data);
        };

        _proto.reset = function reset(callback) {
          this.node.emit('GAME_RESET');

          if (callback && typeof callback == "function") {
            callback();
          }
        };

        _proto.resetCallbackWhenHide = function resetCallbackWhenHide() {
          if (this.callBackWhenHide && typeof this.callBackWhenHide == "function") {
            this.callBackWhenHide = null;
          }
        };

        return GameMode;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "garbageCollectWhenExit", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameObject.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomType.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, getOpacity, setOpacity, fadeIn, fadeOut, fadeTo, CustomEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      getOpacity = module.getOpacity;
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      fadeTo = module.fadeTo;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "055b1lhRoJDK42lugsBQz08", "GameObject", undefined);

      var ccclass = _decorator.ccclass;
      var GameObject = exports('GameObject', (_dec = ccclass('GameObject'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameObject, _Component);

        function GameObject() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GameObject.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("GET_GAME_MODEL", this.getGameModel, this);

          if (!this.node["mainDirector"]) {
            this.node.dispatchEvent(new CustomEvent("GET_GAME_MODEL", true));
          }
        };

        _proto.getGameModel = function getGameModel(evt) {
          if (this.config) {
            evt.propagationStopped = true;
            evt.target.config = this.config;
            evt.target.dataStore = this.dataStore;
            evt.target.mainDirector = this.mainDirector;
          }
        };

        _proto.getOpacity = function getOpacity$1(node) {
          return getOpacity(node);
        };

        _proto.setOpacity = function setOpacity$1(node, opacity) {
          setOpacity(node, opacity);
        };

        _proto.fadeIn = function fadeIn$1(target, duration, options) {
          return fadeIn(target, duration, options);
        };

        _proto.fadeOut = function fadeOut$1(target, duration, options) {
          return fadeOut(target, duration, options);
        };

        _proto.fadeTo = function fadeTo$1(target, duration, opacity, options) {
          return fadeTo(target, duration, opacity, options);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("GET_GAME_MODEL", this.getGameModel, this);

          if (this.eventManager) {
            this.eventManager.targetOff(this);
          }

          this.node.mainDirector = null;
          this.node.config = null;
          this.node.dataStore = null;
        };

        _createClass(GameObject, [{
          key: "mainDirector",
          get: function get() {
            return this.node.mainDirector;
          }
        }, {
          key: "config",
          get: function get() {
            return this.node.config;
          }
        }, {
          key: "dataStore",
          get: function get() {
            return this.node.dataStore;
          }
        }, {
          key: "soundPlayer",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.soundPlayer;
            return null;
          }
        }, {
          key: "eventManager",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.eventManager;
            return null;
          }
        }, {
          key: "guiMgr",
          get: function get() {
            if (this.mainDirector) return this.mainDirector.guiMgr;
            return null;
          }
        }]);

        return GameObject;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameStateSlot.ts", ['cc', './game-network.mjs_cjs=&original=.js', './loadConfigAsync.ts', './gameCommonUtils.ts', './NetworkEnum.ts', './MsgKeyMapping.ts', './utils.ts', './CustomEnum.ts', './game-network.js'], function (exports) {
  var cclegacy, log, sys, loadConfigAsync, gameCommonUtils, NetworkEvent, MsgReceiveMapping, MsgSendMapping, MsgTopUserMapping, mapObjectKey, WalletType, PROMOTION_ERROR, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
    }, null, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      NetworkEvent = module.NetworkEvent;
    }, function (module) {
      MsgReceiveMapping = module.MsgReceiveMapping;
      MsgSendMapping = module.MsgSendMapping;
      MsgTopUserMapping = module.MsgTopUserMapping;
    }, function (module) {
      mapObjectKey = module.mapObjectKey;
    }, function (module) {
      WalletType = module.WalletType;
      PROMOTION_ERROR = module.PROMOTION_ERROR;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ad964ok3MBPWp0kx2TruCgi", "gameStateSlot", undefined);

      var network = globalThis.GameNetwork || _cjsExports;
      var MessageManager = network.MessageManager,
          EventManager = network.EventManager,
          CommandManager = network.CommandManager,
          PlayerInfoStateManager = network.PlayerInfoStateManager;
      var _network$lib = network.lib,
          logger = _network$lib.logger,
          uuid = _network$lib.uuid;
      var messageManager = MessageManager.getInstance();
      var playerInfoStateManager = PlayerInfoStateManager.getInstance();
      var lodash = globalThis._;
      var SLOT_STRATEGY = {
        'client-join-game-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-join-game-request-ev': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'jg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'jge': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-normal-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'ng': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-free-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'fg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-respin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'rg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-lightning-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-powerup-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-mini-game-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'mg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-free-spin-option-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'fo': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'lng': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'client-gamble-spin-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'gg': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "PANIC"
        },
        'glt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "PANIC"
        },
        'glte': {
          resendCount: 0,
          shouldWaitForACK: false,
          canBeDuplicated: true,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-join-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-normal-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-free-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-bonus-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-respin-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'rgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-free-game-option-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-gamble-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-lightning-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'client-leave-game-trial-request': {
          resendCount: 0,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "NONE"
        },
        'client-powerup-game-trial-request': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'ngt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'fgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'mgt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'fot': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'lngt': {
          resendCount: 100,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 10000,
          recoverEvent: "DIE"
        },
        'lgt': {
          resendCount: 0,
          shouldWaitForACK: true,
          canBeDuplicated: false,
          timeWaitForEvent: 5000,
          recoverEvent: "NONE"
        },
        'p': {
          //ping
          resendCount: 0,
          shouldWaitForACK: false,
          canBeDuplicated: true,
          recoverEvent: "DIE"
        }
      };
      var NEW_EVENT = {
        'client-normal-spin-request': 'ng',
        'client-free-spin-request': 'fg',
        'client-respin-request': 'rg',
        'client-mini-game-request': 'mg',
        'client-gamble-spin-request': 'gg',
        'client-join-game-request': 'jg',
        'client-join-game-request-ev': 'jge',
        'client-free-spin-option-request': 'fo',
        'client-normal-game-trial-request': 'ngt',
        'client-free-game-trial-request': 'fgt',
        'client-respin-trial-request': 'rgt',
        'client-bonus-game-trial-request': 'mgt',
        'client-gamble-game-trial-request': 'ggt',
        'client-free-game-option-trial-request': 'fot',
        'client-lightning-spin-request': 'lng',
        'client-lightning-spin-trial-request': 'lngt',
        'client-leave-game-trial-request': 'lgt'
      };
      var GameStateManager = exports('GameStateManager', /*#__PURE__*/function () {
        function GameStateManager(data) {
          var _this = this;

          this._routingEventHandler = void 0;
          this.expectedEvent = '';
          this.expectedCommandId = '';
          this.socket = void 0;
          this.token = void 0;
          this._playerInfoStateManager = void 0;
          this._state = void 0;
          this.gameData = void 0;
          this.serviceId = void 0;
          this._eventManager = void 0;
          this._commandManager = void 0;
          this.lastSuccessCommandId = '';
          this.gameCommandId = '';
          this.waitForEventData = {};
          this._lastCommandIds = [];
          this.gltCounting = 0;
          this._spinTutorialData = void 0;
          this._trialMode = false;
          this._spinTrialDataIndex = 0;
          this._spinTutorialIndex = 0;
          this.requestingNewPS = void 0;
          this.trialPS = void 0;
          this.lastTrialPS = void 0;
          this.spinTimer = void 0;
          this._fireEventUserLogOutFunc = void 0;
          this.timeoutLastedState = void 0;
          this.channelSubscides = void 0;
          this._outGame = void 0;
          this.currentPSData = void 0;
          this.latestExecuteCommandResult = void 0;
          this.isForceGetLatestedState = false;
          this.serverVersion = '';
          this.timeoutKeepAlive = null;
          this.supportEvent = false;
          var gameData = data.gameData;
          var gameId = gameData.gameId,
              eventId = gameData.eventId,
              serverVersion = gameData.serverVersion;
          this._playerInfoStateManager = playerInfoStateManager;
          this.token = this._playerInfoStateManager.getToken();
          this._state = GameStateManager.STATE_NORMAL;
          this.gameData = gameData;
          this.serviceId = gameId;
          this.supportEvent = eventId !== '0';
          this._commandManager = new CommandManager(gameId, 3, NEW_EVENT ? 'cId' : 'commandId');
          this._eventManager = new EventManager(false, {
            'jgr': 'client-join-game-result',
            'sud': 'state-updated',
            'spu': 'state-pushed',
            'jud': 'jackpot-updated',
            'erp': 'error-pushed',
            'mep': 'message-pushed'
          });
          this.lastSuccessCommandId = '';
          this.gameCommandId = '';
          this.waitForEventData = {};
          this._lastCommandIds = [];
          this.channelSubscides = [];
          this.gltCounting = 0;
          this._onWalletUpdate = this._onWalletUpdate.bind(this);
          this.serverVersion = serverVersion;
          messageManager.registerGame(gameId, {
            onAck: this._commandManager.onAck.bind(this._commandManager),
            onCannotSendMessage: this._commandManager.onCannotSendMessage.bind(this._commandManager)
          }, {
            onCannotConnect: function onCannotConnect() {
              _this._updateNetworkState(NetworkEvent.FAIL_CONNECT_SERVER);
            },
            onCannotAuthen: function onCannotAuthen() {
              _this._cleanUp();

              logger.debug('AUTHEN FAILED');

              _this.gameData.joinGameFailed();
            },
            onNetworkWarning: function onNetworkWarning() {
              _this._updateNetworkState(NetworkEvent.SLOW_CONNECTION);
            },
            onShowPopupDisconnected: function onShowPopupDisconnected() {
              _this._updateNetworkState(NetworkEvent.SOCKET_LOST_CONNECTION);
            },
            onConnected: function onConnected() {
              _this._updateNetworkState(NetworkEvent.SOCKET_RESUME_CONNECTION);

              _this._updateNetworkState(NetworkEvent.SOCKET_CONNECTED);
            },
            onEvent: this._eventManager.onEvent.bind(this._eventManager)
          });

          this._setUpEventListener(eventId);

          this._handleNetworkStatusEvent();
        }

        var _proto = GameStateManager.prototype;

        _proto.bindTutorialData = function bindTutorialData(tutorialData) {
          this._spinTutorialData = tutorialData;
        };

        _proto.getWallets = function getWallets() {
          return this._playerInfoStateManager.getWallets();
        };

        _proto._onWalletUpdate = function _onWalletUpdate() {
          this.gameData.onWalletUpdate(this._playerInfoStateManager.getWallets());
        };

        _proto.switchToTrial = function switchToTrial() {
          this._trialMode = true;
          this._spinTutorialIndex = 0;
          return this._trialMode;
        };

        _proto.skipTutorial = function skipTutorial() {
          this._spinTutorialIndex = 999;
        };

        _proto.switchToReal = function switchToReal() {
          this._trialMode = false;
        };

        _proto.triggerJoinTrial = function triggerJoinTrial() {
          this._clientSendRequest({
            event: 'client-join-game-trial-request'
          });
        };

        _proto.triggerSpinRequest = function triggerSpinRequest(betId, betLines, spinType) {
          if (spinType === void 0) {
            spinType = WalletType.NORMAL;
          }

          var sendData = {
            betId: betId,
            l: globalThis.SlotLanguageCode || 'VI'
          };

          if (betLines) {
            sendData.betLines = betLines;
          }

          var eventName = 'client-normal-spin-request';

          switch (spinType) {
            case WalletType.NORMAL:
              this.requestingNewPS = true;
              eventName = 'client-normal-spin-request';
              break;

            case WalletType.TRIAL:
              eventName = 'client-normal-game-trial-request';
              break;

            case WalletType.PROMOTE:
              this.requestingNewPS = true;
              eventName = 'client-normal-spin-request';
              sendData.wo = 1;
              break;

            default:
              eventName = 'client-normal-spin-request';
              break;
          }

          if (this._trialMode && this._getNewTrialPS()) {
            this._returnTrialPS();
          } else {
            this._clientSendRequest({
              event: eventName,
              data: sendData
            });
          }
        };

        _proto.getLastedQuest = function getLastedQuest() {
          this._clientSendRequest({
            event: 'glte',
            data: {
              userId: this._playerInfoStateManager.getUserId(),
              serviceId: this.serviceId,
              token: this.token
            }
          });
        };

        _proto._getNewTrialPS = function _getNewTrialPS() {
          if (this._spinTutorialData && this._spinTutorialIndex < this._spinTutorialData.length) {
            this.trialPS = lodash.cloneDeep(this._spinTutorialData[this._spinTutorialIndex]);
            this._spinTutorialIndex++;
          } else {
            this.trialPS = null;
          }

          this._spinTrialDataIndex = 0;
          return this.trialPS != null;
        };

        _proto._returnTrialPS = function _returnTrialPS() {
          var _this2 = this;

          this.lastTrialPS = this.trialPS.shift();
          if (!this.lastTrialPS) return;
          var response = {};
          response.data = this.lastTrialPS;
          logger.debug("___TRIAL: response", response);
          this.gameCommandId = uuid();
          response.data[this.serviceId].data.cId = this.gameCommandId;
          clearTimeout(this.spinTimer);
          this.spinTimer = setTimeout(function () {
            _this2._fireEventStateUpdated(response.data[_this2.serviceId]);

            _this2._spinTrialDataIndex++;
          }, 300);
        };

        _proto.triggerFreeSpinRequest = function triggerFreeSpinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-free-game-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-free-spin-request',
              data: {}
            });
          }
        };

        _proto.triggerFreeSpinOption = function triggerFreeSpinOption(option) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-free-game-option-trial-request',
                data: {
                  option: option
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-free-spin-option-request',
              data: {
                option: option
              }
            });
          }
        };

        _proto.triggerMiniGame = function triggerMiniGame(openCell) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-bonus-game-trial-request',
                data: {
                  openCell: openCell
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-mini-game-request',
              data: {
                openCell: openCell
              }
            });
          }
        };

        _proto.triggerLightningSpinRequest = function triggerLightningSpinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-lightning-game-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-lightning-spin-request',
              data: {}
            });
          }
        };

        _proto.triggerLeaveGameTrialRequest = function triggerLeaveGameTrialRequest() {
          this._clientSendRequest({
            event: 'client-leave-game-trial-request',
            data: {}
          });
        };

        _proto.triggerPowerUpSpinRequest = function triggerPowerUpSpinRequest(openCell) {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-powerup-game-trial-request',
                data: {
                  openCell: openCell
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-powerup-spin-request',
              data: {
                openCell: openCell
              }
            });
          }
        };

        _proto.triggerGambleSpinRequest = function triggerGambleSpinRequest(openCell, totalBet) {
          if (this._trialMode) {
            if (this.trialPS) {
              if (totalBet > 0) this.trialPS.shift();

              this._returnTrialPS();
            } else {
              this._clientSendRequest({
                event: 'client-gamble-game-trial-request',
                data: {
                  openCell: openCell,
                  totalBet: totalBet
                }
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-gamble-spin-request',
              data: {
                openCell: openCell,
                totalBet: totalBet
              }
            });
          }
        };

        _proto._triggerGetLatestStatePrivate = function _triggerGetLatestStatePrivate(metaData) {
          var stateType = metaData.stateType,
              serviceId = metaData.serviceId,
              objectId = metaData.objectId; //Ensure do not repeat call latest state the same type

          var data = {
            serviceId: serviceId,
            objectId: objectId,
            stateType: stateType
          };

          this._clientSendRequest({
            event: 'glt',
            data: data
          });
        };

        _proto.cleanUpForGame = function cleanUpForGame() {
          this._commandManager.cleanUp();

          this._eventManager.cleanUp();

          this._playerInfoStateManager.removeEvent('wallet-updated', this._onWalletUpdate);

          this._playerInfoStateManager.removeEvent('user-logged-out', this._fireEventUserLogOutFunc);

          if (this.timeoutLastedState) {
            clearTimeout(this.timeoutLastedState);
          }

          if (this.timeoutKeepAlive) {
            clearTimeout(this.timeoutKeepAlive);
          }
        };

        _proto.outGame = function outGame() {
          var _this3 = this;

          if (this._outGame) return;
          this.cleanUpForGame();
          this.channelSubscides.forEach(function (it) {
            _this3._commandManager.unSubscribe(it);
          });
          this.channelSubscides = [];
          messageManager.unregisterGame(this.serviceId);
          this._outGame = true;
        };

        _proto.networkCallbackJP = function networkCallbackJP(callbackJP) {
          this._eventManager.registerEvent('jackpot-updated', function (result) {
            var data = result.data;
            callbackJP(data);
          });
        };

        _proto.gameOnPause = function gameOnPause() {
          logger.debug('gameOnPause');
        };

        _proto.gameOnResume = function gameOnResume() {
          logger.debug('gameOnResume');

          if (this.gameCommandId) {
            logger.debug('_resumeApp has this.gameCommandId: %s', this.gameCommandId);
          }
        };

        _proto._subscribeJPChannel = function _subscribeJPChannel(groupChannelName) {
          if (groupChannelName) {
            this.channelSubscides.push(groupChannelName);

            this._commandManager.subscribe(groupChannelName);
          }
        };

        _proto._verifyExpectedEvent = function _verifyExpectedEvent(eventData) {
          var result = false;
          var convertEvent = ['f', 'n', 'nor', 'fre', 'frO', 'bon', 'b', 'gam', 'lig', 'ln', 'pow', 'adv', 'o', 'g', 'r'];
          var index = convertEvent.indexOf(eventData.event);
          if (index >= 0) eventData.event = 'state-updated';
          eventData = mapObjectKey(eventData, MsgReceiveMapping);

          if (eventData.event === 'client-join-game-result') {
            var data = eventData.data;
            result = data.commandId === this.latestExecuteCommandResult && this.gameCommandId === data.commandId;
          } else if (eventData.event === 'client-join-trial-game-result') {
            var _data = eventData.data;
            result = _data.commandId === this.latestExecuteCommandResult && this.gameCommandId === _data.commandId;
          } else if (eventData.event === 'state-updated' && this._state === GameStateManager.STATE_NORMAL && !this.isForceGetLatestedState) {
            var _data2 = eventData.data;
            result = _data2.commandId === this.latestExecuteCommandResult && this.gameCommandId === _data2.commandId;
          } else if (eventData.event === 'state-pushed' && this._state === GameStateManager.STATE_PANIC) {
            var _data3 = eventData.data;
            result = _data3.gameCommandId === this.gameCommandId;
          } else if (eventData.event === 'error-pushed' && this._state === GameStateManager.STATE_NORMAL && eventData.data && eventData.data[0]) {
            var _data4 = eventData.data;
            result = _data4[0].commandId === this.latestExecuteCommandResult;

            if (this.isForceGetLatestedState) {
              return false;
            }
          } else if (eventData.event == 'lgtr') {
            var _data5 = eventData.data;
            result = _data5 && this._lastCommandIds.indexOf(_data5.commandId) > -1;
          }

          if (result == true && typeof this.gameData.networkUpdate === 'function') {
            this.gameData.networkUpdate(NetworkEvent.SOCKET_RESUME_CONNECTION);
          }

          return result;
        };

        _proto._checkMismatchData = function _checkMismatchData(eventData) {
          var isMismatch = false; //if (eventData.event === 'state-updated')

          {
            if (!this.currentPSData) //resume case
              {
                this.currentPSData = {};
                this.currentPSData.id = eventData.id;
                this.currentPSData.version = eventData.version;
                this.requestingNewPS = false;
                return;
              }

            if (this.requestingNewPS) {
              if (eventData.version > 1) {
                logger.debug("Mismatch data new PS, event version is " + eventData.version);
                isMismatch = true;
              } else {
                this.currentPSData = {
                  id: eventData.id,
                  version: eventData.version
                };
                logger.debug('Pass new PS request');
                this.requestingNewPS = false;
              }
            } else {
              if (eventData.id == this.currentPSData.id) {
                if (eventData.version == this.currentPSData.version + 1) this.currentPSData.version = eventData.version;else {
                  logger.debug("Mismatch data, event version is " + eventData.version);
                  isMismatch = true;
                }
              } else if (eventData.version > 1) {
                logger.debug("Mismatch data, event version is " + eventData.version);
                isMismatch = true;
              }
            }
          }

          if (isMismatch) {
            log('Mismatch');

            this._updateNetworkState(NetworkEvent.MISMATCH_DATA, true);
          }
        };

        _proto._gotoNormalMode = function _gotoNormalMode() {
          if (this._outGame) return;
          logger.debug('NORMAL MODE');

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          if (typeof this.gameData.networkUpdate === 'function') this.gameData.networkUpdate(NetworkEvent.SOCKET_RESUME_CONNECTION);
        };

        _proto._gotoPanicMode = function _gotoPanicMode() {
          if (this._outGame) return;
          logger.debug('PANIC MODE');

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          var playerUserId = this._playerInfoStateManager.getUserId();

          this._triggerGetLatestStatePrivate({
            stateType: this.serviceId,
            serviceId: this.serviceId,
            objectId: playerUserId
          });
        };

        _proto._updateNetworkState = function _updateNetworkState(state, forceDie, code, errorData) {
          if (forceDie === void 0) {
            forceDie = false;
          }

          if (code === void 0) {
            code = '0000';
          }

          if (errorData === void 0) {
            errorData = null;
          }

          if (forceDie) {
            this._gotoDieMode();
          }

          this.gameData.networkUpdate(state, code, errorData);
        };

        _proto._gotoDieMode = function _gotoDieMode() {
          if (this._outGame) return;

          this._cleanUp();
        };

        _proto._cleanUp = function _cleanUp() {
          if (this._outGame) return;
          this._outGame = true;
          this.cleanUpForGame();
          messageManager.unregisterGame(this.serviceId);
        };

        _proto._timeoutExpectedEventHandler = function _timeoutExpectedEventHandler(event) {
          var eventRecover = SLOT_STRATEGY[event].recoverEvent;
          this._state = eventRecover;

          if (eventRecover === GameStateManager.STATE_PANIC) {
            this._gotoPanicMode();
          } else if (eventRecover === GameStateManager.STATE_DIE) {
            log("_timeoutExpectedEventHandler " + event + " no recover");

            this._updateNetworkState(NetworkEvent.TIMEOUT_REQUEST_DIE, true);
          }
        };

        _proto._clientSendRequest = function _clientSendRequest(_ref) {
          var _this4 = this;

          var _ref$event = _ref.event,
              event = _ref$event === void 0 ? '' : _ref$event,
              _ref$data = _ref.data,
              data = _ref$data === void 0 ? {} : _ref$data;

          if (this.timeoutKeepAlive) {
            clearTimeout(this.timeoutKeepAlive);
          }

          if (this.supportEvent) {
            this.timeoutKeepAlive = setTimeout(function () {
              _this4._sendPingMessage();
            }, 30000);
          }

          var version = this.serverVersion;
          var strategy = lodash.pick(SLOT_STRATEGY[event], ['resendCount', 'shouldWaitForACK', 'canBeDuplicated']);
          data = Object.assign(data, {
            token: this.token,
            serviceId: this.serviceId
          });
          data = mapObjectKey(data, MsgSendMapping);
          event = NEW_EVENT && NEW_EVENT[event] ? NEW_EVENT[event] : event;

          var commandId = this._commandManager.executeCommand({
            event: event,
            data: data,
            version: version
          }, strategy);

          if (commandId === CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT');
          } else if (commandId === CommandManager.COMMAND_FAILED_DUPLICATE) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_DUPLICATE');
          } else if (strategy.resendCount > 0) {
            this.latestExecuteCommandResult = commandId;

            this._waitForNetwork(event);
          }

          log(commandId);
        };

        _proto._waitForEvent = function _waitForEvent(event) {
          var waitForEventId = this._eventManager.waitForEvent(SLOT_STRATEGY[event].timeWaitForEvent, this._verifyExpectedEvent.bind(this), this._timeoutExpectedEventHandler.bind(this, event));

          if (this.gameCommandId) {
            this.waitForEventData = {
              waitForEventId: waitForEventId,
              event: event
            };
          }
        };

        _proto._waitForNetwork = function _waitForNetwork(event) {
          var _this5 = this;

          this._eventManager.waitForEvent(SLOT_STRATEGY[event].timeWaitForEvent, this._verifyExpectedEvent.bind(this), function () {
            _this5._updateNetworkState(NetworkEvent.TIMEOUT_REQUEST_WAIT);
          });
        };

        _proto._setUpEventListener = function _setUpEventListener(launchFrom) {
          if (launchFrom === void 0) {
            launchFrom = null;
          }

          var code = '';
          var eId = '';

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              URL_CODE = _loadConfigAsync$getC.URL_CODE;

          var env = 3;

          if (LOGIN_IFRAME) {
            code = gameCommonUtils.getUrlParam(URL_CODE);
            env = parseInt(gameCommonUtils.getUrlParam('env')) || 2;
          } else {
            if (sys.isBrowser) {
              env = 1;
            } else {
              env = 3;
            }
          }

          if (launchFrom) {
            eId = launchFrom;
          }

          var event = eId === '0' ? 'client-join-game-request' : 'client-join-game-request-ev';

          this._clientSendRequest({
            event: event,
            data: {
              code: code,
              env: env,
              eId: eId
            }
          });

          this._bindingEvents();
        };

        _proto._bindingEvents = function _bindingEvents() {
          var self = this;

          this._fireEventUserLogOutFunc = function () {
            self.isLogOut = true;

            if (typeof self.gameData.userLogout === 'function') {
              self.gameData.userLogout();
            }

            self._cleanUp();
          };

          this._playerInfoStateManager.registerEvent('user-logged-out', this._fireEventUserLogOutFunc);

          this._eventManager.registerEvent('client-join-game-result', this._fireEventJoinGameResult.bind(this));

          this._eventManager.registerEvent('join-game-denied', this._fireEventJoinGameDenied.bind(this));

          this._eventManager.registerEvent('state-updated', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('state-pushed', this._fireEventStatePushed.bind(this));

          this._eventManager.registerEvent('error-pushed', this._fireEventErrorPushed.bind(this));

          this._eventManager.registerEvent('jackpot-win', this._fireEventJackpotWin.bind(this));

          this._eventManager.registerEvent('JPA', this._fireEventJackpotWinAnnounce.bind(this));

          this._eventManager.registerEvent('nor', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('fre', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('n', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('f', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('r', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('frO', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('bon', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('b', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('gam', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('lig', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('ln', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('pow', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('adv', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('o', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('g', this._fireEventStateUpdated.bind(this));

          this._eventManager.registerEvent('ev', this._fireEventQuestUpdate.bind(this));

          this._eventManager.registerEvent('topuser', this._fireEventTopUser.bind(this));

          this._eventManager.registerEvent('request-denied', this._fireEventRequestDenied.bind(this));

          this._eventManager.registerEvent('lgtr', this._fireEventLeaveGameTrial.bind(this));

          this._commandManager.registerEvent(CommandManager.COMMAND_SEND_SUCCESSFULLY, this._handleCommandSendSuccessfully.bind(this));
        };

        _proto._handleCommandSendSuccessfully = function _handleCommandSendSuccessfully(commandPayload) {
          var commandId = commandPayload.data.commandId || commandPayload.data.cId;
          var event = commandPayload.event;

          if (event !== 'glt') {
            this.gameCommandId = commandId;
          }

          if (commandId === this.latestExecuteCommandResult) {
            this._saveNewCommandId(commandId);

            this._waitForEvent(event);
          } //

        };

        _proto._saveNewCommandId = function _saveNewCommandId(commandId) {
          if (this._lastCommandIds.length >= 10) {
            this._lastCommandIds.shift();
          }

          this._lastCommandIds.push(commandId);
        };

        _proto._handleNetworkStatusEvent = function _handleNetworkStatusEvent() {
          var _this6 = this;

          this._eventManager.registerEvent(EventManager.CAN_NOT_CONNECT, function () {
            _this6._state = GameStateManager.STATE_DIE;

            _this6._updateNetworkState(NetworkEvent.FAIL_CONNECT_SERVER);
          });

          this._eventManager.registerEvent(EventManager.CONNECTED, function () {});
        };

        _proto._fireEventErrorPushed = function _fireEventErrorPushed(result) {
          if (this.isForceGetLatestedState) return;
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);

          if (lodash.isArray(data) && data[0]) {
            var errorCode = data[0].code; //wallet error

            if (errorCode[0] == 'W' || errorCode == '0000' || errorCode == '0001') {
              this._updateNetworkState(NetworkEvent.WALLET_ERROR_CODE, false, errorCode);

              this._state = GameStateManager.STATE_NORMAL;

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }

              this._gotoNormalMode();
            } else if (errorCode == '0030' && this._state == GameStateManager.STATE_PANIC) {
              //server is inprogress
              this.gltCounting = 0;
            } else if (errorCode == '0031') ;else if (errorCode == PROMOTION_ERROR.EXPIRED || errorCode === PROMOTION_ERROR.NEW || errorCode == PROMOTION_ERROR.RESET || errorCode == PROMOTION_ERROR.WRONG_BET) {
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};

              this._updateNetworkState(NetworkEvent.PROMOTION_ERROR, false, errorCode, data);

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }

              this._gotoNormalMode();
            } else {
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};
              var forceDie = errorCode !== '0031';

              this._updateNetworkState(NetworkEvent.BACKEND_ERROR_CODE, forceDie, errorCode);

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }
            }
          }
        };

        _proto._fireEventJoinGameResult = function _fireEventJoinGameResult(result) {
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);
          this._state = GameStateManager.STATE_NORMAL;

          if (typeof this.gameData.joinGameSuccess === 'function' && data.commandId === this.gameCommandId) {
            var playerUserId = this._playerInfoStateManager.getUserId();

            var _data6 = data,
                extendData = _data6.extendData;

            this._subscribeJPChannel(data.groupChannelName);

            this._subscribeJPChannel("presence-" + this.serviceId + "-notify");

            this._onWalletUpdate();

            this._playerInfoStateManager.registerEvent('wallet-updated', this._onWalletUpdate);

            var dataJoinGame = lodash.cloneDeep(data);

            if (dataJoinGame[playerUserId] && dataJoinGame[playerUserId].isFinished === false) {
              dataJoinGame.dataResume = dataJoinGame[playerUserId];
              this.currentPSData = {};
              this.currentPSData.id = dataJoinGame.dataResume.id;
              this.currentPSData.version = dataJoinGame.dataResume.version;
              this.requestingNewPS = false; // this._checkUserIdAndThrowError(dataJoinGame.dataResume, 'join-game-result for resume');
            } else if (dataJoinGame[playerUserId] && dataJoinGame[playerUserId].gambleRemain > 0) {
              dataJoinGame.dataGamble = dataJoinGame[playerUserId];
              this.currentPSData = {};
              this.currentPSData.id = dataJoinGame.dataGamble.id;
              this.currentPSData.version = dataJoinGame.dataGamble.version;
              this.requestingNewPS = false;
            }

            if (!lodash.isEmpty(extendData.metaDataPromotion) && extendData.metaDataPromotion.status === 0) {
              dataJoinGame.metaDataPromotion = extendData.metaDataPromotion;
            }

            if (lodash.isEmpty(extendData.metaDataUser) || !extendData.metaDataUser) {
              dataJoinGame.extendData.metaDataUser = {};
              dataJoinGame.extendData.metaDataUser.currentWallets = this._playerInfoStateManager.getWallets();
            } // if (CC_DEV) {
            //     dataJoinGame.metaDataPromotion = {
            //         betId: '43',
            //         serviceId: '9990',
            //         promotionRemain: 3,
            //         promotionTotal: 3,
            //         promotionCode: '1234'
            //     };
            // };


            delete dataJoinGame[playerUserId];
            this.gameCommandId = '';
            this.waitForEventData = {};
            logger.debug('event join-game-result', JSON.stringify(data));
            dataJoinGame['wallet-types'] = this._playerInfoStateManager.getWalletTypes();
            this.gameData.joinGameSuccess(dataJoinGame);
          }
        };

        _proto._fireEventJoinGameDenied = function _fireEventJoinGameDenied() {
          this.outGame();
          this.gameData.onJoinGameDenied();
        };

        _proto._fireEventRequestDenied = function _fireEventRequestDenied() {
          this.outGame();
          this.gameData.onRequestDenied();
        };

        _proto._fireEventStateUpdated = function _fireEventStateUpdated(result) {
          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);
          if (data.isTrialMode && !this._trialMode) return;

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.stateUpdate === 'function' && this.gameCommandId === data.commandId && !this.isForceGetLatestedState) {
            this.lastSuccessCommandId = this.gameCommandId;
            this.gameCommandId = '';
            this.waitForEventData = {};
            this.latestExecuteCommandResult = '';
            var dataRes = data;
            logger.debug('event state-updated', JSON.stringify(dataRes));
            this.gameData.stateUpdate(dataRes);
            if (!this._trialMode) this._checkMismatchData(dataRes); //if trialmode, dont need to check userid
            // !this._trialMode && this._checkUserIdAndThrowError(dataRes, 'state-updated');
          }
        };

        _proto._fireEventJackpotWin = function _fireEventJackpotWin(result) {
          var data = result.data;

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWin === 'function') {
            var commandId = data.jpInfo[0].cmdId;

            if (this._lastCommandIds.indexOf(commandId) > -1) {
              logger.debug('event jackpot-win: It is me', JSON.stringify(data));
            } else {
              this.gameData.onJackpotWin(data);
              logger.debug('event jackpot-win: other user', JSON.stringify(data));
            }
          }
        };

        _proto._fireEventJackpotWinAnnounce = function _fireEventJackpotWinAnnounce(result) {
          var data = result.data;

          if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWinAnnounce === 'function') {
            var commandId = data.jpInfo[0].cId;

            var isMe = this._lastCommandIds.includes(commandId);

            this.gameData.onJackpotWinAnnounce(data, isMe);
          }
        };

        _proto._checkUserIdAndThrowError = function _checkUserIdAndThrowError(dataRes, eventName) {
          var playerUserId = this._playerInfoStateManager.getUserId();

          if (dataRes.userId !== playerUserId) {
            throw Error("Event " + eventName + ", current user id: " + playerUserId + ", User id wrong: " + dataRes.userId + ", PS id: " + dataRes.id + ", commandId: " + dataRes.commandId);
          }
        };

        _proto._fireEventStatePushed = function _fireEventStatePushed(result) {
          var _this7 = this;

          var data = result.data;
          data = mapObjectKey(data, MsgReceiveMapping);
          var gameCommandId = data.gameCommandId;

          if (data && data.error && data.error[0]) {
            gameCommandId = data.error[0].commandId;
          }

          if (this._state === GameStateManager.STATE_PANIC && typeof this.gameData.stateUpdate === 'function' && gameCommandId) {
            if (gameCommandId === this.gameCommandId) {
              this.gltCounting = 0;
              this.lastSuccessCommandId = this.gameCommandId;
              this._state = GameStateManager.STATE_NORMAL;
              this.gameCommandId = '';
              this.waitForEventData = {};
              logger.debug('event state-pushed', JSON.stringify(data));

              this._gotoNormalMode();

              var _data7 = data,
                  error = _data7.error;

              if (lodash.isArray(error) && error[0]) {
                var errorCode = error[0].code;

                this._updateNetworkState(NetworkEvent.PROMOTION_ERROR, false, errorCode, data);
              } else {
                this.gameData.stateUpdate(data);
                this.currentPSData = {};
                this.currentPSData.id = data.id;
                this.currentPSData.version = data.version;
              }

              this.requestingNewPS = false;

              if (this.timeoutLastedState) {
                clearTimeout(this.timeoutLastedState);
              }
            } else if (this.gltCounting < 10) {
              this.gltCounting += 1;
              this.timeoutLastedState = setTimeout(function () {
                _this7._gotoPanicMode();
              }, 2000);
            } else {
              var commandId = data.commandId;
              log("Mismatch command " + " lasted " + this.lastSuccessCommandId + " current " + commandId);

              this._updateNetworkState(NetworkEvent.MISMATCH_DATA, true);
            }
          }
        };

        _proto._fireEventLeaveGameTrial = function _fireEventLeaveGameTrial(result) {
          var status = result.data.status;
          log("_fireEventLeaveGameTrial: " + (status === "0" ? " is successfull" : " is failed"));

          if (status === "0") {
            this.gameData.onLeaveTrialGameSuccess && this.gameData.onLeaveTrialGameSuccess();
          } else {
            this.gameData.onLeaveTrialGameFailed && this.gameData.onLeaveTrialGameFailed();
          }
        };

        _proto._sendPingMessage = function _sendPingMessage() {
          var command = {
            event: "p",
            data: {
              userId: this._playerInfoStateManager.getUserId(),
              serviceId: this.serviceId,
              token: this.token
            }
          };

          this._clientSendRequest(command);
        };

        _proto._fireEventQuestUpdate = function _fireEventQuestUpdate(result) {
          var data = result.data;
          var eventData = mapObjectKey(data, MsgReceiveMapping);
          this.gameData.eventUpdate(eventData);
        };

        _proto._fireEventTopUser = function _fireEventTopUser(result) {
          var data = result.data;
          var eventData = mapObjectKey(data, MsgTopUserMapping);
          this.gameData.updateTopUser(eventData);
        };

        _proto.onForceGetLatestedState = function onForceGetLatestedState(isOn) {
          if (isOn === void 0) {
            isOn = false;
          }

          this.isForceGetLatestedState = isOn;
          log('To click force get latested state: ', isOn);
        };

        _proto.triggerRespinRequest = function triggerRespinRequest() {
          if (this._trialMode) {
            if (this.trialPS) this._returnTrialPS();else {
              this._clientSendRequest({
                event: 'client-respin-trial-request',
                data: {}
              });
            }
          } else {
            this._clientSendRequest({
              event: 'client-respin-request',
              data: {}
            });
          }
        };

        return GameStateManager;
      }());
      GameStateManager.STATE_NORMAL = 'NORMAL';
      GameStateManager.STATE_PANIC = 'PANIC';
      GameStateManager.STATE_DIE = 'DIE';

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalConfig.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f666fZHMPZPYLzkEcEVye4i", "globalConfig", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalNetwork.ts", ['cc', './loadConfigAsync.ts', './game-network.mjs_cjs=&original=.js', './game-network.js'], function (exports) {
  var cclegacy, log, warn, sys, loadConfigAsync, _cjsExports;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      warn = module.warn;
      sys = module.sys;
    }, function (module) {
      loadConfigAsync = module.default;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec906OpgxlOkISCFs4dK7/M", "globalNetwork", undefined);

      var network = globalThis.GameNetwork || _cjsExports;
      var MessageManager = network.MessageManager,
          ServiceRest = network.ServiceRest;
      var logger = network.lib.logger;
      logger && logger.updateLogger(log, log, warn);
      var messageManager = MessageManager.getInstance();

      var GlobalNetwork = function GlobalNetwork() {
        var _this = this;

        this.gamesData = {};
        this.token = null;
        this.refreshToken = null;
        this.socket = null;
        this.expectedEvent = '';
        this.expectedCommandId = '';

        this.init = function (token, refreshToken, envId, gameIdSocket) {
          if (refreshToken === void 0) {
            refreshToken = '';
          }

          if (envId === void 0) {
            envId = 'portal';
          }

          if (gameIdSocket === void 0) {
            gameIdSocket = 'all';
          }

          log("Network using V3");
          _this.token = token;
          _this.refreshToken = refreshToken;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              SOCKET_URL = _loadConfigAsync$getC.SOCKET_URL,
              API_URL = _loadConfigAsync$getC.API_URL;

          var deviceInfo = {
            os: sys.os,
            osVersion: sys.osVersion,
            platform: sys.platform,
            browser: sys.browserType,
            browserVersion: sys.browserVersion,
            language: sys.language
          };
          messageManager.initSocket({
            socketUrl: SOCKET_URL,
            apiUrl: API_URL,
            urlVerifyToken: 'auth/token/login',
            env: envId,
            games: gameIdSocket,
            token: token,
            serviceRest: ServiceRest.getInstance('cc'),
            device: deviceInfo
          });
          loadConfigAsync.setUpSentry();
        };

        this.getToken = function () {
          return _this.token;
        };

        this.setToken = function (token) {
          _this.token = token;
        };

        this.registerGame = function (gameData) {
          var gameId = gameData.gameId,
              gameState = gameData.gameState;

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameId);
            });
          }

          if (!gameState) return;
          return new gameState({
            gameData: gameData
          });
        };

        this.initGame = function (gameData) {
          if (gameData === void 0) {
            gameData = {};
          }

          gameData.token = _this.getToken();

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameData.gameId);
            });
          }

          return gameData;
        };

        this.triggerUserLogout = function () {
          messageManager.closeAndCleanUp();
        };

        this.outGame = function () {};
      };

      var globalNetwork = exports('default', new GlobalNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GlobalNodeSharing.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "1ec038vpNhNrZaXGV1Gy83+", "GlobalNodeSharing", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GlobalNodeSharing = exports('GlobalNodeSharing', (_dec = ccclass('GlobalNodeSharing'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GlobalNodeSharing, _Component);

        function GlobalNodeSharing() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeId", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setNode", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GlobalNodeSharing.prototype;

        _proto.onLoad = function onLoad() {
          if (this.getNode) {
            this.getNodeSharing();
          }

          if (this.setNode) {
            this.setNodeSharing();
          }
        };

        _proto.setNodeSharing = function setNodeSharing() {
          if (this.node.scene) {
            this.node.scene[this.nodeId] = this.node;
          }
        };

        _proto.getNodeSharing = function getNodeSharing() {
          if (this.node.scene && this.node.scene[this.nodeId]) {
            this.node[this.nodeId] = this.node.scene[this.nodeId];
          }
        };

        return GlobalNodeSharing;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "getNode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "setNode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './SlotReelv2.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, tween, v3, CustomEvent, SlotReelv2;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      SlotReelv2 = module.SlotReelv2;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4e29aEEOUtDapIRhjqM1PNZ", "GongReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GongReel = exports('GongReel', (_dec = ccclass('GongReel'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotReelv) {
        _inheritsLoose(GongReel, _SlotReelv);

        function GongReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotReelv.call.apply(_SlotReelv, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "stackWildPrefab", _descriptor, _assertThisInitialized(_this));

          _this._stackWild = null;
          _this._isSpeedUp = false;
          _this._remainStep = _this.MAX_STEP;
          _this._stackData = {};
          _this._tweenNudge = null;
          _this._isFinished = true;
          return _this;
        }

        var _proto = GongReel.prototype;

        _proto.onLoad = function onLoad() {
          _SlotReelv.prototype.onLoad.call(this);

          this.node.on('SET_STACK_DATA', this.setStackData, this);
          this.node.on('SHOW_STACK_WILD', this.showStackWild, this);
          this.node.on('CLEAR_STACK_WILD', this.clearStackWild, this);
          this.node.on('RUN_NUDGE', this.runAnimNudge, this);
          this.node.on('SKIP_NUDGE', this.skipAnimNudge, this);
          this.node["getShowSymbols"] = this.getShowSymbols.bind(this);
        };

        _proto.init = function init() {
          var _SlotReelv$prototype$;

          for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
          }

          (_SlotReelv$prototype$ = _SlotReelv.prototype.init).call.apply(_SlotReelv$prototype$, [this].concat(params));

          this._stackWild = instantiate(this.stackWildPrefab);
          this.node.addChild(this._stackWild);

          this._stackWild.emit('INIT', this.symbolHeight);
        };

        _proto.setHigherHolder = function setHigherHolder(node) {
          this._higherHolder = node;
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this._isFinished = false;
          this._isSpeedUp = false;

          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", false);

          this._resetReelPosition();

          _SlotReelv.prototype.startSpinning.call(this, reelIndex, reelConfig);

          this._remainStep = this.step;
        };

        _proto.setStackData = function setStackData(stackFormat) {
          this._stackData = Object.assign({}, stackFormat);
        };

        _proto.fastStopSpinning = function fastStopSpinning(remainStep) {
          var _this2 = this; //check step is reset will not do anything.


          if (this.step === this.MAX_STEP) return;
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          this.unschedule(this.setStepToStop);
          this.currentSpeed = this.currentSpeed / 3;
          if (this.isShowingResult) return;
          this.scheduleOnce(function () {
            if (remainStep < _this2.totalSymbols) {
              _this2.step = _this2.totalSymbols;
            } else if (_this2.step > remainStep) {
              _this2.step = remainStep;
            }

            _this2._remainStep = _this2.step;
          }, 0.04);
        };

        _proto.speedUp = function speedUp() {
          this._isSpeedUp = true;
          this.adjustReelSpeed(this.currentSpeed / 1.5);
        };

        _proto.showStackWild = function showStackWild() {
          var _this$_stackData = this._stackData,
              nudgeStep = _this$_stackData.nudgeStep,
              step = _this$_stackData.step,
              type = _this$_stackData.type,
              size = _this$_stackData.size;
          if (type === "0") return this.clearStackWild();

          this._addStackWild();

          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", true);

          this._stackWild.setPosition(0, (size + 1.5 - step - nudgeStep) * this.symbolHeight);

          this._setupShowSymbols();
        };

        _proto.clearStackWild = function clearStackWild() {
          this._stackWild.emit("CLEAR_STACK_WILD");

          this.symbols.forEach(function (sb) {
            return sb.opacity = 255;
          });
          this.showSymbols = this.symbols.slice(1, 4).reverse();
        };

        _proto.runAnimNudge = function runAnimNudge() {
          var _this3 = this;

          var _this$_stackData2 = this._stackData,
              nudgeStep = _this$_stackData2.nudgeStep,
              type = _this$_stackData2.type,
              nudge = _this$_stackData2.nudge;
          if (type === "0") return this._finishNudge(false);
          if (nudge === 6) return this._finishNudge();
          if (nudge === 2) return this._runFakeNudge();
          var step = Math.abs(nudgeStep);
          var direction = nudgeStep / step; // 1: down -1: up */

          var dur = 1;

          this._clearTweenNudge();

          this._tweenNudge = tween(this.node).delay(0.2);

          for (var index = 0; index < step; index++) {
            this._tweenNudge.call(function () {
              _this3._stackWild.emit("SHAKING_WILDS");

              _this3._playSoundWildShake();
            }).delay(dur).call(function () {
              _this3._playSoundWildMove();
            }).by(dur, {
              position: v3(0, -this.symbolHeight * direction)
            }, {
              easing: "cubicInOut"
            }).call(function () {
              var lastIndex = direction === 1 ? 0 : _this3.totalSymbols - 1;
              var lastSymbol = _this3.symbols[lastIndex];
              lastSymbol.setPosition(0, lastSymbol.position.y + _this3.symbolHeight * _this3.totalSymbols * direction);

              _this3._resetReelPosition();
            });
          }

          this._tweenNudge.call(function () {
            _this3._tweenNudge = null;

            _this3._stackWild.emit("RESET_ANIM_WILDS");

            _this3._finishNudge();
          }).start();
        };

        _proto.skipAnimNudge = function skipAnimNudge() {
          var _this4 = this;

          if (this._isFinished) return;

          if (this._tweenNudge) {
            this._clearTweenNudge();

            this._resetReelPosition();

            this.symbols.forEach(function (symbol, index) {
              symbol.setPosition(0, _this4.symbolPos[index]);
            });
          }

          this.showStackWild();

          this._finishNudge();
        }
        /**@private */
        ;

        _proto.circulateSymbols = function circulateSymbols() {
          var _this$_stackData3 = this._stackData,
              step = _this$_stackData3.step,
              nudgeStep = _this$_stackData3.nudgeStep;
          var lastSymbol = this.symbols[0];
          var posY = lastSymbol.position.y + this.symbolHeight * this.totalSymbols;
          lastSymbol.setPosition(lastSymbol.position.x, posY);

          this._resetReelPosition();

          if (!this.isShowingResult) {
            this._remainStep = this.step;
            lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', this.getRandomSymbolName());
          } else if (this.stop < this.totalSymbols) {
            this._remainStep = this.totalSymbols - 1 - this.stop;

            var isRealSymbol = this._isRealSymbol();

            var symbolName = this.result[this.stop];
            this.step = this.totalSymbols + this.showNumber - (this.stop + this.config.TABLE_BUFFER.BOT);

            if (isRealSymbol) {
              if ('KL'.includes(symbolName) && nudgeStep !== 0) {
                symbolName = this.getRandomSymbolNameWithExceptions(["2", "4"]);
              } // fake for nudge


              lastSymbol.emit('CHANGE_TO_SYMBOL', symbolName);
              this.showSymbols.unshift(lastSymbol);
            } else {
              lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolName);
            }

            this.stop++;
          }

          if (this._remainStep === step) {
            this._addStackWild();
          }
        };

        _proto._resetReelPosition = function _resetReelPosition() {
          var _this5 = this; // reset currentIndex


          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          this.currentIndex = 0; // reset reel position

          this.node.children.forEach(function (child) {
            return child.setPosition(child.position.x, child.position.y + _this5.node.position.y);
          });
          this.node.setPosition(this.node.position.x, 0);

          if (this._stackWild.position.y < -1.5 * this.symbolHeight) {
            // out of table
            this._stackWild.emit("RESET_STACK_WILD");
          }
        };

        _proto._addStackWild = function _addStackWild() {
          var _this$_stackData4 = this._stackData,
              size = _this$_stackData4.size,
              type = _this$_stackData4.type;
          if (type === "FAKE" && !this._canFakeStackWild()) return;

          this._stackWild.emit("SET_STACK_WILD", this._stackData);

          this._stackWild.setPosition(0, (size + 1.5) * this.symbolHeight);

          this._stackWild.emit("SHOW_PARTICLE", true);
        };

        _proto._isUnderStackWild = function _isUnderStackWild() {
          var _this$_stackData5 = this._stackData,
              step = _this$_stackData5.step,
              size = _this$_stackData5.size;
          return this._remainStep <= step && this._remainStep > Math.abs(step - size);
        };

        _proto.onReelStop = function onReelStop() {
          this._stackWild.emit("SHOW_PARTICLE", false);

          this._stackWild.emit("SHOW_GONG_EFFECT", true);
        };

        _proto._runFakeNudge = function _runFakeNudge() {
          var _this6 = this;

          var isFake = true;

          this._stackWild.emit("SHAKING_WILDS", isFake);

          this.node.soundPlayer.playSFXWildShake();

          this._clearTweenNudge();

          this._tweenNudge = tween(this.node).delay(0.5).call(function () {
            _this6._finishNudge(true);

            _this6._tweenNudge = null;
          });

          this._tweenNudge.start();
        };

        _proto._clearTweenNudge = function _clearTweenNudge() {
          if (this._tweenNudge) {
            this._tweenNudge.stop();

            this._tweenNudge = null;
          }
        };

        _proto._finishNudge = function _finishNudge(hasStackWild) {
          if (hasStackWild === void 0) {
            hasStackWild = true;
          }

          if (this._isFinished) return;
          this._isFinished = true;
          if (hasStackWild) this._setupShowSymbols();
          var event = new CustomEvent('FINISH_NUDGE', true);
          this.node.dispatchEvent(event);
        };

        _proto._setupShowSymbols = function _setupShowSymbols() {
          if (this._stackData.type === "0") return;
          this.showSymbols = this.symbols.slice(1, 4).reverse();

          var wildSymbols = this._stackWild.getShowWilds();

          for (var row = 0; row < 3; row++) {
            this.showSymbols[row] = wildSymbols[row] || this.showSymbols[row];
          }
        };

        _proto._canFakeStackWild = function _canFakeStackWild() {
          if (this.isFreeMode) return true;
          if ([1, 3].includes(this.reelIndex)) return false;
          return true;
        }
        /**@sound */
        ;

        _proto._playSoundWildShake = function _playSoundWildShake() {};

        _proto._playSoundWildMove = function _playSoundWildMove() {};

        return GongReel;
      }(SlotReelv2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "stackWildPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongStackWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "af8e3hnsrZNx7jro34Qo0tA", "GongStackWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GongStackWild = exports('GongStackWild', (_dec = ccclass('GongStackWild'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(GongStackWild, _GameObject);

        function GongStackWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "background", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "staticsNode", _descriptor2, _assertThisInitialized(_this));

          _this._symbolBgs = void 0;
          _this._symbols = void 0;
          _this._showWilds = [null, null, null]; // to show-hide on show payline

          _this.stackData = null;
          _this._indexTest = 0;
          _this._symbolHeight = 0;
          return _this;
        }

        var _proto = GongStackWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          globalThis['gongStrip'] = globalThis['gongStrip'] || this;
          this.node.on("INIT", this.init, this);
          this.node.on("SET_STACK_WILD", this.setStackWild, this);
          this.node.on("SHOW_PARTICLE", this.showParticle, this);
          this.node.on("SHOW_GONG_EFFECT", this.showGongEffect, this);
          this.node.on("SHAKING_WILDS", this.shakingWilds, this);
          this.node.on("RESET_ANIM_WILDS", this.resetAnimWilds, this);
          this.node.on("RESET_STACK_WILD", this.resetStackWild, this);
          this.node.getShowWilds = this.getShowWilds.bind(this);
          this._symbolBgs = this.background.children.slice();
          this._symbols = this.staticsNode.children.slice();
        };

        _proto.start = function start() {
          this._symbols.forEach(function (sb, index) {
            sb.emit("CHANGE_TO_SYMBOL", index === 3 ? "L" : "K");
          });

          this.node.active = false;
        }
        /**@API */
        ;

        _proto.init = function init(symbolHeight) {
          this._symbolHeight = symbolHeight;
        };

        _proto.setStackWild = function setStackWild(stackData) {
          this.resetStackWild();
          var type = stackData.type;
          this.node.active = type !== "0";
          this.stackData = Object.assign(Object.create(null), stackData);

          switch (type) {
            //* [0: top], [6: bottom] always show
            case "A1":
              this._symbols[0].active = false;
              this._symbolBgs[1].active = false;
              break;

            case "A2":
              this._symbols[0].active = this._symbols[1].active = false;
              this._symbolBgs[1].active = this._symbolBgs[2].active = false;
              break;

            case "A3":
              this._symbolBgs[0].active = this._symbols[0].active = false;
              this._symbolBgs[1].active = this._symbols[1].active = false;
              this._symbolBgs[2].active = this._symbols[2].active = false;
              break;

            case "B1":
              this._symbols[6].active = false;
              this._symbolBgs[5].active = false;
              break;

            case "B2":
              this._symbols[5].active = this._symbols[6].active = false;
              this._symbolBgs[4].active = this._symbolBgs[5].active = false;
              break;

            case "B3":
              this._symbolBgs[6].active = this._symbols[6].active = false;
              this._symbolBgs[5].active = this._symbols[5].active = false;
              this._symbolBgs[4].active = this._symbols[4].active = false;
              break;

            case "FAKE":
              this._symbolBgs[6].active = this._symbols[6].active = false;
              this._symbolBgs[5].active = this._symbols[5].active = false;
              this._symbolBgs[4].active = this._symbols[4].active = false;

              this._symbols.forEach(function (sb) {
                return sb.active && sb.emit("CHANGE_TO_BLUR_SYMBOL", sb.symbol);
              });

              break;
          }

          this._alignSymbols();

          this._setShowWilds();
        };

        _proto.resetStackWild = function resetStackWild() {
          for (var index = 0; index < 7; index++) {
            this._symbolBgs[index].active = this._symbols[index].active = true;

            this._symbols.forEach(function (sb) {
              return sb.emit("CHANGE_TO_SYMBOL", sb.symbol);
            });
          }

          this.stackData = null;
          this._showWilds = [null, null, null];
          this.resetAnimWilds();
          this.showParticle(false);
          this.showGongEffect(false);
          this.node.active = false;
        };

        _proto.getShowWilds = function getShowWilds() {
          return this._showWilds;
        };

        _proto.showParticle = function showParticle(isShow) {};

        _proto.showGongEffect = function showGongEffect(isShow) {};

        _proto.shakingWilds = function shakingWilds() {
          this._symbols.forEach(function (sb) {
            return sb.active && sb.emit("SHAKING");
          });
        };

        _proto.resetAnimWilds = function resetAnimWilds() {
          this._symbols.forEach(function (sb) {
            return sb.emit("RESET_WILD");
          });
        }
        /**@private */
        ;

        _proto._alignSymbols = function _alignSymbols() {
          var _this2 = this;

          var activeSymbols = this._symbols.filter(function (sb) {
            return sb.active;
          });

          activeSymbols.forEach(function (sb, index) {
            return sb.setPosition(0, -(index + 0.5) * _this2._symbolHeight);
          });

          var activeBgs = this._symbolBgs.filter(function (sb) {
            return sb.active;
          });

          activeBgs.forEach(function (bg, index) {
            return bg.setPosition(0, -(index + 0.5) * _this2._symbolHeight);
          });
        };

        _proto._setShowWilds = function _setShowWilds() {
          if (this.stackData.type !== "0") return;
          if (this.stackData.type !== "FAKE") return;

          var activeSymbols = this._symbols.filter(function (sb) {
            return sb.active;
          });

          var _this$stackData = this.stackData,
              step = _this$stackData.step,
              size = _this$stackData.size,
              nudgeStep = _this$stackData.nudgeStep;
          var topIndex = step - size + nudgeStep;

          for (var index = 0, len = activeSymbols.length; index < len; index++) {
            var row = topIndex + index;

            if (row >= 0 && row < 3) {
              this._showWilds[row] = activeSymbols[index];
            }
          }
        } //*/
        ;

        return GongStackWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "staticsNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotTable.ts', './GongUtils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SlotTable, processStackData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotTable = module.SlotTable;
    }, function (module) {
      processStackData = module.processStackData;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6cee7e1eQFLOohQikjEaGBE", "GongTable", undefined);

      var ccclass = _decorator.ccclass;
      var GongTable = exports('GongTable', (_dec = ccclass('GongTable'), _dec(_class = /*#__PURE__*/function (_SlotTable) {
        _inheritsLoose(GongTable, _SlotTable);

        function GongTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotTable.call.apply(_SlotTable, [this].concat(args)) || this;
          _this._isSpeedUp = false;
          _this._countNudge = 0;
          _this._callbackNudge = null;
          _this.stackFormats = null;
          return _this;
        }

        var _proto = GongTable.prototype;

        _proto.onLoad = function onLoad() {
          globalThis['gongTable'] = this;

          _SlotTable.prototype.onLoad.call(this);

          this.node.on("SETUP_STACK_WILDS", this.setupStackWilds, this);
          this.node.on("SPEED_UP_REELS", this.speedUpReels, this);
          this.node.on("RUN_ANIM_NUDGE", this.runAnimNudges, this);
          this.node.on("REEL_FINISH_NUDGE", this.onReelFinishedNudge, this);
          this.node.on("SKIP_NUDGE", this.skipAnimNudges, this);
        };

        _proto.setupStackWilds = function setupStackWilds(_ref) {
          var _this2 = this;

          var matrix = _ref.matrix,
              stackWilds = _ref.stackWilds,
              nudges = _ref.nudges;
          this.matrix = matrix;
          this.stackFormats = processStackData(matrix, stackWilds, nudges);
          this.reels.forEach(function (reel, col) {
            return reel.emit("SET_STACK_DATA", _this2.stackFormats[col]);
          });
        };

        _proto.speedUpReels = function speedUpReels() {
          this._isSpeedUp = true;
          this.reels.forEach(function (reel) {
            return reel.emi("SPEED_UP");
          });
        };

        _proto.changeMatrix = function changeMatrix(_ref2) {
          var _this3 = this;

          var matrix = _ref2.matrix,
              stackWilds = _ref2.stackWilds,
              nudges = _ref2.nudges;
          this.setupStackWilds({
            matrix: matrix,
            stackWilds: stackWilds,
            nudges: nudges
          });
          this.reels.forEach(function (reel, col) {
            reel.emit('UPDATE_SYMBOLS', _this3.matrix[col]);
            reel.emit('SHOW_STACK_WILD');
          });
        };

        _proto.fastToResult = function fastToResult() {
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          if (!this._isSpinning) return;
          var stepToAddStackWilds = this.stackFormats.map(function (format) {
            return format.step;
          });
          var maxStepToAdd = Math.max.apply(null, stepToAddStackWilds);
          this.reels.forEach(function (reel) {
            return reel.emit('FAST_STOP', maxStepToAdd);
          });
        };

        _proto.runAnimNudges = function runAnimNudges(callback) {
          var _this4 = this;

          this._callbackNudge = function () {
            callback && callback(); // next Script

            _this4._callbackNudge = null;
          };

          this._countNudge = 0;
          this.reels.forEach(function (reel) {
            return reel.emit("RUN_NUDGE");
          });
        };

        _proto.onReelFinishedNudge = function onReelFinishedNudge(evt) {
          evt.stopPropagation();
          this._countNudge++;

          if (this._countNudge === this.reels.length) {
            this._callbackNudge && this._callbackNudge();
          }
        };

        _proto.skipAnimNudges = function skipAnimNudges(callback) {
          if (!this._callbackNudge && callback) {
            this._callbackNudge = callback;
            this._countNudge = 0;
          }

          this.reels.forEach(function (reel) {
            return reel.emit("SKIP_NUDGE");
          });
        }
        /**@private */
        ;

        _proto._getDefaultMatrix = function _getDefaultMatrix() {
          var defaultMatrix = [[["2", "3", "7"], ["5", "2", "3"], ["K", "K", "L"], ["5", "2", "3"], ["2", "3", "7"]], [["2", "3", "2"], ["5", "3", "6"], ["K", "L", "K"], ["6", "3", "5"], ["2", "3", "2"]], [["4", "7", "3"], ["6", "2", "5"], ["L", "K", "K"], ["6", "2", "5"], ["4", "7", "3"]], [["7", "2", "7"], ["2", "3", "2"], ["3", "4", "3"], ["4", "5", "4"], ["K", "L", "K"]], [["7", "2", "7"], ["4", "2", "4"], ["K", "L", "K"], ["3", "2", "3"], ["K", "L", "K"]], [["K", "K", "L"], ["7", "4", "6"], ["K", "K", "K"], ["7", "4", "6"], ["K", "K", "L"]], //
          [["K", "L", "K"], ["2", "7", "2"], ["3", "2", "3"], ["4", "3", "4"], ["6", "4", "6"]], [["K", "L", "K"], ["3", "2", "7"], ["K", "K", "L"], ["3", "2", "7"], ["K", "L", "K"]], [["K", "L", "K"], ["3", "7", "3"], ["K", "L", "K"], ["2", "7", "2"], ["4", "7", "4"]], [["L", "K", "K"], ["2", "4", "3"], ["K", "L", "K"], ["3", "4", "2"], ["K", "K", "L"]]];
          var defaultStackWilds = [["9;0", "9;0", "0;B3", "9;0", "9;0"], ["9;0", "9;0", "0;B2", "9;0", "9;0"], ["9;0", "9;0", "0;B1", "9;0", "9;0"], ["9;0", "9;0", "9;0", "9;0", "0;C"], ["9;0", "9;0", "0;B1", "9;0", "0;C"], ["0;A1", "9;0", "0;C", "9;0", "0;C"], ["0;A1", "9;0", "9;0", "9;0", "9;0"], ["0;A1", "9;0", "0;C", "9;0", "0;B1"], ["0;A1", "9;0", "0;C", "9;0", "9;0"], ["0;A1", "9;0", "0;C", "9;0", "0;B1"]];
          var index = Math.floor(Math.random() * defaultMatrix.length); // index = 9; // *test

          var matrix = defaultMatrix[index];
          var stackWilds = defaultStackWilds[index];
          return {
            matrix: matrix,
            stackWilds: stackWilds
          };
        }
        /* // todo open for test
        start() {
            this.init();
        }
        setTurbo() {
            this.dataStore.setTurbo(!this.dataStore.modeTurbo);
        }
        startSpinning() {
            if (this._isSpinning) return;
            this.skipAnimNudges();
            this.scheduleOnce(() => {  
                super.startSpinning();
                this._testResultReceive();
            }, 0.1);
        }
        _testResultReceive() {
            const { matrix, stackWilds } = this._getDefaultMatrix();
            const nudges = [6, 6, 6, 6, 6];
            this.scheduleOnce(() => {
                this.setupStackWilds({ matrix, stackWilds, nudges });
                this.stopSpinning(matrix, () => {
                    this.runAnimNudges();
                });
            }, 0.2);
        }
        _testChangeMatrix() {
            const { matrix, stackWilds } = this._getDefaultMatrix();
            const nudges = [4, 6, 6, 6, 8];
            this.changeMatrix({ matrix, stackWilds, nudges });
        }
        //*/
        ;

        return GongTable;
      }(SlotTable)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GongUtils.ts", ['cc', './utils.ts'], function (exports) {
  var cclegacy, randRange;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      randRange = module.randRange;
    }],
    execute: function () {
      exports({
        getFakeStackData: getFakeStackData,
        processStackData: processStackData
      });

      cclegacy._RF.push({}, "10e76DQDKBHQ4xLXrLzeNnE", "GongUtils", undefined);

      function processStackData(matrix, stackWilds, nudges) {
        if (stackWilds === void 0) {
          stackWilds = ["9;0", "9;0", "0;B3", "9;0", "9;0"];
        }

        if (nudges === void 0) {
          nudges = [6, 6, 6, 6, 6];
        }

        var stackFormats = [];

        for (var col = 0; col < stackWilds.length; col++) {
          var type = stackWilds[col].split(";")[1];
          var isFake = Math.random() > 0.5;

          if (type === "0" && isFake) {
            stackFormats.push(getFakeStackData());
            continue;
          }

          var nudge = nudges[col];
          var nudgeStep = (6 - nudge) % 4;
          var lastIndex = parseInt(stackWilds[col].split(";")[0]);
          var size = getStackSize(type);
          var gongRow = matrix[col].indexOf("L");
          var firstIndex = lastIndex - nudgeStep;
          var format = {
            lastIndex: lastIndex,
            firstIndex: firstIndex,
            type: type,
            nudgeStep: nudgeStep,
            gongRow: gongRow,
            size: size,
            nudge: nudge
          };
          format.step = getStepToAddWild(format);
          stackFormats.push(format);
        }

        return stackFormats;
      }

      function getStackSize(type) {
        switch (type) {
          case "C":
            return 7;

          case "A1":
          case "B1":
            return 6;

          case "A2":
          case "B2":
            return 5;

          case "A3":
          case "B3":
            return 4;
        }

        return 0;
      }

      function getGongIndex(stackType) {
        switch (stackType) {
          case "A1":
          case "A2":
          case "A3":
          case "C":
            return 4;

          case "B1":
            return 3;

          case "B2":
            return 2;

          case "B3":
            return 1;
        }

        return 0;
      }

      function getStepToAddWild(format) {
        var firstIndex = format.firstIndex,
            size = format.size,
            gongRow = format.gongRow,
            type = format.type,
            nudgeStep = format.nudgeStep;
        var gongIndex = getGongIndex(type);
        if (gongRow > -1) return gongRow + gongIndex - nudgeStep;
        if (firstIndex === 9) return null;
        if (firstIndex > 0) return size + firstIndex;
        if (firstIndex < 0) return 3 + firstIndex;

        if (firstIndex === 0) {
          if (type.includes("B")) return size;
          if (type.includes("A")) return 3;

          if (type === "C") {
            var random = Math.random();
            return random > 0.5 ? 3 : size;
          }
        }
      }

      function getFakeStackData() {
        var type = "FAKE",
            size = 4;
        var firstIndex = randRange(3, 6);
        var step = size + firstIndex;
        var lastIndex = firstIndex;
        return {
          type: type,
          size: size,
          step: step,
          firstIndex: firstIndex,
          lastIndex: lastIndex
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Info.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, SpriteFrame, PageView, Mask, Sprite, EventNames, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      PageView = module.PageView;
      Mask = module.Mask;
      Sprite = module.Sprite;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "787c4iWE1VA5rWmuHjmz9DN", "Info", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Info = exports('Info', (_dec = ccclass('Info'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: PageView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(Info, _SlotUIScene);

        function Info() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nextBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "preBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "infoTitle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titles", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isCircular", _descriptor6, _assertThisInitialized(_this));

          _this.curInfoID = 0;
          _this.maskComponent = null;
          _this.viewNode = null;
          return _this;
        }

        var _proto = Info.prototype;

        _proto.onLoad = function onLoad() {
          globalThis.info = this;

          _SlotUIScene.prototype.onLoad.call(this);

          this.node.on("NEXT_GAME_INFO", this.next, this);
          this.node.on("PREVIOUS_GAME_INFO", this.previous, this);
          this.pageView.node.on('page-turning', this.pageViewEvent, this);
          this.activeButtons(this.curInfoID);
          this.preBtn.interactable = false;
          this.maskComponent = this.pageView.getComponentInChildren(Mask);
          this.viewNode = this.maskComponent.node;
        };

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.scheduleOnce(function () {
            _this2.pageView.node.setScale(1, 1, 1);
          }, 0.01);
        };

        _proto.enter = function enter() {
          this.resetInfo();
        };

        _proto.pageViewEvent = function pageViewEvent() {
          var newIndex = this.pageView.getCurrentPageIndex();

          if (Math.abs(newIndex - this.curInfoID) !== 1) {
            this.pageView.scrollToPage(this.curInfoID, 0.1);
            return;
          }

          this.curInfoID = newIndex;
          this.activeButtons(this.curInfoID);
        };

        _proto.next = function next() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.curInfoID++;
          this.activeButtons(this.curInfoID);
          this.pageView.scrollToPage(this.curInfoID);
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
        };

        _proto.previous = function previous() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.curInfoID--;
          this.activeButtons(this.curInfoID);
          this.pageView.scrollToPage(this.curInfoID);
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
        };

        _proto.activeButtons = function activeButtons(id) {
          var nextBtn = this.nextBtn,
              preBtn = this.preBtn,
              infoTitle = this.infoTitle;
          var totalInfo = this.pageView.content.children.length;

          if (this.isCircular) {
            nextBtn.interactable = true;
            preBtn.interactable = true;

            if (id > totalInfo - 1) {
              id = 0;
            }

            if (id < 0) {
              id = totalInfo - 1;
            }
          } else {
            if (id >= totalInfo - 1) {
              id = totalInfo - 1;
              nextBtn.interactable = false;
            } else {
              nextBtn.interactable = true;
            }

            if (id <= 0) {
              id = 0;
              preBtn.interactable = false;
            } else {
              preBtn.interactable = true;
            }
          }

          this.curInfoID = id;

          if (infoTitle) {
            if (infoTitle.getComponent(Sprite)) {
              infoTitle.getComponent(Sprite).spriteFrame = this.titles[this.curInfoID];
            }
          }
        };

        _proto.resetInfo = function resetInfo() {
          this.pageView.scrollToPage(0, 0);
          this.curInfoID = 0;
          this.eventManager.emit(EventNames.OPEN_INFO, this.curInfoID);
          this.activeButtons(this.curInfoID);
        };

        _proto.onClose = function onClose() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
          this.exit();
        };

        return Info;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nextBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "preBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "infoTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "titles", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "pageView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isCircular", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfoPayableSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Layout, SpriteFrame, CCString, sp, UITransform, Sprite, Component, setOpacity, HorizontalExpandDirection, VerticalExpandDirection;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Layout = module.Layout;
      SpriteFrame = module.SpriteFrame;
      CCString = module.CCString;
      sp = module.sp;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      HorizontalExpandDirection = module.HorizontalExpandDirection;
      VerticalExpandDirection = module.VerticalExpandDirection;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22;

      cclegacy._RF.push({}, "6e508AeLOtNJaO3Ve4TWE5t", "InfoPayableSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InfoPayableSymbol = exports('InfoPayableSymbol', (_dec = ccclass('InfoPayableSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Layout
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec9 = property({
        type: CCString
      }), _dec10 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfoPayableSymbol, _Component);

        function InfoPayableSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "frameBg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layout", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "description", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "payable", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spine", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "border", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listPayables", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbols", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbolAnimations", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "borderAnimation", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigNodeWidth", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigDescriptionWidth", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigBackgroundWidth", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigBackgroundHeight", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalNodeWidth", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalDescriptionWidth", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundWidth", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundHeight", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalBackgroundOffsetX", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalWidthOffsetRatio", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandWidthOffsetRatio", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expandHeightOffsetRatio", _descriptor22, _assertThisInitialized(_this));

          _this.spineAnim = null;
          _this.borderAnim = null;
          _this.tweenScale = null;
          _this.tweenForever = null;
          return _this;
        }

        var _proto = InfoPayableSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_LAYOUT", this.updateLayout, this);
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("RESET_ANIM", this.resetAnim, this);

          if (this.spine) {
            this.spineAnim = this.spine.getComponent(sp.Skeleton);
          }

          if (this.border) {
            this.borderAnim = this.border.getComponent(sp.Skeleton);
          }
        };

        _proto.updateLayout = function updateLayout(direction, newPos, symbolName, expandConfig) {
          var _this2 = this;

          if (direction === void 0) {
            direction = Layout.HorizontalDirection.LEFT_TO_RIGHT;
          }

          if (expandConfig === void 0) {
            expandConfig = null;
          }

          var newX = newPos.x;
          var newY = newPos.y;
          setOpacity(this.node, 0);
          this.node.getComponent(UITransform).width = this.normalNodeWidth;
          this.description.getComponent(UITransform).width = this.normalDescriptionWidth;
          this.frameBg.getComponent(UITransform).width = this.normalBackgroundWidth;
          this.frameBg.getComponent(UITransform).height = this.normalBackgroundHeight;

          var _x = direction === Layout.HorizontalDirection.LEFT_TO_RIGHT ? this.normalBackgroundOffsetX : -this.normalBackgroundOffsetX;

          this.frameBg.setPosition(_x, this.frameBg.getPosition().y);
          var widthNode = this.node.getComponent(UITransform).width;
          newX = direction === Layout.HorizontalDirection.LEFT_TO_RIGHT ? newPos.x + widthNode * this.normalWidthOffsetRatio : newPos.x - widthNode * this.normalWidthOffsetRatio;

          if (expandConfig) {
            if (expandConfig.expandWidth > 1) {
              this.node.getComponent(UITransform).width = this.bigNodeWidth;
              this.description.getComponent(UITransform).width = this.bigDescriptionWidth;
              this.frameBg.getComponent(UITransform).width = this.bigBackgroundWidth;
              this.frameBg.setPosition(0, this.frameBg.getPosition().y);
              var nodeWidth = this.node.getComponent(UITransform).width;

              if (expandConfig.expandDirectionHorizontal === HorizontalExpandDirection.LeftToRight) {
                newX = newPos.x + nodeWidth * this.expandWidthOffsetRatio;
              } else if (expandConfig.expandDirectionHorizontal === HorizontalExpandDirection.RightToLeft) {
                newX = newPos.x - nodeWidth * this.expandWidthOffsetRatio;
              }
            }

            if (expandConfig.expandHeight > 1) {
              this.frameBg.getComponent(UITransform).height = this.bigBackgroundHeight;
              this.frameBg.setPosition(0, this.frameBg.getPosition().y);
              var nodeHeight = this.node.getComponent(UITransform).height;

              if (expandConfig.expandDirectionVertical === VerticalExpandDirection.BottomToTop) {
                newY = newPos.y + nodeHeight * this.expandHeightOffsetRatio;
              } else if (expandConfig.expandDirectionVertical === VerticalExpandDirection.TopToBottom) {
                newY = newPos.y - nodeHeight * this.expandHeightOffsetRatio;
              }
            }
          }

          this.node.setPosition(newX, newY, 0);
          this.layout.horizontalDirection = direction;
          this.layout.updateLayout();
          this.scheduleOnce(function () {
            setOpacity(_this2.node, 255);
          }, 0.03);
        };

        _proto.updateData = function updateData(symbolName, spineData, spineBorder, specialSymbolAnim) {
          if (symbolName === void 0) {
            symbolName = null;
          }

          if (spineData === void 0) {
            spineData = null;
          }

          if (spineBorder === void 0) {
            spineBorder = null;
          }

          if (specialSymbolAnim === void 0) {
            specialSymbolAnim = null;
          }

          if (!symbolName) {
            return;
          }

          var index = this.listSymbols.indexOf(symbolName);
          var animationName = 'animation';

          if (index > -1) {
            this.payable.getComponent(Sprite).spriteFrame = this.listPayables[index];
            animationName = this.listSymbolAnimations[index];
          }

          if (spineData) {
            this.spineAnim.skeletonData = spineData;

            if (specialSymbolAnim && specialSymbolAnim !== "") {
              animationName = specialSymbolAnim;
            }

            if (this.spineAnim.findAnimation(animationName)) {
              this.spineAnim.setAnimation(0, animationName, true);
              this.spineAnim.timeScale = 0.5;
            }
          }

          if (spineBorder && this.borderAnim) {
            this.borderAnim.skeletonData = spineBorder;

            if (this.borderAnim.findAnimation(this.borderAnimation)) {
              this.borderAnim.setAnimation(0, this.borderAnimation, true);
            }
          }
        };

        _proto.resetAnim = function resetAnim() {
          if (this.spineAnim) this.spineAnim.skeletonData = null;
          if (this.borderAnim) this.borderAnim.skeletonData = null;
        };

        return InfoPayableSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "frameBg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "description", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "payable", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "border", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listPayables", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listSymbols", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "listSymbolAnimations", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "borderAnimation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Touch";
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "bigNodeWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "bigDescriptionWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 240;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "bigBackgroundWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "bigBackgroundHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 420;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "normalNodeWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 282;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "normalDescriptionWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 95;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 300;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 300;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "normalBackgroundOffsetX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "normalWidthOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "expandWidthOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.31;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "expandHeightOffsetRatio", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, setOpacity, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d29b3UysERNGJVjy3C2MXzE", "InfoView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InfoView = exports('InfoView', (_dec = ccclass('InfoView'), _dec2 = property({
        type: ScrollView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(InfoView, _SlotUIScene);

        function InfoView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollView", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = InfoView.prototype;

        _proto.show = function show() {
          this.node.active = true;
          setOpacity(this.node, 255);
          this.node.show();
        };

        _proto.enter = function enter() {
          _SlotUIScene.prototype.enter.call(this);

          if (this.scrollView) {
            this.scrollView.scrollToTop();
          }
        };

        _proto.exit = function exit() {
          var _this2 = this; // overide exit
          // must have TweenView component


          var startCB = function startCB() {};

          var endCB = function endCB() {
            // this.node.opacity = 0;
            setOpacity(_this2.node, 1);
            _this2.node.active = false;
          };

          this.node.hide(startCB, endCB);
        };

        return InfoView;
      }(SlotUIScene), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroBonus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2638biS6INOIaluPqSwjg40", "IntroBonus", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroBonus = exports('IntroBonus', (_dec = ccclass('IntroBonus'), _dec2 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroBonus, _SlotUIScene);

        function IntroBonus() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeShow", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = IntroBonus.prototype;

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, this.timeShow);
        };

        return IntroBonus;
      }(SlotUIScene), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeShow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroFree.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b9a8819CClDbIiqfjoqyyFm", "IntroFree", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroFree = exports('IntroFree', (_dec = ccclass('IntroFree'), _dec2 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroFree, _SlotUIScene);

        function IntroFree() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeShow", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = IntroFree.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          window["introFree"] = this;
        };

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, this.timeShow);
        };

        return IntroFree;
      }(SlotUIScene), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeShow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, PageView, Button, Node, sys, tween, Tween, Component, setOpacity, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      PageView = module.PageView;
      Button = module.Button;
      Node = module.Node;
      sys = module.sys;
      tween = module.tween;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "4a10d/JJZNCWofWWyixrdw8", "IntroGame", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroGame = exports('IntroGame', (_dec = ccclass('IntroGame'), _dec2 = property(PageView), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Button), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(IntroGame, _Component);

        function IntroGame() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pageView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPrev", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnNext", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "introNodes", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "anchorPages", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnJoinGame", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "doNotShowNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isLoading", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameId", _descriptor10, _assertThisInitialized(_this));

          _this.currentIndex = 0;
          _this.isHideIntroGame = false;
          return _this;
        }

        var _proto = IntroGame.prototype;

        _proto.start = function start() {
          this.node.on("SHOW_BUTTON_JOIN_GAME", this.showButtonJoinGame, this);
          this.pageView.node.on('scroll-ended', this._onPageTurning, this);
          this.init();
        };

        _proto.init = function init() {
          this.currentIndex = globalThis.currentIntroPage || 0;
          if (this.isLoading) this.currentIndex = 0;
          this.showPageIntro();
          this.pageView.scrollToPage(this.currentIndex, 0);

          if (!this.isLoading) {
            var cacheValue = JSON.parse(sys.localStorage.getItem("HideIntroGame")) || {};
            this.isHideIntroGame = !!cacheValue[this.gameId];
            this.node.active = !this.isHideIntroGame;
            setOpacity(this.node, 255);
            this.showButtonJoinGame(false);
          }
        };

        _proto._onPageTurning = function _onPageTurning() {
          this.currentIndex = this.pageView.getCurrentPageIndex();
          this.showPageIntro();
        };

        _proto.onNextIntro = function onNextIntro() {
          this.currentIndex++;
          this.showPageIntro();
          this.pageView.scrollToPage(this.currentIndex, 0.3);
        };

        _proto.onPrevIntro = function onPrevIntro() {
          this.currentIndex--;
          this.showPageIntro();
          this.pageView.scrollToPage(this.currentIndex, 0.3);
        };

        _proto.showPageIntro = function showPageIntro() {
          var _this2 = this;

          globalThis.currentIntroPage = this.currentIndex;
          this.btnPrev.interactable = this.currentIndex !== 0;
          this.btnNext.interactable = this.currentIndex !== this.introNodes.length - 1;
          this.introNodes.forEach(function (item, index) {
            var isShow = index == _this2.currentIndex;
            item.active = isShow;
            _this2.anchorPages[index].active = isShow;
          });
        };

        _proto.onClickJoinGame = function onClickJoinGame() {
          var _this3 = this;

          this.cacheHideIntroGame();
          tween(this.node).call(function () {
            return fadeOut(_this3.node, 0.2);
          }).delay(0.2).call(function () {
            return _this3.node.active = false;
          }).start();
        };

        _proto.cacheHideIntroGame = function cacheHideIntroGame() {
          var cacheValue = {};
          cacheValue[this.gameId] = this.isHideIntroGame;
          sys.localStorage.setItem("HideIntroGame", JSON.stringify(cacheValue));
        };

        _proto.onCheckDoNotShowAgain = function onCheckDoNotShowAgain() {
          this.isHideIntroGame = !this.isHideIntroGame;
        };

        _proto.enableButtonJoinGame = function enableButtonJoinGame(isEnable) {
          this.btnJoinGame && (this.btnJoinGame.interactable = isEnable);
        };

        _proto.showButtonJoinGame = function showButtonJoinGame(isShow) {
          this.progressBar && (this.progressBar.active = !isShow);
          this.doNotShowNode && (this.doNotShowNode.active = isShow);
          this.btnJoinGame && (this.btnJoinGame.node.active = isShow);
        };

        _proto.onDisable = function onDisable() {
          Tween.stopAllByTarget(this.node);
        };

        return IntroGame;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnPrev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "introNodes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "anchorPages", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnJoinGame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "doNotShowNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "gameId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntroJackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ae6ceSm0OFE3qjajorAVs7e", "IntroJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IntroJackpot = exports('IntroJackpot', (_dec = ccclass('IntroJackpot'), _dec2 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(IntroJackpot, _SlotUIScene);

        function IntroJackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeShow", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = IntroJackpot.prototype;

        _proto.show = function show() {
          _SlotUIScene.prototype.show.call(this);

          this.scheduleOnce(this.exit, this.timeShow);
        };

        return IntroJackpot;
      }(SlotUIScene), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeShow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Jackpot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts', './CustomType.ts', './CustomEventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, warn, Label, tweenMoney, GameObject, JackpotObject, gameEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Label = module.Label;
    }, function (module) {
      tweenMoney = module.tweenMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      JackpotObject = module.JackpotObject;
    }, function (module) {
      gameEvent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "696d9LQBQdEn6FLAb/WwOuE", "Jackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Jackpot = exports('Jackpot', (_dec = ccclass('Jackpot'), _dec2 = property({
        type: JackpotObject
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Jackpot, _GameObject);

        function Jackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listJackpots", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isUsingExtraBet", _descriptor2, _assertThisInitialized(_this));

          _this.jackpots = {};
          _this.isInit = false;
          _this.isPausedJP = false;
          _this.JP_Prefix = void 0;
          _this.isJoinGame = false;
          _this.jackpotData = {};
          return _this;
        }

        var _proto = Jackpot.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT_JACKPOT", this.initJackpot, this);
          this.node.on("UPDATE_JACKPOT", this.jackpotUpdate, this);
          this.node.on("CHANGE_JACKPOT", this.changeJackpot, this); // change bet

          this.node.on("PAUSE_JACKPOT", this.pauseRenderJP, this);
          this.node.on("RESUME_JACKPOT", this.resumeRenderJP, this);
          this.node.on("UPDATE_VALUE_JACKPOT", this.updateValueJP, this); // for case win Jackpot

          this.eventManager.on(gameEvent.BET_UPDATE, this.changeJackpot, this);
          this.initData();
        };

        _proto.initJackpot = function initJackpot(data) {
          this.isJoinGame = true;
          this.jackpotData = Object.assign({}, data);
          this.renderJackpot(3);
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          Object.assign(this.jackpotData, data);
          this.renderJackpot(3);
        };

        _proto.changeJackpot = function changeJackpot() {
          if (!this.isJoinGame) return;
          this.renderJackpot(.3);
        };

        _proto.pauseRenderJP = function pauseRenderJP() {
          this.isPausedJP = true;
        };

        _proto.resumeRenderJP = function resumeRenderJP(data) {
          if (data === void 0) {
            data = null;
          }

          if (data) {
            Object.assign(this.jackpotData, data);
          }

          this.isPausedJP = false;
          this.renderJackpot(0.01);
        };

        _proto.updateValueJP = function updateValueJP(jpType, jpValue) {
          if (this.jackpots[jpType]) {
            var jpObject = this.jackpots[jpType];
            this.renderJP({
              node: jpObject.jpNode,
              value: jpValue,
              time: 0.3
            });
          } else {
            warn("do not have jackpot", jpType);
          }
        };

        _proto.onJackpotHistory = function onJackpotHistory() {
          this.guiMgr.showJackpotHistory();
        };

        _proto.initData = function initData() {
          var _this2 = this;

          if (!this.isInit) {
            this.listJackpots.forEach(function (jpObj) {
              _this2.jackpots[jpObj.jpType] = jpObj;
            });
            this.JP_Prefix = this.config.JP_PREFIX_EVENT;
            this.isInit = true;
          }
        };

        _proto.renderJackpot = function renderJackpot(time) {
          var _this3 = this;

          if (time === void 0) {
            time = 3;
          }

          if (this.isPausedJP) return;
          var _this$dataStore$betDa = this.dataStore.betData,
              betKey = _this$dataStore$betDa.betKey,
              extraBetKey = _this$dataStore$betDa.extraBetKey;
          var betIndex = this.isUsingExtraBet ? extraBetKey : betKey;
          this.listJackpots.forEach(function (jpObj) {
            var value = _this3.getJackpotValue(jpObj.jpType, betIndex);

            _this3.renderJP({
              node: jpObj.jpNode,
              value: value,
              time: time
            });
          });
        };

        _proto.getJackpotValue = function getJackpotValue(jpType, betIndex) {
          var jpId = this.JP_Prefix + betIndex + "_" + jpType;

          var currencyPrefix = this._getCurrencyPrefix();

          if (currencyPrefix) {
            jpId = this.JP_Prefix + betIndex + "_" + currencyPrefix + jpType;
          }

          if (this.jackpotData[jpId]) {
            return this.jackpotData[jpId];
          } else {
            warn("invalid Jackpot Id", jpId, this.jackpotData);
            return null;
          }
        };

        _proto._getCurrencyPrefix = function _getCurrencyPrefix() {
          if (!this.dataStore) return;
          var currencyCode = this.dataStore['currencyCode'];
          if (!currencyCode) return;
          var defaultCurrency = this.config.DEFAULT_CURRENCY || 'VND';
          var currencyPrefix = !currencyCode || defaultCurrency === currencyCode ? '' : currencyCode + "_";
          return currencyPrefix;
        };

        _proto.renderJP = function renderJP(_ref) {
          var node = _ref.node,
              value = _ref.value,
              _ref$time = _ref.time,
              time = _ref$time === void 0 ? 3 : _ref$time;

          if (value == null) {
            node.active = false;
            return;
          }

          if (node) {
            var label = node.getComponent(Label);

            if (label) {
              tweenMoney(label, time, value);
            }
          }
        };

        return Jackpot;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listJackpots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isUsingExtraBet", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotCoinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, ParticleSystem2D, view, tween, Vec3, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      ParticleSystem2D = module.ParticleSystem2D;
      view = module.view;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "0f6961lkbBDRYGKrjIY1tTs", "JackpotCoinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotCoinEffect = exports('JackpotCoinEffect', (_dec = ccclass('JackpotCoinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: [Node]
      }), _dec7 = property({
        type: [Node]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JackpotCoinEffect, _Component);

        function JackpotCoinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.duration = 10;
          _this.moneyPool = [];
          _this.moneyIndex = 0;

          _initializerDefineProperty(_this, "coinSpawnerCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinDropper", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "diamondDropper", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneySpawner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moneyPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPiles", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "diamondPiles", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinPipeDelayTime", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JackpotCoinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.initValue();
          this.node.on('START_PARTICLE', this.startParticle, this);
          this.node.on('STOP_PARTICLE', this.stopParticle, this);
          this.node.on('DROP_MONEY', this.randomDropMoney, this);
          this.node.on('DROP_DIAMOND', this.dropDiamond, this);
          this.duration = 10;
        };

        _proto.initValue = function initValue() {
          if (!this.moneyPrefab) {
            return;
          }

          this.moneyPool = [];

          for (var i = 0; i < 20; ++i) {
            var money = instantiate(this.moneyPrefab);
            money.parent = this.moneySpawner;
            setOpacity(money, 0);
            this.moneyPool.push(money);
          }

          setOpacity(this.moneySpawner, 0);
        };

        _proto.startParticle = function startParticle() {
          var _this2 = this;

          this.coinDropper.getComponent(ParticleSystem2D).resetSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).resetSystem();
            pile.setPosition(0, -view.getVisibleSize().height / 2);
            tween(pile).by(_this2.duration, {
              position: new Vec3(0, 50, 0)
            }).start();
          });
        };

        _proto.stopParticle = function stopParticle() {
          this.coinDropper.getComponent(ParticleSystem2D).stopSystem();
          this.coinPiles.forEach(function (pile) {
            pile.getComponent(ParticleSystem2D).stopSystem();
          });

          if (this.diamondDropper) {
            this.diamondDropper.getComponent(ParticleSystem2D).resetSystem();
            this.diamondDropper.getComponent(ParticleSystem2D).stopSystem();
            this.diamondPiles.forEach(function (pile) {
              pile.getComponent(ParticleSystem2D).resetSystem();
              pile.getComponent(ParticleSystem2D).stopSystem();
            });
          }
        };

        _proto.randomDropMoney = function randomDropMoney() {
          var _this3 = this;

          if (!this.moneyPrefab) {
            return;
          }

          this.moneyIndex = 0;
          setOpacity(this.moneySpawner, 255);
          tween(this.moneySpawner).repeatForever(tween().delay(0.3).call(function () {
            _this3.dropMoney();
          })).start();
        };

        _proto.dropMoney = function dropMoney() {
          var money = this.moneyPool[this.moneyIndex];
          this.moneyIndex = (this.moneyIndex + 1) % this.moneyPool.length;
          money.position.x = (Math.random() - 0.5) * view.getVisibleSize().width;
          var randomAnimIdx = Math.random() * 3 | 0 + 1;
          var animName = 'TienRoi' + randomAnimIdx;
          setOpacity(money, 255);
          money.getComponent('sp.Skeleton').setAnimation(0, animName, false);
        };

        _proto.dropDiamond = function dropDiamond() {
          setOpacity(this.diamondDropper, 0);
          this.diamondDropper.getComponent(ParticleSystem2D).resetSystem();
        };

        return JackpotCoinEffect;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "coinSpawnerCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinDropper", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "diamondDropper", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "moneySpawner", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Prefab();
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coinPiles", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "diamondPiles", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "coinPipeDelayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, Vec3, tween, SlotUIScene, formatMoney, PerformanceLevel, TutorialTriggerType, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "902a6Wd+UhJi7XoeEOrAqzd", "JackpotWin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotWin = exports('JackpotWin', (_dec = ccclass('JackpotWin'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(JackpotWin, _SlotUIScene);

        function JackpotWin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.label = null;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.currentTween = null;
          _this.tweenWinAmount = null;
          _this.tweenTitle = null;
          _this.tweenExit = null;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDuration", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "extendFinishDelayTime", _descriptor8, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          return _this;
        }

        var _proto = JackpotWin.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          var labels = this.winAmount.getComponentsInChildren(Label);
          this.label = labels[labels.length - 1];
        };

        _proto.enter = function enter() {
          this.eventManager.emit(EventNames.JACKPOT_START);

          if (!this.dataStore.isTrialMode) {
            var updatedEvent = new Event('NOTIFY_OPEN_JACKPOT', true);
            updatedEvent.winAmount = this.content.winAmount;
            updatedEvent.gameId = this.config.GAME_ID;
            this.node.dispatchEvent(updatedEvent);
          }

          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].JP_WIN_ANIMATION;
          this.playSoundStart();
          this.playTweenWinAmount();
          this.playTweenTitle();
          this.initValue();
          this.startParticle();
          this.startUpdateWinAmount();
        };

        _proto.playSoundStart = function playSoundStart() {
          this.soundPlayer && this.soundPlayer.stopAllAudio();
          this.soundPlayer && this.soundPlayer.playSfx('JACKPOT_START', true);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          this.soundPlayer && this.soundPlayer.playSfx('JACKPOT_END');
        };

        _proto.initValue = function initValue() {
          this.winInfo.scale = new Vec3(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
        };

        _proto.bindQuickShow = function bindQuickShow() {
          var _this2 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this2.skippable = true;
          }).start();
        };

        _proto.playTweenWinAmount = function playTweenWinAmount() {
          if (!this.winAmount) return;
          this.tweenWinAmount = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }));
          this.tweenWinAmount.start();
        };

        _proto.stopTweenWinAmount = function stopTweenWinAmount() {
          if (this.tweenWinAmount) this.tweenWinAmount.stop();

          if (this.winAmount) {
            this.winAmount.scale = Vec3.ONE;
          }
        };

        _proto.playTweenTitle = function playTweenTitle() {
          if (!this.title) return;
          this.tweenTitle = tween(this.title).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }));
          this.tweenTitle.start();
        };

        _proto.stopTweenTitle = function stopTweenTitle() {
          if (this.tweenTitle) this.tweenTitle.stop();

          if (this.title) {
            this.title.scale = Vec3.ONE;
          }
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect) return;

          if (this.animationLevel < Number(PerformanceLevel.Medium)) {
            return;
          }

          this.coinsEffect.emit('START_PARTICLE');
          this.coinsEffect.emit('DROP_MONEY');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount() {
          var _this3 = this;

          var halfAmount = 0.5 * Number(this.content.winAmount);
          var extendFinishDelayTime = this.dataStore && this.dataStore.isAutoSpin ? this.extendFinishDelayTime : 0;
          this.currentTween = tween(this);
          this.currentTween.to(0.5 * this.animDuration, {
            currentValue: halfAmount
          }).to(0.5 * this.animDuration, {
            currentValue: Number(this.content.winAmount)
          }).delay(extendFinishDelayTime).call(function () {
            if (_this3.dataStore && _this3.dataStore.isAutoSpin) {
              _this3.playSoundEnd();

              _this3.skippable = false;
              _this3.currentTween = null;

              _this3.finish();
            }
          });
          this.currentTween.start();
        };

        _proto.update = function update() {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);
        };

        _proto.onClick = function onClick() {
          var _this4 = this;

          if (!this.isUpdating || this.speedUp) return;
          if (!this.skippable) return;
          this.speedUp = true;
          this.playSoundEnd();

          if (this.currentTween) {
            this.currentTween.stop();
            this.currentTween = null;
          }

          this.currentTween = tween(this);
          this.currentTween.to(1, {
            currentValue: 1 * this.content.winAmount
          }).delay(0.1).call(function () {
            _this4.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect) return;

          if (this.animationLevel < Number(PerformanceLevel.Medium)) {
            return;
          }

          this.coinsEffect.emit('STOP_PARTICLE');
        };

        _proto.finish = function finish() {
          var _this5 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.stopParticle();
          this.stopTweenTitle();
          this.stopTweenWinAmount();
          this.tweenExit = tween(this.node).delay(this.delayShowTime).call(function () {
            _this5.label.string = '';

            _this5.exit();

            _this5.soundPlayer && _this5.soundPlayer.stopAllAudio();
            _this5.soundPlayer && _this5.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.onDisable = function onDisable() {
          this.currentTween && this.currentTween.stop();
          this.currentTween = null;
          this.tweenTitle && this.tweenTitle.stop();
          this.tweenTitle = null;
          this.tweenWinAmount && this.tweenWinAmount.stop();
          this.tweenWinAmount = null;
          this.tweenExit && this.tweenExit.stop();
          this.tweenExit = null;
        };

        _proto.exit = function exit() {
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.eventManager.emit(EventNames.JACKPOT_END);
          this.guiMgr.onIngameEvent(TutorialTriggerType.OnJackpotCutsceneClose, 'ON_JACKPOT_CUTSCENE_CLOSE');

          _SlotUIScene.prototype.exit.call(this);
        };

        return JackpotWin;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "extendFinishDelayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageData.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, sys, settings;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      settings = module.settings;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "47192OQB9BNM4wtxqi8VOF9", "LanguageData", undefined);

      if (!window['languageData']) window['languageData'] = {};
      if (!window['defaultLanguage']) window['defaultLanguage'] = 'VI';
      var ccclass = _decorator.ccclass;
      var messageSlotConfig = {
        VI: {
          NAME: "DialogMessage",
          WILD: "Wild",
          SCATTER: "Scatter",
          BONUS: "Bonus",
          JACKPOT: "Jackpot",
          GRAND: "GRAND",
          MAJOR: "MAJOR",
          MINI: "MINI",
          MINOR: "MINOR",
          BASE_GAME: "Base Game",
          FREE_GAME: "Free Game",
          FREE_MODE: "Free",
          HISTORY_PAGE: "Trang",
          SECONDS: "s",
          SECOND_TEXT: "giây",
          TRIAL_MODE: "Chơi thử",
          REAL_MODE: "Chơi thật",
          SKIP_TUTORIAL: "Bỏ qua hướng dẫn",
          PLAYING_TRIAL: "Đang chơi thử",
          HOLD_AUTO_SPIN: "Giữ để tự quay",
          CLICK_TO_STOP: "Bấm để dừng",
          EXIT: "Thoát",
          BACK: "Trở lại",
          CLOSE: "Đóng",
          PREVIOUS: "Trở lại",
          NEXT: "Kế tiếp",
          BET_DETAILS: "Chi Tiết Cược",
          TOTAL_WIN: "Tổng thắng",
          SUMMARY: "Tổng kết",
          TOTAL_BET: "Tổng Cược",
          TOTAL: "Tổng thắng",
          NORMAL_GAME: "Normal",
          BONUS_GAME: "Bonus",
          TOPUP_GAME: "Top Up",
          FREE_SPIN_OPTION: "Freegame",
          FREE_GAME_OPTION: "Chế độ chơi Free",
          JACKPOT_FEATURE: "Bonus trúng hũ",
          JACKPOT_BONUS: "Hũ pick 3",
          JACKPOT_WHEEL: "Hũ wheel",
          BET_HISTORY: "Lịch Sử Cược",
          JACKPOT_HISTORY: "Lịch Sử Hũ",
          SETTINGS: "Cài Đặt",
          SOUND: "Âm Thanh",
          MUSIC: "Nhạc Nền",
          ON: "Bật",
          OFF: "Tắt",
          TIME: "Thời gian",
          HONOR: "Vinh danh",
          TYPE_JACKPOT: "Loại hũ",
          LINES: "Số line cược",
          WIN_AMOUNT: "Tiền thắng",
          WIN: "Thắng",
          WINS: "thắng",
          LINE: "Line",
          RESULT: "Kết Quả",
          BIG_WIN: "Thắng Lớn",
          MEGA_WIN: "Thắng Cực Lớn",
          SUPER_WIN: "Thắng Siêu Lớn",
          GAME_RULES: "Luật Chơi",
          OK: "Đồng ý",
          CANCEL: "Huỷ",
          AUTO_SPIN: "Tự Động Quay",
          INTRO: "Giới thiệu",
          CONFIRM: "Xác nhận",
          PAYTABLE: "Bảng Trả Thưởng",
          FEATURE: "Tính năng",
          NOTICE: "Thông Báo",
          SESSION: "Phiên Chơi",
          CREDITS: "xu",
          DENOM: "Denom",
          BET_LEVEL: "Bet Level",
          BET_SIZES: "Bet Size",
          NOTIFY_JP_WON: "vừa thắng",
          TURBO_ON: "Turbo Bật",
          TURBO_OFF: "Turbo Tắt",
          MAX_BET: "Cược tối đa",
          MIN_BET: "Cược tối thiểu",
          JACKPOT_WIN: "Thắng hũ",
          FREEGAME_WIN: "Thắng miễn phí",
          BASE_GAME_WIN: "Thắng thường",
          ALLWAYS: "ALLWAYS",
          NOTIFY_JP_GRAND: "Grand Jackpot",
          NOTIFY_JP_MAJOR: "Major Jackpot",
          ROUND: "Lượt",
          RESPIN: "Vòng",
          YOU_WON: "Bạn đã thắng",
          TUTORIAL_FINISHED: "Kết thúc chơi thử.",
          START_TRIAL: "Kết thúc hướng dẫn,\ntiếp tục ở chế độ chơi thử.",
          B2R: "Kết thúc chơi thử\nvà đang ở chế độ chơi thật.",
          ASK_B2R: "Quay về chế độ chơi thật\nđể săn hũ.",
          REAL_PLAY: "Chơi thật",
          NO_MONEY: "Số dư trong ví không đủ, vui lòng nạp thêm để chơi tiếp.",
          LOST_CONNECT: "Bạn đã bị mất kết nối. \n Vui lòng chờ ...",
          SPIN_4_EVER: "Bạn đã mất kết nối. \n Vui lòng thử lại.",
          ANOTHER_ACCOUNT: "Tài khoản của bạn đã\nđăng nhập từ thiết bị khác.",
          AUTHEN_FAILED: "Xác thực tài khoản thất bại.",
          DEPOSIT_MONEY: "Số dư không đủ, bạn có muốn nạp thêm ?",
          MISMATCH_DATA: "Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.",
          SYSTEM_ERROR: "Có lỗi xảy ra, vui lòng thử lại.",
          DISCONNECT: "Bị mất kết nối tới máy chủ\n Đang kết nối lại.",
          NO_PLAYSESSION: "Hệ thống không tìm thấy phiên chơi.",
          GROUP_MAINTAIN: "Hệ thống đang bảo trì.\nVui lòng quay lại sau.",
          NETWORK_WARNING: "Đường truyền mạng yếu!",
          NETWORK_DISCONNECT: "Bị mất kết nối tới máy chủ \nĐang kết nối lại.",
          NO_FREESPIN_OPTION: "Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.",
          IN_PROGRESSING: "Mạng chậm vui lòng đợi trong giây lát để hoàn thành\nlượt quay hoặc bấm xác nhận để tải lại game.",
          SPIN_UNSUCCESS: "Thao tác không thành công, vui lòng thử lại.",
          FINISH_DEMO: "ĐÂY LÀ BẢN DEMO,\nBẠN CÓ MUỐN CHƠI THẬT KHÔNG?",
          SUGGEST_TURBO: "Bạn có vẻ đang chơi nhanh, bạn có muốn bật chế độ turbo không?",
          EVENT_ENDED: "Sự kiện đã kết thúc.",
          PROMOTION_EXPIRED: "Khuyến mãi đã hết hạn.",
          CURRENCY_NOT_SUPPORTED: "Tài khoản bạn không được hỗ trợ loại tiền tệ này, vui lòng liên hệ admin.",
          NO_BET_HISTORY: "Chưa có dữ liệu lịch sử cược",
          NO_JACKPOT_HISTORY: "Chưa có dữ liệu lịch sử hũ",
          BONUS_GAME_REMIND: "Hệ thống sẽ tự chọn sau:",
          SHORT_BONUS_GAME_REMIND: "Hệ thống sẽ tự chọn sau:",
          SYSTEM_AUTO_SELECT: "Hệ thống sẽ tự chọn sau:",
          SYSTEM_AUTO_SPIN: "Hệ thống sẽ tự quay sau:",
          REQUEST_DENIED: "Phiên đã hết hạn, vui lòng liên hệ với admin.",
          ERROR_CONNECTION_HISTORY: "Lỗi kết nối, vui lòng thử lại sau",
          PROMOTION_MESSAGE: "Bạn được tặng {1}\nlượt quay miễn phí,\nvới mức cược {2}",
          PROMOTION_RESET: "QUÀ TẶNG: {1} lượt quay miễn phí của ngày mới (cược {2})\nQUAY TIẾP NHÉ!",
          PROMOTION_NEW: "QUÀ TẶNG: {1} lượt quay miễn phí (cược {2})\nQUAY TIẾP NHÉ!",
          FREEGAME_REMAIN: "Bạn còn {1} lượt quay miễn phí",
          ACCOUNT_BLOCKED: "Tài khoản của bạn đã bị khoá, vui lòng liên hệ admin.",
          ACCOUNT_BLOCKED_IFRAME: "Tài khoản bị khóa chơi game GAME_TITLE.",
          SELECT_SPINTIME: "Chọn số lần quay",
          START_AUTO_SPIN: "Bắt đầu quay",
          QUEST_LOCK: 'Bạn chưa hoàn thành\nnhiệm vụ game trước.',
          EVENT_FORCE_CLOSE: 'ĐÓNG SỰ KIỆN',
          MISSION_FORCE_CLOSE: 'ĐÓNG NHIỆM VỤ',
          EVENT_UNSUPPORT_WALLET: 'Nhiệm vụ không được tính\nkhi chơi ví ngọc',
          EVENT_UNSUPPORT_BETID: 'Nhiệm vụ không được tính\nkhi chơi mức cược này',
          NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ,\nvui lòng nạp thêm để chơi tiếp.',
          DEPOSIT_MONEY_EVENT: 'Số dư [wallet] không đủ,\nbạn có muốn nạp thêm ?',
          WALLET_NORMAL: 'Ví Vàng',
          WALLET_PROMOTE: 'Ví Ngọc',
          EVENT_NOT_AVAILABLE: 'Sự kiện không hợp lệ,\nvui lòng thử lại.',
          NOT_ENOUGH_MONEY: 'Số dư trong [wallet] không đủ'
        },
        EN: {
          NAME: "DialogMessage",
          WILD: "Wild",
          SCATTER: "Scatter",
          BONUS: "Bonus",
          JACKPOT: "Jackpot",
          GRAND: "GRAND",
          MAJOR: "MAJOR",
          MINI: "MINI",
          MINOR: "MINOR",
          BASE_GAME: "Base Game",
          FREE_GAME: "Free Game",
          FREE_MODE: "Free",
          HISTORY_PAGE: "Page",
          SECONDS: "s",
          SECOND_TEXT: "seconds",
          TRIAL_MODE: "Free Play",
          REAL_MODE: "Real Play",
          SKIP_TUTORIAL: "Skip",
          PLAYING_TRIAL: "Demo Mode",
          HOLD_AUTO_SPIN: "Hold for auto",
          CLICK_TO_STOP: "Stop",
          EXIT: "Exit",
          BACK: "Back",
          CLOSE: "Close",
          PREVIOUS: "Previous",
          NEXT: "Next",
          BET_DETAILS: "Bet Details",
          TOTAL_WIN: "Total Win",
          SUMMARY: "Summary",
          TOTAL_BET: "Total Bet",
          TOTAL: "Total Win",
          NORMAL_GAME: "Base Game",
          BONUS_GAME: "Bonus",
          TOPUP_GAME: "Top Up",
          FREE_SPIN_OPTION: "Free Spins Feature",
          FREE_GAME_OPTION: "Free Game Option",
          JACKPOT_FEATURE: "Jackpot Feature",
          JACKPOT_BONUS: "Jackpot Bonus",
          JACKPOT_WHEEL: "Jackpot Wheel",
          BET_HISTORY: "Bet History",
          JACKPOT_HISTORY: "Jackpot History",
          SETTINGS: "Settings",
          SOUND: "Sound",
          MUSIC: "Music",
          ON: "On",
          OFF: "Off",
          TIME: "Time",
          HONOR: "Honor",
          TYPE_JACKPOT: "Type",
          LINES: "Lines",
          WIN_AMOUNT: "Win",
          WIN: "Win",
          WINS: "wins",
          LINE: "Line",
          RESULT: "Result",
          BIG_WIN: "Big Win",
          MEGA_WIN: "Mega Win",
          SUPER_WIN: "Super Mega Win",
          GAME_RULES: "Game Rules",
          OK: "OK",
          CANCEL: "Cancel",
          AUTO_SPIN: "Auto Spin",
          INTRO: "Intro",
          CONFIRM: "Confirm",
          PAYTABLE: "Paytable",
          FEATURE: "Feature",
          NOTICE: "Message",
          SESSION: "Session",
          CREDITS: "credits",
          DENOM: "Denom",
          BET_LEVEL: "Bet Level",
          BET_SIZES: "Bet Size",
          NOTIFY_JP_WON: "has just won",
          TURBO_ON: "Turbo ON",
          TURBO_OFF: "Turbo OFF",
          MAX_BET: "Max Bet",
          MIN_BET: "Min Bet",
          JACKPOT_WIN: "Jackpot Win",
          FREEGAME_WIN: "Free Game Win",
          BASE_GAME_WIN: "Base Game Win",
          ALLWAYS: "ALLWAYS",
          NOTIFY_JP_GRAND: "Grand Jackpot",
          NOTIFY_JP_MAJOR: "Major Jackpot",
          ROUND: "Round",
          RESPIN: "Respin",
          YOU_WON: "YOU WON",
          TUTORIAL_FINISHED: "End demo mode.",
          START_TRIAL: "End of demo mode,\ncontinue in trial mode.",
          B2R: "Demo mode ends\nand you are in real play.",
          ASK_B2R: "Switch to real play\nto hunt the Jackpot.",
          REAL_PLAY: "Real Play",
          NO_MONEY: "Insufficient balance,\n please top up to continue.",
          LOST_CONNECT: "Your device is not connected to the Internet.\nPlease try again.",
          SPIN_4_EVER: "Your device is not connected to the Internet.\nPlease try again.",
          ANOTHER_ACCOUNT: "Account has been logged in\n on another device.",
          AUTHEN_FAILED: "Account authentication failed.",
          DEPOSIT_MONEY: "Insufficient balance,\n please top up your account.",
          MISMATCH_DATA: "Data sync error.\n Please try again later.",
          SYSTEM_ERROR: "Oops, an error occurred while loading,\nplease try again!",
          DISCONNECT: "Sorry, could not connect to server!",
          NO_PLAYSESSION: "Session can't be found",
          GROUP_MAINTAIN: "Server maintenance, please come back later. Thank you!",
          NETWORK_WARNING: "Unstable connection. Please try again later!",
          NETWORK_DISCONNECT: "Sorry, could not connect to server!",
          NO_FREESPIN_OPTION: "Data sync error.\n Please try again later.",
          IN_PROGRESSING: "The network is slow, please wait for a moment to complete\nthe spin or click confirm to reload the game.",
          SPIN_UNSUCCESS: "Action failed. Please try again.",
          FINISH_DEMO: "THIS IS A DEMO,\nDO YOU WANT TO PLAY FOR REAL?",
          SUGGEST_TURBO: "Seems like you are playing in fast speed, do you want to turn Turbo Mode on?",
          EVENT_ENDED: "This event has ended.",
          PROMOTION_EXPIRED: "Promotion expired.",
          CURRENCY_NOT_SUPPORTED: "Your account is not supported in this currency, please contact admin.",
          NO_BET_HISTORY: "No records found",
          NO_JACKPOT_HISTORY: "No records found",
          BONUS_GAME_REMIND: "The system will automatically select after:",
          SYSTEM_AUTO_SELECT: "The system will auto-select after:",
          SYSTEM_AUTO_SPIN: "The system will automatically spin after:",
          SHORT_BONUS_GAME_REMIND: "Auto-select in:",
          REQUEST_DENIED: "Sorry, your session has expired. Please contact administrator.",
          ERROR_CONNECTION_HISTORY: "Sorry, could not connect to server!",
          PROMOTION_MESSAGE: "You have received {1} free spins, with total bet {2}.",
          PROMOTION_RESET: "GIFT RECEIVED: {1} free spins \nfor a new day (total bet {2}). \nLET'S PLAY!",
          PROMOTION_NEW: "GIFT RECEIVED: {1} free spins \n(total bet {2}). \nLET'S PLAY!",
          FREEGAME_REMAIN: "{1} free spins left",
          ACCOUNT_BLOCKED: "Your account has been banned, please contact administrator.",
          ACCOUNT_BLOCKED_IFRAME: "Your account is currently locked playing GAME_TITLE.",
          SELECT_SPINTIME: "Number of Auto Spin",
          START_AUTO_SPIN: "START",
          QUEST_LOCK: 'Bạn chưa hoàn thành\nnhiệm vụ game trước.',
          EVENT_FORCE_CLOSE: 'ĐÓNG SỰ KIỆN',
          MISSION_FORCE_CLOSE: 'ĐÓNG NHIỆM VỤ',
          EVENT_UNSUPPORT_WALLET: 'Nhiệm vụ không được tính\nkhi chơi ví ngọc',
          EVENT_UNSUPPORT_BETID: 'Nhiệm vụ không được tính\nkhi chơi mức cược này',
          NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ,\nvui lòng nạp thêm để chơi tiếp.',
          DEPOSIT_MONEY_EVENT: 'Số dư [wallet] không đủ,\nbạn có muốn nạp thêm ?',
          WALLET_NORMAL: 'Ví Vàng',
          WALLET_PROMOTE: 'Ví Ngọc',
          EVENT_NOT_AVAILABLE: 'Sự kiện không hợp lệ,\nvui lòng thử lại.',
          NOT_ENOUGH_MONEY: 'Số dư trong [wallet] không đủ'
        },
        TH: {
          NAME: "DialogMessage",
          WILD: "Wild",
          SCATTER: "Scatter",
          BONUS: "Bonus",
          JACKPOT: "Jackpot",
          GRAND: "GRAND",
          MAJOR: "MAJOR",
          MINI: "MINI",
          MINOR: "MINOR",
          BASE_GAME: "Base Game",
          FREE_GAME: "Free Game",
          FREE_MODE: "Free",
          HISTORY_PAGE: "หน้า",
          SECONDS: "วินาที",
          SECOND_TEXT: "วินาที",
          TRIAL_MODE: "ทดลอง \nเล่น",
          REAL_MODE: "เล่นจริง",
          SKIP_TUTORIAL: "ข้าม \nคำแนะนำ",
          PLAYING_TRIAL: "กำลังทดลองเล่น",
          HOLD_AUTO_SPIN: "กดค้างไว้เพื่อหมุน",
          CLICK_TO_STOP: "คลิกเพื่อหยุด",
          EXIT: "ออก",
          BACK: "กลับ",
          CLOSE: "ต่อไป",
          PREVIOUS: "กลับ",
          NEXT: "ต่อไป",
          BET_DETAILS: "รายละเอียดการเดิมพัน",
          TOTAL_WIN: "ชนะทั้งหมด",
          SUMMARY: "สรุป",
          TOTAL_BET: "เดิมพันรวม",
          TOTAL: "ชนะทั้งหมด",
          NORMAL_GAME: "Base Game",
          BONUS_GAME: "Bonus",
          TOPUP_GAME: "Top Up",
          FREE_SPIN_OPTION: "ฟรีเกม",
          FREE_GAME_OPTION: "หน้าการเลือกโหมด",
          JACKPOT_FEATURE: "แจ็คพอตโบนัส",
          JACKPOT_BONUS: "แจ็คพอตเลือกที่ 3",
          JACKPOT_WHEEL: "ล้อแจ็คพอต",
          BET_HISTORY: "ประวัติการเดิมพัน",
          JACKPOT_HISTORY: "ประวัติแจ็คพอต",
          SETTINGS: "การตั้งค่า",
          SOUND: "เสียง",
          MUSIC: "เสียงเพลง",
          ON: "เปิด",
          OFF: "ปิด",
          TIME: "เวลา",
          HONOR: "เกียรตินิยม",
          TYPE_JACKPOT: "ประเภทแจ็คพอต",
          LINES: "จำนวนไลน์การเดิมพัน",
          WIN_AMOUNT: "ชนะเงิน",
          WIN: "ชนะ",
          WINS: "ชนะ",
          LINE: "ไลน์",
          RESULT: "ผลลัพธ์",
          BIG_WIN: "บิ๊กวิน",
          MEGA_WIN: "เมก้าวิน",
          SUPER_WIN: "ซุปเปอร์เมก้าวิน",
          GAME_RULES: "กฎของเกม",
          OK: "ยืนยัน",
          CANCEL: "ยกเลิก",
          AUTO_SPIN: "หมุนอัตโนมัติ",
          INTRO: "แนะนำ",
          CONFIRM: "ยืนยัน",
          PAYTABLE: "ตารางการชำระเงิน",
          FEATURE: "",
          NOTICE: "การแจ้งเตือน",
          SESSION: "ครั้ง",
          CREDITS: "เหรียญ",
          DENOM: "ราคาเหรียญ",
          BET_LEVEL: "เหรียญ",
          BET_SIZES: "",
          NOTIFY_JP_WON: "ชนะ",
          TURBO_ON: "เทอร์โบเปิด",
          TURBO_OFF: "เทอร์โบปิด",
          MAX_BET: "เดิมพันสูงสุด",
          MIN_BET: "เดิมพันขั้นต่ำ",
          JACKPOT_WIN: "ชนะ Jackpot",
          FREEGAME_WIN: "ชนะ Free Game",
          BASE_GAME_WIN: "ชนะ Base Game",
          ALLWAYS: "ชนะทั้งหมด",
          NOTIFY_JP_GRAND: "Grand Jackpot",
          NOTIFY_JP_MAJOR: "Major Jackpot",
          ROUND: "รอบที่",
          RESPIN: "Respin รอบที่",
          YOU_WON: "คุณชนะ",
          TUTORIAL_FINISHED: "เสร็จสิ้นการทดลองเล่น",
          START_TRIAL: "เสร็จสิ้นบทแนะนำ \nเล่นที่โหมดทดลองต่อไป",
          B2R: "เสร็จสิ้นการทดลองเล่น \nคุณกำลังอยู่ในโหมดเล่นจริง",
          ASK_B2R: "กลับโหมดเล่นจริง\nเพื่อล่าหา Jackpot",
          REAL_PLAY: "เล่นจริง",
          NO_MONEY: "ยอดคงเหลือในกระเป๋าสตางค์ \nของคุณไม่เพียงพอ\nกรุณาเติมเงินเพื่อเล่นต่อ",
          LOST_CONNECT: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          SPIN_4_EVER: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          ANOTHER_ACCOUNT: "บัญชีลงชื่อเข้าใช้จากอุปกรณ์อื่น",
          AUTHEN_FAILED: "การตรวจสอบบัญชีล้มเหลว",
          DEPOSIT_MONEY: "ยอดคงเหลือในกระเป๋าสตางค์ของคุณ\nไม่เพียงพอ \nกรุณาเติมเงินเพื่อเล่นต่อ",
          MISMATCH_DATA: "ข้อมูลไม่ซิงค์กับเซิร์ฟเวอร์ \nโปรดลองอีกครั้ง",
          SYSTEM_ERROR: "เกิดข้อผิดพลาด \nโปรดลองอีกครั้ง",
          DISCONNECT: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          NO_PLAYSESSION: "ระบบไม่พบเซสชันเกม",
          GROUP_MAINTAIN: "ระบบอยู่ในระหว่างการบำรุงรักษา \nโปรดกลับมาใหม่",
          NETWORK_WARNING: "การเชื่อมต่อเครือข่ายที่อ่อนแอ",
          NETWORK_DISCONNECT: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          NO_FREESPIN_OPTION: "ข้อมูลไม่ซิงค์กับเซิร์ฟเวอร์ \nโปรดลองอีกครั้ง",
          IN_PROGRESSING: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          SPIN_UNSUCCESS: "การดำเนินการล้มเหลว \nโปรดลองอีกครั้ง",
          FINISH_DEMO: "นี่คือเดโม่ ยังเล่นต่อหรือไหม",
          SUGGEST_TURBO: "ดูเหมือนคุณกำลังเล่นเร็ว \nต้องการเปิดโหมดเทอร์โบไหม",
          EVENT_ENDED: "กิจกรรมสิ้นสุดแล้ว",
          PROMOTION_EXPIRED: "โปรโมชั่นหมดอายุแล้ว",
          CURRENCY_NOT_SUPPORTED: "บัญชีของคุณไม่รองรับสกุลเงินนี้\nโปรดติดต่อแอดมิน",
          NO_BET_HISTORY: "ยังไม่มีข้อมูลประวัติการเดิมพัน",
          NO_JACKPOT_HISTORY: "ยังไม่มีประวัติแจ็คพอต",
          BONUS_GAME_REMIND: "ระบบจะหมุนอัตโนมัติหลังจากผ่านไป",
          SHORT_BONUS_GAME_REMIND: "เลือกออโต้หลังจาก",
          SYSTEM_AUTO_SELECT: "เลือกออโต้หลังจาก:",
          SYSTEM_AUTO_SPIN: "ระบบจะหมุนอัตโนมัติหลังจากผ่านไป:",
          REQUEST_DENIED: "เซสชันหมดอายุแล้ว \nโปรดติดต่อแอดมิน",
          ERROR_CONNECTION_HISTORY: "การเชื่อมต่อเกิดข้อผิดพลาด \nโปรดลองอีกครั้งในภายหลัง",
          PROMOTION_MESSAGE: "รับ free spins {1} รอบ \nด้วยเดิมพันรวม: {2}",
          PROMOTION_RESET: "ของขวัญ: free spins {1} รอบ \nในวันใหม่ (เดิมพันรวม: {2}) \nหมุนต่อไป!",
          PROMOTION_NEW: "ของขวัญ: free spins {1} รอบ \n(เดิมพันรวม: {2}) หมุนต่อไป!",
          FREEGAME_REMAIN: "คุณเหลือ free spins {1} รอบ",
          ACCOUNT_BLOCKED: "บัญชีของคุณถูกล็อค \nโปรดติดต่อแอดมิน",
          ACCOUNT_BLOCKED_IFRAME: "บัญชีถูกล็อคจากการเล่นเกม \n" + "GAME_TITLE",
          SELECT_SPINTIME: "จำนวนการหมุนอัตโนมัติ",
          START_AUTO_SPIN: "เริ่มเลย",
          QUEST_LOCK: 'Bạn chưa hoàn thành\nnhiệm vụ game trước.',
          EVENT_FORCE_CLOSE: 'ĐÓNG SỰ KIỆN',
          MISSION_FORCE_CLOSE: 'ĐÓNG NHIỆM VỤ',
          EVENT_UNSUPPORT_WALLET: 'Nhiệm vụ không được tính\nkhi chơi ví ngọc',
          EVENT_UNSUPPORT_BETID: 'Nhiệm vụ không được tính\nkhi chơi mức cược này',
          NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ,\nvui lòng nạp thêm để chơi tiếp.',
          DEPOSIT_MONEY_EVENT: 'Số dư [wallet] không đủ,\nbạn có muốn nạp thêm ?',
          WALLET_NORMAL: 'Ví Vàng',
          WALLET_PROMOTE: 'Ví Ngọc',
          EVENT_NOT_AVAILABLE: 'Sự kiện không hợp lệ,\nvui lòng thử lại.',
          NOT_ENOUGH_MONEY: 'Số dư trong [wallet] không đủ'
        }
      };
      if (!window['localizedString']) window['localizedString'] = {};
      var LanguageData = exports('LanguageData', (_dec = ccclass("LanguageData"), _dec(_class = /*#__PURE__*/function () {
        function LanguageData(urlLanguage) {
          this.languageCode = 'VI';
          this.languageCode = 'VI';

          if (sys.isBrowser) {
            if (settings && settings._settings && settings._settings.folderLanguage && settings._settings.folderLanguage !== 'all') {
              window['languageCode'] = settings._settings.folderLanguage.toUpperCase();
            } else {
              window['languageCode'] = urlLanguage ? urlLanguage.toUpperCase() : "VI";
            }

            this.languageCode = window['languageCode'] || "VI";
          } else {
            if (urlLanguage) {
              this.languageCode = urlLanguage.toUpperCase() || "VI";
            }
          }

          globalThis.SlotLanguageCode = this.languageCode;
        }

        var _proto = LanguageData.prototype;

        _proto.getMessageSlot = function getMessageSlot(mess) {
          if (mess === void 0) {
            mess = {};
          }

          var messageSlot = null;

          if (!messageSlot) {
            messageSlot = messageSlotConfig[this.languageCode] || messageSlotConfig[window['languageCode']] || messageSlotConfig[window['defaultLanguage']];
          }

          return Object.assign(messageSlot, mess);
        };

        _proto.getLocalizedString = function getLocalizedString(dataID) {
          var localizedText = window['localizedString'][dataID] || {};
          return localizedText[window['languageCode']] || localizedText[window['defaultLanguage']];
        };

        _proto.updateLocalizeString = function updateLocalizeString(localizedString) {
          Object.assign(window['localizedString'], localizedString);
        };

        return LanguageData;
      }()) || _class));
      globalThis.slotLanguageData = LanguageData;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LineDrawingPayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, SpriteFrame, Node, Sprite, UITransform, Vec3, GameObject, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "b674cnIVC5PV46YsnZusgU6", "LineDrawingPayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LineDrawingPayline = exports('LineDrawingPayline', (_dec = ccclass('LineDrawingPayline'), _dec2 = property({
        type: CCInteger
      }), _dec3 = property({
        type: CCInteger
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(LineDrawingPayline, _GameObject);

        function LineDrawingPayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "totalRow", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "totalCol", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "linePrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dotPrefabName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineSprites", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dotHolder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "leftOffset", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rightOffset", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heightOffset", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heightOffsetAllLines", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "horizontalLineHeight", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor13, _assertThisInitialized(_this));

          _this.cachedLine = [];
          _this.cachedFirstLine = [];
          _this.cachedLastLine = [];
          _this.cachedDotLine = [];
          _this.poolFactory = null;
          _this._usingObj = [];
          _this._startXPos = 0;
          _this._startYPos = 0;
          return _this;
        }

        var _proto = LineDrawingPayline.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on(EventNames.DRAWING_LINE_CLEAR, this.clear, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD, this.addLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_FIRST, this.addFirstLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_LAST, this.addLastLine, this);
            this.eventManager.on(EventNames.DRAWING_LINE_ADD_DOT, this.addDotToLine, this);
          }

          if (!this.poolFactory) {
            this.poolFactory = this.mainDirector.poolFactory;
          }

          var tableFormat = this.isFreeMode ? this.config.FREE_TABLE_FORMAT : this.config.NORMAL_TABLE_FORMAT;
          this._startXPos = -(tableFormat.length / 2) * this.config.SYMBOL_WIDTH;
          this._startYPos = -(tableFormat[0] / 2) * this.config.SYMBOL_HEIGHT;
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off(EventNames.DRAWING_LINE_CLEAR, this.clear, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD, this.addLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_FIRST, this.addFirstLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_LAST, this.addLastLine, this);
            this.eventManager.off(EventNames.DRAWING_LINE_ADD_DOT, this.addDotToLine, this);
          }
        };

        _proto.addLine = function addLine(type, col, row) {
          if (!this.cachedLine[col]) {
            this.cachedLine[col] = [];
          }

          if (!this.cachedLine[col][row]) {
            this.cachedLine[col][row] = [];
          } else if (this.cachedLine[col][row][type]) {
            return;
          }

          this.cachedLine[col][row][type] = true;
          var line = null;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line && (line.active = true);
          }

          if (!line) return;
          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = this._startXPos + this.config.SYMBOL_WIDTH / 2 + col * this.config.SYMBOL_WIDTH;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + (this.totalRow - 1 - row) * this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          } // line.setPosition(position);


          if (type == 0) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (type == 1 || type == 2) {
            // 1: cheo len 1 o
            // 2: cheo xuong 1 o 
            spriteComp.spriteFrame = this.lineSprites[1];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, type == 1 ? 1 : -1, 1);
            var deltaHeight = type == 1 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          } else if (type == 3 || type == 4) {
            // 3: cheo len 2 o
            // 4: cheo xuong 2 o
            spriteComp.spriteFrame = this.lineSprites[2];
            lineTransform.width = this.config.SYMBOL_WIDTH;
            lineTransform.height = this.config.SYMBOL_HEIGHT * 2 + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, type == 3 ? 1 : -1, 1);

            var _deltaHeight = type == 3 ? this.heightOffset : -this.heightOffset;

            line.setPosition(posX, posY - _deltaHeight, 1);
          }

          this.addDotToLine(col, row);
        };

        _proto.addFirstLine = function addFirstLine(row) {
          if (this.cachedFirstLine[row]) return;
          this.cachedFirstLine[row] = true;
          var line;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line && (line.active = true);
          }

          if (!line) return;
          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = row == 1 ? this.config.SYMBOL_WIDTH / 2 : -this.leftOffset;
          posX += this._startXPos;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          }

          if (row == 1) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.leftOffset;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(-1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (row == 0 || row == 2) {
            spriteComp.spriteFrame = this.lineSprites[3];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.leftOffset;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(1, row == 0 ? 1 : -1, 1);
            var deltaHeight = row == 0 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          }
        };

        _proto.addLastLine = function addLastLine(row) {
          if (this.cachedLastLine[row]) return;
          this.cachedLastLine[row] = true;
          var line;

          if (this.poolFactory) {
            line = this.poolFactory.getObject(this.linePrefabName);
            line && (line.active = true);
          }

          if (!line) return;
          line.parent = this.lineHolder;

          this._usingObj.push(line);

          var posX = this._startXPos + (row == 1 ? this.config.SYMBOL_WIDTH / 2 : this.config.SYMBOL_WIDTH + this.rightOffset) + (this.totalCol - 1) * this.config.SYMBOL_WIDTH;
          var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + this.config.SYMBOL_HEIGHT;
          posY -= this.heightOffsetAllLines;
          var spriteComp = line.getComponent(Sprite);

          if (!spriteComp) {
            spriteComp = line.addComponent(Sprite);
          }

          var lineTransform = line.getComponent(UITransform);

          if (!lineTransform) {
            lineTransform = line.addComponent(UITransform);
          }

          if (row == 1) {
            spriteComp.spriteFrame = this.lineSprites[0];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.rightOffset;
            lineTransform.height = this.horizontalLineHeight;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0.5;
            line.scale = new Vec3(1, 1, 1);
            line.setPosition(posX, posY, 1);
          } else if (row == 0 || row == 2) {
            spriteComp.spriteFrame = this.lineSprites[3];
            lineTransform.width = this.config.SYMBOL_WIDTH / 2 + this.rightOffset;
            lineTransform.height = this.config.SYMBOL_HEIGHT + 10;
            lineTransform.anchorX = 0;
            lineTransform.anchorY = 0;
            line.scale = new Vec3(-1, row == 0 ? 1 : -1, 1);
            var deltaHeight = row == 0 ? this.heightOffset : -this.heightOffset;
            line.setPosition(posX, posY - deltaHeight, 1);
          }

          this.addDotToLine(4, row);
        };

        _proto.addDotToLine = function addDotToLine(col, row) {
          if (!this.cachedDotLine[col]) {
            this.cachedDotLine[col] = [];
          }

          if (!this.cachedDotLine[col][row]) {
            this.cachedDotLine[col][row] = [];
          }

          if (this.cachedDotLine[col][row] == true) return;
          this.cachedDotLine[col][row] = true;
          var dotObj;

          if (this.poolFactory) {
            dotObj = this.poolFactory.getObject(this.dotPrefabName);
            dotObj && (dotObj.active = true);
          }

          if (dotObj) {
            var posX = this._startXPos + this.config.SYMBOL_WIDTH / 2 + col * this.config.SYMBOL_WIDTH;
            var posY = this._startYPos + this.config.SYMBOL_HEIGHT / 2 + (this.totalRow - 1 - row) * this.config.SYMBOL_HEIGHT;
            posY -= this.heightOffsetAllLines;
            dotObj.parent = this.dotHolder;
            dotObj.setPosition(posX, posY);

            this._usingObj.push(dotObj);
          }
        };

        _proto.clear = function clear() {
          for (var i = 0; i < this._usingObj.length; i++) {
            var removeObj = this._usingObj[i];

            if (removeObj) {
              this.poolFactory.removeObject(removeObj);
            }
          }

          this._usingObj = [];
          this.cachedLine = [];
          this.cachedFirstLine = [];
          this.cachedLastLine = [];
          this.cachedDotLine = [];
        };

        return LineDrawingPayline;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "totalRow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "totalCol", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "linePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dotPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lineSprites", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lineHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "dotHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "leftOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "rightOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "heightOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "heightOffsetAllLines", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "horizontalLineHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadConfigAsync.ts", ['cc', './appConfig.ts', './appConfig-debug.ts', './XOCypher.ts', './serviceRest.ts'], function (exports) {
  var cclegacy, sys, urlConstant, urlConstant$1, xorCipher, apiObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      urlConstant = module.urlConstant;
    }, function (module) {
      urlConstant$1 = module.urlConstant;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      apiObject = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65982XRfqlJUrHV60UubZQG", "loadConfigAsync", undefined);

      var lodash = _;

      var LoadConfigAsync = /*#__PURE__*/function () {
        function LoadConfigAsync() {
          var _this = this;

          this.dataUpdate = void 0;
          this.dataUpdateProd = void 0;

          this.setUpSentry = function () {
            var _this$dataUpdate = _this.dataUpdate,
                IS_PRODUCTION = _this$dataUpdate.IS_PRODUCTION,
                IS_SHOW_STATS = _this$dataUpdate.IS_SHOW_STATS;

            if (typeof Sentry !== 'undefined') {
              if (IS_PRODUCTION) {
                Sentry.init({
                  dsn: 'https://32ab507534bc4befbd5e1b20e223c93d@sentry.io/1780011'
                });
              } else {
                Sentry.init({
                  dsn: 'https://b034a1c4d32e42af90071e62d2bf3290@sentry.io/2655786'
                });
              }
            }
          };

          this.dataUpdate = lodash.cloneDeep(urlConstant);
          var isDebugMode = sys.isBrowser && window.location.hostname === 'localhost';

          if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && !sys.isBrowser && !isDebugMode) {
            setTimeout(function () {
              apiObject.get({
                apiUrl: _this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                url: '',
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && sys.isBrowser) {
            setTimeout(function () {
              apiObject.getRawDataWeb({
                fullURL: _this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL && sys.isBrowser && !isDebugMode) {
            setTimeout(function () {
              var domainGame = typeof domainGlobal !== 'undefined' ? domainGlobal : window.location.origin;
              apiObject.get({
                apiUrl: domainGame + _this.dataUpdate.REMOTE_CONFIG_URL,
                params: {
                  t: new Date().getTime()
                },
                url: '',
                callback: _this.handleDataSuccess.bind(_this),
                callbackErr: _this.handleDataError.bind(_this)
              });
            }, 100);
          } else {
            if (sys.localStorage.getItem && sys.localStorage.getItem("enviroment") != null) {
              try {
                if (sys.localStorage.getItem("enviroment").indexOf("test") >= 0) {
                  // check appConfigDebug
                  if (urlConstant$1) {
                    this.dataUpdate = lodash.cloneDeep(urlConstant$1);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  } else {
                    this.dataUpdate = lodash.cloneDeep(urlConstant);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  }
                } else {
                  this.dataUpdate = lodash.cloneDeep(urlConstant);
                  this.dataUpdate = this.decryptData(this.dataUpdate);
                }
              } catch (e) {
                this.dataUpdate = lodash.cloneDeep(urlConstant);
                this.dataUpdate = this.decryptData(this.dataUpdate);
              }
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
              this.dataUpdate = this.decryptData(this.dataUpdate);
            }

            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        }

        var _proto = LoadConfigAsync.prototype;

        _proto.handleDataSuccess = function handleDataSuccess(data) {
          this.dataUpdate = lodash.cloneDeep(data);
          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          sys.localStorage.setItem('appConfigLocalStore', JSON.stringify(this.dataUpdateProd));
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        };

        _proto.handleDataError = function handleDataError() {
          var appConfigLocal = sys.localStorage.getItem('appConfigLocalStore');

          if (appConfigLocal) {
            appConfigLocal = JSON.parse(appConfigLocal);
            this.dataUpdate = lodash.cloneDeep(appConfigLocal);
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant);
          }

          this.dataUpdate = this.decryptData(this.dataUpdate);
          this.dataUpdateProd = lodash.cloneDeep(this.dataUpdate);
          this.dataUpdate.IS_FINISHED_REMOTE = true;
        };

        _proto.decryptData = function decryptData(data) {
          if (data.IS_DECODE) {
            Object.keys(data).forEach(function (key) {
              if (key === 'API_URL' || key === 'SOCKET_URL' || key.indexOf('IPMaster') > -1) {
                data[key] = xorCipher.decode('Không Biết Đặt Tên Gì', data[key]);
              }
            });
          }

          delete data.IS_DECODE;
          return data;
        };

        _proto.getConfig = function getConfig() {
          return this.dataUpdate;
        };

        _proto.replaceConfig = function replaceConfig(config) {
          var _this2 = this;

          Object.keys(config).forEach(function (it) {
            _this2.dataUpdate[it] = config[it];
          });
        };

        _proto.switchEnv = function switchEnv(isProd) {
          if (isProd) {
            if (this.dataUpdateProd) {
              this.dataUpdate = lodash.cloneDeep(this.dataUpdateProd);
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
            }

            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant$1);
            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        };

        return LoadConfigAsync;
      }();

      var loadConfigAsync = exports('default', new LoadConfigAsync());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScreen.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, ProgressBar, sys, director, assetManager, settings, error, tween, Prefab, instantiate, Component, loadConfigAsync, gameCommonUtils, registerLoadHowl, setOpacity, unregisterLoadHowl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      sys = module.sys;
      director = module.director;
      assetManager = module.assetManager;
      settings = module.settings;
      error = module.error;
      tween = module.tween;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      registerLoadHowl = module.registerLoadHowl;
      setOpacity = module.setOpacity;
      unregisterLoadHowl = module.unregisterLoadHowl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "01f22w8LoVFq5YVtgEK6Ozg", "LoadingScreen", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingScreen = exports('LoadingScreen', (_dec = ccclass('LoadingScreen'), _dec2 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec3 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec4 = property({
        type: Node,
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec5 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec6 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec7 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec8 = property(ProgressBar), _dec9 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingScreen, _Component);

        function LoadingScreen() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "loadByBundle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bundlePath", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bundleMainScene", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameHolder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sdSceneName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneNameIframe", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneNameHistory", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "homeBtn", _descriptor10, _assertThisInitialized(_this));

          _this.preloadGameScene = false;
          _this.preloadGamePrefab = false;
          _this.switchGameScene = false;
          _this.isBackToLobby = false;
          _this.gameBundle = null;
          _this.gameNode = null;
          _this._loadedPrefab = [];
          _this.usingLoadHowl = false;
          _this.totalPercent = 0;
          _this.eventId = null;
          _this.updatedScene = '';
          _this.tweenFullProgress = void 0;
          _this.loadHistory = false;
          return _this;
        }

        var _proto = LoadingScreen.prototype;

        _proto.onLoad = function onLoad() {
          if (this.sceneName === '') return;
          this.updatedScene = this.sceneName;
          this.loadHistory = false;
          this.startLoadingPipeline();
        };

        _proto.startLoadingPipeline = function startLoadingPipeline() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC.IS_FINISHED_REMOTE;

          if (IS_FINISHED_REMOTE) {
            this.redirectSceneName();
            this.addHomeEvent();
            this.startLoadScene();
          } else {
            setTimeout(function () {
              _this2.startLoadingPipeline();
            }, 100);
          }
        };

        _proto.redirectSceneName = function redirectSceneName() {
          if (sys.isBrowser) {
            var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            var history = urlParams.get('history');

            if (this.sceneNameHistory && history == 'true') {
              this.updatedScene = this.sceneNameHistory;
              this.loadHistory = true;
            } else if (this.sceneNameIframe) {
              this.updatedScene = this.sceneNameIframe;
            }

            var extName = director.getScene().name.split('-');
            var extSceneName = null;

            if (extName.length > 1) {
              extSceneName = extName[1];
            }

            if (extSceneName) {
              var redirectScene = this.updatedScene + "-" + extSceneName;
              this.sceneName = redirectScene;

              if (assetManager.main.getSceneInfo(redirectScene)) {
                this.updatedScene = redirectScene;
              }
            }

            if (LOGIN_IFRAME && globalThis.Howler) {
              registerLoadHowl();
              this.usingLoadHowl = true;
            }

            if (window) {
              window.addEventListener('onHideSplashScreen', this.onHideSplashScreen.bind(this));
            }

            if (LOGIN_IFRAME && this.loadByBundle) {
              var language = null;

              if (CC_DEV) {
                language = urlParams.get('l');
              } else {
                language = settings._settings.folderLanguage;
              }

              this.bundlePath = language && language !== 'vi' && language !== 'VI' ? this.bundlePath + "_" + language.toUpperCase() : this.bundlePath;
            }
          }

          if (sys.isMobile && this.sdSceneName) {
            this.updatedScene = this.sdSceneName;
          }
        };

        _proto.addHomeEvent = function addHomeEvent() {
          var _this3 = this;

          if (this.homeBtn) {
            this.homeBtn.active = false;

            var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC3.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              this.scheduleOnce(function () {
                _this3.homeBtn.active = true;

                _this3.homeBtn.off('click');

                _this3.homeBtn.on('click', function () {
                  if (_this3.isBackToLobby) return; //TODO: implement KtekEventHandler
                  // let eventHandler = this.node.getComponent("KtekEventHandler");
                  // if( eventHandler ){
                  //     eventHandler.getInstance().sendToUs("clear_cache", {
                  //         scene: sceneName
                  //     });
                  // }

                  gameCommonUtils.handleCloseGameIframe();
                  _this3.isBackToLobby = true;
                });
              }, 10);
            }
          }
        };

        _proto.startLoadScene = function startLoadScene() {
          this.node.active = true;
          setOpacity(this.node, 255);

          if (this.loadByBundle && !this.loadHistory) {
            this.loadGameBundle();
          } else {
            this.preloadScene();
          }
        };

        _proto.onHideSplashScreen = function onHideSplashScreen() {
          this.progressBar.progress = 0;
        };

        _proto.preloadScene = function preloadScene() {
          var _this4 = this;

          this.preloadGameScene = true;
          var bundle = assetManager.bundles.find(function (bundle) {
            return !!bundle.getSceneInfo(_this4.updatedScene);
          });

          if (bundle) {
            bundle.loadScene(this.updatedScene, {}, function (finishCount, totalCount) {
              if (totalCount > 0) {
                _this4.totalPercent = finishCount / totalCount;
              }
            }, function (error, scene) {
              if (error) {
                gameCommonUtils.handleFlowOutGame();
              } else {
                if (!_this4.isBackToLobby) {
                  var delay = _this4.progressBar.progress >= 1 ? 0.1 : 0.5;

                  _this4.setProgressFull(delay, function () {
                    director.runScene(scene);
                  });
                }
              }
            });
          }
        };

        _proto.loadGameBundle = function loadGameBundle() {
          var _this5 = this;

          this.gameBundle = assetManager.getBundle(this.bundlePath);

          if (!this.gameBundle) {
            assetManager.loadBundle(this.bundlePath, function (err, bundle) {
              if (err) {
                error("Error while loading bundle with path: BundleLobby");
              } else {
                _this5.gameBundle = bundle;
                _this5.preloadGamePrefab = true;

                _this5.loadGamePrefab(bundle, _this5.bundleMainScene, _this5.eventId);
              }
            });
          } else {
            this.preloadGamePrefab = true;
            this.loadGamePrefab(this.gameBundle, this.bundleMainScene, this.eventId);
          }
        };

        _proto.setProgressFull = function setProgressFull(delay, callback) {
          var _this6 = this;

          if (this.tweenFullProgress) this.tweenFullProgress.stop();
          this.tweenFullProgress = tween(this);
          this.tweenFullProgress.to(delay, {
            CurrentProgress: 1
          }, {
            easing: "sineIn"
          }).call(function () {
            callback && callback();
            _this6.tweenFullProgress = null;
          }).start();
        };

        _proto.update = function update(dt) {
          if (this.preloadGameScene) {
            var percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (percent > 0 && !this.tweenFullProgress) {
              this.progressBar.progress += percent;
            }
          } else if (this.preloadGamePrefab) {
            var _percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (_percent > 0) {
              this.progressBar.progress += _percent;
            }

            if (this.progressBar.progress > 0.99 && this.gameNode && !this.switchGameScene) {
              this.switchGameScene = true;
              this.loadGameNode();
            }
          }
        };

        _proto.loadGamePrefab = function loadGamePrefab(bundle, mainPrefabName, eventId) {
          var _this7 = this;

          if (eventId === void 0) {
            eventId = '';
          }

          this.eventId = eventId;
          bundle.loadDir('', Prefab, function (finish, total, item) {
            _this7.totalPercent = finish / total;
          }, function (error, assets) {
            if (error) {
              gameCommonUtils.handleFlowOutGame();
              return;
            }

            var mainPrefab = null;
            assets.forEach(function (prefab) {
              prefab.addRef();

              if (prefab.data.name == mainPrefabName) {
                mainPrefab = prefab;
              }
            });
            _this7._loadedPrefab = assets;

            if (mainPrefab) {
              _this7.gameNode = instantiate(mainPrefab);
            }
          });
        };

        _proto.loadGameNode = function loadGameNode() {
          if (this.gameNode && this.gameHolder) {
            var _director = this.gameNode.getComponent('Director');

            if (_director && _director.setEventId) _director.setEventId(this.eventId);
            this.gameNode.parent = this.gameHolder;
            if (this.homeBtn) this.homeBtn.active = false;
            this.node.active = false;
            this.unscheduleAllCallbacks();
          }
        };

        _proto.setEventId = function setEventId(id) {
          this.eventId = id;
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          if (this.tweenFullProgress) this.tweenFullProgress.stop();
          this.tweenFullProgress = null;

          if (this.usingLoadHowl) {
            unregisterLoadHowl();
          }

          if (this.loadByBundle && this.gameBundle) {
            this._loadedPrefab.forEach(function (prefab) {
              prefab.decRef(true);
            });

            this._loadedPrefab = null;
            assetManager.removeBundle(this.gameBundle);

            if (sys.isNative) {
              sys.garbageCollect();
            }
          }
        };

        _createClass(LoadingScreen, [{
          key: "CurrentProgress",
          get: function get() {
            return this.progressBar.progress;
          },
          set: function set(value) {
            if (this.progressBar && this.progressBar.progress != value) {
              this.progressBar.progress = value;
            }
          }
        }]);

        return LoadingScreen;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundlePath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bundleMainScene", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gameHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sceneName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sdSceneName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameIframe", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, setOpacity, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "30c42daOrdI/r+S+9oq4Q0Q", "LoadingTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingTransition = exports('LoadingTransition', (_dec = ccclass('LoadingTransition'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingTransition, _Component);

        function LoadingTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delayTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fadeTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingTransition.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.node.active = true;
          setOpacity(this.node, 255);
          this.scheduleOnce(function () {
            fadeOut(_this2.node, _this2.fadeTime, {
              onComplete: function onComplete() {
                _this2.node.active = false;
                _this2.node['tweenFade'] = null;
              }
            });
          }, this.delayTime);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();

          if (this.node['tweenFade']) {
            this.node['tweenFade'].stop();
            this.node['tweenFade'] = null;
          }
        };

        return LoadingTransition;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fadeTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./debug-view-runtime-control.ts', './connectNetwork.ts', './game-network.mjs_cjs=&original=.js', './globalNetwork.ts', './AlignFullScreenButton.ts', './LoadingScreen.ts', './big.mjs_cjs=&original=.js', './gameCommonUtils.ts', './utils.ts', './CanvasScaleByOrientation.ts', './CustomCanvasSize.ts', './CustomPageViewIndicator.ts', './CustomTypeShare.ts', './EventListenerManager.ts', './NativeSoundPlayer.ts', './ScreenOrientationControl.ts', './Sound.ts', './SoundPlayerImpl.ts', './WebSoundPlayer.ts', './globalConfig.ts', './XOCypher.ts', './loadConfigAsync.ts', './serviceRest.ts', './LanguageData.ts', './Config9000.ts', './AutoScaleBackground.ts', './BackToLobby.ts', './BaseDynamicLoading.ts', './BaseTableHistoryDetail.ts', './Bet.ts', './BetHistoryMgr.ts', './DotsHistory.ts', './PaginationMrg.ts', './SlotBetCellHistory.ts', './SlotBetHistory.ts', './SlotBetHistoryDetail.ts', './SlotBetSummaryHistory.ts', './SlotBetTableHistory.ts', './SlotBetTableHistoryDetail.ts', './BigWild.ts', './BigWildTable.ts', './ClosePopups.ts', './CountDown.ts', './CustomEnum.ts', './CustomType.ts', './DialogDisplayControl.ts', './Draggable.ts', './DynamicLoadingPrefabControl.ts', './FreeGameOption.ts', './FreespinOption.ts', './GambleBox.ts', './GambleDirector.ts', './GambleWriter.ts', './GlobalNodeSharing.ts', './SlotBaseCellHistory.ts', './SlotBaseHistory.ts', './SlotBaseTableHistory.ts', './SlotJackpotCellHistory.ts', './SlotJackpotHistory.ts', './SlotJackpotHistoryDetail.ts', './SlotJackpotTableHistory.ts', './Info.ts', './IntroBonus.ts', './IntroFree.ts', './IntroGame.ts', './IntroJackpot.ts', './Jackpot.ts', './JackpotCoinEffect.ts', './JackpotWin.ts', './LoadingTransition.ts', './BonusValueControl.ts', './ExtendMiniBox.ts', './ExtendMiniTable.ts', './MiniBox.ts', './MiniDirector.ts', './MiniTable.ts', './MiniWriter.ts', './MovingParticleControl.ts', './OnDemandLoadingControl.ts', './PoolFactory.ts', './Setting.ts', './RotateIcon.ts', './SlotButton.ts', './SlotDialog.ts', './SlotDialogAction.ts', './SlotGetShare.ts', './SlotUIScene.ts', './SpinTimes.ts', './SpineSkeletonDatabase.ts', './StickyWild.ts', './Toast.ts', './ToggleMotion.ts', './TopUIController.ts', './TotalWinPanel.ts', './Turbo.ts', './VersionSlot.ts', './Wallet.ts', './WinAmount.ts', './BaseDirector.ts', './BetData.ts', './CustomEventNames.ts', './DataStore.ts', './Director.ts', './EventNames.ts', './FreeGameWriter.ts', './GameMode.ts', './GameObject.ts', './MsgKeyMapping.ts', './NetworkEnum.ts', './QuestData.ts', './SlotDirector.ts', './SlotGameWriter.ts', './SlotText.ts', './TurnBaseFSM.ts', './UIManager.ts', './Writer.ts', './gameStateSlot.ts', './CoinEffect.ts', './CoinsEffect.ts', './WinEffect.ts', './WinEffectv2.ts', './AutoSpinPanelController.ts', './BarMenu.ts', './BetOptionItem.ts', './BetOptionScrollView.ts', './BetSelectionMgr.ts', './BetSelectionPanelController.ts', './BottomBarMgr.ts', './CustomToggle.ts', './InfoView.ts', './SmallToolTip.ts', './Turbov2.ts', './TweenViewComponent.ts', './TweenViewConfig.ts', './InfoPayableSymbol.ts', './TouchPayableSymbol.ts', './SlotReelv2.ts', './SlotTableTouchSymbol.ts', './SlotSoundPlayer.ts', './BonusRollReel.ts', './BonusRollSymbol.ts', './BonusRollTable.ts', './GongReel.ts', './GongStackWild.ts', './GongTable.ts', './GongUtils.ts', './LineDrawingPayline.ts', './SlotReel.ts', './SlotSymbol.ts', './SlotSymbolPayline.ts', './SlotSymbolPaylineRT.ts', './SlotTable.ts', './SlotTableNearWinEffect.ts', './SlotTablePayline.ts', './SlotTablePaylineInfo.ts', './SlotTableSoundEffect.ts', './SlotUtils.ts', './appConfig-debug.ts', './appConfig.ts', './mock.ts', './state-machine.min.mjs_cjs=&original=.js', './NetworkManager.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MiniBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Event, tween, Vec3, Sprite, Button, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Button = module.Button;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "13a04uu1UxMb7gUWTdvWxHX", "MiniBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniBox = exports('MiniBox', (_dec = ccclass('MiniBox'), _dec2 = property({
        type: Node,
        override: true
      }), _dec3 = property({
        type: Node,
        override: true
      }), _dec4 = property({
        type: SpriteFrame,
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MiniBox, _GameObject);

        function MiniBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteSymbols", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxClick", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "soundBoxOpen", _descriptor5, _assertThisInitialized(_this));

          _this.isAutoTrigger = false;
          _this.tweenClick = void 0;
          _this.tweenOpen = void 0;
          _this.mapValue = {};
          _this.boxPosition = null;
          _this.isSelected = false;
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = MiniBox.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
          this.node.on("DIM", this.dim, this);
          this.node.on("BOX_OPEN", this.playAnimOpen, this);
          this.node.on("BOX_RESET", this.resetBox, this);
          this.node.isOpen = false;
          this.node.disableClick = this.disableClick.bind(this);
          this.node.enableClick = this.enableClick.bind(this);
          this.node.showScore = this.showScore.bind(this);
          this.node.playAnimClick = this.playAnimClick.bind(this);
          this.node.onClickItem = this.onClickItem.bind(this);
          this.node.stopAnimClick = this.stopAnimClick.bind(this);
        };

        _proto.init = function init(config) {
          this.mapValue = config.BOX_MAP_VALUES;
          this.boxPosition = this.node.position.clone();
        };

        _proto.show = function show() {
          this.node.active = true;
        };

        _proto.hide = function hide() {
          this.node.active = false;
        };

        _proto.onClickItem = function onClickItem(e, isAutoTrigger) {
          if (isAutoTrigger === void 0) {
            isAutoTrigger = false;
          }

          if (this.node.isOpen) return;
          this.node["isAutoTrigger"] = isAutoTrigger;
          var event = new Event('CLICK_ITEM', true);
          this.node.dispatchEvent(event);
        };

        _proto.playAnimClick = function playAnimClick() {
          this.soundBoxClick && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxClick);
          var time = 0.02;
          this.stopAnimClick();
          this.tweenClick = tween(this.node).repeatForever(tween(this.node).by(time, {
            position: new Vec3(-10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(10, 0, 0)
          }).by(time, {
            position: new Vec3(-10, 0, 0)
          }));
          this.tweenClick.start();
        };

        _proto.stopAnimClick = function stopAnimClick() {
          if (this.tweenClick) this.tweenClick.stop();
          this.tweenClick = null;
        };

        _proto.playAnimOpen = function playAnimOpen(value, isFast, isSelected, callback) {
          var _this2 = this;

          this.node.isOpen = true;
          this.isSelected = isSelected;
          this.disableClick();
          this.soundBoxOpen && this.soundPlayer && this.soundPlayer.playSfx(this.soundBoxOpen);
          if (this.tweenOpen) this.tweenOpen.stop();
          this.tweenOpen = tween(this.node).delay(0.5).call(function () {
            _this2.stopAnimClick(); //Todo get the current performance level from data store to play exact animation
            //Example:
            // const performanceLvl = (this.dataStore &&this.dataStore.performanceLevel) || 'HIGH_PERFORMANCE_LV';
            // this.animationLevel = this.config[performanceLvl].BONUS_ANIMATION;
            // const showStaticAnim = this.animationLevel< Number(PerformanceLevel.Medium);


            _this2.node.setPosition(_this2.boxPosition);

            _this2.symbolNode.active = true;

            _this2.setOpacity(_this2.staticNode, 0);

            var indexSprite = _this2.mapValue[value];
            _this2.symbolNode.getComponent(Sprite).spriteFrame = _this2.spriteSymbols[indexSprite];

            _this2.setOpacity(_this2.staticNode, 255);
          }).call(function () {
            _this2.showScore(value, isFast);
          }).delay(0.5).call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }

            _this2.tweenOpen = null;
          });
          this.tweenOpen.start();
        };

        _proto.dim = function dim() {
          this.setOpacity(this.node, 150);
        };

        _proto.showScore = function showScore(value, isFast) {
          if (isFast === void 0) {
            isFast = false;
          }

          if (this.eventManager) {
            this.eventManager.emit("SHOW_BONUS_VALUE", value, this.node.getWorldPosition(), isFast, this.isSelected);
          }
        };

        _proto.setScore = function setScore(value) {
          this.symbolNode.active = false; // this.labelScore.getComponent(Label).string = 'x' + (value || 0);
          // this.labelScore._uiProps.opacity = 1;
        };

        _proto.enableClick = function enableClick() {
          this.node.getComponent(Button).interactable = true;
        };

        _proto.disableClick = function disableClick() {
          this.node.getComponent(Button).interactable = false;
        };

        _proto.resetBox = function resetBox() {
          this.boxPosition && this.node.setPosition(this.boxPosition);
          this.stopAnimClick();
          this.symbolNode.active = false;
          this.setOpacity(this.staticNode, 255);
          this.setOpacity(this.node, 255);
          this.node.isOpen = false;
          this.enableClick();
          this.isSelected = false;
        };

        return MiniBox;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "symbolNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spriteSymbols", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxClick", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "soundBoxOpen", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDirector.ts', './CustomEnum.ts', './BonusValueControl.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, UITransform, Vec3, tween, error, Vec2, BaseDirector, SlotGameMode, TutorialTriggerType, BonusValueControl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
      error = module.error;
      Vec2 = module.Vec2;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      BonusValueControl = module.BonusValueControl;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "aa621lYqwNHfLZ/tpkenXKX", "MiniDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniDirector = exports('MiniDirector', (_dec = ccclass('MiniDirector'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(MiniDirector, _BaseDirector);

        function MiniDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "valueLabelHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelOffset", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "countDownNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxOpenBoxes", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timerCount", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultValue", _descriptor9, _assertThisInitialized(_this));

          _this.writer = null;
          _this.isWaitingResult = false;
          _this.isAutoTrigger = false;
          _this.callbackStateUpdate = null;
          _this._callbackAutoTrigger = null;
          _this.currentPick = void 0;
          _this.listOpenedIndexes = [];
          _this.repeatCountDown = null;
          _this._count = 20;
          _this._delayTimeCallback = null;
          _this.countDownText = null;
          _this._labelHolderTransform = null;
          _this._labelObjects = [];
          _this._poolFactory = null;
          return _this;
        }

        var _proto = MiniDirector.prototype;

        _proto.onLoad = function onLoad() {
          _BaseDirector.prototype.onLoad.call(this);

          this.setOpacity(this.node, 0);
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_INIT", this.init, this);
          this.node.on('CLICK_ITEM', this.onClickItem, this);
          this.countDownText = this.countDownNode.getComponentInChildren(Label);

          if (this.valueLabelHolder) {
            this._labelHolderTransform = this.valueLabelHolder.getComponent(UITransform);
            if (!this._labelHolderTransform) this._labelHolderTransform = this.valueLabelHolder.addComponent(UITransform);
          }

          this._bindProps();

          if (this.mainDirector) this.mainDirector.gameModes[SlotGameMode.BonusGame] = this.node;
        };

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on("SHOW_BONUS_VALUE", this.showBonusValue, this);
          }

          if (!this._poolFactory) {
            this._poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off("SHOW_BONUS_VALUE", this.showBonusValue, this);
          }
        };

        _proto._bindProps = function _bindProps() {
          this.node.init = this.init.bind(this);
        }
        /**
         * @receive_data
         * */
        ;

        _proto.stateUpdate = function stateUpdate(callback) {
          this.isWaitingResult = false;
          this.callbackStateUpdate = callback;
          this.runAction('ResultReceive');
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          if (typeof this.callbackStateUpdate == "function") {
            this.callbackStateUpdate();
            this.callbackStateUpdate = null;
          }
        };

        _proto.ready = function ready(data) {
          var _this2 = this;

          if (data) {
            for (var index = 0; index < data.length; index++) {
              if (data[index] !== this.defaultValue) this.listOpenedIndexes.push(index);
            }

            this.table.emit("RESUME_MINI_GAME", data, this.defaultValue);
          }

          this.isWaitingResult = false;
          this.runAction("MiniGameStart");
          this._count = this.timerCount;
          this.soundPlayer && this.soundPlayer.playMainBGM();
          var delayForTrigger = 1;
          this.scheduleOnce(function () {
            _this2.guiMgr.onIngameEvent(TutorialTriggerType.EnterBonusGame, "ENTER_GAME_MODE");
          }, delayForTrigger);
        };

        _proto.init = function init() {
          this.writer = this.node['writer'];
          this.isWaitingResult = false;
          this.table.emit("INIT_TABLE");
          this.node.active = false;
        };

        _proto.onClickItem = function onClickItem(event) {
          if (this.isWaitingResult) return;
          event.propagationStopped = true;
          this.stopAutoTrigger();
          this.soundClickItem();
          var box = event.target;

          if (this.canOpenBox(box)) {
            var index = box["boxIndex"];
            this.currentPick = index;
            this.listOpenedIndexes.push(index);
            this.runAction("MiniGameClick", this.currentPick);
            box.playAnimClick();
            box.disableClick();
            this.isAutoTrigger = box.isAutoTrigger;
          }
        };

        _proto.canOpenBox = function canOpenBox(box) {
          if (this.isFinishOpen()) return false;
          if (this.listOpenedIndexes.indexOf(box["boxIndex"]) > -1) return false;
          return true;
        };

        _proto.isFinishOpen = function isFinishOpen() {
          return this.listOpenedIndexes.length >= this.maxOpenBoxes;
        };

        _proto.showBonusValue = function showBonusValue(bonusValue, itemWPosition, isFast, isSelected) {
          if (!this.labelPrefabName || this.labelPrefabName === '') return;

          for (var i = 0; i < this._labelObjects.length; i++) {
            this._labelObjects[i].active = false;
          }

          var lPos = this._labelHolderTransform.convertToNodeSpaceAR(itemWPosition);

          var labelPos = new Vec3(lPos.x + this.labelOffset.x, lPos.y + this.labelOffset.y, lPos.z);

          var valueLabel = this._poolFactory.getObject(this.labelPrefabName);

          if (valueLabel && this.valueLabelHolder) {
            valueLabel.parent = this.valueLabelHolder;
            valueLabel.active = true;
            valueLabel.setPosition(labelPos);
            valueLabel.getComponent(BonusValueControl).showValue(bonusValue, this.dataStore.betData.denom, isFast, isSelected);

            this._labelObjects.push(valueLabel);
          }

          for (var _i = 0; _i < this._labelObjects.length; _i++) {
            this._labelObjects[_i].active = true;
          }

          this.soundPlayer && this.soundPlayer.playSfx("BONUS_PAY");
        };

        _proto.runAutoTrigger = function runAutoTrigger(delay) {
          var _this3 = this;

          this.stopAutoTrigger();

          this._callbackAutoTrigger = function () {
            _this3.table.emit("AUTO_OPEN_BOX");

            _this3._callbackAutoTrigger = null;
          };

          this.scheduleOnce(this._callbackAutoTrigger, delay);
          this.runCountDown(delay);
        };

        _proto.stopAutoTrigger = function stopAutoTrigger() {
          this._callbackAutoTrigger && this.unschedule(this._callbackAutoTrigger);
        };

        _proto.runCountDown = function runCountDown(delay) {
          var _this4 = this;

          if (!this.countDownText) return;
          this.stopCountDown();

          if (delay === this.timerCount) {
            this.repeatCountDown = tween(this);
            this.repeatCountDown.repeatForever(tween(this.node).call(function () {
              _this4.setOpacity(_this4.countDownNode, 255);

              _this4.countDownText.string = "H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 ch\u1ECDn sau: " + _this4._count + "s";
            }).delay(1).call(function () {
              _this4._count--;

              if (_this4._count <= 0) {
                _this4.repeatCountDown.stop();

                _this4.setOpacity(_this4.countDownNode, 0);
              }
            })).start();
          } else {
            this.setOpacity(this.countDownNode, !this.isAutoTrigger ? 255 : 0);
          }
        };

        _proto.stopCountDown = function stopCountDown() {
          if (this.repeatCountDown) {
            this.repeatCountDown.stop();
            this._count = this.timerCount;
          }
        };

        _proto.resetMiniGame = function resetMiniGame() {
          this.stopAutoTrigger();
          this.stopCountDown();
          this.listOpenedIndexes = [];
          this.currentPick = 0;
          this.table.emit("RESET_MINI_TABLE");
          this._count = this.timerCount;
          this.setOpacity(this.countDownNode, 0);
          this.clearValueLabels();
        };

        _proto.clearValueLabels = function clearValueLabels() {
          if (!this._poolFactory) {
            this._poolFactory = this.mainDirector.poolFactory;
          }

          for (var i = 0; i < this._labelObjects.length; i++) {
            var labelObj = this._labelObjects[i];

            if (labelObj) {
              labelObj.getComponent(Label).string = '';

              this._poolFactory.removeObject(labelObj);
            }
          }

          this._labelObjects = [];
        }
        /**
         * commands
         */
        ;

        _proto._miniGameStart = function _miniGameStart(scripts) {
          if (this._checkPauseTutorial('pauseBonusGame')) {
            this.storeCurrentScripts = '_miniGameStart';
            this.storeNextScripts = {
              scripts: scripts,
              data: {}
            };
          } else {
            this.runAutoTrigger(this.timerCount);
            this.executeNextScript(scripts);
          }
        };

        _proto._sendRequestPlayMiniGame = function _sendRequestPlayMiniGame(scripts, _ref) {
          var openCell = _ref.openCell;
          this.isWaitingResult = true;
          this.node["mainDirector"].gameStateManager.triggerMiniGame(openCell);
          this.executeNextScript(scripts);
        };

        _proto._showResult = function _showResult(script) {
          this.isWaitingResult = false;
          this.runAction("ShowResult");
          this.executeNextScript(script);
        };

        _proto._openPickedItem = function _openPickedItem(scripts, data) {
          var _this5 = this;

          this.table.emit("OPEN_BOX", data, function () {
            _this5.executeNextScript(scripts);
          });

          if (!this.isFinishOpen()) {
            var time = this.isAutoTrigger ? 0.5 : this.timerCount;
            this.runAutoTrigger(time);
          }
        };

        _proto._openAllItems = function _openAllItems(scripts, matrix) {
          var _this6 = this;

          this.setOpacity(this.countDownNode, 0);
          this.stopAutoTrigger();
          this.table.emit("OPEN_ALL_BOXES", matrix, function () {
            _this6.executeNextScript(scripts);
          });
          this.stopCountDown();
        };

        _proto._updateWinningAmount = function _updateWinningAmount(scripts, _ref2) {
          var winAmount = _ref2.winAmount,
              time = _ref2.time;
          this.guiMgr.updateWinAmount(winAmount, time / 1000);
          this.executeNextScript(scripts);
        };

        _proto._miniGameRestart = function _miniGameRestart(scripts) {
          this.executeNextScript(scripts);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this7 = this;

          this._delayTimeCallback = function () {
            _this7.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._checkPauseTutorial = function _checkPauseTutorial(flag) {
          return this.guiMgr.checkPauseTutorial(flag);
        };

        _proto._showCutscene = function _showCutscene(script, _ref3) {
          var _this8 = this;

          var name = _ref3.name,
              content = _ref3.content;

          if (this._checkPauseTutorial('pauseFreeGame') || this._checkPauseTutorial('pauseBonusGame')) {
            this.storeCurrentScripts = '_showCutscene';
            var data = {
              name: name,
              content: content
            };
            this.storeNextScripts = {
              script: script,
              data: data
            };
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this8.executeNextScript(script);
            });
          }
        };

        _proto._showCutscene_2 = function _showCutscene_2(script) {
          this.executeNextScript(script);
        };

        _proto._hideCutscene = function _hideCutscene(script, _ref4) {
          var name = _ref4.name;
          this.guiMgr.hideCutScene(name);
          this.executeNextScript(script);
        };

        _proto._showUnskippedCutscene = function _showUnskippedCutscene(script, _ref5) {
          var _this9 = this;

          var name = _ref5.name,
              content = _ref5.content;
          this.guiMgr.showCutScene(name, content, function () {
            _this9.executeNextScript(script);
          });
        };

        _proto._updateValueJP = function _updateValueJP(script, data) {
          this.guiMgr.updateValueJP(data);
          this.executeNextScript(script);
        };

        _proto._pauseUpdateJP = function _pauseUpdateJP(script) {
          this.guiMgr.pauseJackpot();
          this.executeNextScript(script);
        };

        _proto._resumeUpdateJP = function _resumeUpdateJP(script) {
          this.guiMgr.resumeJackpot();
          this.executeNextScript(script);
        };

        _proto._gameExit = function _gameExit(scripts) {
          var _this10 = this;

          if (scripts.length > 0) {
            error("have tp finish all scripts when exit game");
          }

          this.resetMiniGame();
          this.guiMgr.onIngameEvent(TutorialTriggerType.ExitBonusGame, "EXIT_GAME_MODE");
          this.node.exit(function () {
            _this10.executeNextScript(scripts);
          });
        };

        _proto.soundClickItem = function soundClickItem() {//to do play sound
        };

        return MiniDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "valueLabelHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labelOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(0, 0);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "countDownNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "maxOpenBoxes", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "timerCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "defaultValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, v3, tween, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "ef8b7q6n51KoLW4ILuyhveY", "MiniTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MiniTable = exports('MiniTable', (_dec = ccclass('MiniTable'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MiniTable, _GameObject);

        function MiniTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "colNumber", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rowNumber", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "WIDTH_STEP", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HEIGHT_STEP", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boxPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "openAllBoxDelay", _descriptor6, _assertThisInitialized(_this));

          _this.listBoxes = [];
          _this.listScore = [];
          _this.startX = 0;
          _this.startY = 0;
          _this.result = null;
          return _this;
        }

        var _proto = MiniTable.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT_TABLE", this.initBoxes, this);
          this.node.on("OPEN_BOX", this.openBox, this);
          this.node.on("OPEN_ALL_BOXES", this.openAllBoxes, this);
          this.node.on("RESUME_MINI_GAME", this.resumeTable, this);
          this.node.on("RESET_MINI_TABLE", this.resetTable, this);
          this.node.on("AUTO_OPEN_BOX", this.autoClick, this);
          this.startX = -this.colNumber / 2 * this.WIDTH_STEP + this.WIDTH_STEP / 2;
          this.startY = this.rowNumber / 2 * this.HEIGHT_STEP - this.HEIGHT_STEP / 2;
        };

        _proto.randRange = function randRange(min, max) {
          return Math.floor(Math.random() * (max - min)) + min;
        };

        _proto.initBoxes = function initBoxes() {
          var maxBox = this.colNumber * this.rowNumber;
          this.listBoxes = [];

          for (var index = 0; index < maxBox; index++) {
            var box = instantiate(this.boxPrefab);
            this.node.addChild(box);
            box.active = true;
            box['boxIndex'] = index;
            this.listBoxes.push(box);
            box.setPosition(this.getPosByIndex(index));
            box.emit('INIT', this.config);
          }
        };

        _proto.getPosByIndex = function getPosByIndex(index) {
          var x = this.startX + this.WIDTH_STEP * Math.floor(index / this.rowNumber);
          var y = this.startY - this.HEIGHT_STEP * (index % this.rowNumber);
          return v3(x, y);
        };

        _proto.openBox = function openBox(data, callback) {
          var index = data.index,
              value = data.value;
          this.listBoxes[index].emit("BOX_OPEN", value, false, true, callback);
        };

        _proto.openAllBoxes = function openAllBoxes(result, callback) {
          this.result = result;
          this.updateCurrentMatrix();

          for (var i = 0; i < this.listBoxes.length; i++) {
            if (this.listBoxes[i]["isOpen"] === false) {
              var randValue = this.getRandomValue();
              this.listBoxes[i].stopAnimClick();
              this.listBoxes[i].emit("BOX_OPEN", randValue, true, false, null);
              this.listBoxes[i].emit("DIM");
            }
          }

          if (callback && typeof callback === 'function') {
            tween(this.node).delay(this.openAllBoxDelay).call(function () {
              callback();
            }).start();
          }
        };

        _proto.resumeTable = function resumeTable(data, defaultValue) {
          if (!data) return;

          for (var i = 0; i < data.length; i++) {
            if (data[i] !== defaultValue) {
              this.listBoxes[i].emit("BOX_OPEN", data[i], true, true);
            }
          }
        };

        _proto.resetTable = function resetTable() {
          for (var i = 0; i < this.listBoxes.length; i++) {
            this.listBoxes[i].emit("BOX_RESET");
          }
        };

        _proto.autoClick = function autoClick() {
          var index = this.randRange(0, this.listBoxes.length);
          this.listBoxes[index]["isOpen"] ? this.autoClick() : this.listBoxes[index].onClickItem(null, true);
        };

        _proto.updateCurrentMatrix = function updateCurrentMatrix() {// todo: implement this func to mini game win Jackpot
          // like BDMN, 4L
        };

        _proto.getRandomValue = function getRandomValue() {
          var boxValue = Object.keys(this.config.BOX_MAP_VALUES);
          return boxValue[Math.floor(Math.random() * boxValue.length)];
        };

        return MiniTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "colNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rowNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "WIDTH_STEP", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "HEIGHT_STEP", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "boxPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "openAllBoxDelay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MiniWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, SlotSceneType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ff4bdM4aUhM+K6bHbWWxrpW", "MiniWriter", undefined);

      var ccclass = _decorator.ccclass;
      var MiniWriter = exports('MiniWriter', (_dec = ccclass('MiniWriter'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MiniWriter, _Component);

        function MiniWriter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.currentPick = null;
          return _this;
        }

        var _proto = MiniWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptMiniGameStart = function makeScriptMiniGameStart() {
          var listScript = [];
          listScript.push({
            command: "_miniGameStart"
          });
          return listScript;
        };

        _proto.makeScriptMiniGameClick = function makeScriptMiniGameClick(boxIndex) {
          this.currentPick = boxIndex;
          return [{
            command: "_sendRequestPlayMiniGame",
            data: {
              openCell: boxIndex
            }
          }];
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var _this$dataStore$playS = this.dataStore.playSession,
              jackpotInfo = _this$dataStore$playS.jackpotInfo,
              extraVipJackpot = _this$dataStore$playS.extraVipJackpot;
          var listScript = [];

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jpId = arrayJP[0];
            var jpType = jpId.slice(7);
            var jackpotAmount = Number(arrayJP[1]);
            listScript.push({
              command: "_pauseUpdateJP"
            });
            listScript.push({
              command: "_updateValueJP",
              data: {
                jpType: jpType,
                jpValue: jackpotAmount - (extraVipJackpot || 0)
              }
            });
          }

          listScript.push({
            command: "_showResult"
          });
          return listScript;
        };

        _proto.makeScriptShowResult = function makeScriptShowResult() {
          var listScript = [];
          var _this$dataStore$playS2 = this.dataStore.playSession,
              winAmountPS = _this$dataStore$playS2.winAmountPS,
              bonusPlayRemain = _this$dataStore$playS2.bonusPlayRemain,
              bonusGameMatrix = _this$dataStore$playS2.bonusGameMatrix,
              bonusValue = _this$dataStore$playS2.bonusValue,
              bonusGameWinAmount = _this$dataStore$playS2.bonusGameWinAmount,
              bgWinAmtCurrent = _this$dataStore$playS2.bgWinAmtCurrent,
              jackpotInfo = _this$dataStore$playS2.jackpotInfo;
          var betData = this.dataStore.betData;
          listScript.push({
            command: "_openPickedItem",
            data: {
              index: this.currentPick,
              value: bonusValue
            }
          });

          if (winAmountPS && winAmountPS > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          if (bonusPlayRemain) {
            listScript.push({
              command: "_miniGameRestart"
            });
            return listScript;
          } else {
            listScript.push({
              command: "_openAllItems",
              data: bonusGameMatrix
            });

            if (jackpotInfo) {
              var infoJP = jackpotInfo[jackpotInfo.length - 1];
              var arrayJP = infoJP.split(';');
              var jackpotAmount = 0;
              var jpLineId;

              if (arrayJP && arrayJP.length > 2) {
                jackpotAmount = Number(arrayJP[1]);
                jpLineId = arrayJP[2];
              }

              if (jpLineId) {
                listScript.push({
                  command: "_showJackpotPayLine",
                  data: {
                    jpPayLineID: jpLineId
                  }
                });
              }

              listScript.push({
                command: "_showUnskippedCutscene",
                data: {
                  name: SlotSceneType.JackpotWin,
                  content: {
                    winAmount: jackpotAmount,
                    currentBetData: betData.getTotalBet()
                  }
                }
              });
              listScript.push({
                command: "_resumeUpdateJP"
              });
            } else {
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.TotalWinPanel,
                  content: {
                    winAmount: bgWinAmtCurrent ? bgWinAmtCurrent : bonusGameWinAmount
                  }
                }
              });
              listScript.push({
                command: "_updateWinningAmount",
                data: {
                  winAmount: winAmountPS,
                  time: 300
                }
              });
            }

            listScript.push({
              command: "_gameExit"
            });
            return listScript;
          }
        };

        _createClass(MiniWriter, [{
          key: "dataStore",
          get: function get() {
            return this.node["dataStore"] || null;
          }
        }]);

        return MiniWriter;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mock.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b3eaHRoJpAl7VdbWi2xxG7", "mock", undefined);

      var userList = ['', '56e6b7cb-533c-4888-9d5a-ab248a06697c', 'd24bb892-2186-4f99-80bf-d86711182e1e', 'dc539325-654e-4e8b-868f-76de25a2f35a', '7f40784b-5a46-4543-8423-fd8f4fcd0279', 'ca23696a-6aff-49e4-8be4-2878a4537265', '2d7fe03b-9e6f-46c2-bd1c-5a62c8d5e047', 'dc8cc0bb-7f25-4284-bbe0-a78d1f5b0f10', '1323b14d-b986-40ae-bc38-1e4362f5f339', '665e2d1b-85a8-486c-951f-4ba6b4a520e2', 'efe80f93-c21d-414b-b6b0-ca6633624b52', 'd2341c95-cc7a-4764-b076-54778df11c58', '7fdfd544-d0f8-4d1c-8f62-5c56857e6fae', 'bb8d1526-f4c0-472c-8308-b6b23dcd6a51', 'aea847a9-9b40-4f27-8f04-b821152d9d95', '122b2b5e-6232-49ac-8c23-5f7f0087a2f5', '5037ff8b-6a53-4812-b961-79984425ec04', 'e88b0830-0de9-4e3b-ae16-29c261cd797a', '3cb48324-b4fe-443a-bb72-94365dfba446', '7d186fb7-9dbc-416f-92f7-098e2b387b41', 'e6d94531-b9a7-4613-a369-88be17c47510', 'bbf5c484-fd49-4712-a74a-d9087fcac470', 'c0fea303-40d9-4916-9469-bb120c9cb946', '7d68da4c-e6f2-4b2e-a062-b42c70d1262f', '1f1d69a8-4de4-4ecf-8038-175c259a1796', '26c969e0-8ca8-4938-964b-5974a22e726f', '708574af-82aa-4dc2-a1ca-d545a45b9406', 'f1e65656-7a7f-4470-a42f-d3f329558882', 'a623678e-3c01-4970-a154-973c4f83b554', '47bc3d24-7c00-49ca-b18a-ae97368b2eab', '1ee89c7f-43d7-4d0f-a07f-35617d832db6', '4b5a50dd-8518-41a7-81a1-ae08634f7224', 'd2cefdae-62e3-4998-9629-ea6ced1b6d37', 'a7e128e6-deff-425d-9c42-a9f7ed32dbe4', '02e7e890-f5e7-46d1-bfb3-664cb80d6014', '0621ed1b-d2b5-480a-bee0-0fa93b72590f', '86e8c8c1-c8ad-495a-a5d6-efcebb93abc6', '68e5ef10-5451-455b-9076-871907548752', '1d05a7b7-fef3-49ad-820d-13cc26dab10c', 'be11c11b-0f04-4827-bf3d-82af3c75dc20', '7f58dd54-8e9f-4fed-b91e-c2657255bc39', '280125a5-92d3-492c-9054-ad163e48b441', '76d73797-4249-429d-8006-5d47cee5f6cb', '6487d34e-9e63-4bbe-8556-2ed6de713d9d', '48c64e13-1310-4a39-b258-1c1417fc486a', '1d231f82-4fc6-47e2-bba4-c203419f8402', 'e9eff152-dcbb-4d85-bc9f-953ae4d12776', '93437ca0-d5a9-446d-9e2d-eb0833c2acc1', 'af67b4e7-eabc-4087-b66a-b8b1bd0a5e00', 'fb3ebe48-caf1-4acc-b4c5-5e12b6126eb8', '0d786d1d-4f1c-46a3-8ffb-54cf80e14d79', 'ce851e2b-8e5e-46bd-8a13-b3d487c7ed6d', 'b890aa8c-ab4b-4b66-8094-d5fa1ce76abd', '56d73399-4231-42b8-bb9e-75ea8c5bdc35', 'b4412364-c3bc-4fa3-9311-1e1a721dd7bd', '30cc4fae-ac36-4eff-884a-7f51812129d0', '8e4cbb6e-72bf-4e79-bb85-eb9ef13bcb82', '2820fb3c-ca83-488b-b4eb-60a462d3940e', 'ddad2b48-8004-4d06-9749-2159e39a502b', 'e2bbb4f7-3987-49b7-9ca9-5e0ed8619f5f', 'a2c21e4f-1cf1-4c08-bd48-23fbafb0193c', 'd8235853-20e5-4c59-a6ec-51b5f920c83d', '5eff7099-0ab5-4218-9e29-ad62a4a7aef6', '8b965686-b37e-4c66-b463-5c7bb61c0be0', 'a85c17e3-6b22-4609-8a5a-9b839bbf27aa', 'd717803c-45aa-4676-b40f-cd8bcb2dfbd3', '7599abed-b608-41c6-a14f-40b94c65ae89', '43b60a97-22f4-4536-b2a7-fd1025df9bc5', '7b1ec585-5323-43b2-80c0-98961fbe7c4d', 'fbd35472-3c35-4764-a5db-39c30483dfb1', '7f5dbeef-cf0d-4715-b730-61548ad8c8b8', '34485d01-c565-4208-921f-c1c07f4b651c', 'b6cf22b0-5c58-4f5d-a5a8-142d431483af', 'a23a5459-1f08-4f0a-821f-0d7bab70aee9', '2d7c1dca-f628-4214-9fe9-c461e5a61774', '775e18f7-f702-471d-847b-e6e1be2dc465', '5ea33124-81a7-4c6c-8a29-67977e4af089', '53a0a688-2d7f-48d8-a8aa-2f83cf339fb4', '5614804e-b27a-4cc2-9317-3c37a2ff4a10', 'f4650e0a-8eae-4c77-8388-a74b24d38deb', 'e25416f1-8c8d-450b-919b-faa97981fe8d', '45e8195b-9ff1-466d-9748-3e1280443dd4', 'da0af4d3-af6b-4af1-977a-34a9e779dca6', 'f5b4323b-37a9-49f2-a4c0-7443515b6443', '360f4086-fc1b-41cf-b322-18ac80ff1636', 'bf0246e7-a179-4a62-843a-5f12036cafd4', '1bdff444-a214-424d-b76f-2c4b75c45c7c', '30e3d2ff-2f05-447b-972d-16571031eb26', 'c2d77d20-f6b3-4e71-bb5e-a7fb8c3e57b4', 'ba8977a8-b8b2-4f27-9c1c-64c68eb4972e', '23459e80-6190-47ab-8639-9cec204fc1ff', '8dbf465d-74b4-480d-af06-11baceadac1a', '0bf53ba8-efab-492a-93bc-086a74f263e6', 'a1560658-5927-4d2b-8bd7-0854f5e04689', '43253665-e9c8-43fa-b8b1-e70b9aa84cbc', '60beb533-fcf9-4927-b89e-884328a4ecfb', '6951de0d-cddc-46a4-abde-3bb44cce0dec', 'd09428f0-c851-4f17-af76-f0c6845e39bb', 'def15344-d560-4434-8a6b-f49274bedb28', '5335474d-cf1a-4acc-8fc0-757bd1bffc37', 'e9cca118-6bbd-4569-b0fb-2134bb75a922'];
      var listToken = ['', 'acb80c1b66e8d7e0238f664f6b2bade2', 'b64ee5942930d546d542b901f59571f8', '2ae5ce8fd3c2443ed9ed03d636870a5c', '5de60fa78df3c8b0d74fdab50bb1f05e', 'ec6418535a9a8c91c51457d95712d4ca', '62894b6a26ab2fc237bf8d337e09bea1', '4844f2fd92183d1e51db69d2262fdf62', '120c1f3746720186db019889e858fe76', '0e68f050850a67c4a4895969b8267ac5', '933529699ea607139e924b07e4ee3bdb', 'f14065e80d3c0c0da8e3231ae6a9e090', 'ca8222f4c8c3289bb6fbaf81720e7718', 'ceb383b6a9b06acb776dd2705345d592', 'bc229dcb0f2f526889046c4cc47ab8a2', '84d5399826046dbd4a06a5f53b15fed4', '64b7587d15c9440dfa9b8027719330eb', '254fd4b630e0554608623c61d4cee589', '9233c0694d2050eacf0cc48e1d92bbcc', '0d84f49e245969c0f075a304f61e7020', 'bee2816e5284e5f443c9bdaaa3b1d01d']; //  const uIndex = 30;

      var mock = exports('mock', {
        // IS_MOCK_NETWORK: true,
        '9999': 'spinNoWin',
        '9998': 'spinMiniGame',
        '5999': 'spinWin',
        userList: userList,
        listToken: listToken,
        token: 'CQFYIm.RPD5pXGNK2kvxGyu9Cr11lry',
        userText: 'user180',
        pwText: 'pwduser180',
        userId: 'user180'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MovingParticleControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, Node, ParticleSystem2D, tween, GameObject, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ef340xZlppFh55PczBHvwLr", "MovingParticleControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var MovingParticleControl = exports('MovingParticleControl', (_dec = ccclass('MovingParticleControl'), _dec2 = requireComponent(UITransform), _dec3 = property({
        type: SlotGameMode
      }), _dec4 = property({
        type: Node
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(MovingParticleControl, _GameObject);

        function MovingParticleControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "destination", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleMovingPrefabName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "particleExplodingPrefabName", _descriptor4, _assertThisInitialized(_this));

          _this.poolFactory = null;
          _this.uiTransform = null;
          return _this;
        }

        var _proto = MovingParticleControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on("MOVE_PARTICLES", this.moveParticle, this);
            this.eventManager.on('CLEAR_PARTICLES', this.clearParticles, this);
          }

          if (!this.poolFactory) {
            this.poolFactory = this.mainDirector.poolFactory;
          }

          if (!this.uiTransform) this.uiTransform = this.node.getComponent(UITransform);
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off("MOVE_PARTICLES", this.moveParticle, this);
            this.eventManager.off('CLEAR_PARTICLES', this.clearParticles, this);
          }
        };

        _proto.moveParticle = function moveParticle(gameMode, fromWPos, movingTime, callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (gameMode === this.currentGameMode) {
            var fLPos = this.uiTransform.convertToNodeSpaceAR(fromWPos);
            var movingpParticle = this.poolFactory.getObject(this.particleMovingPrefabName);
            var explodingParticle = this.poolFactory.getObject(this.particleExplodingPrefabName);

            if (movingpParticle) {
              movingpParticle.parent = this.node;
              movingpParticle.active = true;
              movingpParticle.setPosition(fLPos);
              movingpParticle.getComponent(ParticleSystem2D).resetSystem();

              if (explodingParticle) {
                explodingParticle.parent = this.node;
                explodingParticle.active = true;
                explodingParticle.setPosition(this.destination.getPosition());
                explodingParticle.getComponent(ParticleSystem2D).stopSystem();
                explodingParticle.active = false;
              }

              var movingTween = movingpParticle["particleMoveTween"];
              if (movingTween) movingTween.stop();
              this.soundPlayer && this.soundPlayer.playSfx('PARTICAL_FLY');
              movingpParticle["particleMoveTween"] = tween(movingpParticle).to(movingTime, {
                position: this.destination.getPosition()
              }).call(function () {
                _this2.soundPlayer && _this2.soundPlayer.playSfx('PARTICAL_HIT');
                movingpParticle.getComponent(ParticleSystem2D).stopSystem();

                if (explodingParticle) {
                  explodingParticle.active = true;
                  explodingParticle.getComponent(ParticleSystem2D).resetSystem();
                }

                callback && callback();
              }).delay(1).call(function () {
                movingpParticle.active = false;

                _this2.poolFactory.removeObject(movingpParticle);

                movingpParticle["particleMoveTween"] = null;

                if (explodingParticle) {
                  explodingParticle.getComponent(ParticleSystem2D).stopSystem();
                  explodingParticle.active = false;

                  _this2.poolFactory.removeObject(explodingParticle);
                }
              });
              movingpParticle["particleMoveTween"].start();
            }
          }
        };

        _proto.clearParticles = function clearParticles() {
          var paricles = this.node.children;

          for (var i = 0; i < paricles.length; i++) {
            var particle = paricles[i];

            if (particle) {
              var movingTween = particle["particleMoveTween"];
              if (movingTween) movingTween.stop();
              particle.getComponent(ParticleSystem2D).stopSystem();
              this.poolFactory.removeObject(particle);
            }
          }

          this.node.removeAllChildren();
        };

        return MovingParticleControl;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "destination", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleMovingPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "particleExplodingPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgKeyMapping.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6934dePcbhFnLn4TXcbxaYE", "MsgKeyMapping", undefined);

      var MsgReceiveMapping = exports('MsgReceiveMapping', {
        uId: {
          name: 'userId'
        },
        sId: {
          name: 'serviceId'
        },
        cId: {
          name: 'commandId'
        },
        cIdt: {
          name: 'gameCommandId'
        },
        wat: {
          name: 'winAmountPS'
        },
        wa: {
          name: 'winAmount'
        },
        wap1: {
          name: 'winAmountP1'
        },
        ja: {
          name: 'winJackpotAmount'
        },
        wJPAmt: {
          name: 'winJackpotAmount'
        },
        jLn: {
          name: 'jackpotPayline'
        },
        bId: {
          name: 'betId'
        },
        nMx: {
          name: 'normalGameMatrix'
        },
        pl: {
          name: 'payLines'
        },
        nTf: {
          name: 'normalGameTableFormat'
        },
        nLn: {
          name: 'normalGamePaylines'
        },
        nWAmt: {
          name: 'normalGameWinAmount'
        },
        wsc: {
          name: 'winScatterCredit'
        },
        wsa: {
          name: 'winScatterAmount'
        },
        s0: {
          name: 'scatter'
        },
        s1: {
          name: 'scatter1'
        },
        s2: {
          name: 'scatter2'
        },
        bg: {
          name: 'bonusGame'
        },
        fg: {
          name: 'freeGame'
        },
        fso: {
          name: 'freeSpinOption'
        },
        opt: {
          name: 'selectedOption'
        },
        tsc: {
          name: 'totalScatterCredit'
        },
        ssi: {
          name: 'sumScatterInfo'
        },
        fRe: {
          name: 'freeGameRemain'
        },
        fta: {
          name: 'freeGameTotal'
        },
        fMx: {
          name: 'freeGameMatrix'
        },
        fTf: {
          name: 'freeGameTableFormat'
        },
        fLn: {
          name: 'freeGamePaylines'
        },
        fa: {
          name: 'freeGameWinAmount'
        },
        bv: {
          name: 'bonusValue'
        },
        bRe: {
          name: 'bonusGameRemain'
        },
        bTa: {
          name: 'bonusGameTotal'
        },
        bpRe: {
          name: 'bonusPlayRemain'
        },
        ba: {
          name: 'bonusGameWinAmount'
        },
        bMx: {
          name: 'bonusGameMatrix'
        },
        bTf: {
          name: 'bonusGameTableFormat'
        },
        v: {
          name: 'version'
        },
        le: {
          name: 'lastEvent'
        },
        mtx: {
          name: 'matrix'
        },
        nrs: {
          name: 'normalGameResult'
        },
        mtx0: {
          name: 'matrix0'
        },
        pLn: {
          name: 'pLines'
        },
        c: {
          name: 'cChar'
        },
        frs: {
          name: 'freeGameResult'
        },
        brs: {
          name: 'bonusGameResult'
        },
        bcz: {
          name: 'bonusCrazy'
        },
        bcm: {
          name: 'bonusCommon'
        },
        ex: {
          name: 'extend'
        },
        isF: {
          name: 'isFinished',
          type: Boolean
        },
        isT: {
          name: 'isTrialMode',
          type: Boolean
        },
        tW: {
          name: 'trialWallet'
        },
        tJ: {
          name: 'trialJpl'
        },
        na: {
          name: 'normalGameWinAmount'
        },
        tJW: {
          name: 'trialJplWin'
        },
        baC: {
          name: 'bgWinAmtCurrent'
        },
        bLn: {
          name: 'betLines'
        },
        bty: {
          name: 'bType'
        },
        cPh: {
          name: 'cbPhase'
        },
        cbMtx: {
          name: 'cbMatrix'
        },
        pro: {
          name: 'promotion'
        },
        pRe: {
          name: 'promotionRemain'
        },
        pTal: {
          name: 'promotionTotal'
        },
        pCd: {
          name: 'promotionCode'
        },
        wm: {
          name: 'wildMultiply'
        },
        nsm: {
          name: 'subSymbols'
        },
        fsm: {
          name: 'freeSubSymbols'
        },
        oRe: {
          name: 'freeSpinOption'
        },
        msm: {
          name: 'mulSetMys'
        },
        // join game
        exD: {
          name: 'extendData'
        },
        mtD: {
          name: 'metaData'
        },
        mDP: {
          name: 'metaDataPromotion'
        },
        mb: {
          name: 'mBet'
        },
        eb: {
          name: 'eBet'
        },
        ed: {
          name: 'eData'
        },
        gCN: {
          name: 'groupChannelName'
        },
        jp: {
          name: 'jackpotInfo'
        },
        ejp: {
          name: 'extraJackpot'
        },
        evjp: {
          name: 'extraVipJackpot'
        },
        // slot spin request
        serviceId: {
          name: 'sId'
        },
        commandId: {
          name: 'cId'
        },
        token: {
          name: 'tkn'
        },
        betId: {
          name: 'bId'
        },
        betLines: {
          name: 'bLn'
        },
        openCell: {
          name: 'cOp'
        },
        sw: {
          name: 'sureWin'
        },
        // error push
        cd: {
          name: 'code'
        },
        cbMx: {
          name: 'commonBonusMatrix'
        },
        czy: {
          name: 'crazy'
        },
        bi: {
          name: 'bInfo'
        },
        ji: {
          name: 'jpInfo'
        },
        mx: {
          name: 'matrix'
        },
        mx0: {
          name: 'matrix0'
        },
        s: {
          name: 'state'
        },
        nbh: {
          name: 'nextBonusPhase'
        },
        bml: {
          name: 'bonusMultiplierList'
        },
        eba: {
          name: 'extraBonusGameWinAmount'
        },
        gm: {
          name: "gambleRemain"
        },
        gta: {
          name: "gambleTotal"
        },
        gex: {
          name: "gambleExpiredTime"
        },
        gc: {
          name: "gambleCount"
        },
        wt: {
          name: 'winType'
        },
        bwc: {
          name: 'bigWinConfig'
        },
        evl: {
          name: 'eventData'
        },
        wq: {
          name: 'winAmountQuest'
        },
        we: {
          name: 'winAmountEvent'
        },
        eId: {
          name: 'eventId'
        },
        qId: {
          name: 'questId'
        },
        bwa: {
          name: 'bigwinAmount'
        },
        wo: {
          name: 'walletType'
        },
        abro: {
          name: "allBonusRoll"
        },
        bro: {
          name: 'bonusRoll'
        },
        nbro: {
          name: 'normalBonusRoll'
        },
        nxbro: {
          name: "nextBonusRolls"
        },
        fbro: {
          name: "freeBonusRolls"
        },
        nud: {
          name: 'nudge'
        },
        swf: {
          name: 'stackWildFormat'
        },
        mul: {
          name: 'multiplier'
        },
        rmul: {
          name: "rightMultiply"
        },
        lmul: {
          name: "leftMultiply"
        },
        frmul: {
          name: "freeRightMultiply"
        },
        flmul: {
          name: "freeLeftMultiply"
        },
        nsw: {
          name: 'normalStackWildFormat'
        },
        fsw: {
          name: 'freeStackWildFormat'
        },
        bph: {
          name: 'bonusPhase'
        },
        jpo: {
          name: 'jackpotOption'
        },
        gMx: {
          name: 'gunMatrix'
        },
        fea: {
          name: 'feature'
        },
        ss: {
          name: "subState"
        },
        rMx: {
          name: 'respinGameMatrix'
        },
        rRe: {
          name: "respinGameRemain"
        },
        frRe: {
          name: "freeRespinRemain"
        },
        nrRe: {
          name: "normalRespinRemain"
        },
        cfa: {
          name: "totalFreeSpinWinAmount"
        },
        rpl: {
          name: "rightNormalGamePayLines"
        },
        rnLn: {
          name: "rightNormalGamePayLines"
        },
        rtwa: {
          name: "rightNormalGameWinAmountTotal"
        },
        ltwa: {
          name: "leftNormalGameWinAmountTotal"
        },
        rtna: {
          name: "rightNormalGameWinAmount"
        },
        lfna: {
          name: "leftNormalGameWinAmount"
        },
        rtfa: {
          name: "rightFreeGameWinAmount"
        },
        lffa: {
          name: "leftFreeGameWinAmount"
        },
        rfLn: {
          name: "rightFreeGamePayLines"
        },
        rtnra: {
          name: "rightRespinGameWinAmount"
        },
        lfnra: {
          name: "leftRespinGameWinAmount"
        },
        nra: {
          name: "respinNormalGameWinAmount"
        },
        fra: {
          name: "respinFreeGameWinAmount"
        },
        rrLn: {
          name: "rightRespinGamePayLines"
        },
        rLn: {
          name: "respinGamePayLines"
        }
      });
      var MsgSendMapping = exports('MsgSendMapping', {
        serviceId: {
          name: 'sId'
        },
        commandId: {
          name: 'cId'
        },
        token: {
          name: 'tkn'
        },
        betId: {
          name: 'bId'
        },
        betLines: {
          name: 'bLn'
        },
        openCell: {
          name: 'cOp'
        },
        option: {
          name: 'opt'
        },
        totalBet: {
          name: 'talB'
        },
        code: {
          name: 'c'
        },
        userId: {
          name: 'uId'
        }
      });
      var MsgTopUserMapping = exports('MsgTopUserMapping', {
        wTp: {
          name: 'winType'
        },
        av: {
          name: 'avatar'
        },
        wAwmt: {
          name: 'winAmount'
        },
        dn: {
          name: 'playerName'
        },
        ul: {
          name: 'userList'
        },
        wAmt: {
          name: 'winAmount'
        },
        t: {
          name: 'time'
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NativeSoundPlayer.ts", ['cc', './env'], function (exports) {
  var cclegacy, _decorator, log, sys, Node, AudioSource, tween, Vec3, warn, error, DEBUG;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      sys = module.sys;
      Node = module.Node;
      AudioSource = module.AudioSource;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
      error = module.error;
    }, function (module) {
      DEBUG = module.DEBUG;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2d38eZL5P9DurGNhhptSL0Y", "NativeSoundPlayer", undefined);

      var ccclass = _decorator.ccclass;
      var NativeSoundPlayer = exports('NativeSoundPlayer', (_dec = ccclass('NativeSoundPlayer'), _dec(_class = /*#__PURE__*/function () {
        function NativeSoundPlayer() {
          this.musicMap = {};
          this.sfxMap = {};
          this.musicList = null;
          this.sfxList = null;
          this.musicAudioNode = null;
          this.currentMusicVolume = 0;
          this.musicAudioSource = null;
          this.subMusicSource = null;
          this.currentMusic = null;
          this._musicTween = null;
          this._tweenChangeMusic = null;
          this._soundTweens = {};
          this._gameNode = null;
          this._isMusicPlaying = false;
          this._playingSfxAudioSources = [];
          this._isAppHide = false;
          this._isThumbMode = false;
          this.webAudioContext = null;
          this._resume_sound_action = null;
        }

        var _proto = NativeSoundPlayer.prototype;

        _proto.init = function init(musicList, sfxList, gameNode) {
          var _this = this;

          log('native sound init');
          this.musicList = musicList;
          this.sfxList = sfxList;
          this.musicList.forEach(function (soundObj) {
            _this.musicMap[soundObj.soundId] = soundObj;
          });
          this.sfxList.forEach(function (soundObj) {
            _this.sfxMap[soundObj.soundId] = soundObj;
          });
          this._gameNode = gameNode;
          this.createMusicAudioSource();

          if (sys.isBrowser && DEBUG) {
            window["NativeSoundPlayer"] = this;
          }
        };

        _proto.createMusicAudioSource = function createMusicAudioSource() {
          if (!this.musicAudioNode) {
            this.musicAudioNode = new Node("MusicAudio");
            this.musicAudioNode.parent = this._gameNode;
            this.musicAudioNode.active = false;
            this.musicAudioSource = this.musicAudioNode.addComponent(AudioSource);
            this.musicAudioSource.playOnAwake = false;
            this.musicAudioSource['isMusicSrc'] = true;
          }
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        };

        _proto.loadDynamicSounds = function loadDynamicSounds(sfxList, callback) {
          var _this2 = this;

          if (sfxList && sfxList.length > 0) {
            sfxList.forEach(function (audioObj) {
              if (audioObj.isMusic) {
                if (!_this2.musicMap[audioObj.soundId]) {
                  _this2.musicMap[audioObj.soundId] = audioObj;
                }
              } else if (audioObj.isEffect) {
                if (!_this2.sfxMap[audioObj.soundId]) {
                  _this2.sfxMap[audioObj.soundId] = audioObj;
                }
              }
            });
            callback && callback();
          } else {
            this.resetAudioMaps();
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key in this.sfxMap) {
            var soundObj = this.sfxMap[_key];

            if (soundObj && soundObj.destroyedOnSwitchMode) {
              if (soundObj.audioSource && soundObj.audioSource.node) {
                soundObj.audioSource.node.destroy();
              }

              this.sfxMap[_key] = null;
              delete this.sfxMap[_key];
            }
          }
        };

        _proto.onEventShow = function onEventShow(isEnableMusic, isEnableSfx) {
          this._isAppHide = false;
          isEnableMusic = isEnableMusic && this._isMusicPlaying;

          if (sys.isBrowser) {
            this.resumeAllSounds(isEnableMusic, isEnableSfx);
          } else {
            if (sys.os == sys.OS.IOS) {
              this.resetSFX(isEnableSfx);
              this.resetMusic(isEnableMusic);
            }

            if (sys.os == sys.OS.WINDOWS) {
              this.resetMusic(isEnableMusic);
            }
          }
        };

        _proto.resumeAllSounds = function resumeAllSounds(isEnableMusic, isEnableSfx) {
          var _this3 = this;

          this.webAudioContext = this.getWebAudioContext();
          if (!this.webAudioContext) return;
          log("resume context music: " + isEnableMusic + " , sfx: " + isEnableSfx + ", webAudioContext state: " + this.webAudioContext.state);

          if (this.webAudioContext.state !== "running") {
            if (this._resume_sound_action) {
              clearTimeout(this._resume_sound_action);
            }

            this._resume_sound_action = setTimeout(function () {
              _this3._resume_sound_action = null;

              _this3.resumeAllSounds(isEnableMusic, isEnableSfx);

              _this3.resumeContext(function () {
                setTimeout(function () {
                  _this3.resumeAllSounds(isEnableMusic, isEnableSfx);
                }, 0.05);
              });
            }, 0.05);
          } else {
            this.resetSFX(isEnableSfx);
          }
        };

        _proto.resumeContext = function resumeContext(callback) {
          var _this4 = this;

          this.webAudioContext = this.getWebAudioContext();

          if (!this.webAudioContext) {
            callback && callback();
            return;
          }

          if (this.webAudioContext.state == "suspended") {
            this.webAudioContext.suspend().then(function () {
              return _this4.webAudioContext.resume().then(function () {
                callback && callback();
              });
            })["catch"](function (e) {
              log("resume context fail with error " + e);
              callback && callback();
            });
          } else {
            return this.webAudioContext.resume().then(function () {
              callback && callback();
            })["catch"](function (e) {
              log("resume context fail with error " + e);
              callback && callback();
            });
          }
        };

        _proto.onEventHide = function onEventHide() {
          this._isAppHide = true;
          this.webAudioContext = this.getWebAudioContext();

          if (this.webAudioContext) {
            this.webAudioContext.suspend();
          } else {
            if (sys.os == sys.OS.IOS) {
              this.currentMusicVolume = this.musicAudioSource.volume;
              this.musicAudioSource.volume = 0;
            }

            if (sys.os == sys.OS.WINDOWS) {
              this.currentMusicVolume = this.musicAudioSource.volume;
              this.musicAudioSource.volume = 0;
              this.pauseMusic();
            }
          }
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (this.musicMap.hasOwnProperty(id) == false) {
            return null;
          }

          if (!this.musicAudioNode.active) {
            this.musicAudioNode.active = true;
          }

          if (this.currentMusic && this.currentMusic.soundId == id && !this.musicAudioSource.playing) {
            this.musicAudioSource.clip = this.currentMusic.audioFile;

            this._playMusic(id, loop, volume);
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.musicAudioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this._playMusic(id, loop, volume);
            }
          }

          this._isMusicPlaying = true;
          log("%cSOUND playMusic", "color:red", id);
        };

        _proto.changeMusic = function changeMusic(id, loop, volume, mixTime) {
          var _this5 = this;

          if (loop === void 0) {
            loop = true;
          }

          if (volume === void 0) {
            volume = 1;
          }

          if (mixTime === void 0) {
            mixTime = 1;
          }

          if (this.musicMap.hasOwnProperty(id) == false) {
            return null;
          }

          if (!this.musicAudioNode.active) {
            this.musicAudioNode.active = true;
          }

          if (!this.currentMusic) {
            this._playMusic(id, loop, volume);

            return;
          }

          if (this.currentMusic.soundId == id) {
            if (!this.musicAudioSource.playing) {
              this._playMusic(id, loop, volume);
            }

            return;
          }

          this._switchMusicAudioSource();

          this._playMusic(id, loop, 0);

          this.fadeMusicTo(mixTime, volume);
          this._tweenChangeMusic && this._tweenChangeMusic.stop();
          this._tweenChangeMusic = tween(this.subMusicSource).to(mixTime, {
            volume: 0
          }).call(function () {
            _this5._tweenChangeMusic = null;

            _this5.subMusicSource.stop();

            _this5.subMusicSource.node.active = false;
          }).start();
          log("%cSOUND change music", "color:red", id);
        };

        _proto._switchMusicAudioSource = function _switchMusicAudioSource() {
          var oldAudioSource = this.musicAudioSource;
          this.subMusicSource = this.subMusicSource || this._createMusicAudioSource();
          this.musicAudioSource = this.subMusicSource;
          this.musicAudioNode = this.subMusicSource.node;
          this.subMusicSource = oldAudioSource;
        };

        _proto._playMusic = function _playMusic(id, loop, volume) {
          this.currentMusic = this.musicMap[id];
          this.musicAudioSource.clip = this.currentMusic.audioFile;
          this.musicAudioSource.play();
          this.musicAudioSource.loop = loop;
          this.musicAudioSource.volume = volume;
          this._isMusicPlaying = true;
          this.webAudioContext = this.getWebAudioContext();
        };

        _proto._createMusicAudioSource = function _createMusicAudioSource() {
          var node = new Node("MusicAudio");
          node.parent = this._gameNode;
          node.active = false;
          var audioSource = node.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource['isMusicSrc'] = true;
          return audioSource;
        };

        _proto.getCurrentMusic = function getCurrentMusic() {
          return this.musicAudioSource;
        };

        _proto.pauseMusic = function pauseMusic() {
          this.currentMusic && this.musicAudioSource.pause();
        };

        _proto.resumeMusic = function resumeMusic() {
          this._isMusicPlaying && this.currentMusic && this.musicAudioSource.play();
        };

        _proto.stopMusic = function stopMusic() {
          this._isMusicPlaying = false;
          this.currentMusic && this.musicAudioSource && this.musicAudioSource.stop();

          if (this._tweenChangeMusic) {
            this._tweenChangeMusic.stop();

            this._tweenChangeMusic = null;

            if (this.subMusicSource) {
              this.subMusicSource.stop();
              this.subMusicSource.node.active = false;
            }
          }
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          this.musicAudioSource.volume = volume;
        };

        _proto.muteMusic = function muteMusic() {
          if (this.musicAudioSource) {
            this.musicAudioSource.volume = 0;
          }
        };

        _proto.unmuteMusic = function unmuteMusic(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          if (this.musicAudioSource) {
            this.musicAudioSource.volume = volume;
          }
        };

        _proto.playSfx = function playSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(id) || this._isAppHide) {
            log("SOUND playSfx, do not have sfx: " + id);
            return null;
          }

          var soundObj = this.sfxMap[id];

          if (!soundObj.audioSource) {
            soundObj.audioSource = this._createSfxAudioSource(soundObj);
          }

          this._discardOnePlayingIfNeeded();

          if (soundObj.audioSource.node) {
            soundObj.audioSource.play();
            soundObj.audioSource.loop = loop;

            if (typeof volume === "number") {
              soundObj.audioSource.volume = volume;
            }
          }

          log("%cSOUND playSfx", "color: blue", id);
          return soundObj.audioSource;
        };

        _proto._createSfxAudioSource = function _createSfxAudioSource(soundObj) {
          var sfxNode = new Node("SFX_" + soundObj.soundId);
          var audioSource = sfxNode.addComponent(AudioSource);
          audioSource.playOnAwake = false;
          audioSource['soundId'] = soundObj.soundId;
          audioSource["ignoreCheckMaxChannel"] = soundObj.ignoreCheckMaxChannel;
          audioSource.clip = soundObj.audioFile;
          sfxNode.parent = this._gameNode;
          sfxNode.setPosition(new Vec3(0, 0, 0));
          sfxNode.on(AudioSource.EventType.STARTED, this._addPlayingAudioSource, this);
          sfxNode.on(AudioSource.EventType.ENDED, this._removePlayingAudioSource, this);
          return audioSource;
        };

        _proto._addPlayingAudioSource = function _addPlayingAudioSource(audioSource) {
          if (this._playingSfxAudioSources.includes(audioSource)) return;

          this._playingSfxAudioSources.push(audioSource);
        };

        _proto._removePlayingAudioSource = function _removePlayingAudioSource(audioSource) {
          var index = this._playingSfxAudioSources.indexOf(audioSource);

          if (index >= 0) this._playingSfxAudioSources.splice(index, 1);

          if (audioSource["isOneShot"]) {
            var soundId = audioSource['soundId'];
            var soundObj = this.sfxMap[soundId];
            soundObj && soundObj.audioSourcePool.push(audioSource);
          }
        };

        _proto._discardOnePlayingIfNeeded = function _discardOnePlayingIfNeeded() {
          if (this._playingSfxAudioSources.length < AudioSource.maxAudioChannel) return;

          for (var i = 0; i < this._playingSfxAudioSources.length; i++) {
            var audioSource = this._playingSfxAudioSources[i];

            if (!audioSource['ignoreCheckMaxChannel']) {
              var index = this._playingSfxAudioSources.indexOf(audioSource);

              log("Sound: discardOnePlaying ", audioSource);

              this._playingSfxAudioSources.splice(index, 1);

              audioSource.stop();
              return;
            }
          }
        };

        _proto.playSfxOneShot = function playSfxOneShot(id, volume, loop) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(id)) {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
            return null;
          }

          this._discardOnePlayingIfNeeded();

          var soundObj = this.sfxMap[id];

          var audioSource = this._getSfxOneShotAudioSource(soundObj);

          if (typeof volume === "number") audioSource.volume = volume;
          audioSource.play();
          audioSource.loop = loop;
          log("SOUND, playSfxOneShot: " + id);
          return audioSource;
        };

        _proto._getSfxOneShotAudioSource = function _getSfxOneShotAudioSource(soundObj) {
          var audioSource = soundObj.audioSourcePool.pop();

          if (!audioSource) {
            audioSource = this._createSfxAudioSource(soundObj);
            audioSource['isOneShot'] = true;
          }

          return audioSource;
        };

        _proto._testMaxAudioChanel = function _testMaxAudioChanel() {
          var _this6 = this;

          var tweenSound = tween(this._gameNode);

          var _loop = function _loop(id) {
            tweenSound.delay(0.05).call(function () {
              _this6.playSfx(id);
            });
          };

          for (var id in this.sfxMap) {
            _loop(id);
          }

          tweenSound.start();
        }
        /**
         * @stop_sfx by soundId, including playOneShot
         */
        ;

        _proto.stopSfx = function stopSfx(soundId) {
          var _this7 = this;

          var soundObj = this.sfxMap[soundId];
          if (!soundObj) return warn("SOUND stopSfx, do not have sfx: " + soundId);

          this._playingSfxAudioSources.forEach(function (audioSource) {
            if (audioSource['soundId'] === soundId) {
              audioSource.playing && audioSource.stop();

              _this7._removePlayingAudioSource(audioSource);
            }
          });
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(audioSource) {
          audioSource.playing && audioSource.stop();

          this._removePlayingAudioSource(audioSource);
        }
        /**
        * @stop_all_sfx including playOneShot
        */
        ;

        _proto.stopAllEffects = function stopAllEffects() {
          this._playingSfxAudioSources.forEach(function (audioSource) {
            return audioSource.stop();
          });

          this._playingSfxAudioSources.length = 0;
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          this._playingSfxAudioSources.forEach(function (audioSource) {
            log("%cSOUND pauseAllEffects", "color: orange", audioSource['soundId']);
            audioSource.pause();
          });
        };

        _proto.setEffectVolume = function setEffectVolume(volume) {
          volume = volume < 0 ? 0 : volume;

          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource) {
              soundObj.audioSource.volume = volume;
              soundObj.audioSourcePool.forEach(function (audioSource) {
                return audioSource.volume = volume;
              });
            }
          }

          this._playingSfxAudioSources.forEach(function (audioSource) {
            return audioSource.volume = volume;
          });
        };

        _proto.resetMusic = function resetMusic(isEnableMusic) {
          var _this8 = this;

          var currentMusicTime = 0;
          tween(this._gameNode).call(function () {
            currentMusicTime = _this8.musicAudioSource.currentTime;

            _this8.musicAudioSource.stop();
          }).call(function () {
            _this8.musicAudioSource.play();
          }).call(function () {
            _this8.musicAudioSource.pause();
          }).call(function () {
            _this8.musicAudioSource.currentTime = currentMusicTime;
            _this8.musicAudioSource.volume = _this8.currentMusicVolume;

            _this8.musicAudioSource.play();

            if (isEnableMusic && !_this8._isThumbMode) {
              _this8.unmuteMusic();
            } else {
              _this8.muteMusic();
            }
          }).start();
        };

        _proto.resetSFX = function resetSFX(isEnableSfx) {
          var audioSources = this._gameNode.getComponentsInChildren(AudioSource);

          audioSources = audioSources.filter(function (it) {
            return it.playing && !it['isMusicSrc'];
          });
          tween(this._gameNode).call(function () {
            audioSources.forEach(function (it) {
              if (it.playing) {
                it['_cacheCurrentTime'] = it.currentTime;
                it.stop();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.play();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.pause();
              }
            });
          }).call(function () {
            audioSources.forEach(function (it) {
              if (it['_cacheCurrentTime']) {
                it.currentTime = it['_cacheCurrentTime'];
                it['_cacheCurrentTime'] = null;
                if (isEnableSfx) it.play();
              }
            });
          }).start();
        };

        _proto.getWebAudioContext = function getWebAudioContext() {
          if (this.musicAudioSource && sys.isBrowser) {
            var player = this.musicAudioSource._player;

            if (player && player._player) {
              var gainNode = player._player._gainNode;

              if (gainNode) {
                return gainNode.context;
              }
            }
          }

          return null;
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          var _this9 = this;

          this._musicTween && this._musicTween.stop();
          this._musicTween = tween(this.musicAudioSource).to(duration, {
            volume: volume
          }).call(function () {
            _this9._musicTween = null;
          }).start();
        };

        _proto.fadeSoundTo = function fadeSoundTo(soundId, duration, volume) {
          var _this10 = this;

          var soundObj = this.sfxMap[soundId];
          if (!soundObj) return error("do not have sound", soundId, soundObj);
          if (!soundObj.audioSource) return error("do not have audio source", soundId, soundObj);

          if (soundObj["tweenSound"]) {
            soundObj["tweenSound"].stop();
            delete this._soundTweens[soundId];
          }

          soundObj["tweenSound"] = tween(soundObj.audioSource).to(duration, {
            volume: volume
          }).call(function () {
            delete soundObj["tweenSound"];
            delete _this10._soundTweens[soundId];
          }).start();
          this._soundTweens[soundId] = soundObj["tweenSound"];
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this._musicTween && this._musicTween.stop();
          this._musicTween = null;
          this.stopMusic();

          for (var soundId in this._soundTweens) {
            var soundObj = this.sfxMap[soundId];

            if (soundObj['tweenSound']) {
              soundObj['tweenSound'].stop();
              delete soundObj['tweenSound'];
              delete this._soundTweens['soundId'];
            }
          }

          this.stopAllEffects();
        };

        _proto.onDestroy = function onDestroy() {
          if (this._resume_sound_action) {
            clearTimeout(this._resume_sound_action);
          }
        };

        return NativeSoundPlayer;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkEnum.ts", ['cc'], function (exports) {
  var cclegacy, Enum;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
    }],
    execute: function () {
      cclegacy._RF.push({}, "69da7hSa1dNqqhzf20lfzP2", "NetworkEnum", undefined);

      var NetworkEvent = exports('NetworkEvent', /*#__PURE__*/function (NetworkEvent) {
        NetworkEvent[NetworkEvent["FAIL_AUTHENTICATION"] = 0] = "FAIL_AUTHENTICATION";
        NetworkEvent[NetworkEvent["FAIL_CONNECT_SERVER"] = 1] = "FAIL_CONNECT_SERVER";
        NetworkEvent[NetworkEvent["SLOW_CONNECTION"] = 2] = "SLOW_CONNECTION";
        NetworkEvent[NetworkEvent["SOCKET_LOST_CONNECTION"] = 3] = "SOCKET_LOST_CONNECTION";
        NetworkEvent[NetworkEvent["SOCKET_RESUME_CONNECTION"] = 4] = "SOCKET_RESUME_CONNECTION";
        NetworkEvent[NetworkEvent["RESUME_CONNECTION"] = 5] = "RESUME_CONNECTION";
        NetworkEvent[NetworkEvent["TIMEOUT_REQUEST_DIE"] = 6] = "TIMEOUT_REQUEST_DIE";
        NetworkEvent[NetworkEvent["TIMEOUT_REQUEST_WAIT"] = 7] = "TIMEOUT_REQUEST_WAIT";
        NetworkEvent[NetworkEvent["BACKEND_ERROR_CODE"] = 8] = "BACKEND_ERROR_CODE";
        NetworkEvent[NetworkEvent["WALLET_ERROR_CODE"] = 9] = "WALLET_ERROR_CODE";
        NetworkEvent[NetworkEvent["MISMATCH_DATA"] = 10] = "MISMATCH_DATA";
        NetworkEvent[NetworkEvent["USER_LOGOUT"] = 11] = "USER_LOGOUT";
        NetworkEvent[NetworkEvent["PROMOTION_ERROR"] = 12] = "PROMOTION_ERROR";
        NetworkEvent[NetworkEvent["SOCKET_CONNECTED"] = 13] = "SOCKET_CONNECTED";
        return NetworkEvent;
      }({}));
      var NetworkState = exports('NetworkState', /*#__PURE__*/function (NetworkState) {
        NetworkState[NetworkState["NOT_CONNECT"] = 0] = "NOT_CONNECT";
        NetworkState[NetworkState["CONNECTED"] = 1] = "CONNECTED";
        NetworkState[NetworkState["LOST_CONNECTION"] = 2] = "LOST_CONNECTION";
        NetworkState[NetworkState["WAITING_RESPONSE"] = 3] = "WAITING_RESPONSE";
        NetworkState[NetworkState["DISCONNECTED"] = 4] = "DISCONNECTED";
        return NetworkState;
      }({}));
      Enum(NetworkState);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './colyseus-cocos-creator.mjs_cjs=&original=.js', './colyseus-cocos-creator.js'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "71e93dmWd9PdZV5TvaVb08n", "NetworkManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NetworkManager = exports('NetworkManager', (_dec = ccclass('NetworkManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NetworkManager, _Component);

        function NetworkManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "hostname", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "port", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useSSL", _descriptor3, _assertThisInitialized(_this));

          _this.client = void 0;
          _this.room = void 0;
          return _this;
        }

        var _proto = NetworkManager.prototype;

        _proto.start = function start() {
          // Instantiate Colyseus Client
          // connects into (ws|wss)://hostname[:port]
          this.client = new _cjsExports.Client((this.useSSL ? "wss" : "ws") + "://" + this.hostname + ([443, 80].includes(this.port) || this.useSSL ? "" : ":" + this.port)); // Connect into the room

          this.connect();
        };

        _proto.connect = /*#__PURE__*/function () {
          var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return this.client.joinOrCreate("my_room");

                case 3:
                  this.room = _context.sent;
                  console.log("joined successfully!");
                  console.log("user's sessionId:", this.room.sessionId);
                  this.room.onStateChange(function (state) {
                    console.log("onStateChange: ", state);
                  });
                  this.room.onLeave(function (code) {
                    console.log("onLeave:", code);
                  });
                  _context.next = 13;
                  break;

                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](0);
                  console.error(_context.t0);

                case 13:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[0, 10]]);
          }));

          function connect() {
            return _connect.apply(this, arguments);
          }

          return connect;
        }();

        return NetworkManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hostname", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "localhost";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "port", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2567;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "useSSL", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OnDemandLoadingControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './BaseDynamicLoading.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, instantiate, EventNames, BaseDynamicLoading;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      instantiate = module.instantiate;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      BaseDynamicLoading = module.BaseDynamicLoading;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1787ebaYKNMCqNM5Fq1HTkU", "OnDemandLoadingControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpawnObjectData = exports('SpawnObjectData', function SpawnObjectData(spawnObject, id) {
        this.spawnObject = void 0;
        this.id = void 0;
        this.spawnObject = spawnObject;
        this.id = id;
      });
      var OnDemandLoadingControl = exports('OnDemandLoadingControl', (_dec = ccclass('OnDemandLoadingControl'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDynamicLoading) {
        _inheritsLoose(OnDemandLoadingControl, _BaseDynamicLoading);

        function OnDemandLoadingControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDynamicLoading.call.apply(_BaseDynamicLoading, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "loading", _descriptor, _assertThisInitialized(_this));

          _this._usingObjects = [];
          return _this;
        }

        var _proto = OnDemandLoadingControl.prototype;

        _proto.onEnable = function onEnable() {
          if (this.eventManager) {
            this.eventManager.on(EventNames.CREATE_ON_DEMAND_OBJECT, this.createObjectOnDemand, this);
            this.eventManager.on(EventNames.REMOVE_ON_DEMAND_OBJECT, this.destroyObjectOnDemand, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.eventManager) {
            this.eventManager.off(EventNames.CREATE_ON_DEMAND_OBJECT, this.createObjectOnDemand, this);
            this.eventManager.off(EventNames.REMOVE_ON_DEMAND_OBJECT, this.destroyObjectOnDemand, this);
          }
        };

        _proto.runAsyncLazyLoading = function runAsyncLazyLoading() {
          var _this2 = this;

          var _loop = function _loop() {
            var assetPathConfig = _this2.assetPaths[i];

            if (assetPathConfig) {
              log(">>>> Run Async Lazy Loading for: " + assetPathConfig.path);

              if (assetPathConfig.lazyLoadOnNative && sys.isNative || assetPathConfig.lazyLoadOnWeb && sys.isBrowser) {
                _this2.createObjectOnDemand(assetPathConfig.id, function () {
                  log(">>>> Complete Lazy Loading for: " + assetPathConfig.path);
                }, false);
              }
            }
          };

          for (var i = 0; i < this.assetPaths.length; i++) {
            _loop();
          }
        };

        _proto.runSyncLazyLoading = function runSyncLazyLoading(index) {
          var _this3 = this;

          var assetPathConfig = this.assetPaths[index];

          if (assetPathConfig) {
            log(">>>> Run Sync Lazy Loading for: " + assetPathConfig.path);

            if (assetPathConfig.lazyLoadOnNative && sys.isNative || assetPathConfig.lazyLoadOnWeb && sys.isBrowser) {
              this.createObjectOnDemand(assetPathConfig.id, function () {
                _this3.runSyncLazyLoading(++index);
              }, false);
            } else {
              this.runSyncLazyLoading(++index);
            }
          } else {
            log(">>>> Lazy Load Completed");
          }
        };

        _proto.createObjectOnDemand = function createObjectOnDemand(assetId, callback, isShowLoadingIcon) {
          var _this4 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (isShowLoadingIcon === void 0) {
            isShowLoadingIcon = true;
          }

          var objectToDestroy = this.getObjectSpawnedById(assetId);

          if (objectToDestroy && objectToDestroy.spawnData && objectToDestroy.spawnData.spawnObject) {
            callback && callback();
            return;
          }

          if (this.loading && isShowLoadingIcon) this.loading.active = true;

          var _assetData = this.getAssetLoadedById(assetId);

          if (_assetData && _assetData.asset) {
            this.spawnOnDemandObject(_assetData.asset, _assetData, callback);
          } else {
            var _loop2 = function _loop2() {
              var assetPathConfig = _this4.assetPaths[i];

              if (assetPathConfig && assetPathConfig.id === assetId) {
                _this4._dynamicLoadByPath(assetPathConfig.path, assetPathConfig.id, assetPathConfig.parentNode, function (asset) {
                  _this4.spawnOnDemandObject(asset, assetPathConfig, callback);
                });

                return "break";
              }
            };

            for (var i = 0; i < this.assetPaths.length; i++) {
              var _ret = _loop2();

              if (_ret === "break") break;
            }
          }
        };

        _proto.spawnOnDemandObject = function spawnOnDemandObject(asset, assetData, callback) {
          if (callback === void 0) {
            callback = null;
          }

          var node = instantiate(asset);
          node.active = true;
          node.parent = assetData.parentNode;
          node['sibIndex'] = assetData.index; //node.setSiblingIndex(assetData.id);

          var spawnObject = new SpawnObjectData(node, assetData.id);

          this._usingObjects.push(spawnObject);

          callback && callback();
          if (this.loading) this.loading.active = false;
        };

        _proto.destroyObjectOnDemand = function destroyObjectOnDemand(id, releaseResource, callback) {
          if (callback === void 0) {
            callback = null;
          }

          var objectToDestroy = this.getObjectSpawnedById(id);

          if (objectToDestroy) {
            this._usingObjects.splice(objectToDestroy.index, 1);

            if (objectToDestroy.spawnData) objectToDestroy.spawnData.spawnObject.destroy();
            callback && callback();
          }

          if (releaseResource) {
            var assetData = this.getAssetLoadedById(id);
            this.clearSingleResourceLoaded(assetData);
          }

          if (sys.isNative) {
            log('>>>>> GC Collect in Native at: destroyObjectOnDemand ');
            sys.garbageCollect();
          }
        };

        _proto.getObjectSpawnedById = function getObjectSpawnedById(id) {
          for (var i = 0; i < this._usingObjects.length; i++) {
            if (this._usingObjects[i].id === id) {
              return {
                spawnData: this._usingObjects[i],
                index: i
              };
            }
          }

          return null;
        };

        return OnDemandLoadingControl;
      }(BaseDynamicLoading), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PaginationMrg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, UITransform, Label, Event, Layout, Color, v3, Component, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      UITransform = module.UITransform;
      Label = module.Label;
      Event = module.Event;
      Layout = module.Layout;
      Color = module.Color;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b1842cNMghHxYnluzQMnF6+", "PaginationMrg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PaginationMrg = exports('PaginationMrg', (_dec = ccclass('PaginationMrg'), _dec2 = property({
        type: Button
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PaginationMrg, _Component);

        function PaginationMrg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btns", _descriptor, _assertThisInitialized(_this));

          _this.totalPage = 0;

          _initializerDefineProperty(_this, "preLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextLabel", _descriptor3, _assertThisInitialized(_this));

          _this.clickEvent = null;
          return _this;
        }

        var _proto = PaginationMrg.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.node.on("UPDATE_PAGE", this.updatePage, this);
          this.node.on('RESET_PAGE_INDEX', this.resetPage, this);
          this.node.children.forEach(function (it) {
            return it.active = false;
          });

          if (this.btns && this.btns.length > 0) {
            this.btns.forEach(function (it) {
              it.node.on(Node.EventType.TOUCH_END, _this2.clickPage, _this2);
              it.node['initWidth'] = it.node.getComponent(UITransform).width;
            });
          }
        };

        _proto.clickPage = function clickPage(event) {
          var clickedPage = parseInt(event.target.children[0].getComponent(Label).string);
          this.updatePage(clickedPage, this.totalPage);
          this.clickEvent = new Event('JUMP_TO_PAGE_HISTORY', true);
          this.clickEvent.clickedPage = clickedPage;
          this.node.dispatchEvent(this.clickEvent);
        };

        _proto.updatePage = function updatePage(page, totalPage) {
          var _this3 = this;

          this.preLabel.active = page - 2 > 1 && totalPage > 5;
          this.nextLabel.active = page + 2 < totalPage && totalPage > 5;
          this.totalPage = totalPage;
          var value = -1;

          switch (true) {
            case totalPage <= 5:
              value = 1;
              break;

            case totalPage > page + 1:
              value = page - 2 <= 0 ? 1 : page - 2;
              break;

            case totalPage <= page + 1:
              value = totalPage - 4;
              break;
          }

          this.btns.forEach(function (it, index) {
            if (index < totalPage) _this3.updateLabelValue(it, value + index, page);
          });
          this.updateSizeForEachBtn();
          this.node.getComponent(Layout).updateLayout();
        };

        _proto.resetPage = function resetPage() {
          this.node.children.forEach(function (it) {
            return it.active = false;
          });
        };

        _proto.updateSizeForEachBtn = function updateSizeForEachBtn() {
          var lastBtn = this.btns[this.btns.length - 1];
          var label = lastBtn.node.children[0].getComponent(Label);
          var offset = (label.string.length - 1) * lastBtn.node['initWidth'];
          var newWidth = lastBtn.node['initWidth'] + offset;
          this.preLabel.getComponent(UITransform).width = newWidth;
          this.nextLabel.getComponent(UITransform).width = newWidth;
          this.btns.forEach(function (it) {
            it.node.getComponent(UITransform).width = newWidth;
          });
          this.node.dispatchEvent(new CustomEvent("UPDATE_NAVIGATION_BUTTON_PAGE", true, {
            offset: offset * 3
          }));
        };

        _proto.updateLabelValue = function updateLabelValue(button, value, page) {
          button.node.active = true;
          var label = button.node.children[0].getComponent(Label);
          label.node.active = true;
          label.string = value;
          label.color = value === page ? Color.YELLOW : Color.WHITE;
          var scale = value === page ? 1.3 : 1;
          label.node.setScale(v3(scale, scale, scale));
        };

        return PaginationMrg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btns", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "preLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nextLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolFactory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, NodePool, instantiate, Component, PoolPrefab, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      PoolPrefab = module.PoolPrefab;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f3978/G4gRNPb+ZuiP2JxRv", "PoolFactory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolFactory = exports('PoolFactory', (_dec = ccclass('PoolFactory'), _dec2 = property({
        type: PoolPrefab,
        displayName: 'Pool Prefab List',
        visible: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PoolFactory, _Component);

        function PoolFactory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "poolPrefabList", _descriptor, _assertThisInitialized(_this));

          _this.pools = [];
          return _this;
        }

        var _proto = PoolFactory.prototype;

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < this.poolPrefabList.length; i++) {
            var prefabObject = this.poolPrefabList[i];

            if (prefabObject) {
              var prefabName = prefabObject.prefabName;
              var initialCount = prefabObject.initialCount;
              var prefab = prefabObject.prefab;

              if (prefabName && initialCount && prefab) {
                var aPool = new NodePool(prefabName);

                for (var j = 0; j < initialCount; j++) {
                  var obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                  aPool.put(obj);
                }

                var poolObject = {
                  prefabName: prefabName,
                  prefab: prefab,
                  pool: aPool
                };
                this.pools[i] = poolObject;
              }
            }
          }

          this.node.on("GET_OBJECT", this.getObject, this);
          this.node.on("REMOVE_OBJECT", this.removeObject, this);
          this.setupInstant();
        };

        _proto.setupInstant = function setupInstant() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_POOL_FACTORY", true, {
            poolFactory: this
          }));
        };

        _proto.getObject = function getObject(_prefabName) {
          var obj = null;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var prefabName = poolObject.prefabName,
                  prefab = poolObject.prefab,
                  pool = poolObject.pool;

              if (prefabName == _prefabName) {
                if (pool.size() > 0) {
                  obj = pool.get();
                } else {
                  obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                }

                break;
              }
            }
          }

          return obj;
        };

        _proto.removeObject = function removeObject(node) {
          var name = node.name;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var _this$pools$i = this.pools[i],
                  prefabName = _this$pools$i.prefabName,
                  pool = _this$pools$i.pool;

              if (name == prefabName) {
                node.active = false;
                pool.put(node);
                break;
              }
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var pool = poolObject.pool;

              if (pool) {
                pool.clear();
              }

              poolObject.prefab = null;
            }
          }

          this.pools = [];
          this.pools = null;
          this.poolPrefabList = [];
          this.poolPrefabList = null;
          this.node.off("GET_OBJECT", this.getObject, this);
          this.node.off("REMOVE_OBJECT", this.removeObject, this);
        };

        return PoolFactory;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "poolPrefabList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuestData.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2a845RUptlOp5ODbU2KY7+K", "QuestData", undefined);

      var QuestData = exports('QuestData', /*#__PURE__*/function () {
        function QuestData() {
          this.eventInfo = void 0;
          this.taskData = [];
          this.questProcess = [];
          this.winAmountQuest = 0;
          this.winAmountEvent = 0;
          this.finishedCurrent = false;
          this.hasUpdate = false;
          this.active = false;
          this.receivedServerFinish = false;
          this.startedShowAnim = false;
          this.finishedShowAnim = false;
        }

        var _proto = QuestData.prototype;

        _proto.initQuestData = function initQuestData(data) {
          log("initQuestData " + data);
          var params = data.split(',');
          var questInfo = params[0].split(';');
          var questTime = questInfo[3].split('/');
          var questActive = questInfo[4] === '1';
          this.eventInfo = {
            inited: true,
            eventTitle: questInfo[0],
            eventId: questInfo[1],
            questId: questInfo[2],
            serverTime: parseInt(questTime[0]),
            endTime: parseInt(questTime[1]),
            currentIndex: 0,
            periodTime: this.parseTimePeriod(questInfo[5]),
            progressStatus: parseInt(questInfo[6]),
            eventType: parseInt(questInfo[7]),
            isCurrentGame: false,
            isFinished: false
          };
          this.active = questActive;
          this.taskData = this.parseTaskArray(params.slice(2, params.length).join(','));
          this.questProcess = this.mapQuestData(params[1].split(';'));
          this.eventInfo.isCurrentGame = this.eventInfo.progressStatus == 1;
          this.finishedCurrent = this.eventInfo.progressStatus == 2;
          this.receivedServerFinish = false;

          if (!this.finishedCurrent) {
            this.winAmountQuest = 0;
            this.startedShowAnim = false;
          }
        };

        _proto.updateQuestData = function updateQuestData(taskArray) {
          for (var i = 0; i < taskArray.length; i++) {
            var task = this.taskData[i];
            var params = taskArray[i].split(';');
            var progress = params[2].split('/');
            var current = parseInt(progress[0]);
            var total = parseInt(progress[1]);
            task['ProgressStr'] = current + "/" + total;
            task['Progress'] = Number(progress[0]) / Number(progress[1]);
            task['Finished'] = task['Progress'] == 1;
          }

          this.hasUpdate = true;
        };

        _proto.getCurrentGame = function getCurrentGame() {
          var result = null;

          if (this.questProcess) {
            this.questProcess.forEach(function (game) {
              if (game.isValid) {
                result = game.gameId;
              }
            });
          }

          return result;
        };

        _proto.setWinAmount = function setWinAmount(winAmountQuest, winAmountEvent) {
          if (winAmountQuest) {
            this.winAmountQuest = winAmountQuest;
          }

          if (winAmountEvent) {
            this.winAmountEvent = winAmountEvent;
          }
        };

        _proto.resetWinAmount = function resetWinAmount() {
          this.winAmountQuest = 0;
          this.winAmountEvent = 0;
        };

        _proto.parseTaskArray = function parseTaskArray(taskArrString) {
          var _this = this;

          var result = [];
          var taskArray = taskArrString.split(',');
          taskArray.forEach(function (it) {
            var task = _this.parseTask(it);

            result.push(task);
          });
          return result;
        };

        _proto.parseTask = function parseTask(taskString) {
          var params = taskString.split(';');
          var progressArr = params[2].split('/');
          var current = parseInt(progressArr[0]);
          var total = parseInt(progressArr[1]);
          var progress = Number(progressArr[0]) / Number(progressArr[1]);
          var task;
          task = {
            Id: params[0],
            Des: params[1],
            Current: current,
            Total: total,
            ProgressStr: current + "/" + total,
            Progress: progress,
            Finished: progress == 1
          };
          return task;
        };

        _proto.parseTimePeriod = function parseTimePeriod(periodString) {
          var result = [];

          if (periodString != "") {
            var periods = periodString.split("_");

            for (var i = 0; i < periods.length; i++) {
              var time = periods[i].split("-");
              var startTime = parseFloat(time[0].replace(":", "."));
              var endTime = parseFloat(time[1].replace(":", "."));
              result.push([startTime, endTime]);
            }
          }

          return result;
        };

        _proto.questComplete = function questComplete(data) {
          var params = data.split(',');
          var questInfo = params[0].split(';');
          this.eventInfo.progressStatus = parseInt(questInfo[6]);
          this.eventInfo.isCurrentGame = this.eventInfo.progressStatus == 1;
          this.questProcess = this.mapQuestData(params[1].split(';'));
        };

        _proto.mapQuestData = function mapQuestData(data) {
          var result = [];
          var isFirstQuest = true;
          this.eventInfo.isFinished = true;

          for (var index = 0; index < data.length; index++) {
            var detail = data[index].split('-');
            var isFinished = String(true) === detail[2];
            var isValid = !isFinished && isFirstQuest;
            var betIds = detail[3].split(':');

            if (!isFinished) {
              this.eventInfo.isFinished = false;
            }

            result.push({
              gameId: detail[0],
              winAmount: Number(detail[1]),
              isFinished: isFinished,
              isValid: isValid,
              index: index,
              betIds: betIds
            });

            if (isValid) {
              isFirstQuest = false;
              this.eventInfo.currentIndex = index;
            }
          }

          return result;
        };

        _proto.formatTaskData = function formatTaskData(data) {
          var _this2 = this;

          var tasks = data.eventData;
          var updatedTask = [];
          tasks.forEach(function (it) {
            updatedTask.push(_this2.parseTask(it));
          });
          this.taskData = updatedTask;
        };

        _proto.reset = function reset() {
          this.taskData.forEach(function (task) {
            task.Finished = false;
            task.Current = 0;
            task.Progress = 0;
            task.ProgressStr = "0/" + task.Total;
          });
          this.startedShowAnim = false;
          this.finishedShowAnim = false;
        };

        return QuestData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RotateIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "35b3aU1vVhLG6FoV0dMzMQW", "RotateIcon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RotateIcon = exports('RotateIcon', (_dec = ccclass('RotateIcon'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RotateIcon, _Component);

        function RotateIcon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "direction", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor3, _assertThisInitialized(_this));

          _this._onHover = null;
          _this._onMouseOut = null;
          _this.tweenRotate = null;
          return _this;
        }

        var _proto = RotateIcon.prototype;

        _proto.onLoad = function onLoad() {
          this._onHover = this.onHover.bind(this);
          this._onMouseOut = this.onMouseOut.bind(this);

          if (this.targetNode) {
            this.targetNode.on(Node.EventType.MOUSE_ENTER, this._onHover);
            this.targetNode.on(Node.EventType.MOUSE_LEAVE, this._onMouseOut);
            this.targetNode.on("BUTTON_SPIN_SHOW", this.showIcon, this);
            this.targetNode.on("BUTTON_SPIN_HIDE", this.hideIcon, this);
          }
        };

        _proto.start = function start() {
          this.rotateIcon();
        };

        _proto.showIcon = function showIcon() {
          setOpacity(this.node, 255);
        };

        _proto.hideIcon = function hideIcon() {
          setOpacity(this.node, 0);
        };

        _proto.onHover = function onHover() {
          this.rotateIcon(1);
        };

        _proto.onMouseOut = function onMouseOut() {
          this.rotateIcon();
        };

        _proto.rotateIcon = function rotateIcon(timeStep) {
          if (timeStep === void 0) {
            timeStep = 2;
          }

          timeStep /= this.speed;
          this.tweenRotate && this.tweenRotate.stop();
          this.tweenRotate = tween(this.node);
          this.tweenRotate.by(timeStep, {
            angle: -360 * this.direction
          }).repeatForever().start();
        };

        _proto.onEnable = function onEnable() {
          this.rotateIcon();
        };

        _proto.onDestroy = function onDestroy() {
          this.tweenRotate && this.tweenRotate.stop();
        };

        return RotateIcon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "direction", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScreenOrientationControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CanvasScaleByOrientation.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, game, sys, settings, Settings, view, ResolutionPolicy, Component, Size, CanvasScaleByOrientation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      sys = module.sys;
      settings = module.settings;
      Settings = module.Settings;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
      Size = module.Size;
    }, function (module) {
      CanvasScaleByOrientation = module.CanvasScaleByOrientation;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "83e61WQNGlGjYAM2fCdDGW1", "ScreenOrientationControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScreenOrientationControl = exports('ScreenOrientationControl', (_dec = ccclass('ScreenOrientationControl'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScreenOrientationControl, _Component);

        function ScreenOrientationControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "portraitDesignResolution", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "landscapeDesignResolution", _descriptor2, _assertThisInitialized(_this));

          _this._canvasScaleComp = void 0;
          return _this;
        }

        var _proto = ScreenOrientationControl.prototype;

        _proto.start = function start() {
          this._canvasScaleComp = this.getComponent(CanvasScaleByOrientation);

          if (this._canvasScaleComp && game.config && sys.isMobile) {
            var _settings$querySettin;

            var orientation = (_settings$querySettin = settings.querySettings(Settings.Category.SCREEN, 'orientation')) != null ? _settings$querySettin : 'auto';

            if (orientation == "portrait") {
              this._canvasScaleComp.isPortrait = true;
              this.setPortraitDS();
            } else {
              this._canvasScaleComp.isPortrait = false;
              this.setLandscapeDS();
            }

            this._canvasScaleComp.scaleCanvasByOrientation();
          }
        };

        _proto.setPortraitDS = function setPortraitDS() {
          view.setDesignResolutionSize(this.portraitDesignResolution.width, this.portraitDesignResolution.height, ResolutionPolicy.FIXED_WIDTH);
        };

        _proto.setLandscapeDS = function setLandscapeDS() {
          view.setDesignResolutionSize(this.landscapeDesignResolution.width, this.landscapeDesignResolution.height, ResolutionPolicy.FIXED_HEIGHT);
        };

        return ScreenOrientationControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "portraitDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(720, 1280);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "landscapeDesignResolution", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(1560, 720);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/serviceRest.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e18ccAUCBxLoaFRV2OtkUct", "serviceRest", undefined); // Rest API to connect to server


      var ServiceRest = /*#__PURE__*/function () {
        function ServiceRest() {
          this.request = void 0;
          this.request = new XMLHttpRequest();
        }

        var _proto = ServiceRest.prototype;

        _proto.encodeQueryData = function encodeQueryData(data) {
          return Object.keys(data).map(function (key) {
            return [key, data[key]].map(encodeURIComponent).join("=");
          }).join("&");
        };

        _proto.getRawDataWeb = function getRawDataWeb(_ref) {
          var _ref$fullURL = _ref.fullURL,
              fullURL = _ref$fullURL === void 0 ? '' : _ref$fullURL,
              _ref$callback = _ref.callback,
              callback = _ref$callback === void 0 ? function (data) {} : _ref$callback,
              _ref$callbackErr = _ref.callbackErr,
              callbackErr = _ref$callbackErr === void 0 ? function (e) {} : _ref$callbackErr;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr(null);
                }
              }
            } else if (request.readyState === 0) {
              callbackErr(null);
            }

            if (request.status !== 200) {
              callbackErr(null);
            }
          };

          request.ontimeout = function (e) {
            callbackErr(e);
          };

          request.onerror = function (e) {
            callbackErr(e);
          };

          request.send();
        };

        _proto.get = function get(_ref2) {
          var _ref2$url = _ref2.url,
              url = _ref2$url === void 0 ? '' : _ref2$url,
              _ref2$params = _ref2.params,
              params = _ref2$params === void 0 ? {} : _ref2$params,
              _ref2$callback = _ref2.callback,
              callback = _ref2$callback === void 0 ? function (data) {} : _ref2$callback,
              _ref2$apiUrl = _ref2.apiUrl,
              apiUrl = _ref2$apiUrl === void 0 ? '' : _ref2$apiUrl,
              _ref2$callbackErr = _ref2.callbackErr,
              callbackErr = _ref2$callbackErr === void 0 ? function () {} : _ref2$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  try {
                    var content = JSON.parse(request.responseText);
                    callback(content);
                  } catch (e) {
                    callbackErr();
                  }
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send();
        };

        _proto.getWithHeader = function getWithHeader(_ref3) {
          var _ref3$url = _ref3.url,
              url = _ref3$url === void 0 ? '' : _ref3$url,
              _ref3$params = _ref3.params,
              params = _ref3$params === void 0 ? {} : _ref3$params,
              _ref3$headers = _ref3.headers,
              headers = _ref3$headers === void 0 ? {} : _ref3$headers,
              _ref3$callback = _ref3.callback,
              callback = _ref3$callback === void 0 ? function (data) {} : _ref3$callback,
              _ref3$apiUrl = _ref3.apiUrl,
              apiUrl = _ref3$apiUrl === void 0 ? '' : _ref3$apiUrl,
              _ref3$callbackErr = _ref3.callbackErr,
              callbackErr = _ref3$callbackErr === void 0 ? function () {} : _ref3$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function () {
            callbackErr();
          };

          request.onerror = function () {
            callbackErr();
          };

          request.send();
        };

        _proto.post = function post(_ref4) {
          var _ref4$url = _ref4.url,
              url = _ref4$url === void 0 ? '' : _ref4$url,
              _ref4$data = _ref4.data,
              data = _ref4$data === void 0 ? {} : _ref4$data,
              _ref4$callback = _ref4.callback,
              callback = _ref4$callback === void 0 ? function (data) {} : _ref4$callback,
              _ref4$apiUrl = _ref4.apiUrl,
              apiUrl = _ref4$apiUrl === void 0 ? '' : _ref4$apiUrl,
              _ref4$callbackErr = _ref4.callbackErr,
              callbackErr = _ref4$callbackErr === void 0 ? function () {} : _ref4$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postWithHeader = function postWithHeader(_ref5) {
          var _ref5$url = _ref5.url,
              url = _ref5$url === void 0 ? '' : _ref5$url,
              _ref5$params = _ref5.params,
              params = _ref5$params === void 0 ? {} : _ref5$params,
              _ref5$headers = _ref5.headers,
              headers = _ref5$headers === void 0 ? {} : _ref5$headers,
              _ref5$data = _ref5.data,
              data = _ref5$data === void 0 ? {} : _ref5$data,
              _ref5$callback = _ref5.callback,
              callback = _ref5$callback === void 0 ? function (data) {} : _ref5$callback,
              _ref5$apiUrl = _ref5.apiUrl,
              apiUrl = _ref5$apiUrl === void 0 ? '' : _ref5$apiUrl,
              _ref5$callbackErr = _ref5.callbackErr,
              callbackErr = _ref5$callbackErr === void 0 ? function () {} : _ref5$callbackErr;
          var dataPost = JSON.stringify(data);
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/json');
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postRaw = function postRaw(_ref6) {
          var _ref6$url = _ref6.url,
              url = _ref6$url === void 0 ? '' : _ref6$url,
              _ref6$data = _ref6.data,
              data = _ref6$data === void 0 ? {} : _ref6$data,
              _ref6$callback = _ref6.callback,
              callback = _ref6$callback === void 0 ? function (data) {} : _ref6$callback,
              _ref6$apiUrl = _ref6.apiUrl,
              apiUrl = _ref6$apiUrl === void 0 ? '' : _ref6$apiUrl,
              _ref6$callbackErr = _ref6.callbackErr,
              callbackErr = _ref6$callbackErr === void 0 ? function () {} : _ref6$callbackErr;
          var dataPost = data;
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.status == 200) {
              callback({
                status: request.status,
                data: request.responseText
              });
            } else {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.put = function put(_ref7) {
          var _ref7$url = _ref7.url,
              url = _ref7$url === void 0 ? '' : _ref7$url,
              _ref7$data = _ref7.data,
              data = _ref7$data === void 0 ? {} : _ref7$data,
              _ref7$callback = _ref7.callback,
              callback = _ref7$callback === void 0 ? function (data) {} : _ref7$callback,
              _ref7$apiUrl = _ref7.apiUrl,
              apiUrl = _ref7$apiUrl === void 0 ? '' : _ref7$apiUrl,
              _ref7$callbackErr = _ref7.callbackErr,
              callbackErr = _ref7$callbackErr === void 0 ? function () {} : _ref7$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('PUT', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        return ServiceRest;
      }();

      var apiObject = exports('default', new ServiceRest());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Setting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './loadConfigAsync.ts', './SlotUIScene.ts', './ToggleMotion.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, UITransform, size, Label, CustomEvent, loadConfigAsync, SlotUIScene, ToggleMotion;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      UITransform = module.UITransform;
      size = module.size;
      Label = module.Label;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      ToggleMotion = module.ToggleMotion;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f751eo/iN5HpYdMIclyjrpe", "Setting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Setting = exports('Setting', (_dec = ccclass('Setting'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(Setting, _SlotUIScene);

        function Setting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BGMCheckBox", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SFXCheckBox", _descriptor2, _assertThisInitialized(_this));

          _this.initialized = false;
          _this.toggleNode = null;
          return _this;
        }

        var _proto = Setting.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.node.on("TOGGLE_SFX", this.sfxToggle, this);
          this.node.on("TOGGLE_BGM", this.bgmToggle, this);
          this.initialized = false;
          this.addCheat();
        };

        _proto.start = function start() {
          _SlotUIScene.prototype.start.call(this);

          this.init();
        };

        _proto.init = function init() {
          this.BGMCheckBox.getComponent(Toggle).isChecked = false;
          this.SFXCheckBox.getComponent(Toggle).isChecked = false;

          if (this.soundPlayer && this.soundPlayer.isEnableBGM) {
            this.BGMCheckBox.getComponent(Toggle).isChecked = true;
          }

          if (this.soundPlayer && this.soundPlayer.isEnableSFX) {
            this.SFXCheckBox.getComponent(Toggle).isChecked = true;
          }

          this.initialized = true;
        };

        _proto.syncSetting = function syncSetting() {
          if (this.soundPlayer) {
            var toggleMusic = this.BGMCheckBox.getComponent(Toggle);
            var toggleSfx = this.SFXCheckBox.getComponent(Toggle);
            var toggleMotionMusic = this.BGMCheckBox.getComponent(ToggleMotion);
            var toggleMotionSfx = this.SFXCheckBox.getComponent(ToggleMotion);

            if (toggleMusic) {
              toggleMusic.isChecked = this.soundPlayer.isEnableBGM;
            }

            if (toggleSfx) {
              toggleSfx.isChecked = this.soundPlayer.isEnableSFX;
            }

            if (toggleMotionMusic) {
              toggleMotionMusic.setChecked(this.soundPlayer.isEnableBGM);
            }

            if (toggleMotionSfx) {
              toggleMotionSfx.setChecked(this.soundPlayer.isEnableSFX);
            }
          }
        };

        _proto.sfxToggle = function sfxToggle() {
          if (this.soundPlayer && this.initialized) {
            this.soundPlayer.setEffectEnable(this.SFXCheckBox.getComponent(Toggle).isChecked);
            this.soundPlayer.playSFXClick();
          }
        };

        _proto.bgmToggle = function bgmToggle() {
          if (this.soundPlayer && this.initialized) {
            this.soundPlayer.playSFXClick();
            this.soundPlayer.setBgmEnable(this.BGMCheckBox.getComponent(Toggle).isChecked);
          }
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.onJackpotHistory = function onJackpotHistory() {
          this.guiMgr.showJackpotHistory();
        };

        _proto.onBetHistory = function onBetHistory() {
          this.guiMgr.showBetHistory();
        };

        _proto.addCheat = function addCheat() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC.IS_PRODUCTION;

          if (!IS_PRODUCTION && CC_DEBUG) {
            this.toggleNode = new Node();
            this.toggleNode.addComponent(Toggle);
            this.toggleNode.setParent(this.node);
            this.toggleNode.getComponent(UITransform).setContentSize(size(80, 80));
            this.toggleNode.setPosition(540, 0, 0);
            var labelNode = new Node();
            labelNode.addComponent(Label);
            labelNode.getComponent(Label).fontSize = 18;
            labelNode.setParent(this.toggleNode);
            labelNode.getComponent(Label).string = "";
            var toggleCom = this.toggleNode.getComponent(Toggle);
            toggleCom.isChecked = false;
            this.toggleNode.on('toggle', function () {
              var text = toggleCom.isChecked ? "SLOW NETWORK" : "";
              labelNode.getComponent(Label).string = text;
              var event = new CustomEvent("FORCE_NETWORK_GLT", true);
              event['userData'] = {
                isForced: toggleCom.isChecked
              };

              _this2.node.dispatchEvent(event);
            }, this);
          }
        };

        return Setting;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BGMCheckBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "SFXCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, formatUserName, formatMoney, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      formatUserName = module.formatUserName;
      formatMoney = module.formatMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "bf277BKxGRIurmcCjhQ7qxh", "SlotBaseCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseCellHistory = exports('SlotBaseCellHistory', (_dec = ccclass('SlotBaseCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBaseCellHistory, _GameObject);

        function SlotBaseCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "account", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "addSecond", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["updateData"] = this.updateData.bind(this);
        };

        _proto.updateData = function updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = this.formatTimeStamp(data.time);
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = formatMoney(data.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
        };

        _proto.formatTimeStamp = function formatTimeStamp(ts, hasYear) {
          var d = new Date(ts);
          var h = addZero(d.getHours());
          var m = addZero(d.getMinutes());
          var s = this.addSecond ? ':' + addZero(d.getSeconds()) : '';
          var t = addZero(d.getDate()) + '/' + addZero(d.getMonth() + 1) + (hasYear ? '/' + d.getFullYear() : '') + ' ' + h + ':' + m + s;
          return t;
        };

        _proto.formatTimeStampNew = function formatTimeStampNew(data) {
          var date = new Date(data);
          var year = date.getFullYear() + 1900;
          var month = "0" + date.getMonth() + 1;
          var day = "0" + date.getUTCDate();
          var hours = date.getHours();
          var minutes = "0" + date.getMinutes();
          var seconds = "0" + date.getSeconds();
          var formattedTime = day.substr(-2) + "/" + month.substr(-2) + "/" + year + " " + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
          return formattedTime;
        };

        return SlotBaseCellHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "account", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "addSecond", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Label, warn, apiObject, loadConfigAsync, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      warn = module.warn;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "04cbf1irFBFsYc3cG7vgOMH", "SlotBaseHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseHistory = exports('SlotBaseHistory', (_dec = ccclass('SlotBaseHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Button
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBaseHistory, _GameObject);

        function SlotBaseHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.currentPage = 0;
          _this.totalPage = 0;
          _this.betIds = '';
          _this.gameId = null;
          _this.url = '';
          _this.jpPrefix = '';
          _this.jpList = '';
          _this.token = '';

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageIndexView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPerPage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loading", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "backBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeButton", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMessage", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hasExtraBet", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isBetHistory", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyTableTitle", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyDetailTitle", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageText", _descriptor13, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
        };

        _proto.initBase = function initBase() {
          this.currentPage = 1;
          this.totalPage = 1;
          this.stopLoading();
          this.table.getComponent('SlotBaseTableHistory').initCells(this.itemPerPage);
          if (this.historyTableTitle) this.historyTableTitle.active = true;
          if (this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.openPanel = function openPanel() {
          this.node.active = true; //TODO set opacity 255

          this.currentPage = 1;

          if (this.currentPage == 1) {
            this.backBtn.getComponent(Button).interactable = false;
            this.nextBtn.getComponent(Button).interactable = false;
          }

          this.pageIndexView.getComponent(Label).string = this.currentPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.playLoading = function playLoading() {
          this.loading.active = true;
        };

        _proto.stopLoading = function stopLoading() {
          this.loading.active = false;
        };

        _proto.onNextButton = function onNextButton() {
          this.playSoundClick();
          this.nextBtn.getComponent(Button).interactable = false;
          this.currentPage += 1;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.onPreviousButton = function onPreviousButton() {
          this.playSoundClick();
          if (this.currentPage == 1) return;
          this.backBtn.getComponent(Button).interactable = false;
          this.currentPage -= 1;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer.playSFXClick();
        };

        _proto.requestDataPage = function requestDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var betIds = this.betIds;
          var IS_SUPPORT_EVENT = this.config.IS_SUPPORT_EVENT;
          var headers = null;

          if (this.token) {
            headers = Object.create(null);
            headers.Authorization = this.token;
          }

          var requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity,
            type: this.jpList,
            betIds: betIds
          };

          if (IS_SUPPORT_EVENT) {
            requestParams.version = "3";
          }

          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr, headers);
        };

        _proto.requestBetDataPage = function requestBetDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var headers = null;

          if (this.token) {
            headers = {
              Authorization: this.token
            };
          }

          var requestParams = {
            serviceId: this.gameId,
            from: from,
            size: quantity
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr, headers);
        };

        _proto.requestHistory = function requestHistory(requestParams, callback, callbackErr, headers) {
          if (requestParams === void 0) {
            requestParams = {};
          }

          if (headers === void 0) {
            headers = null;
          }

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (!this.gameId) {
            warn("GameId has not been set");
            callback({});
            return;
          }

          var currencyCode = this.getCurrencyCode();

          if (currencyCode) {
            requestParams['c'] = currencyCode;
          }

          if (headers) {
            apiObject.getWithHeader({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              headers: headers,
              apiUrl: API_URL
            });
          } else {
            apiObject.get({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              apiUrl: API_URL
            });
          }
        };

        _proto.requestErr = function requestErr() {
          this.stopLoading();

          if (this.errorMessage) {
            this.errorMessage.active = true;
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          if (res.error) {
            this.requestErr();
            return; //handle error
          }

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.stopLoading();

          if (!res.error && Object.keys(res).length > 0 && res.data && res.data.length > 0) {
            this.nextBtn.getComponent(Button).interactable = true;
            this.backBtn.getComponent(Button).interactable = true;
            this.pageIndexView.getComponent(Label).string = this.currentPage;
            this.table.emit('UPDATE_DATA', res.data);

            if (this.currentPage == 1) {
              this.backBtn.getComponent(Button).interactable = false;
            }

            if (res.total <= this.currentPage * this.itemPerPage || res.data.length < this.itemPerPage) {
              this.nextBtn.getComponent(Button).interactable = false;
              return;
            }
          } else {
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto.onRequestBetResponse = function onRequestBetResponse(res) {
          if (!res || !res.data || res.error) {
            this.requestErr();
            return;
          }

          this.stopLoading();

          if (this._hasBetData(res)) {
            if (res.data.total) {
              this.totalPage = Math.ceil(res.data.total / this.itemPerPage);
            }

            this.nextBtn.getComponent(Button).interactable = true;
            this.backBtn.getComponent(Button).interactable = true;
            this.pageIndexView.getComponent(Label).string = this.currentPage;
            this.table.emit('UPDATE_DATA', res.data.resultList);

            if (this.currentPage == 1) {
              this.backBtn.getComponent(Button).interactable = false;
            }

            if (res.data.total <= this.currentPage * this.itemPerPage || res.data.resultList.length < this.itemPerPage) {
              this.nextBtn.getComponent(Button).interactable = false;
              return;
            }
          } else {
            this.table.emit('CLEAR_DATA');
          }
        };

        _proto._hasBetData = function _hasBetData(res) {
          return res.data && res.data.resultList && res.data.resultList.length > 0;
        };

        _proto.getCurrencyCode = function getCurrencyCode() {
          if (this.dataStore && this.dataStore.currencyCode) {
            return this.dataStore.currencyCode;
          }

          return null;
        };

        return SlotBaseHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemPerPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 7;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "backBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nextBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "closeButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "hasExtraBet", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "isBetHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "historyTableTitle", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "historyDetailTitle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "pageText", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBaseTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fd1d9XanU5CP4CJb+1Vst6D", "SlotBaseTableHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBaseTableHistory = exports('SlotBaseTableHistory', (_dec = ccclass('SlotBaseTableHistory'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotBaseTableHistory, _Component);

        function SlotBaseTableHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cell", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBaseTableHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_DATA", this.updateData, this);
          this.node.on("CLEAR_DATA", this.clearData, this);
        };

        _proto.initCells = function initCells(itemPerPage) {
          for (var i = 0; i < itemPerPage; ++i) {
            var cell = instantiate(this.cell);
            cell.parent = this.node;
          }
        };

        _proto.updateData = function updateData(data) {
          this.node.children.forEach(function (child, index) {
            if (index < data.length) {
              child.active = true;
              child.updateData(data[index]);
              child._uiProps.colorDirty = true;
            } else {
              child.active = false;
            }
          });
        };

        _proto.clearData = function clearData() {
          this.node.children.forEach(function (child) {
            return child.active = false;
          });
        };

        return SlotBaseTableHistory;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "cell", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Prefab();
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Event, formatMoney, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Event = module.Event;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "ed46a4S3gtDOZYEsTUOuPaV", "SlotBetCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetCellHistory = exports('SlotBetCellHistory', (_dec = ccclass('SlotBetCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBetCellHistory, _GameObject);

        function SlotBetCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "session", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "time", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betAmount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betLines", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dots", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletNormal", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletPromotion", _descriptor8, _assertThisInitialized(_this));

          _this.totalLineCount = '';
          _this.sessionId = '';
          return _this;
        }

        var _proto = SlotBetCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node["updateData"] = this.updateData.bind(this);

          if (this.config.PAY_LINE_ALLWAYS) {
            if (JSON.stringify(this.config.NORMAL_TABLE_FORMAT) === "[3,3,3,3,3]") this.totalLineCount = '243';else this.totalLineCount = 'Allways';
          }
        };

        _proto.updateData = function updateData(data, config) {
          if (!data) return;
          this.sessionId = data.sessionId;
          this.session.getComponent(Label).string = "#" + data.sessionId.substring(data.sessionId.length - 8, data.sessionId.length);
          this.time.getComponent(Label).string = this.formatTimeStamp(parseInt(data.time));
          this.betAmount.getComponent(Label).string = formatMoney(Number(data.totalBetAmount));

          if (this.config.PAY_LINE_ALLWAYS) {
            this.betLines.getComponent(Label).string = this.totalLineCount;
          } else {
            this.betLines.getComponent(Label).string = data.bettingLines;
          }

          this.winAmount.getComponent(Label).string = formatMoney(Number(data.totalWinAmount));
          if (this.dots) this.dots.emit('SHOW_DOTS', data);

          if (data.walletOption > 0) {
            if (this.iconWalletNormal) this.iconWalletNormal.active = false;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = true;
          } else {
            if (this.iconWalletNormal) this.iconWalletNormal.active = true;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = false;
          }

          if (this.dataStore && this.dataStore.getWalletTypes().length < 2) {
            if (this.iconWalletNormal) this.iconWalletNormal.active = false;
            if (this.iconWalletPromotion) this.iconWalletPromotion.active = false;
          }
        };

        _proto.formatTimeStamp = function formatTimeStamp(ts) {
          var d = new Date(ts);
          var h = addZero(d.getHours());
          var m = addZero(d.getMinutes());
          var s = addZero(d.getSeconds());
          var t = addZero(d.getDate()) + '/' + addZero(d.getMonth() + 1) + ' ' + h + ':' + m + ':' + s;
          return t;
        };

        _proto.onClickDetail = function onClickDetail() {
          var event = new Event('OPEN_BET_DETAIL', true);
          event['userData'] = {
            sessionId: this.sessionId
          }; //this.eventManager.emit('OPEN_BET_DETAIL', {sessionId: this.sessionId});

          this.node.dispatchEvent(event);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        return SlotBetCellHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "betAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betLines", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dots", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletNormal", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletPromotion", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseHistory.ts', './globalNetwork.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, SlotBaseHistory, globalNetwork;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      SlotBaseHistory = module.SlotBaseHistory;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "14b5a1WN9FD9JZFzfgoLL9K", "SlotBetHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetHistory = exports('SlotBetHistory', (_dec = ccclass('SlotBetHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseHistory) {
        _inheritsLoose(SlotBetHistory, _SlotBaseHistory);

        function SlotBetHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseHistory.call.apply(_SlotBaseHistory, [this].concat(args)) || this;
          _this.initialized = false;

          _initializerDefineProperty(_this, "historyTable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "historyDetail", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noBetHistoryText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pagination", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxCancel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "page", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
          this.node.on('OPEN_BET_DETAIL', this.openBetDetail, this);
          this.node.on("JUMP_TO_PAGE_HISTORY", this.jumpToPage, this);
          this.node.on("UPDATE_NAVIGATION_BUTTON_PAGE", this.updateNavigationButtonsPage, this);
        };

        _proto.start = function start() {
          this.localizeText();
        };

        _proto.localizeText = function localizeText() {
          var MESSAGE_DIALOG = this.config.MESSAGE_DIALOG;

          if (MESSAGE_DIALOG.ERROR_CONNECTION_HISTORY && this.errorMessage) {
            var label = this.errorMessage.getComponentInChildren(Label) || this.errorMessage.getComponent(Label);
            if (label) label.string = MESSAGE_DIALOG.ERROR_CONNECTION_HISTORY;
          }

          if (this.noBetHistoryText && MESSAGE_DIALOG.NO_BET_HISTORY) {
            var _label = this.noBetHistoryText.getComponentInChildren(Label) || this.noBetHistoryText.getComponent(Label);

            if (_label) _label.string = MESSAGE_DIALOG.NO_BET_HISTORY;
          }

          if (this.pageText) {
            this.pageText.string = MESSAGE_DIALOG.HISTORY_PAGE;
          }
        };

        _proto.initBase = function initBase() {
          if (this.initialized) return;

          _SlotBaseHistory.prototype.initBase.call(this);

          this.historyTable.active = true;
          this.historyDetail.active = false;
          this.backBtn['initPosition'] = this.backBtn.getPosition();
          this.nextBtn['initPosition'] = this.nextBtn.getPosition();
          this.noBetHistoryText.active = false;
          this.initialized = true;
          this.init();
        };

        _proto.init = function init() {
          this.gameId = this.config.GAME_ID;
          this.url = 'history/getHistoryUserSpins';
        };

        _proto.openPanel = function openPanel() {
          this.table.emit('CLEAR_DATA');
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX');
          this.token = globalNetwork.getToken();

          _SlotBaseHistory.prototype.openPanel.call(this);
        };

        _proto.onEnable = function onEnable() {
          var isOpenedFromBO = this.checkCallFromBO();

          if (!isOpenedFromBO) {
            this.openPanel();
          }
        };

        _proto.playLoading = function playLoading() {
          _SlotBaseHistory.prototype.playLoading.call(this);

          this.noBetHistoryText.active = false;
        };

        _proto.onRequestBetResponse = function onRequestBetResponse(res) {
          if (res.error) {
            return; //handle server error;
          }

          _SlotBaseHistory.prototype.onRequestBetResponse.call(this, res);

          if (this._hasBetData(res)) {
            this.noBetHistoryText.active = false;
            this.page && (this.page.active = true);

            if (res.data.total > 0 && this.pagination) {
              this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
            }
          } else {
            this.noBetHistoryText.active = true;
            this.page && (this.page.active = false);
          }
        };

        _proto.openBetDetail = function openBetDetail(event) {
          if (this.historyTable) this.historyTable.active = false;

          if (this.historyDetail) {
            this.historyDetail.active = true;
            this.historyDetail.emit('SHOW_BET_DETAIL', event.userData);
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = false;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = true;
          event.propagationStopped = true;
        };

        _proto.onHideBetDetail = function onHideBetDetail() {
          if (this.historyTable) this.historyTable.active = true;

          if (this.historyDetail) {
            this.historyDetail.active = false;
            this.historyDetail.emit('RESET_UI');
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = true;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.onPlaySfxCancel = function onPlaySfxCancel() {
          if (this.soundPlayer) this.soundPlayer.playSfx(this.sfxCancel);
        };

        _proto.onCloseButton = function onCloseButton() {
          this.soundPlayer.playSFXClick();
        };

        _proto.jumpToPage = function jumpToPage(evt) {
          evt.propagationStopped = true;
          this.playSoundClick();
          this.currentPage = evt.clickedPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.updateNavigationButtonsPage = function updateNavigationButtonsPage(evt) {
          evt.propagationStopped = true;
          var offset = parseInt(evt.details.offset);
          this.backBtn.setPosition(this.backBtn['initPosition'].x - offset, this.backBtn['initPosition'].y);
          this.nextBtn.setPosition(this.nextBtn['initPosition'].x + offset, this.nextBtn['initPosition'].y);
        };

        _proto.checkCallFromBO = function checkCallFromBO() {
          var coms = this.node.parent.components.filter(function (it) {
            return it.name.indexOf('BetHistoryMgr') >= 0;
          });
          return coms.length > 0;
        };

        return SlotBetHistory;
      }(SlotBaseHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "historyTable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "historyDetail", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noBetHistoryText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pagination", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfxCancel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'CLICK';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "page", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './serviceRest.ts', './loadConfigAsync.ts', './globalNetwork.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, ScrollView, Vec2, UITransform, Layout, Button, Toggle, v2, GameObject, apiObject, loadConfigAsync, globalNetwork, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Vec2 = module.Vec2;
      UITransform = module.UITransform;
      Layout = module.Layout;
      Button = module.Button;
      Toggle = module.Toggle;
      v2 = module.v2;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;

      cclegacy._RF.push({}, "776c8mkk7pF5K5gUQ64D2/g", "SlotBetHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetHistoryDetail = exports('SlotBetHistoryDetail', (_dec = ccclass('SlotBetHistoryDetail'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Node
      }), _dec14 = property({
        type: Label
      }), _dec15 = property({
        type: Node
      }), _dec16 = property({
        type: Node
      }), _dec17 = property({
        type: Node
      }), _dec18 = property({
        type: Node
      }), _dec19 = property({
        type: Node
      }), _dec20 = property({
        type: ScrollView
      }), _dec21 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBetHistoryDetail, _GameObject);

        function SlotBetHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "summaryView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalGameView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeGameView", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotView", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "summaryBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalGameBtn", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeGameBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusGameBtn", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpGameBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotBtn", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "session", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noBetDetail", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "errorMessage", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loading", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prevModeBtn", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nextModeBtn", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollContent", _descriptor20, _assertThisInitialized(_this));

          _this.spacingX = 0;
          _this.itemWidth = 180;
          _this.currentFreeGamePage = 0;
          _this.currentJackpotPage = 0;
          _this.currentBonusGamePage = 0;
          _this.currentTopUpGamePage = 0;
          _this.maxPage = 1;
          _this.gameMode = 0;
          _this.normalGameData = null;
          _this.freeGameData = [];
          _this.jackpotData = [];
          _this.bonusGameData = [];
          _this.topUpGameData = [];
          _this.normalIndex = 0;
          _this.freeIndexes = [];
          _this.jackpotIndexes = [];
          _this.bonusIndexes = [];
          _this.topUpIndexes = [];
          _this.sessionId = '';
          _this.isGetMode = false;
          _this.currentOffset = new Vec2(0, 0);
          _this.tokenType = null;
          _this.userId = null;
          _this.token = null;
          _this.indexGameMode = 0;
          _this.gameModes = [];
          return _this;
        }

        var _proto = SlotBetHistoryDetail.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('SHOW_BET_DETAIL', this.showBetDetail, this);
          this.node.on('RESET_UI', this.resetUI, this);
          this.node.on('UPDATE_GAME_DETAIL', this.updateGameDetail, this);
          if (this.prevModeBtn) this.prevModeBtn.active = false;
          if (this.nextModeBtn) this.nextModeBtn.active = false;
          if (this.scrollView) this.scrollView.node.on('scrolling', this.onScrolling, this);
          if (this.scrollView) this.scrollView.node.on('scroll-ended', this.onScrollEnded, this);
          this.initExtent();
        };

        _proto.initExtent = function initExtent() {
          if (this.summaryBtn) this.summaryBtn['gameMode'] = 0;
          if (this.normalGameBtn) this.normalGameBtn['gameMode'] = 1;
          if (this.freeGameBtn) this.freeGameBtn['gameMode'] = 2;
          if (this.jackpotBtn) this.jackpotBtn['gameMode'] = 3;

          if (this.bonusGameBtn) {
            this.bonusGameBtn['gameMode'] = 4;
          }

          if (this.topUpGameBtn) {
            this.topUpGameBtn['gameMode'] = 5;
          }

          if (!this.node.getComponent(UITransform)) {
            var trans = this.node.addComponent(UITransform);
            trans.width = 1280;
            trans.height = 720;
          }
        };

        _proto.showBetDetail = function showBetDetail(sessionData) {
          this.resetUI();
          var sessionId = sessionData.sessionId;
          this.sessionId = sessionId;
          this.session.string = "#" + sessionId.substring(sessionId.length - 8, sessionId.length);
          this.requestDetail();
        };

        _proto.setToken = function setToken(token, type, userId) {
          this.token = token;
          this.tokenType = type;
          this.userId = userId;
        };

        _proto.requestDetail = function requestDetail(page) {
          var url = page >= 0 ? 'history/getHistoryUserSpinDetails' : 'history/getHistoryUserSpinSummary';

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (this.loading) this.loading.active = true;
          if (this.errorMessage) this.errorMessage.active = false;
          if (this.noBetDetail) this.noBetDetail.active = false;
          var token = this.token || globalNetwork.getToken();
          var headers = {
            Authorization: token,
            'token-type': 'user'
          };

          if (this.tokenType) {
            headers['token-type'] = this.tokenType;
          }

          if (this.userId) {
            headers['user-id'] = this.userId;
          }

          var requestParams = {
            serviceId: this.config.GAME_ID,
            psId: this.sessionId
          };

          if (page >= 0) {
            requestParams.from = page;
            requestParams.size = 1;
            requestParams.scroll = true;
          }

          var params = {
            url: url,
            params: requestParams,
            callback: this.onRequestResponse.bind(this),
            callbackErr: this.requestErr.bind(this),
            headers: headers,
            apiUrl: API_URL
          };
          apiObject.getWithHeader(params);
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          var _this2 = this;

          if (this.loading) this.loading.active = false;

          if (res.error || !res.data || res.data.resultList.length <= 0 || !res.data.scroll || res.data.scroll.length <= 0) {
            if (this.noBetDetail) this.noBetDetail.active = true;
            return;
          } else {
            if (this.noBetDetail) this.noBetDetail.active = false;
          }

          if (res.data && res.data.resultList) {
            if (!this.isGetMode) this.getModeIndex(res.data.scroll);
            var resultData = res.data.resultList[0];

            if (this.summaryView.active) {
              this.setOpacity(this.summaryView, 255);
              this.summaryView.emit('UPDATE_SUMMARY', resultData);
              if (this.summaryBtn) this.summaryBtn.active = true;
              if (this.normalGameBtn) this.normalGameBtn.active = true;
              if (this.freeGameBtn) this.freeGameBtn.active = resultData && resultData.freeGameTotal > 0;
              if (this.jackpotBtn) this.jackpotBtn.active = resultData && resultData.totalJpWinAmount > 0;

              if (this.bonusGameBtn) {
                this.bonusGameBtn.active = resultData && resultData.bonusGameTotal > 0;
              }

              if (this.topUpGameBtn) {
                this.topUpGameBtn.active = resultData && resultData.topUpGameTotal > 0;
              }

              this.getListGameModes();
              this.scheduleOnce(function () {
                _this2.checkMaxModePages();
              }, 0.1);
            } else this.updateGameMode(resultData);
          }
        };

        _proto.getListGameModes = function getListGameModes() {
          var _this3 = this;

          this.gameModes = [];
          this.scrollContent && this.scrollContent.children.forEach(function (toogle) {
            if (toogle.active) {
              _this3.gameModes.push(toogle['gameMode']);
            }
          });
        };

        _proto.checkMaxModePages = function checkMaxModePages() {
          if (this.scrollContent) {
            this.spacingX = this.scrollContent.getComponent(Layout).spacingX;
            var item = this.scrollContent.children[0];
            this.itemWidth = item.getComponent(UITransform).width;
            var pageWidth = this.scrollView.node.getComponent(UITransform).width;
            var contentWidth = this.scrollContent.getComponent(UITransform).width;
            this.maxPage = Math.ceil(contentWidth / pageWidth);
            this.nextModeBtn.active = this.scrollContent.getComponent(UITransform).width > this.scrollView.node.getComponent(UITransform).width;
          }
        };

        _proto.requestErr = function requestErr() {
          if (this.loading) this.loading.active = false;
          if (this.errorMessage) this.errorMessage.active = true;
        };

        _proto.getModeIndex = function getModeIndex(scrollData) {
          var _this4 = this;

          this.isGetMode = true;

          if (scrollData) {
            scrollData.forEach(function (item, index) {
              var parsedData = item.split(':');
              var pageIndex = parseInt(parsedData[0]);
              var winJackpot = parseInt(parsedData[5]);
              var mode = parsedData[1];

              if (mode === 'normal') {
                _this4.normalIndex = pageIndex;
              } else if (mode === 'free') {
                _this4.freeIndexes.push(pageIndex);
              } else if (mode === 'bonus') {
                _this4.bonusIndexes.push(pageIndex);
              } else if (mode === 'topUp') {
                _this4.topUpIndexes.push(pageIndex);
              }

              if (winJackpot === 1) {
                _this4.jackpotIndexes.push(pageIndex);
              }
            });
          }
        };

        _proto.updateGameMode = function updateGameMode(data) {
          switch (this.gameMode) {
            case 1:
              this.normalGameData = data;
              if (this.normalGameView) this.normalGameView.emit('UPDATE_DETAIL_VIEW', data);
              break;

            case 2:
              this.freeGameData[this.currentFreeGamePage] = data;
              if (this.freeGameView) this.freeGameView.emit('UPDATE_DETAIL_VIEW', data, this.freeIndexes);
              break;

            case 3:
              this.jackpotData[this.currentJackpotPage] = data;
              if (this.jackpotView) this.jackpotView.emit('UPDATE_DETAIL_VIEW', data, this.jackpotIndexes);
              break;

            case 4:
              this.bonusGameData[this.currentBonusGamePage] = data;
              if (this.bonusView) this.bonusView.emit('UPDATE_DETAIL_VIEW', data, this.bonusIndexes);
              break;

            case 5:
              this.topUpGameData[this.currentTopUpGamePage] = data;
              if (this.topUpView) this.topUpView.emit('UPDATE_DETAIL_VIEW', data, this.topUpIndexes);
              break;
          }
        };

        _proto.onShowGameMode = function onShowGameMode(event, mode) {
          this.hideAllView();
          this.enableGameModeButtons(true);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          this.gameMode = Number(mode);
          if (this.normalGameView) this.normalGameView.emit('CLEAR_TABLE');
          if (this.freeGameView) this.freeGameView.emit('CLEAR_TABLE');
          if (this.bonusView) this.bonusView.emit('CLEAR_TABLE');
          if (this.topUpView) this.topUpView.emit('CLEAR_TABLE');
          if (this.jackpotView) this.jackpotView.emit('CLEAR_TABLE');
          this.indexGameMode = this.gameModes.indexOf(this.gameMode);

          switch (this.gameMode) {
            case 0:
              this.summaryBtn.getComponent(Button).interactable = false;
              this.summaryView.active = true;
              break;

            case 1:
              this.normalGameBtn.getComponent(Button).interactable = false;
              this.normalGameView.active = true;
              if (this.normalGameData) this.updateGameMode(this.normalGameData);else if (this.normalIndex >= 0) this.requestDetail(this.normalIndex);
              break;

            case 2:
              this.freeGameBtn.getComponent(Button).interactable = false;
              this.freeGameView.active = true;
              if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
              break;

            case 3:
              if (this.jackpotBtn) this.jackpotBtn.getComponent(Button).interactable = false;
              if (this.jackpotView) this.jackpotView.active = true;
              if (this.jackpotData[this.currentJackpotPage]) this.updateGameMode(this.jackpotData[this.currentJackpotPage]);else if (this.jackpotIndexes.length && this.jackpotIndexes[this.currentJackpotPage] >= 0) this.requestDetail(this.jackpotIndexes[this.currentJackpotPage]);
              break;

            case 4:
              if (this.bonusGameBtn) this.bonusGameBtn.getComponent(Button).interactable = false;
              if (this.bonusView) this.bonusView.active = true;
              if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
              break;

            case 5:
              if (this.topUpGameBtn) this.topUpGameBtn.getComponent(Button).interactable = false;
              if (this.topUpView) this.topUpView.active = true;
              if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
              break;
          }
        };

        _proto.onPrevMode = function onPrevMode() {
          var movingStep = this.spacingX + this.itemWidth;
          var index = this.indexGameMode - 1 < 0 ? 0 : this.indexGameMode - 1;
          var delta = new Vec2((index - 2) * movingStep, 0);
          this.updateScrollView(delta);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          this.updateToogleButton(index);
          this.onShowGameMode(null, this.gameModes[index]);
          this.prevModeBtn['isClicked'] = true;
        };

        _proto.onNextMode = function onNextMode() {
          var movingStep = this.spacingX + this.itemWidth;
          var index = this.indexGameMode + 1 >= this.gameModes.length ? this.indexGameMode : this.indexGameMode + 1;
          var delta = new Vec2((index - 1) * movingStep, 0);
          this.updateScrollView(delta);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          this.updateToogleButton(index);
          this.onShowGameMode(null, this.gameModes[index]);
          this.nextModeBtn['isClicked'] = true;
        };

        _proto.updateGameDetail = function updateGameDetail(event) {
          var _event$userData = event.userData,
              currentPage = _event$userData.currentPage,
              gameMode = _event$userData.gameMode;

          if (gameMode === SlotGameMode.FreeGame) {
            this.currentFreeGamePage = currentPage;
            if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
          } else if (gameMode === SlotGameMode.JackpotGame) {
            this.currentJackpotPage = currentPage;
            if (this.jackpotData[this.currentJackpotPage]) this.updateGameMode(this.jackpotData[this.currentJackpotPage]);else if (this.jackpotIndexes.length && this.jackpotIndexes[this.currentJackpotPage] >= 1) this.requestDetail(this.jackpotIndexes[this.currentJackpotPage]);
          } else if (gameMode === SlotGameMode.BonusGame) {
            this.currentBonusGamePage = currentPage;
            if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
          } else if (gameMode === SlotGameMode.TopUpGame) {
            this.currentTopUpGamePage = currentPage;
            if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
          }

          event.propagationStopped = true;
        };

        _proto.onNextFreeGamePage = function onNextFreeGamePage() {
          this.currentFreeGamePage++;
          if (this.freeGameData[this.currentFreeGamePage]) this.updateGameMode(this.freeGameData[this.currentFreeGamePage]);else if (this.freeIndexes.length && this.freeIndexes[this.currentFreeGamePage] >= 1) this.requestDetail(this.freeIndexes[this.currentFreeGamePage]);
        };

        _proto.onNextTopUpGamePage = function onNextTopUpGamePage() {
          this.currentTopUpGamePage++;
          if (this.topUpGameData[this.currentTopUpGamePage]) this.updateGameMode(this.topUpGameData[this.currentTopUpGamePage]);else if (this.topUpIndexes.length && this.topUpIndexes[this.currentTopUpGamePage] >= 1) this.requestDetail(this.topUpIndexes[this.currentTopUpGamePage]);
        };

        _proto.onNextBonusGamePage = function onNextBonusGamePage() {
          this.currentBonusGamePage++;
          if (this.bonusGameData[this.currentBonusGamePage]) this.updateGameMode(this.bonusGameData[this.currentBonusGamePage]);else if (this.bonusIndexes.length && this.bonusIndexes[this.currentBonusGamePage] >= 1) this.requestDetail(this.bonusIndexes[this.currentBonusGamePage]);
        };

        _proto.updateScrollView = function updateScrollView(deltaVec) {
          var newOffset = new Vec2(Math.max(this.currentOffset.x + deltaVec.x, 0), Math.max(this.currentOffset.y + deltaVec.y, 0));
          this.scrollView.scrollToOffset(newOffset, 0.1);
        };

        _proto.hideAllView = function hideAllView() {
          if (this.summaryView) this.summaryView.active = false;
          if (this.normalGameView) this.normalGameView.active = false;
          if (this.freeGameView) this.freeGameView.active = false;
          if (this.bonusView) this.bonusView.active = false;
          if (this.topUpView) this.topUpView.active = false;
          if (this.jackpotView) this.jackpotView.active = false;
        };

        _proto.enableGameModeButtons = function enableGameModeButtons(isEnable) {
          if (this.summaryBtn) this.summaryBtn.getComponent(Button).interactable = isEnable;
          if (this.normalGameBtn) this.normalGameBtn.getComponent(Button).interactable = isEnable;
          if (this.freeGameBtn) this.freeGameBtn.getComponent(Button).interactable = isEnable;
          if (this.bonusGameBtn) this.bonusGameBtn.getComponent(Button).interactable = isEnable;
          if (this.topUpGameBtn) this.topUpGameBtn.getComponent(Button).interactable = isEnable;
          if (this.jackpotBtn) this.jackpotBtn.getComponent(Button).interactable = isEnable;
        };

        _proto.onScrolling = function onScrolling(scrollView) {
          var contentPos = scrollView.content.position;
          var contentWidth = scrollView.content.getComponent(UITransform).width;
          var viewWidth = this.scrollView.node.getComponent(UITransform).width;
          var leftBound = -viewWidth / 2 - 10;
          var rightBound = viewWidth / 2 + 10;
          this.nextModeBtn.active = contentPos.x + contentWidth > rightBound;
          this.prevModeBtn.active = contentPos.x < leftBound;
          var scrollViewOffset = this.scrollView.getScrollOffset();
          this.currentOffset = new Vec2(Math.abs(scrollViewOffset.x), Math.abs(scrollViewOffset.y));
        };

        _proto.onScrollEnded = function onScrollEnded() {
          this.nextModeBtn.active = false;
          this.prevModeBtn.active = false;
          var lastIndex = this.gameModes.length - 1;

          if (this.maxPage > 1) {
            this.nextModeBtn.active = this.indexGameMode != lastIndex;
            this.prevModeBtn.active = this.indexGameMode != 0;
          }

          var scrollViewOffset = this.scrollView.getScrollOffset();
          this.currentOffset = new Vec2(Math.abs(scrollViewOffset.x), Math.abs(scrollViewOffset.y));
          this.nextModeBtn['isClicked'] = false;
          this.prevModeBtn['isClicked'] = false;
        };

        _proto.updateToogleButton = function updateToogleButton(index) {
          if (index === void 0) {
            index = 0;
          }

          var toggles = this.scrollContent.children.filter(function (item) {
            return item.active;
          });
          toggles.forEach(function (item, index2) {
            var toggle = item.getComponent(Toggle);
            var button = item.getComponent(Button);
            toggle && (toggle.isChecked = index == index2);
            button && (button.interactable = index != index2);
          });
        };

        _proto.resetData = function resetData() {
          this.isGetMode = false;
          this.currentFreeGamePage = 0;
          this.currentJackpotPage = 0;
          this.currentBonusGamePage = 0;
          this.currentTopUpGamePage = 0;
          this.gameMode = 0;
          this.normalGameData = null;
          this.freeGameData = [];
          this.jackpotData = [];
          this.bonusGameData = [];
          this.topUpGameData = [];
          this.normalIndex = 0;
          this.freeIndexes = [];
          this.jackpotIndexes = [];
          this.bonusIndexes = [];
          this.topUpIndexes = [];
          this.indexGameMode = 0;
        };

        _proto.resetUI = function resetUI() {
          this.resetData();
          this.session.string = '';
          this.scrollView.scrollTo(v2(0, 0), 0.0);
          this.currentOffset = this.scrollView.getScrollOffset();
          this.prevModeBtn.active = false;
          this.nextModeBtn.active = false;
          this.enableGameModeButtons(true);
          this.hideGameMode();
          var smrToggle = this.summaryBtn.getComponent(Toggle);
          if (smrToggle) smrToggle.isChecked = true;
          this.summaryBtn.getComponent(Button).interactable = false;
          this.hideAllView();
          if (this.summaryView) this.summaryView.emit('RESET_ALL');
          if (this.normalGameView) this.normalGameView.emit('RESET_ALL');
          if (this.freeGameView) this.freeGameView.emit('RESET_ALL');
          if (this.bonusView) this.bonusView.emit('RESET_ALL');
          if (this.topUpView) this.topUpView.emit('RESET_ALL');
          if (this.jackpotView) this.jackpotView.emit('RESET_ALL');
          if (this.summaryView) this.summaryView.active = true;
          this.setOpacity(this.summaryView, 1);
        };

        _proto.hideGameMode = function hideGameMode() {
          if (this.summaryBtn) this.summaryBtn.active = false;
          if (this.normalGameBtn) this.normalGameBtn.active = false;
          if (this.jackpotBtn) this.jackpotBtn.active = false;
          if (this.bonusGameBtn) this.bonusGameBtn.active = false;
          if (this.freeGameBtn) this.freeGameBtn.active = false;
          if (this.topUpGameBtn) this.topUpGameBtn.active = false;
        };

        _proto.disableCloseDetail = function disableCloseDetail() {
          this.node.getChildByName('BackBtn').active = false;
        };

        return SlotBetHistoryDetail;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "summaryView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalGameView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freeGameView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bonusView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "topUpView", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "summaryBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "normalGameBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "freeGameBtn", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "bonusGameBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "topUpGameBtn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "jackpotBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "noBetDetail", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "prevModeBtn", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "nextModeBtn", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "scrollContent", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetSummaryHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, formatMoney, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "72f47E42jJK75+z5ObEv0ZW", "SlotBetSummaryHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetSummaryHistory = exports('SlotBetSummaryHistory', (_dec = ccclass('SlotBetSummaryHistory'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec9 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotBetSummaryHistory, _GameObject);

        function SlotBetSummaryHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "totalWinAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalWinAmount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "freeWinAmount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotWinAmount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusWinAmount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUpWinAmount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotWinVip", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "summaryLabel", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetSummaryHistory.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on('UPDATE_SUMMARY', this.updateSummary, this);
          this.node.on('RESET_ALL', this.resetAll, this);
        };

        _proto.start = function start() {
          this.localizeText();
        };

        _proto.localizeText = function localizeText() {
          if (this.summaryLabel) {
            this.summaryLabel.string = this.config.MESSAGE_DIALOG.SUMMARY;
          }
        };

        _proto.updateSummary = function updateSummary(data) {
          //
          if (!data) return;
          if (this.totalWinAmount) this.totalWinAmount.string = formatMoney(Number(data.totalWinAmount));
          if (this.normalWinAmount) this.normalWinAmount.string = formatMoney(Number(data.totalNormalWinAmount));
          if (this.freeWinAmount) this.freeWinAmount.string = formatMoney(Number(data.totalFreeWinAmount));

          if (this.jackpotWinAmount) {
            var jackpotWin = Number(data.totalJpWinAmount);
            var extraVip = Number(data.eventExtraAmountTotal || 0);
            var totalWin = jackpotWin + extraVip;

            if (extraVip && data.userLevel) {
              var userLevel = parseInt(data.userLevel.replace('LEVEL', ''));

              if (this.jackpotWinVip) {
                this.jackpotWinVip.string = formatMoney(jackpotWin) + " + " + formatMoney(extraVip) + " (" + data.eventExtraPercent + "% vip" + userLevel + ") \n= " + formatMoney(totalWin);
                this.jackpotWinVip.node.active = true;
              }

              this.jackpotWinAmount.node.active = false;
            } else {
              this.jackpotWinAmount.string = formatMoney(Number(data.totalJpWinAmount));
              this.jackpotWinVip && (this.jackpotWinVip.node.active = false);
              this.jackpotWinAmount.node.active = true;
            }
          }

          if (this.bonusWinAmount) this.bonusWinAmount.string = formatMoney(Number(data.totalBonusWinAmount));
          if (this.topUpWinAmount) this.topUpWinAmount.string = formatMoney(Number(data.totalTopUpWinAmount));
        };

        _proto.resetAll = function resetAll() {
          if (this.totalWinAmount) this.totalWinAmount.string = '0';
          if (this.normalWinAmount) this.normalWinAmount.string = '0';
          if (this.freeWinAmount) this.freeWinAmount.string = '0';
          if (this.jackpotWinAmount) this.jackpotWinAmount.string = '0';
          if (this.bonusWinAmount) this.bonusWinAmount.string = '0';
          if (this.topUpWinAmount) this.topUpWinAmount.string = '0';
        };

        return SlotBetSummaryHistory;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "totalWinAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalWinAmount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freeWinAmount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bonusWinAmount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "topUpWinAmount", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinVip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "summaryLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseTableHistory.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SlotBaseTableHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotBaseTableHistory = module.SlotBaseTableHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8d56egLfBBDhL3Ai9pLJTF6", "SlotBetTableHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetTableHistory = exports('SlotBetTableHistory', (_dec = ccclass('SlotBetTableHistory'), _dec(_class = /*#__PURE__*/function (_SlotBaseTableHistory) {
        _inheritsLoose(SlotBetTableHistory, _SlotBaseTableHistory);

        function SlotBetTableHistory() {
          return _SlotBaseTableHistory.apply(this, arguments) || this;
        }

        return SlotBetTableHistory;
      }(SlotBaseTableHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotBetTableHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableHistoryDetail.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, BaseTableHistoryDetail, SlotGameMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
    }, function (module) {
      BaseTableHistoryDetail = module.BaseTableHistoryDetail;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "fff38+Jm51MI6I3JujlXigB", "SlotBetTableHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotBetTableHistoryDetail = exports('SlotBetTableHistoryDetail', (_dec = ccclass('SlotBetTableHistoryDetail'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableHistoryDeta) {
        _inheritsLoose(SlotBetTableHistoryDetail, _BaseTableHistoryDeta);

        function SlotBetTableHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTableHistoryDeta.call.apply(_BaseTableHistoryDeta, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "titleGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "modeGameName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiplierNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiplierLabel", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotBetTableHistoryDetail.prototype;

        _proto.updateDetailView = function updateDetailView(data, pages) {
          _BaseTableHistoryDeta.prototype.updateDetailView.call(this, data, pages);

          if (pages && pages.length > 1) {
            if (this.sceneType === SlotGameMode.FreeGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentFreeGamePage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.JackpotGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentJackpotPage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.BonusGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentBonusGamePage < pages.length - 1;
            } else if (this.sceneType === SlotGameMode.TopUpGame) {
              if (this.nextPageBtn) this.nextPageBtn.active = this.currentTopUpGamePage < pages.length - 1;
            }
          }

          this.showMultiplier(data);
          var subSym = this.hasSubSymbol && data.result && data.result.subSym ? data.result.subSym : [];
          this.renderTable(data.matrixResult, data.matrixFormat, subSym);
          this.localizeText();
        };

        _proto.localizeText = function localizeText() {
          if (this.titleGameMode) {
            switch (this.sceneType) {
              case SlotGameMode.NormalGame:
                this.titleGameMode.string = this.config.MESSAGE_DIALOG.NORMAL_GAME;
                break;

              case SlotGameMode.FreeGame:
                this.titleGameMode.string = this.config.MESSAGE_DIALOG.FREE_GAME;
                break;

              case SlotGameMode.JackpotGame:
                this.titleGameMode.string = this.config.MESSAGE_DIALOG.JACKPOT_GAME;
                break;

              case SlotGameMode.BonusGame:
                this.titleGameMode.string = this.config.MESSAGE_DIALOG.BONUS_GAME;
                break;

              case SlotGameMode.TopUpGame:
                this.titleGameMode.string = this.config.MESSAGE_DIALOG.TOPUP_GAME;
                break;
            }

            this.titleGameMode.string += ": ";
          }

          if (this.modeGameName) {
            switch (this.sceneType) {
              case SlotGameMode.NormalGame:
                this.modeGameName.string = this.config.MESSAGE_DIALOG.NORMAL_GAME;
                break;

              case SlotGameMode.FreeGame:
                this.modeGameName.string = this.config.MESSAGE_DIALOG.FREE_MODE + " " + (this.currentFreeGamePage + 1);
                break;

              case SlotGameMode.JackpotGame:
                this.modeGameName.string = this.config.MESSAGE_DIALOG.JACKPOT_GAME;
                break;

              case SlotGameMode.BonusGame:
                this.modeGameName.string = this.config.MESSAGE_DIALOG.BONUS_GAME + " " + (this.currentFreeGamePage + 1);
                break;

              case SlotGameMode.TopUpGame:
                this.modeGameName.string = this.config.MESSAGE_DIALOG.TOPUP_GAME + " " + (this.currentFreeGamePage + 1);
                break;
            }
          }
        };

        _proto.showMultiplier = function showMultiplier(data) {
          if (data.multiplier && data.multiplier > 1 && data.winAmount) {
            if (this.multiplierNode) this.multiplierNode.active = true;
            if (this.multiplierLabel) this.multiplierLabel.string = 'x' + data.multiplier;
          } else {
            if (this.multiplierNode) this.multiplierNode.active = false;
            if (this.multiplierLabel) this.multiplierLabel.string = '';
          }
        };

        _proto.resetUI = function resetUI() {
          _BaseTableHistoryDeta.prototype.resetUI.call(this);

          if (this.multiplierNode) this.multiplierNode.active = false;
          if (this.multiplierLabel) this.multiplierLabel.string = '';
        };

        return SlotBetTableHistoryDetail;
      }(BaseTableHistoryDetail), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "titleGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "modeGameName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "multiplierNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "multiplierLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts', './CustomType.ts', './EventNames.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, SpriteFrame, sp, input, Input, KeyCode, Sprite, log, warn, Vec3, tween, GameObject, SlotGameMode, TutorialTriggerType, WalletType, CustomEvent, EventNames, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      sp = module.sp;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Sprite = module.Sprite;
      log = module.log;
      warn = module.warn;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      TutorialTriggerType = module.TutorialTriggerType;
      WalletType = module.WalletType;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24;

      cclegacy._RF.push({}, "7d290YuDXNLU4r4CDoSlOKM", "SlotButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotButton = exports('SlotButton', (_dec = ccclass('SlotButton'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Node), _dec11 = property(SpriteFrame), _dec12 = property(SpriteFrame), _dec13 = property(sp.Skeleton), _dec14 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotButton, _GameObject);

        function SlotButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deCoupling", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSpinPanel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoSpinOverlay", _descriptor4, _assertThisInitialized(_this)); //button Nodes


          _initializerDefineProperty(_this, "btnSpin", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnFastStop", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnStopAuto", _descriptor7, _assertThisInitialized(_this)); // promotion


          _initializerDefineProperty(_this, "promoBtnSpin", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoBtnFast", _descriptor9, _assertThisInitialized(_this)); // text Auto


          _initializerDefineProperty(_this, "textSpin", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtHoldToAuto", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "txtPressToStop", _descriptor12, _assertThisInitialized(_this)); //effects


          _initializerDefineProperty(_this, "spineBtnSpin", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineHover", _descriptor14, _assertThisInitialized(_this)); // animation Names


          _initializerDefineProperty(_this, "animNormal", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animHover", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPressed", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDisable", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animFastToResult", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPromoSpin", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animPromoHover", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSetSkin", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinNormalSpin", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinPromoteSpin", _descriptor24, _assertThisInitialized(_this)); // sound Flag


          _this.removeSoundClick = false;
          _this.isAutoSpin = false;
          _this.canAutoSpin = true;
          _this.isOnHover = false;
          _this.isDebug = false;
          _this.showFunc = null;
          _this.isTouched = false;
          _this.animSpinIdle = '';
          _this.animSpinHover = '';
          _this.autoSpinButtons = [];
          return _this;
        }

        var _proto = SlotButton.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          input.on(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);

          if (this.btnSpin) {
            this.node.on("SPIN_ENABLE", this.enableSpin, this);
            this.node.on("SPIN_DISABLE", this.disableSpin, this);
            this.node.on("SPIN_SHOW", this.showSpin, this);
            this.node.on("SPIN_HIDE", this.hideSpin, this);
          }

          if (this.btnFastStop) {
            this.node.on("FAST_TO_RESULT_SHOW", this.showFastToResult, this);
            this.node.on("FAST_TO_RESULT_HIDE", this.hideFastToResult, this);
            this.node.on("FAST_TO_RESULT_ENABLE", this.enableFastToResult, this);
            this.node.on("FAST_TO_RESULT_DISABLE", this.disableFastToResult, this);
          }

          if (this.btnStopAuto) {
            this.node.on("STOP_AUTO_SPIN_SHOW", this.showStopAutoSpin, this);
            this.node.on("STOP_AUTO_SPIN_HIDE", this.hideStopAutoSpin, this);
          }

          if (this.textSpin) {
            this.node.on("SHOW_TEXT_AUTO_SPIN", this.showTextAutoSpin, this);
            this.node.on("HIDE_TEXT_AUTO_SPIN", this.hideTextAutoSpin, this);
          }

          if (this.autoSpinPanel) {
            this.node.on("HIDE_AUTO_SPIN_PANEL", this.hideAutoSpinPanel, this);
          }

          this.node.on("PAUSE_AUTO_SPIN", this.pauseAutoSpin, this);
          this.node.on("HIDE_PROMO_UI", this.hideAllPromoUI, this);
          this.node.on("SHOW_PROMO_UI", this.showAllPromoUI, this);

          if (this.btnSpin) {
            this.btnSpin.interactable = false;
          }

          if (this.autoSpinPanel) {
            this.hideAutoSpinPanel(0);
          }

          this.bindAutoSpinEvent();
          this.bindEventPromotion();

          if (this.deCoupling) {
            this.node.dispatchEvent(new CustomEvent("SET_UP_SLOT_BUTTON", true, {
              slotGameType: this.currentGameMode,
              slotButton: this.node
            }));
          }

          this.animSpinIdle = this.animNormal;
          this.animSpinHover = this.animHover;

          if (this.isSetSkin) {
            if (this.spineBtnSpin) {
              this.spineBtnSpin.setSkin(this.skinNormalSpin);
            }

            if (this.spineHover) {
              this.spineHover.setSkin(this.skinNormalSpin);
            }
          }

          if (this.autoSpinPanel) {
            this.autoSpinButtons = this.autoSpinPanel.getComponentsInChildren(Button);
          }
        };

        _proto.onEnable = function onEnable() {
          if (this.autoSpinOverlay) {
            this.autoSpinOverlay.on(Node.EventType.TOUCH_END, this.hideAutoSpinPanel, this, true);
          }

          this.eventManager.on(EventNames.SWITCH_WALLET, this.onSwitchWallet, this);
        }
        /**
         * @InputEvent
         * */
        ;

        _proto.enableSpinKey = function enableSpinKey(enable) {
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          if (enable) input.on(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.off(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
          // if (enable) systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto.onKeyUp = function onKeyUp(event) {
          if (event.keyCode === KeyCode.SPACE && this.guiMgr.isSpinVisible() && this.guiMgr.isDisplayFullScreen() && !this.guiMgr.isDisplayLoading()) {
            if (this.node.active && this.btnSpin && this.btnSpin.interactable && !this.btnStopAuto.node.active) {
              this.node.emit('SPACE_PRESSED');
              this.hideAutoSpinPanel(0);
              this.onMouseLeave();
            } else if (this.btnFastStop && this.btnFastStop.node.active) {
              if (this.btnFastStop.getComponent(Button).interactable) this.node.emit('FAST_TO_RESULT_BY_SPACE');
            }
          }
        };

        _proto.start = function start() {
          this.isAutoSpin = false;
        };

        _proto.bindAutoSpinEvent = function bindAutoSpinEvent() {
          if (this.btnSpin) {
            this.btnSpin.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));
            this.btnSpin.node.on(Node.EventType.TOUCH_END, this.onTouchCancel.bind(this)); // this.btnSpin.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this));

            this.btnSpin.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel.bind(this));
            this.btnSpin.node.on(Node.EventType.MOUSE_LEAVE, this.onMouseLeave.bind(this));
            this.btnSpin.node.on(Node.EventType.MOUSE_ENTER, this.onHover.bind(this));
          }

          if (this.promoBtnSpin) {
            this.promoBtnSpin.node.on(Node.EventType.MOUSE_ENTER, this.onHover.bind(this));
            this.promoBtnSpin.node.on(Node.EventType.MOUSE_LEAVE, this.onMouseLeave.bind(this));
          }

          this.isOnHover = false;
        };

        _proto.unbindAutoSpinEvent = function unbindAutoSpinEvent() {
          if (this.btnSpin) {
            this.btnSpin.node.off(Node.EventType.TOUCH_START);
            this.btnSpin.node.off(Node.EventType.TOUCH_END);
            this.btnSpin.node.off(Node.EventType.TOUCH_CANCEL); // this.btnSpin.node.off(Node.EventType.TOUCH_MOVE);

            this.btnSpin.node.off(Node.EventType.MOUSE_LEAVE);
            this.btnSpin.node.off(Node.EventType.MOUSE_ENTER);
          }
        };

        _proto.onHover = function onHover() {
          if (this.spineHover && this.btnSpin.interactable && !this.btnStopAuto.node.active) {
            this.spineHover.node.active = true;
            this.spineHover.setAnimation(0, this.animSpinHover, true);
          }
        }
        /**
         * @Spin
         * */
        ;

        _proto.showSpin = function showSpin() {
          setOpacity(this.btnSpin.node, 255);

          if (this.textSpin && this.txtHoldToAuto) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtHoldToAuto;
          }
        };

        _proto.hideSpin = function hideSpin() {
          this.cancelAutoSpinPanel();
          this.setOpacity(this.btnSpin.node, 0);
        };

        _proto.enableSpin = function enableSpin() {
          this.btnSpin.interactable = true;
          this.btnSpin.node.emit("BUTTON_SPIN_SHOW");

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animSpinIdle)) {
            this.spineBtnSpin.setAnimation(0, this.animSpinIdle, true);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animSpinIdle);
          }

          if (this.isDebug) {
            warn("run enableSpin");
          }
        };

        _proto.disableSpin = function disableSpin() {
          this.btnSpin.interactable = false;
          this.btnSpin.node.emit('BUTTON_SPIN_HIDE');

          if (this.isDebug) {
            warn("run disableSpin");
          }
        };

        _proto.spinClick = function spinClick() {
          if (this.autoSpinPanel && this.autoSpinPanel.active) return;
          this.eventManager.emit(EventNames.SPIN_CLICK);
          this.node.emit('SPIN_CLICK');
          warn("SlotButton: spinClick");
        }
        /**
         * @autoSpin
         */
        ;

        _proto.onTouchStart = function onTouchStart() {
          var _this2 = this;

          this.isAutoSpin = false;
          if (this.showFunc) this.unschedule(this.showFunc);

          this.showFunc = function () {
            if (_this2.canDoAutoSpin()) {
              if (_this2.autoSpinPanel) {
                _this2.showAutoSpinPanel();
              } else {
                _this2.runAutoSpin(null, 99999);

                _this2.dataStore.isAutoSpinNormal = true;
              }
            }

            _this2.showFunc = null;
          };

          this.scheduleOnce(this.showFunc, 0.7);
          this.node.emit('ON_TOUCH_START');
          this.isTouched = true;

          if (this.isDebug) {
            warn("onTouchStart");
          }
        };

        _proto.runAutoSpin = function runAutoSpin(evt, spinTimes) {
          if (spinTimes === void 0) {
            spinTimes = 99999;
          }

          this.isAutoSpin = true;
          this.dataStore.isAutoSpinNormal = true;
          this.eventManager.emit(EventNames.AUTO_SPIN_START, spinTimes);
          this.node.emit('MULTI_SPIN_CLICK', spinTimes);
          this.hideAutoSpinPanel();

          if (this.spineBtnSpin && this.spineBtnSpin.findAnimation(this.animPressed)) {
            this.spineBtnSpin.setAnimation(0, this.animPressed, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animPressed);
          }

          if (this.spineHover) {
            this.spineHover.node.active = false;
          }

          this.guiMgr.enableSwitchWallet(false);

          if (this.isDebug) {
            warn("SlotButton: _runAutoSpin");
          }
        };

        _proto.onTouchCancel = function onTouchCancel() {
          this.cancelAutoSpinPanel();
          if (this.isAutoSpin) return;
          this.node.emit('ON_TOUCH_CANCEL');
          this.isTouched = false;
        };

        _proto.showAutoSpinPanel = function showAutoSpinPanel() {
          var _this3 = this;

          this.autoSpinPanel.active = true;
          this.enableAutoSpinButtons(true);
          this.autoSpinPanel.scale = new Vec3(0, 0, 0);
          tween(this.autoSpinPanel).to(0.3, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            _this3.guiMgr.onIngameEvent(TutorialTriggerType.AutoSpinPanelShow, "AUTO_SPIN_PANEL_SHOW");

            if (_this3.autoSpinOverlay) _this3.autoSpinOverlay.active = true;
          }).start();
        };

        _proto.hideAutoSpinPanel = function hideAutoSpinPanel(time) {
          var _this4 = this;

          if (time === void 0) {
            time = 0.3;
          }

          if (!this.autoSpinPanel || !this.autoSpinPanel.active) return;
          this.enableAutoSpinButtons(false);
          time = time > 0 ? time : 0.3;
          tween(this.autoSpinPanel).to(time, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            _this4.autoSpinPanel.active = false;
            if (_this4.autoSpinOverlay) _this4.autoSpinOverlay.active = false;
          }).start();
        };

        _proto.enableAutoSpinButtons = function enableAutoSpinButtons(isEnable) {
          if (isEnable === void 0) {
            isEnable = false;
          }

          if (this.autoSpinButtons.length) {
            this.autoSpinButtons.forEach(function (item) {
              item.interactable = isEnable;
            });
          }
        };

        _proto.cancelAutoSpinPanel = function cancelAutoSpinPanel() {
          if (this.isAutoSpin) return;

          if (this.showFunc) {
            this.unschedule(this.showFunc);
          }

          if (this.spineHover) {
            this.spineHover.node.active = false;
          }
        };

        _proto.onMouseLeave = function onMouseLeave() {
          if (this.isAutoSpin === false) {
            this.cancelAutoSpinPanel();
          }

          if (this.spineHover && this.spineHover.node.active === true) {
            this.spineHover.node.active = false;
          }
        };

        _proto.onTouchMove = function onTouchMove(event) {// let touch = event.touch;
          //todo check function to get touch out
          // let hit = this.btnSpin.node._hitTest(touch.getLocation());
          // if (hit) {
          //     if (!this.isTouched) {
          //         this.node.emit('ON_TOUCH_START');
          //         this.isTouched = true;
          //     }
          // } else {
          //     this.cancelAutoSpinPanel();
          //     if (this.isAutoSpin) return;
          //     this.node.emit('ON_TOUCH_CANCEL');
          //     this.isTouched = false;
          // }
        };

        _proto.stopAutoSpinClick = function stopAutoSpinClick() {
          // if (this.node.soundPlayer && !this.removeSoundClick) {
          //     this.node.soundPlayer.playSFXClick();
          // }
          this.dataStore.isAutoSpinNormal = false;
          this.node.emit('STOP_AUTO_SPIN_CLICK');

          if (this.isDebug) {
            log("SlotButton: stopAutoSpinClick");
          }
        };

        _proto.showStopAutoSpin = function showStopAutoSpin() {
          if (this.btnStopAuto) {
            this.btnStopAuto.node.active = true;
            this.btnStopAuto.interactable = true;
          }

          if (this.textSpin && this.txtPressToStop) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtPressToStop;
          }
        };

        _proto.hideStopAutoSpin = function hideStopAutoSpin(isResume) {
          if (this.btnStopAuto) {
            this.btnStopAuto.node.active = false;
            this.btnStopAuto.interactable = false;
          }

          if (this.btnFastStop && !this.btnFastStop.node.active && this.isAutoSpin && !isResume) {
            this.btnFastStop.node.active = true;
          }
        };

        _proto.showTextAutoSpin = function showTextAutoSpin() {
          if (this.textSpin) {
            this.textSpin.active = true;
          }
        };

        _proto.hideTextAutoSpin = function hideTextAutoSpin() {
          if (this.textSpin) {
            this.textSpin.active = false;
          }
        }
        /**
         * @FastToResult
         */
        ;

        _proto.fastToResultClick = function fastToResultClick() {
          // if (this.node.soundPlayer && !this.removeSoundClick) {
          //     this.node.soundPlayer.playSFXClick();
          // }
          log('fastToResultClick');
          this.node.emit('FAST_TO_RESULT_CLICK');

          if (this.isDebug) {
            warn("SlotButton: fastToResultClick");
          }
        };

        _proto.showFastToResult = function showFastToResult() {
          this.btnFastStop.node.active = true;
        };

        _proto.hideFastToResult = function hideFastToResult() {
          this.btnFastStop.node.active = false;
        };

        _proto.enableFastToResult = function enableFastToResult() {
          this.btnFastStop.interactable = true;

          if (this.textSpin && this.txtPressToStop) {
            this.textSpin.getComponent(Sprite).spriteFrame = this.txtPressToStop;
          }

          if (this.spineBtnSpin && this.animFastToResult.length > 0 && this.spineBtnSpin.findAnimation(this.animFastToResult)) {
            this.spineBtnSpin.setAnimation(0, this.animFastToResult, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animFastToResult);
          }
        };

        _proto.disableFastToResult = function disableFastToResult() {
          this.btnFastStop.interactable = false;

          if (this.spineBtnSpin && this.animDisable.length > 0 && this.spineBtnSpin.findAnimation(this.animDisable)) {
            this.spineBtnSpin.setAnimation(0, this.animDisable, false);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animDisable);
          }
        };

        _proto.showSpinButtons = function showSpinButtons() {
          this.setOpacity(this.btnSpin.node, 255);
          this.btnStopAuto.node.active = false;
          this.btnFastStop.node.active = false;
        };

        _proto.hideSpinButtons = function hideSpinButtons() {
          this.setOpacity(this.btnSpin.node, 0);
          this.btnStopAuto.node.active = false;
          this.btnFastStop.node.active = false;
        };

        _proto.pauseAutoSpin = function pauseAutoSpin(isOn) {
          if (isOn === void 0) {
            isOn = true;
          }

          this.canAutoSpin = !isOn;
        };

        _proto.canDoAutoSpin = function canDoAutoSpin() {
          return this.canAutoSpin && this.btnSpin.interactable;
        }
        /**
         * @promotions
         */
        ;

        _proto.bindEventPromotion = function bindEventPromotion() {
          if (this.promoBtnSpin) {
            this.node.on("PROMO_SPIN_SHOW", this.showPromoSpin, this);
            this.node.on("PROMO_SPIN_HIDE", this.hidePromoSpin, this);
          }

          if (this.promoBtnFast) {
            this.node.on("PROMO_STOP_SPIN_SHOW", this.showPromoSpinStopBtn, this);
            this.node.on("PROMO_STOP_SPIN_HIDE", this.hidePromoSpinStopBtn, this);
            this.node.on("DISABLE_PROMOTION_STOP_SPIN", this.disablePromoSpinStopBtn, this);
            this.node.on("ENABLE_PROMOTION_STOP_SPIN", this.enablePromoSpinStopBtn, this);
          }
        };

        _proto.showAllPromoUI = function showAllPromoUI() {
          this.showPromoSpin();
          this.hideTextAutoSpin();
        };

        _proto.hideAllPromoUI = function hideAllPromoUI() {
          this.hidePromoSpin();
          this.showTextAutoSpin();
        };

        _proto.showPromoSpin = function showPromoSpin() {
          if (this.promoBtnSpin) this.promoBtnSpin.node.active = true;
        };

        _proto.hidePromoSpin = function hidePromoSpin() {
          if (this.promoBtnSpin) this.promoBtnSpin.node.active = false;
        };

        _proto.showPromoSpinStopBtn = function showPromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.node.active = true;
          }
        };

        _proto.hidePromoSpinStopBtn = function hidePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.node.active = false;
          }
        };

        _proto.disablePromoSpinStopBtn = function disablePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.interactable = false;
          }
        };

        _proto.enablePromoSpinStopBtn = function enablePromoSpinStopBtn() {
          if (this.promoBtnFast) {
            this.promoBtnFast.interactable = true;
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.autoSpinOverlay) {
            this.autoSpinOverlay.off(Node.EventType.TOUCH_END, this.hideAutoSpinPanel, this);
          }

          this.eventManager.off(EventNames.SWITCH_WALLET, this.onSwitchWallet, this);
        };

        _proto.onDestroy = function onDestroy() {
          if (this.showFunc) {
            this.unschedule(this.showFunc);
            this.showFunc = null;
          }

          input.off(Input.EventType.KEY_UP, this.onKeyUp, this); // systemEvent.off(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto.onSwitchWallet = function onSwitchWallet(walletType) {
          var isPromoteWallet = walletType === WalletType.PROMOTE;

          if (this.isSetSkin) {
            if (this.spineBtnSpin) {
              this.spineBtnSpin.setSkin(isPromoteWallet ? this.skinPromoteSpin : this.skinNormalSpin);
            }

            if (this.spineHover) {
              this.spineHover.setSkin(isPromoteWallet ? this.skinPromoteSpin : this.skinNormalSpin);
            }
          } else {
            this.animSpinIdle = isPromoteWallet ? this.animPromoSpin : this.animNormal;
            this.animSpinHover = isPromoteWallet ? this.animPromoHover : this.animHover;
          }

          if (this.spineBtnSpin && this.animSpinIdle.length > 0 && this.spineBtnSpin.findAnimation(this.animSpinIdle)) {
            this.spineBtnSpin.setAnimation(0, this.animSpinIdle, true);
          } else {
            log("[SlotButton] Not Found Animation: " + this.animSpinIdle);
          }
        };

        return SlotButton;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deCoupling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoSpinPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "autoSpinOverlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnSpin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnFastStop", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnStopAuto", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "promoBtnSpin", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "promoBtnFast", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "textSpin", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "txtHoldToAuto", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "txtPressToStop", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "spineBtnSpin", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "spineHover", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "animNormal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleGreen";
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "animHover", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_Hover";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "animPressed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleGreen";
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "animDisable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_Disable";
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "animFastToResult", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleRed(NoAnim)";
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "animPromoSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleYellow";
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "animPromoHover", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "anim_IdleYellow";
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "isSetSkin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "skinNormalSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Yellow";
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "skinPromoteSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Green";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDialog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "558f9v7MIFNUKDfEEbJNNu8", "SlotDialog", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotDialog = exports('SlotDialog', (_dec = ccclass('SlotDialog'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(SlotDialog, _SlotUIScene);

        function SlotDialog() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.actionOK = void 0;
          _this.actionCancel = void 0;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "message", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnOK", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCancel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnHolder", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleLabel", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotDialog.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          if (this.titleLabel) {
            this.titleLabel.string = this.config.MESSAGE_DIALOG.NOTICE;
          }
        };

        _proto.show = function show() {
          if (!this.node.active) _SlotUIScene.prototype.show.call(this);
          var _this$content = this.content,
              strText = _this$content.strText,
              _this$content$actionO = _this$content.actionOK,
              actionOK = _this$content$actionO === void 0 ? null : _this$content$actionO,
              _this$content$actionC = _this$content.actionCancel,
              actionCancel = _this$content$actionC === void 0 ? null : _this$content$actionC;
          this.showMessage(strText, actionOK, actionCancel);
        };

        _proto.showMessage = function showMessage(strText, actionOK, actionCancel) {
          if (this.message.string.replace(/\n|\r/g, "") !== strText.replace(/\n|\r/g, "")) {
            this.message.string = strText;
          }

          this.actionOK = actionOK;
          this.actionCancel = actionCancel;
          this.btnOK.active = actionOK != null;
          this.btnCancel.active = actionCancel != null;

          if (this.btnHolder) {
            this.btnHolder.active = this.btnOK.active || this.btnCancel.active;
          }
        };

        _proto.isDisplay = function isDisplay() {
          return this.node.active;
        };

        _proto.onBtnOK = function onBtnOK() {
          this.playSoundClick();
          this.actionOK();
          this.exit();
        };

        _proto.onBtnCancel = function onBtnCancel() {
          this.playSoundClick();
          this.actionCancel();
          this.exit();
        };

        return SlotDialog;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnOK", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnCancel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "titleLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDialogAction.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotSoundPlayer.ts', './SlotUIScene.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Sprite, Label, SlotSoundPlayer, SlotUIScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Label = module.Label;
    }, function (module) {
      SlotSoundPlayer = module.SlotSoundPlayer;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "415d0/I481C5ZP0b3TZmfCc", "SlotDialogAction", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotDialogAction = exports('SlotDialogAction', (_dec = ccclass('SlotDialogAction'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: Sprite
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: SlotSoundPlayer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(SlotDialogAction, _SlotUIScene);

        function SlotDialogAction() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.actionOK = void 0;
          _this.actionCancel = void 0;
          _this.actionClose = void 0;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleSpriteFrames", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonOK", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonCancel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonClose", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "message", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slotSoundPlayer", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotDialogAction.prototype;

        _proto.show = function show() {
          if (!this.node.active) _SlotUIScene.prototype.show.call(this);
          var _this$content = this.content,
              strText = _this$content.strText,
              dialogType = _this$content.dialogType,
              _this$content$actionO = _this$content.actionOK,
              actionOK = _this$content$actionO === void 0 ? null : _this$content$actionO,
              _this$content$actionC = _this$content.actionCancel,
              actionCancel = _this$content$actionC === void 0 ? null : _this$content$actionC,
              _this$content$actionC2 = _this$content.actionClose,
              actionClose = _this$content$actionC2 === void 0 ? null : _this$content$actionC2;
          this.showMessage(strText, dialogType, actionOK, actionCancel, actionClose);
        };

        _proto.showMessage = function showMessage(strText, dialogType, actionOK, actionCancel, actionClose) {
          if (dialogType === void 0) {
            dialogType = 0;
          }

          if (this.message.string.replace(/\n|\r/g, "") !== strText.replace(/\n|\r/g, "")) {
            this.message.string = strText;
          }

          this.title.spriteFrame = this.titleSpriteFrames[dialogType];
          this.actionOK = actionOK;
          this.actionCancel = actionCancel;
          this.actionClose = actionClose;

          if (!actionCancel) {
            this.buttonCancel.active = false;
          } else {
            this.buttonCancel.active = true;
          }

          if (!actionOK) {
            this.buttonOK.active = false;
          } else {
            this.buttonOK.active = true;
          }

          if (!actionClose) {
            this.buttonClose.active = false;
          } else {
            this.buttonClose.active = true;
          }
        };

        _proto.isDisplay = function isDisplay() {
          return this.node.active;
        };

        _proto.onActionOK = function onActionOK() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionOK();
          this.hideScene();
        };

        _proto.onActionClose = function onActionClose() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionClose();
          this.hideScene();
        };

        _proto.onActionCancel = function onActionCancel() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.actionCancel();
          this.hideScene();
        };

        _proto.hidePopup = function hidePopup() {
          this.slotSoundPlayer.playSfx('CLICK');
          this.hideScene();
        };

        return SlotDialogAction;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "titleSpriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonOK", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonCancel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonClose", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "message", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "slotSoundPlayer", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotDirector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseDirector.ts', './TurnBaseFSM.ts', './CustomEnum.ts', './loadConfigAsync.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, log, tween, BaseDirector, StateMachine, SlotGameMode, WalletType, TutorialTriggerType, loadConfigAsync, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
      tween = module.tween;
    }, function (module) {
      BaseDirector = module.BaseDirector;
    }, function (module) {
      StateMachine = module.default;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
      WalletType = module.WalletType;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "7b11catKKVPtKO7R4dDjc3O", "SlotDirector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotText = null;
      var SlotDirector = exports('SlotDirector', (_dec = ccclass('SlotDirector'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseDirector) {
        _inheritsLoose(SlotDirector, _BaseDirector);

        function SlotDirector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseDirector.call.apply(_BaseDirector, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slotButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "table", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spinTimes", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isAlwaysAutoSpin", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questDummy", _descriptor6, _assertThisInitialized(_this));

          _this._autoSpin = false;
          _this._beginToExit = false;
          _this._tweenPanelQuest = null;
          _this.isRunPromotion = void 0;
          _this.fsm = void 0;
          _this._callBackAutoSpin = null;
          _this.callbackStateUpdate = null;
          _this.hasTable = false;
          _this.hasPayline = false;
          _this._delayTimeCallback = null;
          _this._canFastUpdateWinAmount = false;
          _this._winValue = 0;
          _this._updateInterval = null;
          _this.isSpinning = false;
          return _this;
        }

        var _proto = SlotDirector.prototype;

        _proto.onExtendedLoad = function onExtendedLoad() {
          this.node.on("GAME_UPDATE", this.stateUpdate, this);
          this.node.on("GAME_RESUME", this.stateResume, this);
          this.node.on("GAME_ENTER", this.ready, this);
          this.node.on("GAME_INIT", this.init, this);
          this.node.on("GAME_SHOW", this.showGame, this);
          this.node.on("GAME_HIDE", this.hideGame, this);
          this.node.on("SWITCH_MODE", this.switchMode, this);
          this.node.on("ENABLE_BUTTON_INTERACTION", this.enableButtonInteraction, this);
          this.node.on("SPIN_DISABLE", this.disableSpin, this);
          this.node.on("SPIN_ENABLE", this.enableSpin, this);
          this.node.on("TRIGGER_FREE_SPIN_OPTION", this.freeSpinOptionTrigger, this);
          this.node.on("STOP_WITH_RANDOM_MATRIX", this.forceStopSpining, this);
          this.node.on("SETUP_PROMO_SPIN", this.setUpPromotionSpin, this);
          this.node.on('UPDATE_SPINTIMES', this.updateSpinTimes, this);

          if (this.eventManager) {
            this.eventManager.on('SET_UP_SLOT_BUTTON', this.setUpSlotButton, this);
            this.eventManager.on('SET_UP_SPIN_TIMES', this.setUpSpinTimes, this);
          }

          this._resetStoreScript();

          this.mainDirector.gameModes[this.currentGameMode] = this.node;
          this._updateInterval = setInterval(this.fixedUpdate.bind(this), 1000);
          SlotText = this.config.MESSAGE_DIALOG;
        };

        _proto.init = function init() {
          this.fsm = new StateMachine();
          this.writer = this.node['writer'];
          this.fsm.GAMEMODE = this.node.name;
          this.table.emit("INIT");
          this.runAction('GameStart');
          this.extendInit();
          this._autoSpin = false;
          this._beginToExit = false;
        };

        _proto.switchMode = function switchMode() {
          this.clearAsyncScript();
          this.resumeAllWallets();
          this.runAction('SwitchMode');
        };

        _proto.resumeAllWallets = function resumeAllWallets() {
          this.dataStore.resumeWallet(WalletType.NORMAL);
          this.dataStore.resumeWallet(WalletType.PROMOTE);
          this.dataStore.resumeWallet(WalletType.TRIAL);
        };

        _proto.extendInit = function extendInit() {//Add your overwrite code here!
        };

        _proto.setUpSlotButton = function setUpSlotButton(data) {
          if (data) {
            var slotGameType = data.slotGameType,
                slotButton = data.slotButton;

            if (slotGameType === this.currentGameMode) {
              this.slotButton = slotButton;

              if (slotGameType !== SlotGameMode.NormalGame) {
                this.slotButton.active = false;
              }
            }
          }
        };

        _proto.setUpSpinTimes = function setUpSpinTimes(data) {
          if (data) {
            var slotGameType = data.slotGameType,
                spinTimes = data.spinTimes;

            if (slotGameType === this.currentGameMode) {
              this.spinTimes = spinTimes;

              if (slotGameType !== SlotGameMode.NormalGame) {
                this.spinTimes.active = false;
              }
            }
          }
        };

        _proto.enableButtonInteraction = function enableButtonInteraction() {
          if (this.slotButton) {
            this.slotButton.on("SPIN_CLICK", this.spinClick, this);
            this.slotButton.on("SPACE_PRESSED", this.onSpacePressed, this);
            this.slotButton.on("FAST_TO_RESULT_CLICK", this.fastToResultClick, this);
            this.slotButton.on("FAST_TO_RESULT_BY_SPACE", this.fastToResultBySpaceBar, this);
            this.slotButton.on("MULTI_SPIN_CLICK", this.multiSpinClick, this);
            this.slotButton.on("STOP_AUTO_SPIN_CLICK", this.stopAutoSpinClick, this);
            this.slotButton.on("ON_TOUCH_START", this.onTouchStartSpinButton, this);
            this.slotButton.on("ON_TOUCH_CANCEL", this.onTouchCancelSpinButton, this);
          }
        };

        _proto.runCallbackStateUpdate = function runCallbackStateUpdate() {
          this.callbackStateUpdate && this.callbackStateUpdate();
          this.callbackStateUpdate = null;
        };

        _proto.stateUpdate = function stateUpdate(callback) {
          this.callbackStateUpdate = callback;
          this.runAction('ResultReceive');
        };

        _proto.stateResume = function stateResume() {
          this.fsm.gameResume();
          this.runAction('Resume');
        };

        _proto.ready = function ready(matrix) {
          var isFinished = this.dataStore.playSession.isFinished;

          if (matrix) {
            this.table.emit("CHANGE_MATRIX", {
              matrix: matrix
            });
          }

          if (this.slotButton && isFinished !== false) {
            this.slotButton.active = true;
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
          }

          if (this.isAlwaysAutoSpin) {
            var _this$dataStore$playS = this.dataStore.playSession,
                bonusGameRemain = _this$dataStore$playS.bonusGameRemain,
                freeGameRemain = _this$dataStore$playS.freeGameRemain,
                freeGame = _this$dataStore$playS.freeGame;

            if (bonusGameRemain > 0) {
              this.stateResume();
            } else {
              var spinTimes = freeGameRemain > 0 ? freeGameRemain : freeGame;

              if (spinTimes > 0) {
                if (this.spinTimes) {
                  this.spinTimes.active = this.isAlwaysAutoSpin;
                  this.spinTimes.emit("UPDATE_SPINTIMES", spinTimes);
                }

                this.runAction('SpinByTimes', spinTimes);
              }
            }
          } else {
            if (this.slotButton) this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          var triggerType = TutorialTriggerType.ResumeNormalGame;

          if (this.currentGameMode === SlotGameMode.FreeGame) {
            triggerType = TutorialTriggerType.EnterFreeGame;
          } else if (this.currentGameMode === SlotGameMode.BonusGame) {
            triggerType = TutorialTriggerType.EnterBonusGame;
          } else if (this.currentGameMode === SlotGameMode.TopUpGame) {
            triggerType = TutorialTriggerType.EnterTopupGame;
          }

          this.guiMgr.setQuestPosition(this.questDummy);
          this.soundPlayer && this.soundPlayer.playMainBGM();
        };

        _proto.disableSpin = function disableSpin() {
          if (this.slotButton) this.slotButton.emit("SPIN_DISABLE");
        };

        _proto.enableSpin = function enableSpin() {
          if (this.slotButton) this.slotButton.emit("SPIN_ENABLE");
        };

        _proto.freeSpinOptionTrigger = function freeSpinOptionTrigger(optionIndex) {
          this.mainDirector.gameStateManager.triggerFreeSpinOption(optionIndex);
          this.fsm.gameRestart();
          this.hasTable = false;
          this.fsm.actionTrigger();
        };

        _proto.skipAllEffects = function skipAllEffects() {
          this.guiMgr.skipAllUIScenes();
          this.guiMgr.stopAnimWinQuest();
        };

        _proto.spinClick = function spinClick() {
          if (!this.node || !this.fsm || !this.fsm.can('actionTrigger')) return;
          this.skipAllEffects();
          this.resetAsyncScript();
          this.eventManager.emit(EventNames.SPIN_CLICK_ACTION);
          this.runAction('SpinClick');
        };

        _proto.onSpacePressed = function onSpacePressed() {
          if (!this.guiMgr.isDisplayDialog() && !this.isAlwaysAutoSpin) this.spinClick();
        };

        _proto.fastToResultBySpaceBar = function fastToResultBySpaceBar() {
          if (!this.guiMgr.isDisplayDialog()) this.fastToResultClick();
        };

        _proto.fastToResultClick = function fastToResultClick() {
          if (!this.node.active || this.getOpacity(this.node) === 0) return;
          this.eventManager.emit(EventNames.FAST_TO_RESULT_CLICK);
          this.setGameSpeedMode("INSTANTLY");
          this.table.emit("FAST_TO_RESULT");
          this.resetAsyncScript();
        };

        _proto.multiSpinClick = function multiSpinClick(spinTimes) {
          if (spinTimes === void 0) {
            spinTimes = Number.MAX_SAFE_INTEGER;
          }

          this.runAction('SpinByTimes', spinTimes);
        };

        _proto.checkAutoSpinFlag = function checkAutoSpinFlag(flag) {
          this.slotButton.emit('PAUSE_AUTO_SPIN', false);
        };

        _proto.stopAutoSpinClick = function stopAutoSpinClick() {
          if (this.slotButton) this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
          this.runAction('DisableAutoSpin');
          this._autoSpin = false;
          this.dataStore.isAutoSpin = false;
          this.spinTimes && this.spinTimes.emit("RESET_SPINTIMES");

          if (this._callBackAutoSpin) {
            if (this.currentGameMode === SlotGameMode.NormalGame) {
              this.guiMgr.enableSwitchWallet(true);
            }

            this.unschedule(this._callBackAutoSpin);
            var isFinished = this.dataStore.playSession.isFinished;

            if (isFinished === undefined || isFinished === true) {
              this._resetSpinButton();

              this.guiMgr.enableBet();
            }
          }
        };

        _proto.onTouchStartSpinButton = function onTouchStartSpinButton() {
          this.guiMgr.disableBet();
        };

        _proto.onTouchCancelSpinButton = function onTouchCancelSpinButton() {
          if (this.dataStore && this.dataStore.playSession.isFinished !== false && !this.isSpinning) {
            this.guiMgr.enableBet();
          }
        };

        _proto.showGame = function showGame() {
          if (this.slotButton) this.slotButton.active = true;
          if (this.spinTimes) this.spinTimes.active = this.isAlwaysAutoSpin;
          if (this.table) this.table.emit("GAME_SHOW");
        };

        _proto.hideGame = function hideGame() {
          if (this.slotButton) this.slotButton.active = false;
          if (this.spinTimes) this.spinTimes.active = false;
          if (this.table) this.table.emit("GAME_HIDE");
        } //ALL COMMANDS RUN BELOWS
        ;

        _proto._resetSpinButton = function _resetSpinButton(script) {
          if (script === void 0) {
            script = [];
          }

          if (this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE');
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          var promotion = this.dataStore.promotion;

          if (!promotion) {
            if (this.spinTimes) this.spinTimes.emit("RESET_SPINTIMES");
          }

          this._autoSpin = false;
          this.dataStore.isAutoSpin = false;
          this.executeNextScript(script);
        };

        _proto._stopAutoSpin = function _stopAutoSpin(script) {
          if (script === void 0) {
            script = [];
          }

          this.stopAutoSpinClick();
          this.executeNextScript(script);
        };

        _proto.forceStopSpining = function forceStopSpining() {
          var _this2 = this;

          this.stopAutoSpinClick();

          if (this._callBackAutoSpin) {
            this.unschedule(this._callBackAutoSpin);
          }

          var _ref = this.dataStore,
              promotion = _ref.promotion,
              isErrorPromotion = _ref.isErrorPromotion;
          var isNormalGame = this.dataStore.currentGameMode == SlotGameMode.NormalGame;

          if (promotion && isNormalGame) {
            var _this$dataStore$promo = this.dataStore.promotion,
                promotionRemain = _this$dataStore$promo.promotionRemain,
                promotionTotal = _this$dataStore$promo.promotionTotal;
            var spinTimes = Number(promotionRemain || 0);

            if (!isErrorPromotion && promotionTotal && promotionTotal > 0) {
              spinTimes = promotionTotal == promotionRemain ? Number(promotionTotal) : spinTimes + 1;
            }

            if (spinTimes) {
              this.spinTimes && this.spinTimes.emit("UPDATE_SPINTIMES", spinTimes, this.isRunPromotion);
              this.dataStore.promotion.promotionRemain = spinTimes;
            }

            this.dataStore.isErrorPromotion = false;
          }

          this.resetPlaySessionDataLastSpin();
          this.table.emit('STOP_REEL_WITH_RANDOM_MATRIX', function () {
            _this2.isSpinning = false;
          });
          this.fsm.resultReceive();
          this.fastToResultClick();
          this.runAction('GameFinish');

          this._gameRestart();
        };

        _proto.resetPlaySessionDataLastSpin = function resetPlaySessionDataLastSpin() {
          // Reset data last spin here
          if (!this.dataStore.playSession || Object.keys(this.dataStore.playSession).length == 0) return;

          if (this.dataStore.playSession.winAmount) {
            this.dataStore.playSession.winAmount = 0;
          }

          if (this.dataStore.playSession.winAmountPS) {
            this.dataStore.playSession.winAmountPS = 0;
          }
        };

        _proto._setTurboMode = function _setTurboMode() {
          if (this.dataStore.modeTurbo) {
            this._setMode('TURBO');
          } else {
            this._setMode('FAST');
          }
        };

        _proto._setMode = function _setMode(mode) {
          this.table.emit("SET_MODE", mode);
        };

        _proto._spinClick = function _spinClick(script) {
          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('actionTrigger')) return;
          this.fsm.actionTrigger();

          this._setTurboMode();

          this.resetGameSpeed();

          if (this.slotButton) {
            this.slotButton.emit('SPIN_DISABLE');
            this.slotButton.emit('SPIN_HIDE');
            this.slotButton.emit('FAST_TO_RESULT_DISABLE');
            this.slotButton.emit('DISABLE_PROMOTION_STOP_SPIN');
            this.slotButton.emit('FAST_TO_RESULT_SHOW');
          }

          if (!this.hasTable) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("START_SPINNING");
          this.isSpinning = true;
          this.executeNextScript(script);
        };

        _proto._sendSpinToNetwork = function _sendSpinToNetwork(script, _ref2) {
          var currentBetData = _ref2.currentBetData;
          var betLines = this.config.HAS_SELECT_BET_LINE ? this.dataStore.betData.betLines : void 0;
          this.mainDirector.sendSpinToNetwork(this.currentGameMode, currentBetData, betLines);
          this.executeNextScript(script);
        };

        _proto._newGameMode = function _newGameMode(script, _ref3) {
          var _this3 = this;

          if (script === void 0) {
            script = [];
          }

          var name = _ref3.name,
              data = _ref3.data;
          this.resetGameSpeed();
          this.mainDirector.newGameMode({
            name: name,
            data: data
          }, function () {
            _this3.executeNextScript(script);
          });
        };

        _proto._resumeGameMode = function _resumeGameMode(script, _ref4) {
          var _this4 = this;

          if (script === void 0) {
            script = [];
          }

          var name = _ref4.name,
              data = _ref4.data;
          this.resetGameSpeed();

          if (!this.hasTable) {
            this.hasTable = true;
          }

          this.mainDirector.resumeGameMode({
            name: name
          }, function () {
            if (_this4.soundPlayer) _this4.soundPlayer.stopAllAudio();
            if (_this4.soundPlayer) _this4.soundPlayer.playMainBGM(name);

            _this4.executeNextScript(script);
          });

          if (!this._autoSpin && this.slotButton && this.dataStore.playSession.isFinished == true) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
            this.slotButton.emit('STOP_AUTO_SPIN_HIDE', true);
          }

          this.guiMgr.setQuestPosition(this.questDummy);
        };

        _proto._gameStart = function _gameStart(script) {
          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('gameStart')) return;
          this.fsm.gameStart();
          this.hasTable = false;
          this.hasPayline = false;

          if (this.table && this.table.active === true) {
            this.hasTable = true;
          }

          if (this.table && this.table["hasPayline"] === true) {
            this.hasPayline = true;
          }

          this.executeNextScript(script);
        };

        _proto._resultReceive = function _resultReceive(script, data) {
          var _this5 = this;

          if (!this.fsm.can('resultReceive')) return;
          this.fsm.resultReceive();

          if (this.slotButton) {
            this.slotButton.emit('FAST_TO_RESULT_ENABLE');
            this.slotButton.emit('ENABLE_PROMOTION_STOP_SPIN');
          }

          if (!this.hasTable) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("STOP_SPINNING", data, function () {
            _this5.isSpinning = false;

            _this5.executeNextScript(script);
          });
        };

        _proto._showResult = function _showResult(script) {
          this.runAction('ShowResults');
          this.executeNextScript(script);
        };

        _proto._gameFinish = function _gameFinish(script) {
          if (script === void 0) {
            script = [];
          }

          this.eventManager.emit(EventNames.GAME_RESET_SESSION);
          this.runAction('GameFinish');
          this.executeNextScript(script);
        };

        _proto._gameRestart = function _gameRestart(script, isSkip) {
          if (script === void 0) {
            script = [];
          }

          if (isSkip === void 0) {
            isSkip = false;
          }

          if (!this.fsm.can('gameRestart')) return;
          this.fsm.gameRestart();

          if (!this.dataStore.isAutoSpin && this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
          }

          if (!this.isAlwaysAutoSpin && this.slotButton) {
            this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          this.runAction('GameRestart');
          var GAME_SPEED = this.config.GAME_SPEED;
          var isF2R = GAME_SPEED && this.dataStore.gameSpeed === GAME_SPEED.INSTANTLY;

          if (!isSkip && !isF2R) {
            this.resetGameSpeed();
          }

          this.eventManager.emit(EventNames.GAME_RESTART, this.currentGameMode);
          this.executeNextScript(script);
        };

        _proto._gameExit = function _gameExit(script) {
          var _this6 = this;

          if (script === void 0) {
            script = [];
          }

          if (!this.fsm.can('gameRestart')) return;
          this.fsm.gameRestart();

          if (this.slotButton) {
            this.slotButton.emit('SPIN_SHOW');
            this.slotButton.emit('SPIN_ENABLE');
          }

          if (this.forceToExitMode) {
            this.dataStore.playSession.freeGameRemain = 0;
            this.dataStore.playSession.bonusGameRemain = 0;
            this.dataStore.lastEvent = {};
            this.dataStore.isAutoSpin = false;
            this.forceToExitMode = false;
          } //Turn off before swicth mode, because 2 mode use same code, hehe


          if (this.isAlwaysAutoSpin) {
            this.runAction('DisableAutoSpin');
          } else {
            if (this.slotButton) this.slotButton.emit('FAST_TO_RESULT_HIDE');
          }

          this.table.emit("GAME_EXIT");
          this.node.exit(function () {
            _this6.executeNextScript(script);
          });
          this._beginToExit = false;
          if (this.spinTimes) this.spinTimes.active = false;
        };

        _proto._updateMatrix = function _updateMatrix(script, data) {
          this.table.emit("CHANGE_MATRIX", data);
          this.executeNextScript(script);
        };

        _proto._resumeSpinTime = function _resumeSpinTime(script, spinTimes) {
          if (this._autoSpin == true) {
            this.dataStore.isAutoSpin = true;
            this.dataStore.spinTimes = spinTimes;
          }

          this.executeNextScript(script);
        };

        _proto._updateSpinTimes = function _updateSpinTimes(script, spinTimes) {
          this.spinTimes && this.spinTimes.emit("UPDATE_SPINTIMES", spinTimes, this.isRunPromotion);
          this.executeNextScript(script);
        };

        _proto._moveParticles = function _moveParticles(script) {
          var _this7 = this;

          if (this.table) {
            this.table.emit("MOVE_PARTICLE_SCATTER", this.currentGameMode, function () {
              _this7.executeNextScript(script);
            });
          } else {
            this.executeNextScript(script);
          }
        };

        _proto._moveParticles_2 = function _moveParticles_2(script) {
          this.executeNextScript(script);
        };

        _proto._addSpinTimesAnimation = function _addSpinTimesAnimation(script, value) {
          var _this8 = this;

          if (this.spinTimes) this.spinTimes.emit("ANIM_SPINTIMES", value, false, function () {
            _this8.executeNextScript(script);
          });
        };

        _proto._addSpinTimesAnimation_2 = function _addSpinTimesAnimation_2(script, value) {
          if (this.spinTimes) this.spinTimes.emit("ANIM_SPINTIMES", value, true);
          this.executeNextScript(script);
        };

        _proto._updateLastWin = function _updateLastWin(script, data) {
          if (data) {
            this.guiMgr.changeToLastWin();
          } else {
            this.guiMgr.changeToWin();
          }

          this.executeNextScript(script);
        };

        _proto._resetAutoSpin = function _resetAutoSpin(script) {
          this.slotButton.emit('HIDE_AUTO_SPIN_PANEL');
          this.executeNextScript(script);
        };

        _proto._resetFSM = function _resetFSM(script) {
          this.fsm.reboot();
          this.fsm.gameStart();
          this.executeNextScript(script);
        };

        _proto._updateWinningAmount = function _updateWinningAmount(script, _ref5) {
          var _this9 = this;

          var winAmount = _ref5.winAmount,
              time = _ref5.time;
          var isFTR = this.dataStore.gameSpeed === this.config.GAME_SPEED.INSTANTLY;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              if (winAmount > 0 && !isFTR) {
                var rate = winAmount / _this9.dataStore.getTotalBet();

                _this9.playSoundWin(rate);
              }

              _this9.guiMgr.updateWinAmount(winAmount, time / 1000);

              _this9.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_updateWinningAmount",
              isSkippable: false
            });
          } else {
            if (winAmount > 0 && !isFTR) {
              var rate = winAmount / this.dataStore.getTotalBet();
              this.playSoundWin(rate);
            }

            this.guiMgr.updateWinAmount(winAmount, time / 1000);
            this.executeNextScript(script);
          }
        } //Only when resume
        ;

        _proto._updateBetId = function _updateBetId(script, betId) {
          this.guiMgr.setBetId(betId);
          this.executeNextScript(script);
        };

        _proto._runAutoSpin = function _runAutoSpin(script) {
          var _this10 = this;

          if (!this.isAlwaysAutoSpin
          /*normal*/
          && this.dataStore.isAutoSpin && this.slotButton) {
            this.slotButton.emit('STOP_AUTO_SPIN_SHOW');
          }

          this.skipAllEffects();
          if (this.slotButton) this.slotButton.emit('SPIN_DISABLE');

          this._callBackAutoSpin = function () {
            _this10.runAction('SpinClick');

            _this10.executeNextScript(script);

            _this10._callBackAutoSpin = null;
          };

          this._autoSpin = true;
          this.scheduleOnce(this._callBackAutoSpin, 0.5);
        };

        _proto._triggerWinEffect = function _triggerWinEffect(script) {
          this.executeNextScript(script);
        };

        _proto._triggerSmallWinEffect = function _triggerSmallWinEffect(script) {
          this.executeNextScript(script);
        };

        _proto._setUpPaylines = function _setUpPaylines(script, _ref6) {
          var matrix = _ref6.matrix,
              payLines = _ref6.payLines;
          this.hasPayline = true;
          this.table.emit("SETUP_PAYLINES", matrix, payLines);
          this.executeNextScript(script);
        };

        _proto._showBigWild = function _showBigWild(script, _ref7) {
          var isResume = _ref7.isResume;
          this.table.emit("SHOW_BIG_WILD", this.currentGameMode, isResume);
          this.executeNextScript(script);
        };

        _proto._showNormalSymbolPayLine = function _showNormalSymbolPayLine(script, payLines) {
          var _this11 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("BLINK_ALL_NORMAL_PAYLINES", function () {
            _this11.table.emit("SHOW_ALL_NORMAL_PAYLINES", payLines);

            _this11.executeNextScript(script);
          });
        };

        _proto._showNormalPayline = function _showNormalPayline(script) {
          var _this12 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this12.table.emit("SHOW_ALL_NORMAL_PAYLINES");

              _this12.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showNormalPayline",
              isSkippable: true
            });
          } else {
            this.table.emit("SHOW_ALL_NORMAL_PAYLINES");
            this.executeNextScript(script);
          }
        } // _showNormalPayline_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        ;

        _proto._showFreePayline = function _showFreePayline(script) {
          var _this13 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_ALL_FREE_PAYLINES", function () {
            _this13.executeNextScript(script);
          });
        } // _showFreePayline_2(script:script[]) {
        //     this.executeNextScript(script);
        // }
        ;

        _proto._blinkAllPaylines = function _blinkAllPaylines(script) {
          var _this14 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this14.table.emit("BLINK_ALL_NORMAL_PAYLINES", _this14.runAsyncScript.bind(_this14));
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_blinkAllPaylines",
              isSkippable: true
            });
          } else {
            this.table.emit("BLINK_ALL_NORMAL_PAYLINES", this.executeNextScript.bind(this, script));
          }
        };

        _proto._showBonusPayLine = function _showBonusPayLine(script) {
          var _this15 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_BONUS_PAYLINE", function () {
            _this15.executeNextScript(script);
          });
        };

        _proto._showBonusPayLine_2 = function _showBonusPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._showScatterPayLine = function _showScatterPayLine(script) {
          var _this16 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_SCATTER_PAYLINE", function () {
            _this16.executeNextScript(script);
          });
        };

        _proto._showScatterPayLine_2 = function _showScatterPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._showJackpotPayLine = function _showJackpotPayLine(script, _ref8) {
          var _this17 = this;

          var jpPayLineID = _ref8.jpPayLineID;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_JACKPOT_PAYLINE", jpPayLineID, function () {
            _this17.executeNextScript(script);
          });
        };

        _proto._showJackpotPayLine_2 = function _showJackpotPayLine_2(script, _ref9) {
          var jpPayLineID = _ref9.jpPayLineID;
          this.executeNextScript(script);
        };

        _proto._showWildPayLine = function _showWildPayLine(script) {
          var _this18 = this;

          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.table.emit("SHOW_WILD_PAYLINE", function () {
            _this18.executeNextScript(script);
          });
        };

        _proto._showWildPayLine_2 = function _showWildPayLine_2(script) {
          this.executeNextScript(script);
        };

        _proto._clearPaylines = function _clearPaylines(script) {
          if (!this.hasPayline) {
            this.executeNextScript(script);
            return;
          }

          this.hasPayline = false;
          this.table.emit("CLEAR_PAYLINES");
          this.executeNextScript(script);
        };

        _proto._forceToClearPaylines = function _forceToClearPaylines(script) {
          this.table.emit("CLEAR_PAYLINES");
          this.hasPayline = false;
          this.executeNextScript(script);
        };

        _proto._delayTimeScript = function _delayTimeScript(script, time) {
          var _this19 = this;

          this._delayTimeCallback = function () {
            _this19.executeNextScript(script);
          };

          this.scheduleOnce(this._delayTimeCallback, time);
        };

        _proto._showCutscene = function _showCutscene(script, _ref10) {
          var _this20 = this;

          var name = _ref10.name,
              content = _ref10.content;
          this.guiMgr.showCutScene(name, content, function () {
            _this20.executeNextScript(script);
          });
        };

        _proto._showFreeOptionResult = function _showFreeOptionResult() {
          this.eventManager.emit(EventNames.FREEOPTION_RESULT_START);
          this.runAction('FreeOptionResult');
        };

        _proto._showBigWin = function _showBigWin(script, _ref11) {
          var _this21 = this;

          var name = _ref11.name;
          var _this$dataStore$playS2 = this.dataStore.playSession,
              winType = _this$dataStore$playS2.winType,
              bigWinConfig = _this$dataStore$playS2.bigWinConfig,
              bigwinAmount = _this$dataStore$playS2.bigwinAmount;
          if (!winType) return this.executeNextScript(script);
          var content = {
            winType: winType,
            bigWinConfig: bigWinConfig,
            winAmount: bigwinAmount,
            currentBetData: this.dataStore.betData.getTotalBet()
          };

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this21.guiMgr.showCutScene(name, content, function () {
                _this21.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_showBigWin",
              isSkippable: true
            });
          } else {
            this.guiMgr.showCutScene(name, content, function () {
              _this21.executeNextScript(script);
            });
          }
        };

        _proto._showBigWin_2 = function _showBigWin_2(script) {
          this.eventManager.emit('SKIP_BIGWIN_FTR');
          this.executeNextScript(script);
        };

        _proto._showCutscene_2 = function _showCutscene_2(script) {
          this.executeNextScript(script);
        };

        _proto._showUnskippedCutscene = function _showUnskippedCutscene(script, _ref12) {
          var _this22 = this;

          var name = _ref12.name,
              content = _ref12.content;
          this.guiMgr.showCutScene(name, content, function () {
            _this22.executeNextScript(script);
          });
        };

        _proto._hideCutsceneWithCB = function _hideCutsceneWithCB(script, _ref13) {
          var _this23 = this;

          var name = _ref13.name;
          this.guiMgr.hideCutSceneWithCB(name, function () {
            _this23.executeNextScript(script);
          });
        };

        _proto._hideCutscene = function _hideCutscene(script, _ref14) {
          var name = _ref14.name;
          this.guiMgr.hideCutScene(name);
          this.executeNextScript(script);
        };

        _proto._clearWinAmount = function _clearWinAmount(script) {
          this.guiMgr.fadeOutWinAmount();
          this.executeNextScript(script);
        };

        _proto.update = function update(dt) {
          // override it
          if (this.currentGameMode == SlotGameMode.NormalGame && this.dataStore.walletHasUpdate) {
            if (this.fsm && this.fsm.can('actionTrigger')) {
              this.runAction('UpdateWalletData');
            }
          }
        };

        _proto.fixedUpdate = function fixedUpdate() {};

        _proto._updateWallet = function _updateWallet(script) {
          this.guiMgr.updateWallet(this.dataStore.getWallets());
          this.executeNextScript(script);
        };

        _proto._updateWalletAfterClickSpin = function _updateWalletAfterClickSpin(script) {
          this.dataStore.setCurrentWallet(this.dataStore.getWalletAfterSpin());
          this.mainDirector.guiMgr.updateWallet(this.dataStore.getWallets());
          this.executeNextScript(script);
        };

        _proto._showMessageNoMoney = function _showMessageNoMoney(script, data) {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var actionBtnOK = function actionBtnOK() {
            data && data.callback && data.callback();
          };

          var actionCancel = null;
          var message = "";
          var walletName = this.dataStore.getCurrentWalletType() == WalletType.PROMOTE ? SlotText.WALLET_PROMOTE : SlotText.WALLET_NORMAL;

          if (this.dataStore.getCurrentWalletType() == WalletType.PROMOTE) {
            message = SlotText.NOT_ENOUGH_MONEY;

            if (this.config.IS_SUPPORT_EVENT) {
              message = SlotText.NOT_ENOUGH_MONEY.replace('[wallet]', walletName);
            }

            this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          } else {
            if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
              message = SlotText.DEPOSIT_MONEY;

              if (this.config.IS_SUPPORT_EVENT) {
                message = SlotText.DEPOSIT_MONEY_EVENT.replace('[wallet]', walletName);
              }

              actionBtnOK = function actionBtnOK() {
                globalThis.ingameDeposit();
              };

              actionCancel = function actionCancel() {
                log('Cancel deposit');
              };

              log("Show Deposit");
            } else {
              message = SlotText.NO_MONEY;

              if (this.config.IS_SUPPORT_EVENT && this.dataStore.getWalletTypes().length > 1) {
                message = SlotText.NO_MONEY_EVENT.replace('[wallet]', walletName);
              }

              log("Show No Money");
            }

            this.guiMgr.showDialog(message, actionBtnOK, actionCancel);
          }
        };

        _proto._updateValueJP = function _updateValueJP(script, data) {
          this.guiMgr.updateValueJP(data);
          this.executeNextScript(script);
        };

        _proto._pauseUpdateJP = function _pauseUpdateJP(script) {
          this.guiMgr.pauseJackpot();
          this.executeNextScript(script);
        };

        _proto._resumeUpdateJP = function _resumeUpdateJP(script) {
          this.guiMgr.resumeJackpot();
          this.executeNextScript(script);
        };

        _proto._disableBet = function _disableBet(script) {
          this.guiMgr.disableBet();
          this.guiMgr.enableSwitchWallet(false);
          this.executeNextScript(script);
        };

        _proto._enableBet = function _enableBet(script) {
          this.guiMgr.enableBet();
          this.guiMgr.enableSwitchWallet(true);
          this.executeNextScript(script);
        };

        _proto._updateWinningAmountSync = function _updateWinningAmountSync(script, _ref15) {
          var _this24 = this;

          var winAmount = _ref15.winAmount,
              time = _ref15.time,
              rate = _ref15.rate,
              isSessionEnded = _ref15.isSessionEnded;
          var _this$dataStore = this.dataStore,
              isAutoSpin = _this$dataStore.isAutoSpin,
              gameSpeed = _this$dataStore.gameSpeed;
          var isFTR = gameSpeed === this.config.GAME_SPEED.INSTANTLY;
          var timeShow = isFTR ? 20 : time;
          this._canFastUpdateWinAmount = true;
          this._winValue = winAmount;
          var runScript = false;

          if (!isFTR) {
            this.playSoundWin(rate);
          }

          this.guiMgr.updateWinAmount(winAmount, timeShow, function () {
            _this24._canFastUpdateWinAmount = false;
            _this24._winValue = 0;

            _this24.stopSoundWin();

            (!isSessionEnded || !runScript) && _this24.executeNextScript(script);
          });

          if (isSessionEnded && !isAutoSpin) {
            runScript = true;
            this.executeNextScript(script);
          }
        };

        _proto._showPromotionPopup = function _showPromotionPopup(script) {
          this.mainDirector.showPromotionPopup();
          this.executeNextScript(script);
        };

        _proto.setUpPromotionSpin = function setUpPromotionSpin() {
          var _this$dataStore$promo2 = this.dataStore.promotion,
              promotionBetId = _this$dataStore$promo2.promotionBetId,
              promotionRemain = _this$dataStore$promo2.promotionRemain;
          this.spinTimes.active = true;
          this.isRunPromotion = true;
          this.slotButton.emit('SHOW_PROMO_UI');
          this.spinTimes.emit("UPDATE_SPINTIMES", promotionRemain, true); // set Bet id with promotionBetId

          this.guiMgr.setBetId(promotionBetId);
        };

        _proto._updatePromotionRemain = function _updatePromotionRemain(script, number) {
          this.dataStore.promotion.promotionRemain = number;
          this.slotButton.emit('PROMO_STOP_SPIN_SHOW');
          this.slotButton.emit('PROMO_SPIN_HIDE');
          this.executeNextScript(script);
        };

        _proto._resetPromotionButtons = function _resetPromotionButtons(script) {
          if (this.spinTimes && this.spinTimes.active == false) this.spinTimes.active = true;
          this.slotButton.emit('PROMO_SPIN_SHOW');
          this.slotButton.emit('PROMO_STOP_SPIN_HIDE');
          this.executeNextScript(script);
        };

        _proto._exitPromotionMode = function _exitPromotionMode(script) {
          if (this.isRunPromotion) {
            this.isRunPromotion = false;
            this.slotButton.emit('HIDE_PROMO_UI');
            this.slotButton.emit('PROMO_STOP_SPIN_HIDE');
            this.spinTimes.emit("RESET_SPINTIMES");
            this.dataStore.promotion = null;
            this.spinTimes.active = false;
            this.executeNextScript(script);
          } else {
            this.executeNextScript(script);
          }
        };

        _proto.playSoundWin = function playSoundWin(rate) {
          if (rate < 10) this.soundPlayer && this.soundPlayer.playSoundSmallWin(rate);
        };

        _proto.stopSoundWin = function stopSoundWin() {
          this.soundPlayer && this.soundPlayer.stopSoundSmallWin();
        };

        _proto._pauseCurrentWallet = function _pauseCurrentWallet(script) {
          this.dataStore.pauseCurrentWallet();
          this.executeNextScript(script);
        };

        _proto._pauseWallets = function _pauseWallets(script) {
          this.dataStore.pauseWallet(WalletType.NORMAL);
          this.dataStore.pauseWallet(WalletType.PROMOTE);
          this.dataStore.pauseWallet(WalletType.TRIAL);
          this.executeNextScript(script);
        };

        _proto._resumeWallets = function _resumeWallets(script) {
          var _this25 = this;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this25.dataStore.resumeWallet(WalletType.NORMAL);

              _this25.dataStore.resumeWallet(WalletType.PROMOTE);

              _this25.dataStore.resumeWallet(WalletType.TRIAL);

              _this25.runAsyncScript();
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_resumeWallets",
              isSkippable: false
            });
          } else {
            this.dataStore.resumeWallet(WalletType.NORMAL);
            this.dataStore.resumeWallet(WalletType.PROMOTE);
            this.dataStore.resumeWallet(WalletType.TRIAL);
            this.executeNextScript(script);
          }
        };

        _proto._playAnimWinQuest = function _playAnimWinQuest(script) {
          var _this26 = this;

          if (this.canStoreAsyncScript()) {
            var callback = function callback() {
              _this26.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);

              _this26.guiMgr.playAnimWinQuest(function () {
                _this26.guiMgr.setDoneQuest();

                _this26.guiMgr.refreshQuestUI();

                _this26.runAsyncScript();
              });
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_playAnimWinQuest",
              isSkippable: false
            });
          } else {
            this.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);
            this.guiMgr.playAnimWinQuest(function () {
              _this26.guiMgr.setDoneQuest();

              _this26.guiMgr.refreshQuestUI();

              _this26.executeNextScript(script);
            });
          }
        };

        _proto._openPanelQuest = function _openPanelQuest(script) {
          var _this27 = this;

          this.guiMgr.forceOpenPanel();
          this._tweenPanelQuest = tween(this.node).delay(0.5).call(function () {
            _this27.executeNextScript(script);
          }).start();
        };

        _proto._playAnimWinQuest_2 = function _playAnimWinQuest_2(script) {
          this.eventManager.emit(EventNames.PLAY_ANIM_WINQUEST);
          this.guiMgr.refreshQuestUI();
          this.guiMgr.setDoneQuest();
          this.guiMgr.refreshQuestUI();
          this.executeNextScript(script);
        };

        _proto._loadWallet = function _loadWallet(script, walletType) {
          if (!walletType) {
            this.dataStore.switchWallet(WalletType.NORMAL);
          } else {
            this.dataStore.switchWallet(WalletType.PROMOTE);
          }

          this.guiMgr.selectWallet();
          this.guiMgr.enableSwitchWallet(false);

          if (this.eventManager) {
            this.eventManager.emit(EventNames.SWITCH_WALLET, this.dataStore.getCurrentWalletType());
          }

          this.executeNextScript(script);
        };

        _proto._pauseTopPlayer = function _pauseTopPlayer(script) {
          if (this.config.IS_SUPPORT_EVENT) {
            this.guiMgr.pauseTopPlayer();
          }

          this.executeNextScript(script);
        };

        _proto._resumeTopPlayer = function _resumeTopPlayer(script) {
          if (this.config.IS_SUPPORT_EVENT) {
            this.guiMgr.resumeTopPlayer();
          }

          this.executeNextScript(script);
        };

        _proto._afterPlayAnimWinQuest = function _afterPlayAnimWinQuest(script) {
          var _this28 = this; //should be last script after bigwin


          if (this.canStoreAsyncScript()) {
            console.log('store callback play anim win quest');

            var callback = function callback() {
              _this28.dataStore.questData.finishedShowAnim = true;

              if (_this28.dataStore.questData.eventInfo.isFinished) {
                _this28.guiMgr.finishEvent(function () {
                  _this28.mainDirector.getNextEvent();

                  _this28.runAsyncScript();
                });
              } else {
                _this28.guiMgr.refreshQuestUI();

                _this28.runAsyncScript();
              }
            };

            this.storeAsyncScript(script, {
              callback: callback,
              name: "_afterPlayAnimWinQuest",
              isSkippable: false
            });
          } else {
            this.dataStore.questData.finishedShowAnim = true;

            if (this.dataStore.questData.eventInfo.isFinished) {
              this.guiMgr.finishEvent(function () {
                _this28.mainDirector.getNextEvent();

                _this28.executeNextScript(script);
              });
            } else {
              this.guiMgr.refreshQuestUI();
              this.executeNextScript(script);
            }
          }
        };

        _proto._refreshQuestUI = function _refreshQuestUI(script) {
          this.guiMgr.refreshQuestUI();
          this.executeNextScript(script);
        };

        _proto.onDestroy = function onDestroy() {
          if (this._updateInterval) {
            clearInterval(this._updateInterval);
          }

          if (this._tweenPanelQuest) {
            this._tweenPanelQuest.stop();
          }
        };

        _proto.updateSpinTimes = function updateSpinTimes(spinTimes) {
          this.spinTimes && this.spinTimes.emit('UPDATE_SPINTIMES', spinTimes);
        };

        _createClass(SlotDirector, [{
          key: "autoSpin",
          get: function get() {
            return this._autoSpin;
          },
          set: function set(value) {
            this._autoSpin = value;
          }
        }, {
          key: "beginToExit",
          get: function get() {
            return this._beginToExit;
          },
          set: function set(value) {
            this._beginToExit = value;
          }
        }]);

        return SlotDirector;
      }(BaseDirector), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "slotButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spinTimes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isAlwaysAutoSpin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "questDummy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotGameWriter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, SlotSceneType, SlotGameMode, StateGameMode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      SlotGameMode = module.SlotGameMode;
      StateGameMode = module.StateGameMode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2e12fTV28BAYaKxj4UNqS6r", "SlotGameWriter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotGameWriter = exports('SlotGameWriter', (_dec = ccclass('SlotGameWriter'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotGameWriter, _Component);

        function SlotGameWriter() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SlotGameWriter.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptResume = function makeScriptResume() {
          // todo: always rewrite this resume logic
          var dataStore = this.node.dataStore;

          if (dataStore) {
            var config = dataStore.config,
                promotion = dataStore.promotion;
            var NORMAL_TABLE_FORMAT = config.NORMAL_TABLE_FORMAT,
                FREE_TABLE_FORMAT = config.FREE_TABLE_FORMAT;
            var _dataStore$playSessio = dataStore.playSession,
                bonusGameMatrix = _dataStore$playSessio.bonusGameMatrix,
                normalGameMatrix = _dataStore$playSessio.normalGameMatrix,
                normalGamePaylines = _dataStore$playSessio.normalGamePaylines,
                bonusGameRemain = _dataStore$playSessio.bonusGameRemain,
                freeGameRemain = _dataStore$playSessio.freeGameRemain,
                freeGameMatrix = _dataStore$playSessio.freeGameMatrix,
                winAmountPS = _dataStore$playSessio.winAmountPS,
                betId = _dataStore$playSessio.betId,
                freeSpinOption = _dataStore$playSessio.freeSpinOption,
                walletType = _dataStore$playSessio.walletType;
            var normalSpinMatrix = dataStore.convertMatrix(normalGameMatrix, NORMAL_TABLE_FORMAT);
            var normalPayLines = normalGamePaylines ? dataStore.convertPayLine(normalGamePaylines) : null;
            var isBonusGameInNormal = bonusGameRemain && bonusGameRemain > 0 && !freeGameMatrix;
            var isBonusGameInFree = bonusGameRemain && bonusGameRemain > 0 && !isBonusGameInNormal;
            var isFreeGame = freeGameRemain && freeGameRemain > 0 || isBonusGameInFree;
            var listScript = [];
            var promotionRemain, promotionTotal;

            if (promotion) {
              promotionRemain = promotion.promotionRemain;
              promotionTotal = promotion.promotionTotal;
            }

            listScript.push({
              command: "_updateBetId",
              data: betId
            });
            listScript.push({
              command: "_loadWallet",
              data: walletType
            });
            listScript.push({
              command: "_disableBet"
            });
            listScript.push({
              command: "_updateMatrix",
              data: {
                matrix: normalSpinMatrix
              }
            });
            listScript.push({
              command: "_setUpPaylines",
              data: {
                matrix: normalSpinMatrix,
                payLines: normalPayLines
              }
            });
            listScript.push({
              command: "_showBigWild",
              data: {
                isResume: true
              }
            }); // const updatedWinAmount = winAmount - (betValue * currentBonusCredits);

            if (winAmountPS && winAmountPS > 0) {
              listScript.push({
                command: "_updateWinningAmount",
                data: {
                  winAmount: winAmountPS,
                  time: 0
                }
              });
            }

            if (isBonusGameInNormal) {
              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame,
                  data: bonusGameMatrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (freeSpinOption && freeSpinOption > 0) {
              listScript.push({
                command: "_showScatterPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.FreespinOption
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.FreeGame,
                  data: normalSpinMatrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (isFreeGame || isBonusGameInFree) {
              var freeSpinMatrix = normalSpinMatrix;

              if (freeGameMatrix) {
                freeSpinMatrix = dataStore.convertMatrix(freeGameMatrix, FREE_TABLE_FORMAT);
              }

              listScript.push({
                command: "_showScatterPayLine"
              });

              if (isBonusGameInFree) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.IntroBonusGame
                  }
                });
                listScript.push({
                  command: "_newGameMode",
                  data: {
                    name: SlotGameMode.BonusGame,
                    data: bonusGameMatrix
                  }
                });
              }

              if (freeGameRemain && freeGameRemain > 0) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.IntroFreeGame
                  }
                });
                listScript.push({
                  command: "_newGameMode",
                  data: {
                    name: SlotGameMode.FreeGame,
                    data: freeSpinMatrix
                  }
                });
              }

              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });
            }

            if (normalPayLines && normalPayLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
            }

            listScript.push({
              command: "_showBigWin",
              data: {
                name: SlotSceneType.BigWin
              }
            });

            if (normalPayLines && normalPayLines.length > 0) {
              listScript.push({
                command: "_showNormalPayline"
              });
            }

            listScript.push({
              command: "_gameFinish"
            });
            listScript.push({
              command: "_gameRestart"
            });

            if (promotion && promotionRemain && promotionTotal && promotionRemain > 0) {
              listScript.push({
                command: "_showPromotionPopup"
              });
            }

            return listScript;
          }
        };

        _proto.makeScriptUpdateWalletData = function makeScriptUpdateWalletData(wallets) {
          var listScript = [];
          listScript.push({
            command: "_updateWallet"
          });
          return listScript;
        };

        _proto.makeScriptGameStart = function makeScriptGameStart() {
          var listScript = [];
          listScript.push({
            command: "_gameStart"
          });
          return listScript;
        };

        _proto.makeScriptSwitchMode = function makeScriptSwitchMode() {
          var dataStore = this.node.dataStore;
          dataStore.playSession.winAmount = 0;
          var listScript = [];
          listScript.push({
            command: "_forceToClearPaylines"
          });
          listScript.push({
            command: "_updateLastWin",
            data: false
          });
          listScript.push({
            command: "_resetAutoSpin"
          });
          listScript.push({
            command: "_resetFSM"
          });
          listScript.push({
            command: "_clearWinAmount"
          });
          return listScript;
        };

        _proto.makeScriptSpinClick = function makeScriptSpinClick() {
          var listScript = [];
          var dataStore = this.node.dataStore;
          var betId = dataStore.betData.betId;
          var spinTimes = dataStore.spinTimes,
              isAutoSpin = dataStore.isAutoSpin,
              promotion = dataStore.promotion,
              currentGameMode = dataStore.currentGameMode;
          var _dataStore$playSessio2 = dataStore.playSession,
              freeGameRemain = _dataStore$playSessio2.freeGameRemain,
              freeGame = _dataStore$playSessio2.freeGame;
          var availableSpinTimes = 0;
          var promotionRemain, promotionBetId;

          if (promotion) {
            promotionRemain = promotion.promotionRemain;
            promotionBetId = promotion.promotionBetId;
          }

          if (freeGameRemain && freeGameRemain > 0) {
            availableSpinTimes = freeGameRemain - 1;
          } else if (promotion && promotionRemain > 0) {
            availableSpinTimes = promotionRemain - 1;
            listScript.push({
              command: "_updatePromotionRemain",
              data: availableSpinTimes
            });
          } else if (isAutoSpin) {
            if (spinTimes && spinTimes > 0) {
              availableSpinTimes = spinTimes - 1;
            }
          } else {
            availableSpinTimes = 0;
          }

          dataStore.spinTimes = availableSpinTimes;
          var canISpin = dataStore.getWalletAfterSpin() >= 0;

          if (canISpin || freeGameRemain > 0 || freeGame > 0 || promotion) {
            listScript.push({
              command: '_disableBet'
            });
            listScript.push({
              command: "_clearPaylines"
            });
            if (currentGameMode === SlotGameMode.NormalGame) listScript.push({
              command: '_clearWinAmount'
            });
            listScript.push({
              command: "_updateSpinTimes",
              data: availableSpinTimes
            });

            if (currentGameMode === SlotGameMode.NormalGame && !promotion) {
              listScript.push({
                command: "_updateWalletAfterClickSpin"
              });
            }

            listScript.push({
              command: "_pauseWallets"
            });
            listScript.push({
              command: "_pauseTopPlayer"
            });

            if (promotion && !freeGameRemain && !freeGame) {
              listScript.push({
                command: "_sendSpinToNetwork",
                data: {
                  currentBetData: promotionBetId
                }
              });
            } else {
              listScript.push({
                command: "_sendSpinToNetwork",
                data: {
                  currentBetData: betId
                }
              });
            }

            listScript.push({
              command: "_spinClick"
            });
          } else {
            dataStore.spinTimes = 0;
            dataStore.isAutoSpin = false;
            dataStore.isAutoSpinNormal = false;
            listScript = [{
              command: "_enableBet"
            }, {
              command: '_resetSpinButton'
            }, {
              command: "_showMessageNoMoney"
            }];
          }

          return listScript;
        };

        _proto.makeScriptResultReceive = function makeScriptResultReceive() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio3 = dataStore.playSession,
              matrix = _dataStore$playSessio3.matrix,
              jackpotInfo = _dataStore$playSessio3.jackpotInfo,
              state = _dataStore$playSessio3.state,
              extraVipJackpot = _dataStore$playSessio3.extraVipJackpot;
          var listScript = [];

          if (state == StateGameMode.FreespinOption) {
            listScript.push({
              command: "_showFreeOptionResult"
            });
          } else {
            if (jackpotInfo) {
              var infoJP = jackpotInfo[jackpotInfo.length - 1];
              var arrayJP = infoJP.split(';');
              var jpId = arrayJP[0];
              var jpType = jpId.slice(7);
              var jackpotAmount = Number(arrayJP[1]);
              listScript.push({
                command: "_pauseUpdateJP"
              });
              listScript.push({
                command: "_updateValueJP",
                data: {
                  jpType: jpType,
                  jpValue: jackpotAmount - (extraVipJackpot || 0)
                }
              });
            }

            listScript.push({
              command: "_resultReceive",
              data: matrix
            });
            listScript.push({
              command: "_showResult",
              data: matrix
            });
          }

          return listScript;
        };

        _proto.makeScriptShowResults = function makeScriptShowResults() {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio4 = dataStore.playSession,
              state = _dataStore$playSessio4.state,
              matrix = _dataStore$playSessio4.matrix,
              winAmount = _dataStore$playSessio4.winAmount,
              winAmountPS = _dataStore$playSessio4.winAmountPS,
              payLines = _dataStore$playSessio4.payLines,
              bonusGame = _dataStore$playSessio4.bonusGame,
              freeGame = _dataStore$playSessio4.freeGame,
              freeGameRemain = _dataStore$playSessio4.freeGameRemain,
              freeGameTotal = _dataStore$playSessio4.freeGameTotal,
              freeSpinOption = _dataStore$playSessio4.freeSpinOption,
              jackpotInfo = _dataStore$playSessio4.jackpotInfo,
              extraJackpot = _dataStore$playSessio4.extraJackpot,
              extraVipJackpot = _dataStore$playSessio4.extraVipJackpot;
          var betData = dataStore.betData;
          var listScript = [];
          listScript.push({
            command: "_setUpPaylines",
            data: {
              matrix: matrix,
              payLines: payLines
            }
          });
          listScript.push({
            command: "_showBigWild",
            data: {
              isResume: false
            }
          }); //TODO: jackpot

          if (jackpotInfo) {
            var infoJP = jackpotInfo[jackpotInfo.length - 1];
            var arrayJP = infoJP.split(';');
            var jackpotAmount = 0;
            var jpLineId;

            if (arrayJP && arrayJP.length > 2) {
              jackpotAmount = Number(arrayJP[1]);
              jpLineId = arrayJP[2];
            }

            if (jpLineId) {
              listScript.push({
                command: "_showJackpotPayLine",
                data: {
                  jpPayLineID: jpLineId
                }
              });
            }

            listScript.push({
              command: "_showCutscene",
              data: {
                name: SlotSceneType.IntroJackpotGame
              }
            });
            listScript.push({
              command: "_showUnskippedCutscene",
              data: {
                name: SlotSceneType.JackpotWin,
                content: {
                  winAmount: jackpotAmount,
                  currentBetData: betData.getTotalBet(),
                  extraJackpot: extraJackpot,
                  extraVipJackpot: extraVipJackpot
                }
              }
            });
            listScript.push({
              command: "_resumeUpdateJP"
            });
          }

          if (state == StateGameMode.NormalGame) {
            var spinTimes = dataStore.spinTimes;

            if (bonusGame && bonusGame > 0) {
              if (winAmount && winAmount > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              } else {
                listScript.push({
                  command: '_clearWinAmount'
                });
              }

              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });

              if (!freeGame && spinTimes && spinTimes > 0) {
                listScript.push({
                  command: "_resumeSpinTime",
                  data: spinTimes
                });
              }
            }

            if (freeSpinOption && freeSpinOption > 0 || freeGame && freeGame > 0) {
              var _spinTimes = dataStore.spinTimes;

              if (!bonusGame) {
                if (winAmountPS && winAmountPS > 0) {
                  listScript.push({
                    command: '_updateWinningAmount',
                    data: {
                      winAmount: winAmountPS,
                      time: 10
                    }
                  });
                } else {
                  listScript.push({
                    command: '_clearWinAmount'
                  });
                }
              }

              listScript.push({
                command: "_showScatterPayLine"
              });

              if (freeSpinOption && freeSpinOption > 0) {
                listScript.push({
                  command: "_showCutscene",
                  data: {
                    name: SlotSceneType.FreespinOption
                  }
                });
              }

              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroFreeGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.FreeGame,
                  data: matrix
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.NormalGame
                }
              });

              if (_spinTimes && _spinTimes > 0) {
                listScript.push({
                  command: "_resumeSpinTime",
                  data: _spinTimes
                });
              }
            }

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
            }

            listScript.push({
              command: "_showBigWin",
              data: {
                name: SlotSceneType.BigWin
              }
            });

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_showNormalPayline"
              });
            }

            listScript.push({
              command: "_gameFinish"
            });
            listScript.push({
              command: "_gameRestart"
            });
          } else if (state == StateGameMode.FreeGame) {
            if (bonusGame && bonusGame > 0) {
              if (winAmount && winAmount > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              }

              listScript.push({
                command: "_showBonusPayLine"
              });
              listScript.push({
                command: "_showCutscene",
                data: {
                  name: SlotSceneType.IntroBonusGame
                }
              });
              listScript.push({
                command: "_newGameMode",
                data: {
                  name: SlotGameMode.BonusGame
                }
              });
              listScript.push({
                command: "_resumeGameMode",
                data: {
                  name: SlotGameMode.FreeGame
                }
              });
            }

            if (payLines && payLines.length > 0) {
              listScript.push({
                command: "_blinkAllPaylines"
              });
              listScript.push({
                command: "_showFreePayline"
              });
            }

            if (!freeGameRemain || freeGameRemain <= 0) {
              if (winAmountPS && winAmountPS > 0) {
                listScript.push({
                  command: '_updateWinningAmount',
                  data: {
                    winAmount: winAmountPS,
                    time: 300
                  }
                });
              }

              listScript.push({
                command: "_delayTimeScript",
                data: 1
              });
              listScript.push({
                command: "_showUnskippedCutscene",
                data: {
                  name: SlotSceneType.TotalWinPanel,
                  content: {
                    winAmount: winAmountPS,
                    freeGameTotal: freeGameTotal
                  }
                }
              });
              listScript.push({
                command: "_clearPaylines"
              });
              listScript.push({
                command: "_gameExit"
              });
            } else {
              if (freeGameRemain > dataStore.spinTimes) {
                listScript.push({
                  command: "_showScatterPayLine"
                });
                listScript.push({
                  command: "_moveParticles"
                });
                listScript.push({
                  command: "_addSpinTimesAnimation",
                  data: freeGameRemain - dataStore.spinTimes
                });
                dataStore.spinTimes = freeGameRemain;
                listScript.push({
                  command: "_updateSpinTimes",
                  data: freeGameRemain
                });
                listScript.push({
                  command: "_delayTimeScript",
                  data: 0.5
                });
              } else {
                dataStore.spinTimes = freeGameRemain;
                listScript.push({
                  command: "_updateSpinTimes",
                  data: freeGameRemain
                });
              }

              listScript.push({
                command: "_gameRestart"
              });
            }
          }

          return listScript;
        };

        _proto.makeScriptFreeOptionResult = function makeScriptFreeOptionResult() {
          var listScript = [];
          listScript.push({
            command: "_hideCutscene",
            data: {
              name: SlotSceneType.FreespinOption
            }
          });
          return listScript;
        };

        _proto.makeScriptGameFinish = function makeScriptGameFinish() {
          var dataStore = this.node.dataStore;
          var winAmountPS = dataStore.playSession.winAmountPS;
          var listScript = [];

          if (dataStore.isTrialMode && winAmountPS) {
            dataStore.setCurrentWallet(dataStore.getCurrentWallet() + winAmountPS);
          }

          return listScript;
        };

        _proto.makeScriptSetUpBet = function makeScriptSetUpBet(value) {
          return [{
            command: "_updateBet",
            data: value
          }];
        };

        _proto.makeScriptGameRestart = function makeScriptGameRestart() {
          var dataStore = this.node.dataStore;
          var listScript = [];
          var _dataStore$playSessio5 = dataStore.playSession,
              freeGameRemain = _dataStore$playSessio5.freeGameRemain,
              respinGameRemain = _dataStore$playSessio5.respinGameRemain;
          var spinTimes = dataStore.spinTimes,
              promotion = dataStore.promotion;
          var promotionRemain;

          if (promotion) {
            promotionRemain = promotion.promotionRemain;
          }

          this.scriptUpdateWinAmount(listScript);

          if (promotionRemain && promotionRemain > 0) {
            listScript.push({
              command: "_resetPromotionButtons"
            });
          }

          if (spinTimes && spinTimes > 0) {
            if (freeGameRemain && freeGameRemain > 0 || respinGameRemain && respinGameRemain > 0) {
              listScript.push({
                command: "_runAutoSpin"
              });
            } else if (!promotion || !promotionRemain) {
              listScript.push({
                command: "_runAutoSpin"
              });
            }
          } else {
            dataStore.isAutoSpinNormal = false;

            if (!promotionRemain || promotionRemain <= 0) {
              listScript.push({
                command: '_enableBet'
              });
              listScript.push({
                command: "_exitPromotionMode"
              });
              listScript.push({
                command: "_resetSpinButton"
              });
            }
          }

          listScript.push({
            command: "_runAsyncScript"
          });
          return listScript;
        };

        _proto.makeScriptSpinByTimes = function makeScriptSpinByTimes(times) {
          var dataStore = this.node.dataStore;
          dataStore.isAutoSpin = true;
          dataStore.spinTimes = times;
          return [{
            command: "_runAutoSpin"
          }];
        };

        _proto.makeScriptDisableAutoSpin = function makeScriptDisableAutoSpin() {
          var dataStore = this.node.dataStore;
          dataStore.isAutoSpin = false;
          dataStore.spinTimes = 0;
          var listScript = [];
          listScript.push({
            command: "_updateSpinTimes",
            data: 0
          });
          return listScript;
        };

        _proto.scriptUpdateWinAmount = function scriptUpdateWinAmount(listScript) {
          var dataStore = this.node.dataStore;
          var _dataStore$playSessio6 = dataStore.playSession,
              winAmountPS = _dataStore$playSessio6.winAmountPS,
              winAmount = _dataStore$playSessio6.winAmount,
              isFinished = _dataStore$playSessio6.isFinished;
          var _dataStore$questData = dataStore.questData,
              winAmountQuest = _dataStore$questData.winAmountQuest,
              eventInfo = _dataStore$questData.eventInfo;
          var startedShowAnim = dataStore.questData ? dataStore.questData.startedShowAnim : false;

          if (eventInfo && isFinished && !startedShowAnim) {
            if (winAmountQuest) {
              listScript.push({
                command: "_openPanelQuest"
              });
              listScript.push({
                command: "_playAnimWinQuest"
              });
              listScript.push({
                command: "_afterPlayAnimWinQuest"
              });
              dataStore.questData.startedShowAnim = true;
              dataStore.questData.finishedShowAnim = false;
            } else {
              console.log('winAmount quest is 0');
            }
          }

          if (winAmount && winAmount > 0) {
            listScript.push({
              command: "_updateWinningAmount",
              data: {
                winAmount: winAmountPS,
                time: 300
              }
            });
          }

          if (isFinished) {
            listScript.push({
              command: "_resumeWallets"
            });
            listScript.push({
              command: "_resumeTopPlayer"
            });
          }
        };

        return SlotGameWriter;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotGetShare.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Event, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Event = module.Event;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "26af7rWmFBJ3qVeYfeArylv", "SlotGetShare", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotGetShare = exports('SlotGetShare', (_dec = ccclass('SlotGetShare'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotGetShare, _Component);

        function SlotGetShare() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SlotGetShare.prototype;

        _proto.onLoad = function onLoad() {
          this.node.dispatchEvent(new Event('RQ_SHARE_DATA', true));
        };

        return SlotGetShare;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotCellHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './SlotBaseCellHistory.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, JackpotType, SlotBaseCellHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
    }, function (module) {
      JackpotType = module.JackpotType;
    }, function (module) {
      SlotBaseCellHistory = module.SlotBaseCellHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "0d27dbCxDxDOpMhlRENc6D+", "SlotJackpotCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotCellHistory = exports('SlotJackpotCellHistory', (_dec = ccclass('SlotJackpotCellHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: [JackpotType]
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseCellHistory) {
        _inheritsLoose(SlotJackpotCellHistory, _SlotBaseCellHistory);

        function SlotJackpotCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseCellHistory.call.apply(_SlotBaseCellHistory, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jackpotType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletNormal", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconWalletPromotion", _descriptor4, _assertThisInitialized(_this));

          _this.jackpotData = void 0;
          return _this;
        }

        var _proto = SlotJackpotCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          _SlotBaseCellHistory.prototype.onLoad.call(this);
        };

        _proto.onShowJackpotDetail = function onShowJackpotDetail() {
          if (this.eventManager) this.eventManager.emit('SHOW_JACKPOT_HISTORY_DETAIL', this.jackpotData);
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
        };

        _proto.updateData = function updateData(data) {
          var extendData = data.exDt;

          _SlotBaseCellHistory.prototype.updateData.call(this, data);

          this.jackpotData = data;

          if (this.jackpotType) {
            var imageJP = this.findJackpotStaticData(data.jpType);

            if (imageJP) {
              this.jackpotType.getComponentInChildren(Sprite).spriteFrame = imageJP.image;
            }
          }

          if (extendData && this.dataStore.getWalletTypes().length > 1) {
            var walletOption = extendData.wo;

            if (this.iconWalletNormal && this.iconWalletPromotion) {
              if (typeof walletOption === "undefined") {
                this.iconWalletNormal.active = false;
                this.iconWalletPromotion.active = false;
              } else {
                var isWalletNormal = walletOption === 0;
                this.iconWalletNormal.active = isWalletNormal;
                this.iconWalletPromotion.active = !isWalletNormal;
              }
            }
          }
        };

        _proto.findJackpotStaticData = function findJackpotStaticData(jackpotType) {
          for (var i = 0; i < this.jackpotList.length; i++) {
            if (this.jackpotList[i].jpName == jackpotType) return this.jackpotList[i];
          }

          return null;
        };

        return SlotJackpotCellHistory;
      }(SlotBaseCellHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletNormal", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "iconWalletPromotion", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseHistory.ts', './globalNetwork.ts', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, SlotBaseHistory, globalNetwork, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      SlotBaseHistory = module.SlotBaseHistory;
    }, function (module) {
      globalNetwork = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "1abf9T55npCvL47tNjS6Pyu", "SlotJackpotHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotHistory = exports('SlotJackpotHistory', (_dec = ccclass('SlotJackpotHistory'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotBaseHistory) {
        _inheritsLoose(SlotJackpotHistory, _SlotBaseHistory);

        function SlotJackpotHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotBaseHistory.call.apply(_SlotBaseHistory, [this].concat(args)) || this;
          _this.initialized = false;

          _initializerDefineProperty(_this, "noJackpotText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isMiniGame", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jpList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "page", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotDetailView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pagination", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxCancel", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotJackpotHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.initBase();
          this.node.on("JUMP_TO_PAGE_HISTORY", this.jumpToPage, this);
          if (this.jackpotList) this.jackpotList.active = true;
          if (this.jackpotDetailView) this.jackpotDetailView.active = false;
        };

        _proto.start = function start() {
          this.localizeText();
        };

        _proto.initBase = function initBase() {
          if (this.initialized) return;

          _SlotBaseHistory.prototype.initBase.call(this);

          this.url = "jackpothistory/slot";
          this.noJackpotText.active = false;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          var betIds = this.config.BET_IDS;

          if (LOGIN_IFRAME) {
            betIds = this.config.BET_IDS_IFRAME;
          }

          if (this.config.JP_LIST_HISTORY) {
            this.jpList = this.config.JP_LIST_HISTORY;
            this.init(this.config.GAME_ID, null, betIds, this.jpList);
          } //


          this.initialized = true;
        };

        _proto.init = function init(gameId, soundPlayer, betIds, jpList, jpPrefix, url) {
          if (jpList === void 0) {
            jpList = "GRAND-MAJOR";
          }

          if (jpPrefix === void 0) {
            jpPrefix = "kts_";
          }

          if (url === void 0) {
            url = "jackpothistory/slot";
          }

          this.gameId = gameId;
          this.jpList = jpList;
          this.betIds = betIds;
          this.jpPrefix = jpPrefix;

          if (this.isMiniGame) {
            this.jpPrefix = 'ktmn_';
          }

          this.url = url;
          if (soundPlayer) this.playSoundClick = soundPlayer.playClickButton.bind(soundPlayer);
        };

        _proto.localizeText = function localizeText() {
          var MESSAGE_DIALOG = this.config.MESSAGE_DIALOG;

          if (MESSAGE_DIALOG) {
            if (MESSAGE_DIALOG.NO_JACKPOT_HISTORY) {
              var label = this.noJackpotText.getComponentInChildren(Label) || this.noJackpotText.getComponent(Label);
              if (label) label.string = MESSAGE_DIALOG.NO_JACKPOT_HISTORY;
            }
          }

          if (MESSAGE_DIALOG.ERROR_CONNECTION_HISTORY && this.errorMessage) {
            var _label = this.errorMessage.getComponentInChildren(Label) || this.errorMessage.getComponent(Label);

            if (_label) _label.string = MESSAGE_DIALOG.ERROR_CONNECTION_HISTORY;
          }

          if (this.pageText) {
            var _label2 = this.pageText.getComponent(Label);

            if (_label2) _label2.string = MESSAGE_DIALOG.HISTORY_PAGE;
          }
        };

        _proto.openPanel = function openPanel() {
          this.table.emit('CLEAR_DATA');
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX');
          this.token = globalNetwork.getToken();

          _SlotBaseHistory.prototype.openPanel.call(this);

          this.hideJackpotDetail();
        };

        _proto.onEnable = function onEnable() {
          this.eventManager.on('SHOW_JACKPOT_HISTORY_DETAIL', this.showJackpotDetail, this);
          this.openPanel();

          if (this.closeButton) {
            this.closeButton.interactable = true;
          }
        };

        _proto.onDisable = function onDisable() {
          this.eventManager.off('SHOW_JACKPOT_HISTORY_DETAIL', this.showJackpotDetail, this);
        } // fish-client
        ;

        _proto.initObj = function initObj() {
          //this.node.emit(DTConstantsVariable.PANEL_EVENT.Show);
          this.openPanel();
        };

        _proto.showJackpotDetail = function showJackpotDetail(data) {
          if (this.jackpotList) this.jackpotList.active = false;
          if (this.backBtn) this.backBtn.active = false;
          if (this.nextBtn) this.nextBtn.active = false; //if(this.page) this.page.active = false;

          if (this.pagination) this.pagination.active = false;

          if (this.jackpotDetailView) {
            this.jackpotDetailView.active = true;

            if (this.jackpotDetailView._uiProps) {
              this.jackpotDetailView._uiProps.colorDirty = true;
            }

            this.jackpotDetailView.emit('UPDATE_DETAIL_VIEW', data);
          }

          if (this.historyTableTitle && this.historyDetailTitle) {
            this.historyTableTitle.active = false;

            if (this.historyTableTitle._uiProps) {
              this.historyTableTitle._uiProps.colorDirty = true;
            }
          }

          if (this.historyTableTitle && this.historyDetailTitle) {
            this.historyDetailTitle.active = true;

            if (this.historyDetailTitle._uiProps) {
              this.historyDetailTitle._uiProps.colorDirty = true;
            }
          }
        };

        _proto.onHideJackpotDetail = function onHideJackpotDetail() {
          this.onPlaySfxCancel();
          this.hideJackpotDetail();
        };

        _proto.hideJackpotDetail = function hideJackpotDetail() {
          if (this.jackpotList) this.jackpotList.active = true;
          if (this.backBtn) this.backBtn.active = true;
          if (this.nextBtn) this.nextBtn.active = true; //if(this.page) this.page.active = true;

          if (this.pagination) this.pagination.active = true;

          if (this.jackpotDetailView) {
            this.jackpotDetailView.emit('RESET_UI');
            this.jackpotDetailView.active = false;
          }

          if (this.historyTableTitle && this.historyDetailTitle) this.historyTableTitle.active = true;
          if (this.historyTableTitle && this.historyDetailTitle) this.historyDetailTitle.active = false;
        };

        _proto.onPlaySfxCancel = function onPlaySfxCancel() {
          if (this.soundPlayer) this.soundPlayer.playSfx(this.sfxCancel);
        };

        _proto.playLoading = function playLoading() {
          _SlotBaseHistory.prototype.playLoading.call(this);

          this.noJackpotText.active = false;
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          _SlotBaseHistory.prototype.onRequestResponse.call(this, res);

          if (res.error || Object.keys(res).length <= 0 || !res.data || res.data.length <= 0) {
            this.noJackpotText.active = true;
          } else {
            if (this.pagination) {
              this.pagination.active = true;
              this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
            }

            this.noJackpotText.active = false;
          }

          if (res.total > 0 && this.pagination) {
            this.pagination.emit('UPDATE_PAGE', this.currentPage, this.totalPage);
          }
        };

        _proto.jumpToPage = function jumpToPage(evt) {
          evt.propagationStopped = true;
          this.playSoundClick();
          this.currentPage = evt.clickedPage;
          this.playLoading();

          if (this.isBetHistory) {
            this.requestBetDataPage(this.currentPage, this.itemPerPage, this.onRequestBetResponse.bind(this), this.requestErr.bind(this));
          } else {
            this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
          }
        };

        _proto.onCloseButton = function onCloseButton() {
          if (this.pagination) this.pagination.emit('RESET_PAGE_INDEX', this.totalPage);
          this.soundPlayer.playSFXClick();

          if (this.closeButton) {
            this.closeButton.interactable = false;
          }
        };

        return SlotJackpotHistory;
      }(SlotBaseHistory), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "noJackpotText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isMiniGame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jpList", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "GRAND-MAJOR";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "jackpotList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "page", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpotDetailView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pagination", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sfxCancel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'CLICK';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotHistoryDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTableHistoryDetail.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, BaseTableHistoryDetail, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      BaseTableHistoryDetail = module.BaseTableHistoryDetail;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6d5a4rff61MUbRCzMZqDI8w", "SlotJackpotHistoryDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotJackpotHistoryDetail = exports('SlotJackpotHistoryDetail', (_dec = ccclass('SlotJackpotHistoryDetail'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTableHistoryDeta) {
        _inheritsLoose(SlotJackpotHistoryDetail, _BaseTableHistoryDeta);

        function SlotJackpotHistoryDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTableHistoryDeta.call.apply(_BaseTableHistoryDeta, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "session", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotJackpotHistoryDetail.prototype;

        _proto.updateDetailView = function updateDetailView(data, pages) {
          _BaseTableHistoryDeta.prototype.updateDetailView.call(this, data, pages);

          this.session.string = "#" + data.psId.substring(data.psId.length - 8, data.psId.length);
          var _data$exDt = data.exDt,
              matrix = _data$exDt.matrix,
              mformat = _data$exDt.mformat,
              subsym = _data$exDt.subsym;
          var format = mformat || this.config.NORMAL_TABLE_FORMAT;
          this.renderTable(matrix, format, subsym);
        };

        _proto.updateTotalWinAmount = function updateTotalWinAmount(data) {
          this.totalWinAmount.string = '0';

          if (data && data.jpAmt) {
            this.totalWinAmount.string = formatMoney(parseInt(data.jpAmt));
          }
        };

        return SlotJackpotHistoryDetail;
      }(BaseTableHistoryDetail), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "session", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotJackpotTableHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotBaseTableHistory.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SlotBaseTableHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SlotBaseTableHistory = module.SlotBaseTableHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c4f41xs8MtBd4lnhnyWRbGf", "SlotJackpotTableHistory", undefined);

      var ccclass = _decorator.ccclass;
      var SlotJackpotTableHistory = exports('SlotJackpotTableHistory', (_dec = ccclass('SlotJackpotTableHistory'), _dec(_class = /*#__PURE__*/function (_SlotBaseTableHistory) {
        _inheritsLoose(SlotJackpotTableHistory, _SlotBaseTableHistory);

        function SlotJackpotTableHistory() {
          return _SlotBaseTableHistory.apply(this, arguments) || this;
        }

        return SlotJackpotTableHistory;
      }(SlotBaseTableHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotReel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, instantiate, tween, Vec3, log, warn, error, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      tween = module.tween;
      Vec3 = module.Vec3;
      log = module.log;
      warn = module.warn;
      error = module.error;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4dcc5cDevtKfLFxB7IHGGN8", "SlotReel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotReel = exports('SlotReel', (_dec = ccclass('SlotReel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotReel, _Component);

        function SlotReel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.startSpinTween = null;
          _this.stopSpinTween = null;
          _this.currentSpeed = 40;
          _this.isShowingResult = false;
          _this.rollingCount = 0;
          _this.rate = 1;
          _this.totalSymbols = 5;
          _this.reelIndex = 0;
          _this.config = {};
          _this.reelConfig = {};
          _this.symbolList = [];
          _this.isFreeMode = false;
          _this.symbolStartY = 0;
          _this.showNumber = 0;
          _this.stop = 0;
          _this.isFastToResult = false;
          _this.callBackDelayStop = null;
          _this.symbols = [];
          _this.result = [];
          _this.callbackStop = null;
          _this.totalScrolling = 0;
          _this.previousY = 0;
          _this.currentIndex = 0;
          _this.isSpinning = false;
          _this.targetY = 0;
          _this.tweenTime = 0;
          _this.extendTime = 0;
          _this.symbolPos = [];
          _this.showSymbols = [];
          _this.symbolHeight = 0;
          _this._lastY = void 0;
          return _this;
        }

        var _proto = SlotReel.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT", this.init, this);
          this.node.on("START_SPIN", this.startSpinning, this);
          this.node.on("STOP_SPIN", this.stopSpinningWithDelay, this);
          this.node.on("STOP_SPIN", this.initSymbolBetHistory, this);
          this.node.on("UPDATE_SYMBOLS", this.updateSymbols, this);
          this.node.on("FAST_STOP", this.fastStopSpinning, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("EXTEND_TIME_STOP", this.extendTimeToStop, this);
          this.node.on("UPDATE_NEAR_WIN_SPEED", this.updateNearWinSpeed, this);
          this.node.on("RANDOM_SYMBOLS", this.randomSymbols, this);
          this.node.getShowSymbols = this.getShowSymbols.bind(this);
        };

        _proto.init = function init(tableFormat, gameConfig, col, symbolPrefab, isFreeMode) {
          if (tableFormat === void 0) {
            tableFormat = [];
          }

          if (gameConfig === void 0) {
            gameConfig = {};
          }

          if (col === void 0) {
            col = 0;
          }

          if (symbolPrefab === void 0) {
            symbolPrefab = null;
          }

          if (isFreeMode === void 0) {
            isFreeMode = false;
          }

          this.config = gameConfig;
          var _gameConfig = gameConfig,
              NORMAL_SYMBOLS = _gameConfig.NORMAL_SYMBOLS,
              FREE_SYMBOLS = _gameConfig.FREE_SYMBOLS,
              TABLE_BUFFER = _gameConfig.TABLE_BUFFER,
              SYMBOL_HEIGHT = _gameConfig.SYMBOL_HEIGHT,
              SYMBOL_HEIGHT_FREE_GAME = _gameConfig.SYMBOL_HEIGHT_FREE_GAME,
              EXCEPTION_SYMBOLS = _gameConfig.EXCEPTION_SYMBOLS;
          this.symbolHeight = isFreeMode && SYMBOL_HEIGHT_FREE_GAME ? SYMBOL_HEIGHT_FREE_GAME : SYMBOL_HEIGHT;
          this.reelIndex = col;
          this.symbolList = isFreeMode ? FREE_SYMBOLS[col] : NORMAL_SYMBOLS[col];
          this.isFreeMode = isFreeMode;
          this.showNumber = tableFormat[col];
          this.totalSymbols = this.showNumber + TABLE_BUFFER.TOP + TABLE_BUFFER.BOT;
          this.symbolStartY = -(this.showNumber / 2 + TABLE_BUFFER.BOT - 0.5) * this.symbolHeight;
          this.showSymbols = [];

          for (var index = 0; index < this.totalSymbols; index++) {
            var symbol = instantiate(symbolPrefab);
            symbol.setPosition(0, this.symbolStartY + index * this.symbolHeight);
            this.node.addChild(symbol);
            symbol.emit('CHANGE_TO_SYMBOL', this.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS ? EXCEPTION_SYMBOLS : ["A", "R", "K"]));
            this.symbols.push(symbol);
            this.symbolPos.push(symbol.position.y);

            if (index >= TABLE_BUFFER.BOT && index < this.totalSymbols - TABLE_BUFFER.TOP) {
              this.showSymbols.unshift(symbol);
            }
          }
        };

        _proto.getShowSymbols = function getShowSymbols() {
          return this.showSymbols;
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          var _this2 = this;

          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this.reelConfig = reelConfig;
          this.reelIndex = reelIndex;

          if (this.startSpinTween) {
            this.startSpinTween.stop();
          }

          var _this$reelConfig = this.reelConfig,
              DELAY_START = _this$reelConfig.DELAY_START,
              EASING_DISTANCE = _this$reelConfig.EASING_DISTANCE;
          this.startSpinTween = tween(this.node).to(DELAY_START / 2, {
            position: new Vec3(this.node.position.x, EASING_DISTANCE, 0)
          }).to(DELAY_START / 2, {
            position: new Vec3(this.node.position.x, 0, 0)
          }).call(function () {
            _this2.setUpConfig();
          });
          this.startSpinTween.start();
        };

        _proto.stopSpinningWithDelay = function stopSpinningWithDelay(data, callbackStop) {
          var _this3 = this;

          this.showSymbols = [];
          this.callbackStop = callbackStop;
          this.result = [].concat(data);
          var _this$reelConfig2 = this.reelConfig,
              DELAY_STOP = _this$reelConfig2.DELAY_STOP,
              EASING_TIME = _this$reelConfig2.EASING_TIME,
              IS_TURBO = _this$reelConfig2.IS_TURBO;
          var delayTime = IS_TURBO ? DELAY_STOP : (this.reelIndex + 1) * EASING_TIME + DELAY_STOP;

          this.callBackDelayStop = function () {
            _this3.stop = 0;
            _this3.isShowingResult = true;
            _this3.callBackDelayStop = null;
            var TOTAL_CIRCULAR = _this3.reelConfig.TOTAL_CIRCULAR;
            var distanceMove = TOTAL_CIRCULAR * _this3.symbolHeight;
            _this3.targetY = _this3.node.position.y - distanceMove + _this3.totalScrolling;

            _this3.stopSpinningWithSteps();
          };

          this.unschedule(this.callBackDelayStop);
          this.scheduleOnce(this.callBackDelayStop, delayTime + this.extendTime);
        };

        _proto.stopSpinningWithSteps = function stopSpinningWithSteps() {
          var _this4 = this;

          this.tweenTime = (this.targetY - this.node.position.y) * 1.5 / this.currentSpeed;

          if (this.stopSpinTween) {
            this.stopSpinTween.stop();
          }

          var EASING_DISTANCE = this.reelConfig.EASING_DISTANCE;
          this.stopSpinTween = tween(this.node).to(Math.abs(this.tweenTime) + 0.08, {
            position: new Vec3(this.node.position.x, this.targetY - EASING_DISTANCE, 0)
          }, {
            easing: "sineOut",
            onUpdate: function onUpdate() {
              _this4.circulateSymbols();
            }
          }).call(function () {
            _this4.isFastToResult = true;
          }).to(0.08, {
            position: new Vec3(this.node.position.x, this.targetY, 0)
          }, {
            onUpdate: function onUpdate() {
              _this4.circulateSymbols();
            }
          }).call(function () {
            _this4.reset();

            _this4.onReelStop();

            if (_this4.callbackStop) {
              _this4.callbackStop();

              _this4.callbackStop = null;
            }

            _this4.isSpinning = false;
            _this4.stopSpinTween = null;
          });
          this.stopSpinTween.start();
        };

        _proto.onReelStop = function onReelStop() {
          this.testResult();
          this.extendTime = 0;
        };

        _proto.fastStopSpinning = function fastStopSpinning() {
          if (this.isFastToResult || !this.isSpinning) return;

          if (this.rollingCount >= this.reelConfig.TOTAL_CIRCULAR - 1) {
            return;
          }

          this.isFastToResult = true;
          this.rate = 2;
          this.currentSpeed = this.config.MAX_SPEED * 3;

          if (this.callBackDelayStop) {
            this.unschedule(this.callBackDelayStop);
            this.callBackDelayStop();
          } else if (this.stopSpinTween) {
            this.stopSpinningWithSteps();
          }
        };

        _proto.setUpConfig = function setUpConfig() {
          this.rate = this.reelConfig.RATE;
          this.currentSpeed = this.config.MIN_SPEED;
          this.rollingCount = 0;
          this.isSpinning = true;
          this.totalScrolling = 0;
          this.isShowingResult = false;
          this.isFastToResult = false;
          this.previousY = 0;
          this.extendTime = 0; // this.reset();
        };

        _proto.reset = function reset() {
          var TABLE_BUFFER = this.config.TABLE_BUFFER;
          this.node.setPosition(this.node.position.x, 0);
          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          var showSymbolCount = 0;
          this.showSymbols = [];

          for (var index = 0; index < this.symbols.length; index++) {
            var symbol = this.symbols[index];

            if (symbol) {
              symbol.setPosition(new Vec3(symbol.position.x, this.symbolPos[index], 0));

              if (index >= TABLE_BUFFER.BOT && index < this.symbols.length - TABLE_BUFFER.TOP) {
                this.showSymbols.unshift(symbol);
                var symbolValue = this.result[showSymbolCount];
                symbol.emit('CHANGE_TO_SYMBOL', symbolValue);
                showSymbolCount++;
              } else {
                symbol.emit('CHANGE_TO_SYMBOL', symbol['symbol']);
              }
            }
          }

          this.currentIndex = 0;
        };

        _proto.getRandomSymbolNameWithExceptions = function getRandomSymbolNameWithExceptions(exceptionSymbols) {
          var symbol = this.getRandomSymbolName();

          for (var i = 0; i < exceptionSymbols.length; i++) {
            if (symbol == exceptionSymbols[i]) {
              symbol = this.getRandomSymbolNameWithExceptions(exceptionSymbols);
              break;
            }
          }

          return symbol;
        };

        _proto.getRandomSymbolName = function getRandomSymbolName() {
          return this.symbolList[Math.floor(Math.random() * this.symbolList.length)];
        };

        _proto.update = function update(dt) {
          var delta = dt >= 0.0167 ? 0.0167 : dt;

          if (this.isSpinning) {
            if (this.currentSpeed < this.config.MAX_SPEED && this.rate == 1) {
              this.currentSpeed += this.config.ACCEL * delta;
            } else if (!this.isFastToResult) {
              this.currentSpeed = this.config.MAX_SPEED;
            }

            if (!this.isShowingResult) {
              this.node.setPosition(this.node.position.x, this.node.position.y - this.currentSpeed * delta);
            }

            if (this.previousY != this.node.position.y) {
              this.totalScrolling += Math.abs(this.previousY - this.node.position.y);
              this.previousY = this.node.position.y;
            }
          }

          if (!this.isShowingResult) {
            this.circulateSymbols();
          }
        };

        _proto.circulateSymbols = function circulateSymbols() {
          var TABLE_BUFFER = this.config.TABLE_BUFFER;

          while (this.totalScrolling >= this.symbolHeight) {
            var lastSymbol = this.symbols[this.currentIndex];
            var posY = lastSymbol.position.y;
            posY += this.symbolHeight * this.totalSymbols;
            lastSymbol.setPosition(new Vec3(lastSymbol.position.x, posY, 0));
            this.currentIndex = (this.currentIndex + 1) % this.symbols.length;
            this.totalScrolling = this.totalScrolling - this.symbolHeight;
            var symbolName = this.getRandomSymbolName();

            if (this.isShowingResult) {
              this.rollingCount++;
              var offsetToStop = this.showNumber + TABLE_BUFFER.TOP - 1;
              var stopCount = this.reelConfig.TOTAL_CIRCULAR - offsetToStop;

              if (this.rollingCount >= stopCount && this.rollingCount < stopCount + this.showNumber) {
                symbolName = this.result[this.stop];
                this.showRealSymbols(lastSymbol, symbolName);
                this.stop++;
              } else {
                this.showFakeSymbols(lastSymbol, symbolName);
              }
            } else {
              this.showFakeSymbols(lastSymbol, symbolName);
            }
          }
        };

        _proto.showFakeSymbols = function showFakeSymbols(lastSymbol, symbolName) {
          if (this.reelIndex === 0 && this.isFastToResult) {
            log("Show Blur Fake Symbol: " + symbolName);
          }

          lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolName);
        };

        _proto.showRealSymbols = function showRealSymbols(lastSymbol, symbolName) {
          lastSymbol.emit('CHANGE_TO_SYMBOL', symbolName);
        };

        _proto.extendTimeToStop = function extendTimeToStop(isNearWin) {
          if (isNearWin === void 0) {
            isNearWin = false;
          }

          var DELAY_STOP = this.reelConfig.DELAY_STOP;
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.extendTime = 0;

          if (isNearWin) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * this.reelIndex;
          } else {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * (this.reelIndex - 1) + DELAY_STOP;
          }

          if (this.reelIndex === tableFormat.length - 1 && isNearWin) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY_LAST_REEL * this.reelIndex;
          }
        };

        _proto.initSymbolBetHistory = function initSymbolBetHistory() {// to do
        };

        _proto.randomSymbols = function randomSymbols() {
          var _this5 = this;

          var EXCEPTION_SYMBOLS = this.config.EXCEPTION_SYMBOLS;
          this.symbols.forEach(function (sym) {
            sym.emit('CHANGE_TO_SYMBOL', _this5.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS ? EXCEPTION_SYMBOLS : ["A", "R", "K"]));
          });
        };

        _proto.updateSymbols = function updateSymbols(symbols) {
          this.showSymbols.forEach(function (sym, index) {
            sym.emit('CHANGE_TO_SYMBOL', symbols[index]);
          });
        };

        _proto.stopReelRoll = function stopReelRoll() {
          this.isSpinning = false;

          if (this.stopSpinTween) {
            this.stopSpinTween.stop();
          }
        };

        _proto.hideSymbol = function hideSymbol(row, symbol, isShow) {
          if (this.showSymbols[row]) {
            this.showSymbols[row].emit(isShow ? 'SHOW_SYMBOL' : 'HIDE_SYMBOL', symbol);
          }
        };

        _proto.updateNearWinSpeed = function updateNearWinSpeed() {
          this.currentSpeed = this.config.SUPER_SPEED;
        };

        _proto.testResult = function testResult() {
          if (!this.result) {
            warn("do not have result");
            return;
          }

          var _realResult = this.result.slice().reverse();

          var _showingResult = [];
          this.showSymbols.forEach(function (sb) {
            return _showingResult.push(sb['symbol']);
          });

          if (JSON.stringify(_realResult) !== JSON.stringify(_showingResult)) {
            error("wrong matrix: ", {
              realResult: _realResult,
              showingResult: _showingResult
            });
          }
        };

        return SlotReel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotReelv2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, instantiate, tween, Vec3, warn, error, Component, CustomEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      tween = module.tween;
      Vec3 = module.Vec3;
      warn = module.warn;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5ec1fhcnpNCDJP/Vrsyn12i", "SlotReelv2", undefined);

      var ccclass = _decorator.ccclass;
      var SlotReelv2 = exports('SlotReelv2', (_dec = ccclass('SlotReelv2'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotReelv2, _Component);

        function SlotReelv2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._higherHolder = null;
          _this._topSymbol = null;
          _this._botSymbol = null;
          _this.showSymbols = [];
          _this.symbols = []; // constants

          _this.config = {};
          _this.symbolHeight = 0;
          _this.reelIndex = 0;
          _this.symbolList = []; // 

          _this.showNumber = 0;
          _this.totalSymbols = 5;
          _this.symbolStartY = 0;
          _this.symbolPos = []; // 

          _this.reelConfig = {};
          _this.currentSpeed = 0;
          _this.currentIndex = 0;
          _this.stop = 0;
          _this.extendTime = 0;
          _this.step = void 0;
          _this.result = []; // flag

          _this.isSpinning = false;
          _this.isShowingResult = false;
          _this.isNearWin = false;
          _this.isFastToResult = false;
          _this.isFreeMode = false;
          _this.callbackStop = void 0;
          _this.callBackDelayStop = void 0;
          _this.MAX_STEP = Number.MAX_SAFE_INTEGER;
          return _this;
        }

        var _proto = SlotReelv2.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT", this.init, this);
          this.node.on("START_SPIN", this.startSpinning, this);
          this.node.on("STOP_SPIN", this.stopSpinningWithDelay, this);
          this.node.on("UPDATE_SYMBOLS", this.updateSymbols, this);
          this.node.on("FAST_STOP", this.fastStopSpinning, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("EXTEND_TIME_STOP", this.extendTimeToStop, this);
          this.node.on("UPDATE_NEAR_WIN_SPEED", this.updateNearWinSpeed, this);
          this.node.on("RANDOM_SYMBOLS", this.randomSymbols, this);
          this.node.on("ADJUST_REEL_SPEED", this.adjustReelSpeed, this);
          this.node.getShowSymbols = this.getShowSymbols.bind(this);
        };

        _proto.init = function init(tableFormat, gameConfig, col, symbolPrefab, isFreeMode) {
          if (tableFormat === void 0) {
            tableFormat = [];
          }

          if (gameConfig === void 0) {
            gameConfig = {};
          }

          if (col === void 0) {
            col = 0;
          }

          if (symbolPrefab === void 0) {
            symbolPrefab = null;
          }

          if (isFreeMode === void 0) {
            isFreeMode = false;
          }

          this.config = gameConfig;
          var _gameConfig = gameConfig,
              NORMAL_SYMBOLS = _gameConfig.NORMAL_SYMBOLS,
              FREE_SYMBOLS = _gameConfig.FREE_SYMBOLS,
              TABLE_BUFFER = _gameConfig.TABLE_BUFFER,
              SYMBOL_HEIGHT = _gameConfig.SYMBOL_HEIGHT,
              SYMBOL_HEIGHT_FREE_GAME = _gameConfig.SYMBOL_HEIGHT_FREE_GAME,
              EXCEPTION_SYMBOLS = _gameConfig.EXCEPTION_SYMBOLS;
          this.symbolHeight = isFreeMode && SYMBOL_HEIGHT_FREE_GAME ? SYMBOL_HEIGHT_FREE_GAME : SYMBOL_HEIGHT;
          this.reelIndex = col;
          this.symbolList = isFreeMode ? FREE_SYMBOLS[col] : NORMAL_SYMBOLS[col];
          this.isFreeMode = isFreeMode;
          this.showNumber = tableFormat[col];
          this.totalSymbols = this.showNumber + TABLE_BUFFER.TOP + TABLE_BUFFER.BOT;
          this.symbolStartY = -(this.showNumber / 2 + TABLE_BUFFER.BOT - 0.5) * this.symbolHeight;
          this.showSymbols = [];
          this.currentIndex = 0;

          for (var index = 0; index < this.totalSymbols; index++) {
            var symbol = instantiate(symbolPrefab);
            symbol.setPosition(0, this.symbolStartY + index * this.symbolHeight);
            this.node.addChild(symbol);
            symbol.emit('SET_SYMBOL_MODE', isFreeMode);
            var randomSymbol = this.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS || ["A", "R", "K"]);
            symbol.emit('CHANGE_TO_SYMBOL', randomSymbol);
            this.symbols.push(symbol);
            this.symbolPos.push(symbol.position.y);

            if (index >= TABLE_BUFFER.BOT && index < this.totalSymbols - TABLE_BUFFER.TOP) {
              this.showSymbols.unshift(symbol);
            }
          }

          this.reset();
        };

        _proto.startSpinning = function startSpinning(reelIndex, reelConfig) {
          var _this2 = this;

          if (reelConfig === void 0) {
            reelConfig = {};
          }

          this.step = this.MAX_STEP - 1;
          this.reelConfig = reelConfig;
          this.reelIndex = reelIndex;
          this.setUpConfig();
          var DELAY_START = this.reelConfig.DELAY_START;
          var currentSpeed = this.reelConfig.TIME;
          tween(this.node).delay(DELAY_START * reelIndex).by(currentSpeed, {
            position: new Vec3(0, 25)
          }).by(currentSpeed, {
            position: new Vec3(0, -25)
          }).call(function () {
            _this2.runSpinning();
          }).start();
        };

        _proto.stopSpinningWithDelay = function stopSpinningWithDelay(data, callbackStop) {
          this.showSymbols = [];
          this.callbackStop = callbackStop;
          this.result = [].concat(data);
          this.isNearWin = false;
          var _this$reelConfig = this.reelConfig,
              DELAY_STOP = _this$reelConfig.DELAY_STOP,
              EASING_TIME = _this$reelConfig.EASING_TIME,
              IS_TURBO = _this$reelConfig.IS_TURBO;
          var delayTime = IS_TURBO ? DELAY_STOP : (this.reelIndex + 1) * EASING_TIME + DELAY_STOP;
          this.unschedule(this.setStepToStop);
          this.scheduleOnce(this.setStepToStop, delayTime + this.extendTime); // buffer bot = 1, unshift one more

          this.result.unshift(this.getRandomSymbolNameWithExceptions('A')); // buffer top = 1, push one more

          this.result.push(this.getRandomSymbolNameWithExceptions('R'));
        };

        _proto.updateSymbols = function updateSymbols(symbolNames) {
          this.showSymbols.forEach(function (symbol, index) {
            symbol.emit('CHANGE_TO_SYMBOL', symbolNames[index]);
          });
        };

        _proto.fastStopSpinning = function fastStopSpinning(remainStep) {
          //check step is reset will not do anything.
          if (this.step === this.MAX_STEP) return;
          if (this.isFastToResult) return;
          this.isFastToResult = true;
          this.unschedule(this.setStepToStop);
          this.isShowingResult = true;
          this.currentSpeed = this.currentSpeed / 3;
        };

        _proto.hideSymbol = function hideSymbol(row, symbol, isShow) {
          if (this.showSymbols[row]) {
            this.showSymbols[row].emit(isShow ? 'SHOW_SYMBOL' : 'HIDE_SYMBOL', symbol);
          }
        };

        _proto.extendTimeToStop = function extendTimeToStop() {
          var _this$config = this.config,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          var tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.extendTime = 0;

          if (this.reelIndex === tableFormat.length - 1) {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY_LAST_REEL * this.reelIndex;
          } else {
            this.extendTime = this.reelConfig.NEAR_WIN_DELAY * this.reelIndex;
          }

          this.unschedule(this.setStepToStop);
          this.scheduleOnce(this.setStepToStop, this.extendTime);
        };

        _proto.updateNearWinSpeed = function updateNearWinSpeed() {
          this.currentSpeed = this.config.SUPER_TURBO;
        };

        _proto.randomSymbols = function randomSymbols() {
          var _this3 = this;

          var EXCEPTION_SYMBOLS = this.config.EXCEPTION_SYMBOLS;
          this.symbols.forEach(function (sym) {
            sym.emit('CHANGE_TO_SYMBOL', _this3.getRandomSymbolNameWithExceptions(EXCEPTION_SYMBOLS || ["A", "R", "K"]));
          });
        };

        _proto.getShowSymbols = function getShowSymbols() {
          return this.showSymbols;
        };

        _proto.adjustReelSpeed = function adjustReelSpeed(speed) {
          this.currentSpeed = speed;
        };

        _proto.runSpinning = function runSpinning() {
          var _this4 = this;

          this.runSpinningAnimation(function () {
            if (_this4.step > _this4.showNumber) {
              _this4.runSpinning();

              _this4.step--;

              if (_this4.step < _this4.totalSymbols) {
                _this4.isShowingResult = true;
              }
            } else if (_this4.step == _this4.showNumber) {
              var EASING_DISTANCE = _this4.reelConfig.EASING_DISTANCE;

              _this4.runStopAnimation(EASING_DISTANCE, 0.08);
            }
          });
        };

        _proto.setUpConfig = function setUpConfig() {
          this.currentSpeed = this.reelConfig.TIME;
          this.isSpinning = true;
          this.isShowingResult = false;
          this.isFastToResult = false;
          this.extendTime = 0;
        };

        _proto.runSpinningAnimation = function runSpinningAnimation(callback) {
          var _this5 = this;

          var time = this.currentSpeed + this.currentSpeed * this.stop / 4;
          tween(this.node).by(time, {
            position: new Vec3(0, -1 * this.symbolHeight, 0)
          }).call(function () {
            _this5.circulateSymbols();

            callback && callback();
          }).start();
        };

        _proto.circulateSymbols = function circulateSymbols() {
          var lastSymbol = this.symbols[this.currentIndex % this.totalSymbols];
          var symbolValue = this.getRandomSymbolName();

          if (!this.isShowingResult) {
            lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolValue);
          } else if (this.stop < this.totalSymbols) {
            var isRealSymbol = this._isRealSymbol();

            symbolValue = this.result[this.stop];
            this.step = this.totalSymbols + this.showNumber - (this.stop + this.config.TABLE_BUFFER.BOT);

            if (isRealSymbol) {
              lastSymbol.emit('CHANGE_TO_SYMBOL', symbolValue);
              this.showSymbols.unshift(lastSymbol);
            } else {
              lastSymbol.emit('CHANGE_TO_BLUR_SYMBOL', symbolValue);
            }

            this.stop++;
          }

          var posY = lastSymbol.position.y;
          posY += this.symbolHeight * this.totalSymbols;
          lastSymbol.setPosition(new Vec3(lastSymbol.position.x, posY, 0));
          this.currentIndex++;
        };

        _proto._isRealSymbol = function _isRealSymbol() {
          var _this$config$TABLE_BU = this.config.TABLE_BUFFER,
              TOP = _this$config$TABLE_BU.TOP,
              BOT = _this$config$TABLE_BU.BOT;
          return this.stop >= BOT && this.stop < this.showNumber + TOP;
        };

        _proto.runStopAnimation = function runStopAnimation(indexNearWin, time) {
          var _this6 = this;

          var timer = time ? time : this.reelConfig.TIME;
          this.onReelStop();
          this.notifyReelGoingToStop();
          tween(this.node).by(timer, {
            position: new Vec3(0, -indexNearWin)
          }).by(timer, {
            position: new Vec3(0, indexNearWin)
          }).call(function () {
            _this6.reset();

            _this6.callbackStop(); // stop schedule when reel is stopped


            _this6.unschedule(_this6.setStepToStop);

            _this6.currentSpeed = _this6.reelConfig.TIME;
          }).start();
        };

        _proto.setStepToStop = function setStepToStop() {
          this.step = this.reelConfig.STEP_STOP * 2 - this.totalSymbols;
        };

        _proto.onReelStop = function onReelStop() {
          this.symbols.forEach(function (child) {
            child.emit("CHANGE_TO_SYMBOL", child['symbol']);
          }); // this.testResult();
        };

        _proto.notifyReelGoingToStop = function notifyReelGoingToStop() {
          var reelResult = this.getReelResult();
          var isTurbo = this.reelConfig.IS_TURBO;
          var reelStopEvt = new CustomEvent('REEL_GOING_TO_STOP', true, {
            reelIndex: this.reelIndex,
            reelResult: reelResult,
            isTurbo: isTurbo,
            isF2R: this.isFastToResult
          });
          this.node.dispatchEvent(reelStopEvt);
        };

        _proto.getReelResult = function getReelResult() {
          if (!this.showSymbols) return [];
          var realResult = [];

          for (var i = 0; i < this.showSymbols.length; i++) {
            var symbolName = this.showSymbols[i]['symbol'];
            realResult.push(symbolName);
          }

          return realResult;
        };

        _proto.getRandomSymbolNameWithExceptions = function getRandomSymbolNameWithExceptions(exceptionSymbols) {
          var symbol = this.getRandomSymbolName();
          return exceptionSymbols.includes(symbol) ? this.getRandomSymbolNameWithExceptions(exceptionSymbols) : symbol;
        };

        _proto.getRandomSymbolName = function getRandomSymbolName() {
          return this.symbolList[Math.floor(Math.random() * this.symbolList.length)];
        };

        _proto.reset = function reset() {
          var _this7 = this; // reset currentIndex


          this.symbols.sort(function (a, b) {
            return a.position.y - b.position.y;
          });
          this.currentIndex = 0; // reset reel position

          this.symbols.forEach(function (symbol, index) {
            return symbol.setPosition(symbol.position.x, _this7.symbolPos[index]);
          });
          this.node.setPosition(this.node.position.x, 0);
          this.stop = 0;
          this.step = this.MAX_STEP;
          this.isShowingResult = false;
          this.result = [];
          this.isSpinning = false;
        };

        _proto.testResult = function testResult() {
          if (!this.result) {
            warn("do not have result");
            return;
          }

          var _realResult = this.result.slice().reverse();

          var _showingResult = [];
          this.showSymbols.forEach(function (sb) {
            return _showingResult.push(sb['symbol']);
          });

          if (JSON.stringify(_realResult) !== JSON.stringify(_showingResult)) {
            error("wrong matrix: ", {
              realResult: _realResult,
              showingResult: _showingResult
            });
          }
        };

        return SlotReelv2;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSoundPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts', './CustomEnum.ts', './GameObject.ts', './SoundPlayerImpl.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, CustomEvent, SlotGameMode, GameObject, SoundPlayerImpl;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      SoundPlayerImpl = module.SoundPlayerImpl;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5676cUznb9OLpavC+6nlbpH", "SlotSoundPlayer", undefined);

      var ccclass = _decorator.ccclass;
      var SlotSoundPlayer = exports('SlotSoundPlayer', (_dec = ccclass('SlotSoundPlayer'), _dec(_class = /*#__PURE__*/function (_SoundPlayerImpl) {
        _inheritsLoose(SlotSoundPlayer, _SoundPlayerImpl);

        function SlotSoundPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SoundPlayerImpl.call.apply(_SoundPlayerImpl, [this].concat(args)) || this;
          _this._audioScatterReel = void 0;
          _this._audioBonusReel = void 0;
          _this._soundSmallWin = void 0;
          _this._tweenSwitchMusicBGM = null;
          _this._sfxTransition = "";
          return _this;
        }

        var _proto = SlotSoundPlayer.prototype;

        _proto.onLoad = function onLoad() {
          this.node.addComponent(GameObject);
          this.node.dispatchEvent(new CustomEvent("SET_UP_SLOT_SOUND_MANAGER", true, {
            soundManager: this
          }));

          _SoundPlayerImpl.prototype.onLoad.call(this);
        };

        _proto.playMainBGM = function playMainBGM(currentGameMode) {
          var dataStore = this.node['dataStore'];
          currentGameMode = currentGameMode || dataStore && dataStore.currentGameMode;
          var soundId = "BGM_MAIN";

          if (currentGameMode === SlotGameMode.FreeGame) {
            soundId = "BGM_FREE";
          } else if (currentGameMode === SlotGameMode.BonusGame) {
            soundId = "BGM_BONUS";
          }

          this.playMusic(soundId);
        };

        _proto.playSfxClickButtonTrial = function playSfxClickButtonTrial() {
          this.playSfx("BTN_TUTORIAL");
        }
        /**@table */
        ;

        _proto.playSoundGetScatter = function playSoundGetScatter(count) {
          if (count === void 0) {
            count = 1;
          }

          var audio = "SCATTER" + count;

          if (audio) {
            this._audioScatterReel && this.stopSfx(this._audioScatterReel);
            this.playSfx(audio);
            this._audioScatterReel = audio;
          }
        };

        _proto.playSoundGetBonus = function playSoundGetBonus(count) {
          if (count === void 0) {
            count = 1;
          }

          count = count >= 3 ? 3 : count;
          var audio = "BONUS_" + count;

          if (audio) {
            this._audioBonusReel && this.stopSfx(this._audioBonusReel);
            this.playSfx(audio);
            this._audioBonusReel = audio;
          }
        };

        _proto.playParticleFly = function playParticleFly() {
          this.playSfx("PARTICAL_FLY");
        };

        _proto.playParticleHit = function playParticleHit() {
          this.playSfx("PARTICAL_FLY");
        };

        _proto.playSFXOpenWild = function playSFXOpenWild() {
          this.playSfx("OPEN_WILD");
        };

        _proto.playSoundSmallWin = function playSoundSmallWin(rate) {
          var soundId;

          if (rate >= 5) {
            soundId = 'SMALL_WIN_3';
          } else if (rate > 1) {
            soundId = 'SMALL_WIN_2';
          } else {
            soundId = 'SMALL_WIN_1';
          }

          this._soundSmallWin = soundId;
          this.playSfx(soundId);
        };

        _proto.stopSoundSmallWin = function stopSoundSmallWin() {
          this._soundSmallWin && this.stopSfx(this._soundSmallWin);
        }
        /**
         * @transition
         */
        ;

        _proto.playSFXIntroFreeGame = function playSFXIntroFreeGame() {
          this.playSfx("INTRO_FREE");
        };

        _proto.playSFXIntroBonusGame = function playSFXIntroBonusGame() {
          this.playSfx("INTRO_BONUS");
        };

        _proto.playSFXEndIntroBonus = function playSFXEndIntroBonus() {
          this.playSfx("END_INTRO_BONUS");
        };

        _proto.playSFXTrialButton = function playSFXTrialButton() {};

        _proto.switchMusicBGM = function switchMusicBGM(nextGameMode, sfxTransition, fadeTime, delaySwitch) {
          var _this2 = this;

          if (sfxTransition === void 0) {
            sfxTransition = "";
          }

          if (fadeTime === void 0) {
            fadeTime = 0.2;
          }

          if (delaySwitch === void 0) {
            delaySwitch = 0;
          }

          if (!this.isMuteMusic && this.isEnableBGM) this.fadeMusicTo(fadeTime, 0);

          if (sfxTransition) {
            this._sfxTransition = sfxTransition;
            this.playSfx(this._sfxTransition);
          }

          this._tweenSwitchMusicBGM && this._tweenSwitchMusicBGM.stop();
          this._tweenSwitchMusicBGM = tween(this.node).delay(delaySwitch).call(function () {
            _this2.playMainBGM(nextGameMode);

            if (!_this2.isMuteMusic && _this2.isEnableBGM) _this2.fadeMusicTo(fadeTime, _this2.musicVolume);
          });

          this._tweenSwitchMusicBGM.start();
        };

        _proto.forcePlayMusicBGM = function forcePlayMusicBGM(gameMode) {
          this._tweenSwitchMusicBGM && this._tweenSwitchMusicBGM.stop();
          this.stopSfx(this._sfxTransition);
          if (!this.isMuteMusic && this.isEnableBGM) this.fadeMusicTo(0, this.musicVolume);
          this.playMainBGM(gameMode);
        };

        return SlotSoundPlayer;
      }(SoundPlayerImpl)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, SpriteComponent, Vec3, tween, Component, Color, convertAssetArrayToObject, setOpacity, changeParent, getOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      SpriteComponent = module.SpriteComponent;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
      setOpacity = module.setOpacity;
      changeParent = module.changeParent;
      getOpacity = module.getOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "1905dkW4z5NO5XYOYUQp1bs", "SlotSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotSymbol = exports('SlotSymbol', (_dec = ccclass('SlotSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotSymbol, _Component);

        function SlotSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "staticSymbol", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWildScaleFactor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSymbols", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listBlurSymbols", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blurNamePrefix", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor6, _assertThisInitialized(_this));

          _this.assets = [];
          _this.blurAssets = [];
          _this.symbolSpriteFrame = null;
          _this.zoomTween = null;
          _this._staticPaylineHolder = null;
          _this._poolFactoryNode = null;
          _this._isPlayAnim = false;
          _this._isAnimated = false;
          _this._isBigWild = false;
          return _this;
        }

        var _proto = SlotSymbol.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT_FOR_PAYLINE", this.initForPayline, this);
          this.node.on("CHANGE_TO_SYMBOL", this.changeToRealSymbol, this);
          this.node.on("CHANGE_TO_BLUR_SYMBOL", this.changeToBlurSymbol, this);
          this.node.on("CHANGE_TO_BIG_WILD", this.changeToBigWildSymbol, this);
          this.node.on("BLINK_HIGHLIGHT", this.blinkHighlight, this);
          this.node.on("ENABLE_HIGHLIGHT", this.enableHighlight, this);
          this.node.on("DISABLE_HIGHLIGHT", this.disableHighlight, this);
          this.node.on("SHOW_SYMBOL", this.showSymbol, this);
          this.node.on("HIDE_SYMBOL", this.hideSymbol, this);
          this.node.on("RESET", this.reset, this);
          this.assets = convertAssetArrayToObject(this.listSymbols);
          this.blurAssets = convertAssetArrayToObject(this.listBlurSymbols);
          this.symbolSpriteFrame = this.staticSymbol.getComponent(SpriteComponent);
        };

        _proto.initForPayline = function initForPayline(staticPaylineHolder, poolFactory, isAnimated) {
          if (!this._staticPaylineHolder) this._staticPaylineHolder = staticPaylineHolder;
          if (!this._poolFactoryNode) this._poolFactoryNode = poolFactory;
          this._isAnimated = isAnimated;
        };

        _proto.changeToBigWildSymbol = function changeToBigWildSymbol(symbolName) {
          if (this.assets[symbolName]) {
            this.node['symbol'] = "K";
            setOpacity(this.node, 255);
            setOpacity(this.staticSymbol, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = this.assets[symbolName];
            this.staticSymbol.setScale(new Vec3(this.bigWildScaleFactor, this.bigWildScaleFactor, 1));
            this._isBigWild = true;

            if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
              changeParent(this.staticSymbol, this._staticPaylineHolder);
            }
          }
        };

        _proto.changeToRealSymbol = function changeToRealSymbol(symbolName) {
          if (symbolName === void 0) {
            symbolName = '2';
          }

          if (this.assets[symbolName]) {
            this.node['symbol'] = symbolName;
            setOpacity(this.node, 255);
            setOpacity(this.staticSymbol, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = this.assets[symbolName];
          } else {
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = null;
          }
        };

        _proto.changeToBlurSymbol = function changeToBlurSymbol(symbolName) {
          if (symbolName === void 0) {
            symbolName = '2';
          }

          var blurSymblName = this.blurNamePrefix + symbolName;
          var blurAsset = this.blurAssets[blurSymblName];

          if (blurAsset) {
            this.node['symbol'] = symbolName;
            setOpacity(this.staticSymbol, 255);
            setOpacity(this.node, 255);
            if (this.symbolSpriteFrame) this.symbolSpriteFrame.spriteFrame = blurAsset;
          } else {
            this.changeToRealSymbol(symbolName);
          }
        };

        _proto.blinkHighlight = function blinkHighlight() {
          var isHidden = this.node["isHidden"];
          if (isHidden) return;
          setOpacity(this.node, 255);
          this.staticSymbol.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
            changeParent(this.staticSymbol, this._staticPaylineHolder);
          }

          if (this._isBigWild) {
            if (this.staticSymbol.parent === this.node) {
              this.node.setSiblingIndex(this.node.parent.children.length - 1);
            } else {
              this.staticSymbol.setSiblingIndex(this.staticSymbol.parent.children.length - 1);
            }
          }

          this._isPlayAnim = false;
        };

        _proto.enableHighlight = function enableHighlight(noEffect) {
          if (noEffect === void 0) {
            noEffect = false;
          }

          var isHidden = this.node["isHidden"];
          if (isHidden) return; // play animation here

          this.node.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }

          if (this._isAnimated) {
            this.staticSymbol.active = false;
            this._isPlayAnim = true;
          } else {
            this.staticSymbol.active = true;

            if (this._staticPaylineHolder && this.staticSymbol.parent === this.node) {
              changeParent(this.staticSymbol, this._staticPaylineHolder);
            }

            if (this._isBigWild) {
              if (this.staticSymbol.parent === this.node) {
                this.node.setSiblingIndex(this.node.parent.children.length - 1);
              } else {
                this.staticSymbol.setSiblingIndex(this.staticSymbol.parent.children.length - 1);
              }

              return;
            }

            this.staticSymbol.setScale(new Vec3(1, 1, 1));

            if (!noEffect) {
              this.zoomTween = tween(this.staticSymbol).to(0.2, {
                scale: new Vec3(1.05, 1.05, 1)
              }).to(0.2, {
                scale: new Vec3(0.95, 0.95, 1)
              }).to(0.2, {
                scale: new Vec3(1, 1, 1)
              }).repeat(2);
              this.zoomTween.start();
            }
          }
        };

        _proto.disableHighlight = function disableHighlight() {
          var isHidden = this.node["isHidden"];
          if (isHidden) return; // stop animation here

          this.node.active = true;
          this.staticSymbol.active = !this._isPlayAnim; // this.symbolSpriteFrame.color = this.dimColor;

          this.staticSymbol.scale = new Vec3(1, 1, 1);
          this.staticSymbol.parent = this.node;
          this.staticSymbol.position = new Vec3(0, 0, 0);
        };

        _proto.reset = function reset() {
          this.staticSymbol.active = true; // this.symbolSpriteFrame.color = Color.WHITE;

          setOpacity(this.staticSymbol, 255);
          setOpacity(this.node, 255);
          this.node.active = true;
          this.staticSymbol.scale = new Vec3(1, 1, 1);
          this.staticSymbol.parent = this.node;
          this.staticSymbol.position = new Vec3(0, 0, 0);

          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }

          this._isPlayAnim = false;
          this._isBigWild = false;
        };

        _proto.showSymbol = function showSymbol() {
          setOpacity(this.node, 255);
        };

        _proto.hideSymbol = function hideSymbol() {
          setOpacity(this.node, 0);
        }; //TODO remove cheat here


        _proto.update = function update(dt) {
          if (this.node.active && getOpacity(this.node) > 0) {
            this.node._uiProps.colorDirty = true;
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this.zoomTween) {
            this.zoomTween.stop();
            this.zoomTween = null;
          }
        };

        return SlotSymbol;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticSymbol", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWildScaleFactor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSymbols", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listBlurSymbols", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "blurNamePrefix", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'blur_';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSymbolPayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, CCString, sp, sys, Vec3, Component, changeParent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      CCString = module.CCString;
      sp = module.sp;
      sys = module.sys;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      changeParent = module.changeParent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f1d6a5JRWFD5YmxpHQsdsXi", "SlotSymbolPayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotSymbolPayline = exports('SlotSymbolPayline', (_dec = ccclass('SlotSymbolPayline'), _dec2 = property(Node), _dec3 = property(Color), _dec4 = property(Color), _dec5 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotSymbolPayline, _Component);

        function SlotSymbolPayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultColor", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolsToPlayRealtime", _descriptor4, _assertThisInitialized(_this));

          _this._animation = null;
          _this._isPlaying = false;
          _this._havingAnim = false;
          _this._symbolName = '';
          _this.ANIM_DURATION = 2;
          _this._disableHighlightHolder = null;
          return _this;
        }

        var _proto = SlotSymbolPayline.prototype;

        _proto.onLoad = function onLoad() {
          this._animation = this.spineNode.getComponent(sp.Skeleton);
          this.node.on("INIT", this.init, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.on("ENABLE_HIGHLIGHT", this.enableHighlight, this);
          this.node.on("DISABLE_HIGHLIGHT", this.disableHighlight, this);
          this.node.on("RESET", this.reset, this);
          this.node['SlotSymbolPayline'] = this;
        };

        _proto.init = function init(symbolName, skeletonData, disableHighlightHolder) {
          this._isPlaying = false;
          this._havingAnim = skeletonData ? true : false;
          this._disableHighlightHolder = disableHighlightHolder;
          this.spineNode.active = true;
          this._symbolName = symbolName;

          if (this._animation && this._havingAnim) {
            var isPlayRealtime = Number(sys.platform) == 3 || this.needToPlayRealtime(this._symbolName); //dont cache for android app sys.ANDROID = 3 or always realtime symbol

            if (isPlayRealtime) {
              this._animation.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
            } else {
              this._animation.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.PRIVATE_CACHE);
            } // log('>>>>>>> Set Cached Animation Mode? Realtime: '+isPlayRealtime + ' => symbol: '+ this._symbolName);


            this._animation.skeletonData = skeletonData;
          }

          this.spineNode.active = false;
        };

        _proto.playAnimation = function playAnimation(duration) {
          if (duration === void 0) {
            duration = 2;
          }

          if (this._havingAnim) {
            this.spineNode.active = true;

            if (!this._isPlaying) {
              this._isPlaying = true;

              if (this._animation) {
                this._animation.setAnimation(0, 'animation', true);

                this._animation.timeScale = this.ANIM_DURATION / duration; // log(">>>>>>> Symbol " + this._symbolName + " has Animation Cached is: "+ this._animation.isAnimationCached());
              }
            }
          }
        };

        _proto.stopAnimation = function stopAnimation() {
          this.spineNode.active = false;
        };

        _proto.enableHighlight = function enableHighlight() {
          // if(this._animation) this._animation.color = this.defaultColor;
          this.spineNode.parent = this.node;
          this.spineNode.position = new Vec3(0, 0, 0);
        };

        _proto.disableHighlight = function disableHighlight() {
          if (!this._isPlaying) {
            this.spineNode.active = false;
          } else {
            // if(this._animation) this._animation.color = this.dimColor;
            if (this.spineNode && this._disableHighlightHolder) {
              changeParent(this.spineNode, this._disableHighlightHolder);
            }
          }
        };

        _proto.reset = function reset() {
          if (this._animation) {
            // this._animation.color = this.defaultColor;
            //this._animation.skeletonData = null; causing crash & lost texture on native;
            this.spineNode.parent = this.node;
            this.spineNode.position = new Vec3(0, 0, 0);
          }

          this._isPlaying = false;
        };

        _proto.needToPlayRealtime = function needToPlayRealtime(symbolName) {
          for (var i = 0; i < this.symbolsToPlayRealtime.length; i++) {
            if (symbolName == this.symbolsToPlayRealtime[i]) {
              return true;
            }
          }

          return false;
        };

        return SlotSymbolPayline;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultColor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "symbolsToPlayRealtime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotSymbolPaylineRT.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Color, Vec3, Component, changeParent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      changeParent = module.changeParent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "078459LpvFKgYTyBrFeYUAD", "SlotSymbolPaylineRT", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotSymbolPaylineRT = exports('SlotSymbolPaylineRT', (_dec = ccclass('SlotSymbolPaylineRT'), _dec2 = property(Sprite), _dec3 = property(Color), _dec4 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotSymbolPaylineRT, _Component);

        function SlotSymbolPaylineRT() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spriteRT", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultColor", _descriptor3, _assertThisInitialized(_this));

          _this._symbolName = '';
          _this._disableHighlightHolder = null;
          return _this;
        }

        var _proto = SlotSymbolPaylineRT.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("INIT", this.init, this);
          this.node.on("PLAY_ANIMATION", this.playAnimation, this);
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
          this.node.on("ENABLE_HIGHLIGHT", this.enableHighlight, this);
          this.node.on("DISABLE_HIGHLIGHT", this.disableHighlight, this);
          this.node.on("RESET", this.reset, this);
          this.node['SlotSymbolPayline'] = this;
        };

        _proto.init = function init(symbolName, skeletonData, disableHighlightHolder) {
          this._disableHighlightHolder = disableHighlightHolder;
          this._symbolName = symbolName;
        };

        _proto.playAnimation = function playAnimation(frameRT) {
          if (frameRT === void 0) {
            frameRT = null;
          }

          this.spriteRT.node.active = true;
          this.spriteRT.spriteFrame = frameRT;
        };

        _proto.stopAnimation = function stopAnimation() {
          this.spriteRT.spriteFrame = null;
          this.spriteRT.node.active = false;
        };

        _proto.enableHighlight = function enableHighlight() {
          this.spriteRT.node.parent = this.node;
          this.spriteRT.node.position = new Vec3(0, 0, 0);
        };

        _proto.disableHighlight = function disableHighlight() {
          // if(this._animation) this._animation.color = this.dimColor;
          if (this.spriteRT.node && this._disableHighlightHolder) {
            changeParent(this.spriteRT.node, this._disableHighlightHolder);
          }
        };

        _proto.reset = function reset() {
          if (this.spriteRT) {
            this.spriteRT.node.parent = this.node;
            this.spriteRT.node.position = new Vec3(0, 0, 0);
          }

          this.spriteRT.color = this.defaultColor;
        };

        return SlotSymbolPaylineRT;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spriteRT", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultColor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTable.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventNames.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, instantiate, EventNames, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "2f32ayTHLtOypRyacQxaUYe", "SlotTable", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTable = exports('SlotTable', (_dec = ccclass('SlotTable'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTable, _GameObject);

        function SlotTable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickyWild", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFreeMode", _descriptor5, _assertThisInitialized(_this));

          _this.tableFormat = [];
          _this.matrix = [];
          _this.isFastToResult = false;
          _this.reels = [];
          _this.isTurbo = false;
          _this.stopSpinningCallbackCount = 0;
          _this._tableStopCB = null;
          _this._tableFastStopCB = null;
          _this._isSpinning = false;
          return _this;
        }

        var _proto = SlotTable.prototype; // @property({type: Node})
        // private spinBtn: any;
        // @property({type: Node})
        // private fastToResultBtn: any;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("START_SPINNING", this.startSpinning, this);
          this.node.on("STOP_SPINNING", this.stopSpinning, this);
          this.node.on("FAST_TO_RESULT", this.fastToResult, this);
          this.node.on("CHANGE_MATRIX", this.changeMatrix, this);
          this.node.on("RANDOM_MATRIX", this.randomMatrix, this);
          this.node.on("STOP_REEL_WITH_RANDOM_MATRIX", this.stopReelWithRandomMatrix, this);
          this.node.on("SHOW_STATIC_SYMBOL", this.showStaticSymbol, this);
          this.node.on("GAME_EXIT", this.gameExit, this);
          this.node.on("GAME_HIDE", this.onGameHide, this);
          this.node.on("GAME_SHOW", this.onGameShow, this);
          this.node['getMatrixResult'] = this.getMatrixResult.bind(this);
        };

        _proto.init = function init() {
          var _this$config = this.config,
              SYMBOL_WIDTH = _this$config.SYMBOL_WIDTH,
              NORMAL_TABLE_FORMAT = _this$config.NORMAL_TABLE_FORMAT,
              FREE_TABLE_FORMAT = _this$config.FREE_TABLE_FORMAT;
          this.tableFormat = this.isFreeMode ? FREE_TABLE_FORMAT : NORMAL_TABLE_FORMAT;
          this.node.isFreeMode = this.isFreeMode;
          this.node.tableFormat = this.tableFormat;
          this.isFastToResult = false;
          var startX = -(this.tableFormat.length / 2 - 0.5) * SYMBOL_WIDTH;

          for (var index = 0; index < this.tableFormat.length; index++) {
            var reel = instantiate(this.reelPrefab);
            reel.name = "Reel_" + index;
            this.table.addChild(reel);
            reel.setPosition(startX + index * SYMBOL_WIDTH, 0);
            reel.emit('INIT', this.tableFormat, this.config, index, this.symbolPrefab, this.isFreeMode);
            this.reels.push(reel);
          }

          this.node['reels'] = this.reels;

          if (this.stickyWild) {
            this.stickyWild.emit("INIT", this);
          }
        };

        _proto.onGameShow = function onGameShow() {
          if (this.table) this.table.active = true;
        };

        _proto.onGameHide = function onGameHide() {
          if (this.table) this.table.active = false;
        };

        _proto.randomMatrix = function randomMatrix() {
          for (var col = 0; col < this.tableFormat.length; ++col) {
            this.reels[col].emit('RANDOM_SYMBOLS');
          }
        };

        _proto.changeMatrix = function changeMatrix(_ref) {
          var matrix = _ref.matrix;
          this.matrix = matrix;

          for (var col = 0; col < this.tableFormat.length; ++col) {
            this.reels[col].emit('UPDATE_SYMBOLS', this.matrix[col]);
          }

          if (this.stickyWild) {
            this.stickyWild.emit("CHANGE_MATRIX", matrix);
          }
        };

        _proto.startSpinning = function startSpinning() {
          this._isSpinning = true;
          this.isTurbo = this.dataStore && this.dataStore.modeTurbo || false;
          this.isFastToResult = false;
          var currentConfig = this.config[this.isTurbo ? 'TABLE_TURBO' : 'TABLE_NORMAL'];
          this.reels.forEach(function (reel, index) {
            reel.emit('START_SPIN', index, currentConfig);
          });
          this.node.emit('TABLE_START_SOUND');
          this.node.emit('RESET_NEAR_WIN');
          this.eventManager.emit(EventNames.TABLE_START_SPIN);
        };

        _proto.stopSpinning = function stopSpinning(matrix, callback) {
          var _this2 = this;

          if (matrix === void 0) {
            matrix = [];
          }

          if (callback === void 0) {
            callback = null;
          }

          this.matrix = matrix;
          this._tableStopCB = callback;
          this.node.emit('REEL_DELAY_NEAR_WIN', {
            reels: this.reels,
            matrix: matrix,
            context: this
          });
          this.node.emit('REEL_ABOUT_TO_STOP_SOUND', {
            reels: this.reels,
            matrix: matrix,
            context: this
          });
          this.stopSpinningCallbackCount = 0;
          this.reels.forEach(function (reel, col) {
            var revMatrix = [].concat(matrix[col]).reverse();
            reel.emit('STOP_SPIN', revMatrix, _this2.checkStopSpinningCallback.bind(_this2, matrix[col]));
          });
        };

        _proto.onTableStopped = function onTableStopped() {
          this.eventManager.emit(EventNames.TABLE_STOP_SPIN);

          if (this._tableStopCB) {
            this._tableStopCB();

            this._tableStopCB = null;
          }

          if (this.isFastToResult) {
            this.eventManager.emit(EventNames.FAST_TO_RESULT_FINISH);
          }

          this._isSpinning = false;
        };

        _proto.isSpinning = function isSpinning() {
          return this._isSpinning = true;
        };

        _proto.checkStopSpinningCallback = function checkStopSpinningCallback(matrix) {
          if (matrix === void 0) {
            matrix = [];
          }

          this.stopSpinningCallbackCount++;
          var count = this.stopSpinningCallbackCount;

          if (count >= this.reels.length) {
            this.onTableStopped();
          }

          this.node.emit('REEL_STOP_NEARWIN', {
            matrix: matrix,
            count: count,
            context: this
          });
          this.node.emit('REEL_STOP_SOUND', {
            matrix: matrix,
            count: count,
            context: this
          });

          if (this.stickyWild) {
            this.stickyWild.emit("SHOW_STICKY_WILD", count - 1);
          }
        };

        _proto.stopReelWithRandomMatrix = function stopReelWithRandomMatrix(callback) {
          if (callback === void 0) {
            callback = null;
          }

          var matrixRandom = [];

          for (var col = 0; col < this.tableFormat.length; ++col) {
            matrixRandom[col] = [];

            for (var row = this.tableFormat[col] - 1; row >= 0; --row) {
              var reel = this.reels[col].getComponent('SlotReel');

              if (reel) {
                matrixRandom[col][row] = reel.getRandomSymbolNameWithExceptions(['A', 'R', 'K']);
              } else {
                matrixRandom[col][row] = "3";
              }
            }
          }

          this.stopSpinning(matrixRandom, callback);
        };

        _proto.fastToResult = function fastToResult() {
          if (!this._isSpinning) return; // if (this.isFastToResult) return;

          this.isFastToResult = true;
          this.reels.forEach(function (reel) {
            return reel.emit('FAST_STOP');
          });
        };

        _proto.showStaticSymbol = function showStaticSymbol(col, row, symbol, isShow) {
          if (!this.reels || !this.reels[col]) return;
          this.reels[col].emit('HIDE_SYMBOL', row, symbol, isShow);
        };

        _proto.gameExit = function gameExit() {
          if (this.stickyWild) {
            this.stickyWild.emit("RESET");
          }
        };

        _proto.getMatrixResult = function getMatrixResult() {
          return this.matrix;
        };

        return SlotTable;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "reelPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stickyWild", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isFreeMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableNearWinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, GameObject, PerformanceLevel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "fe9b9gCuVBNx7bwHMeMoIA0", "SlotTableNearWinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableNearWinEffect = exports('SlotTableNearWinEffect', (_dec = ccclass('SlotTableNearWinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableNearWinEffect, _GameObject);

        function SlotTableNearWinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "startAtScatterCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startAtBonusCount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startAtJackpotCount", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtScatterCount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtBonusCount", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopAtJackpotCount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nearWinHolder", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineSymbolPrefabName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusSymbol", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scatterSymbol", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotSymbol", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSkipNearWinTurbo", _descriptor13, _assertThisInitialized(_this));

          _this.nearWinList = [];
          _this.playSoundNearWin = false;
          _this.sfxNearWin = 'NEAR_WIN';
          _this.poolFactory = null;
          _this.usingObjs = [];
          _this.animationLevel = 2;
          return _this;
        }

        var _proto = SlotTableNearWinEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("RESET_NEAR_WIN", this.reset, this);
          this.node.on("REEL_STOP_NEARWIN", this.reelStopNearWin, this);
          this.node.on("REEL_DELAY_NEAR_WIN", this.adjustReelDelay, this);
          this.reset();

          if (this.mainDirector) {
            this.poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.reset = function reset() {
          this.hideAnimNearWin();
          this.clearSymbolPaylines();
        };

        _proto.adjustReelDelay = function adjustReelDelay(_ref) {
          var reels = _ref.reels,
              matrix = _ref.matrix;
          var tableFormat = this.node.tableFormat;
          var countScatter = 0;
          var countBonus = 0;
          var countJackpot = 0;
          var foundNearWin = false;
          this.nearWinList = [];
          var isSkipWhenTurbo = this.dataStore && this.dataStore.modeTurbo && this.isSkipNearWinTurbo;
          if (isSkipWhenTurbo) return;

          for (var col = 0; col < matrix.length; col++) {
            var isNearWinScatter = countScatter >= this.startAtScatterCount && countScatter < this.stopAtScatterCount;
            var isNearWinBonus = countBonus >= this.startAtBonusCount && countBonus < this.stopAtBonusCount;
            var isNearWinJackpot = countJackpot >= this.startAtJackpotCount && countJackpot < this.stopAtJackpotCount;
            var isNearWin = isNearWinScatter || isNearWinBonus || isNearWinJackpot;

            for (var row = 0; row < matrix[col].length; ++row) {
              var symbolValue = matrix[col][row];

              if (symbolValue === this.bonusSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countBonus++;
              } else if (symbolValue === this.scatterSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countScatter++;
              } else if (symbolValue === this.jackpotSymbol) {
                this.createPaylineSymbol(tableFormat[col], symbolValue, col, row);
                countJackpot++;
              } else ;
            }

            isNearWin = isNearWin || isNearWinJackpot;
            foundNearWin = foundNearWin || isNearWin;

            if (foundNearWin) {
              this.nearWinList[col] = {
                isNearWinScatter: isNearWinScatter,
                isNearWinBonus: isNearWinBonus,
                isNearWin: isNearWin
              };
              reels[col].emit('EXTEND_TIME_STOP', isNearWin);
            }
          }
        };

        _proto.reelStopNearWin = function reelStopNearWin(_ref2) {
          var count = _ref2.count,
              context = _ref2.context;
          this.hideAnimNearWin();

          if (!context.isFastToResult) {
            this.runAnimationNearWin(this.jackpotSymbol, count);
            this.runAnimationNearWin(this.scatterSymbol, count);
            this.runAnimationNearWin(this.bonusSymbol, count);
          }

          var reels = this.node.reels;

          if (this.nearWinList[count] && this.nearWinList[count].isNearWin && !context.isFastToResult) {
            this.showAnimNearWin(count);

            for (var i = count; i < reels.length; i++) {
              if (this.nearWinList[i] && this.nearWinList[i].isNearWin) reels[i].emit('UPDATE_NEAR_WIN_SPEED');
            }
          } else {
            this.stopSoundNearWin();
          }

          if (count >= reels.length) {
            this.clearSymbolPaylines();
            this.hideAnimNearWin();
            this.stopSoundNearWin();
          }
        };

        _proto.hideAnimNearWin = function hideAnimNearWin() {
          this.animNode.active = false;
        };

        _proto.showAnimNearWin = function showAnimNearWin(count) {
          this.sfxNearWin && this.soundPlayer && this.soundPlayer.playSfx(this.sfxNearWin);
          this.animNode.active = true;
          this.animNode.setPosition(this.getXPosition(count), this.animNode.position.y);
        };

        _proto.clearSymbolPaylines = function clearSymbolPaylines() {
          var _this2 = this;

          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.usingObjs.forEach(function (paylineSymbol) {
            if (paylineSymbol) {
              var _ref3 = paylineSymbol,
                  col = _ref3.col,
                  row = _ref3.row,
                  symbol = _ref3.symbol;

              _this2.node.emit('SHOW_STATIC_SYMBOL', col, row, symbol, true);

              _this2.poolFactory.removeObject(paylineSymbol);
            }
          });
          this.usingObjs = [];
          this.setOpacity(this.nearWinHolder, 1);
        };

        _proto.runAnimationNearWin = function runAnimationNearWin(symbolName, currentIndex) {
          var _this3 = this;

          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.setOpacity(this.nearWinHolder, 255);
          this.usingObjs.forEach(function (paylineSymbol) {
            if (paylineSymbol["symbol"] === symbolName && paylineSymbol["col"] == currentIndex - 1) {
              paylineSymbol.active = true;
              paylineSymbol.emit("ENABLE_HIGHLIGHT");
              paylineSymbol.emit("PLAY_ANIMATION");
              var _ref4 = paylineSymbol,
                  col = _ref4.col,
                  row = _ref4.row,
                  symbol = _ref4.symbol;

              _this3.node.emit('SHOW_STATIC_SYMBOL', col, row, symbol, false);
            }
          });
        };

        _proto.getXPosition = function getXPosition(index) {
          var tableFormat = this.node.tableFormat;
          var startX = -(tableFormat.length / 2 - 0.5) * this.node.config.SYMBOL_WIDTH;
          return startX + this.config.SYMBOL_WIDTH * index;
        };

        _proto.createPaylineSymbol = function createPaylineSymbol(totalSymbol, symbol, col, row) {
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].NEAR_WIN_ANIMATION;
          if (!this.nearWinHolder || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          var paylineSymbol = null;
          if (!this.poolFactory) this.poolFactory = this.mainDirector.poolFactory;
          paylineSymbol = this.poolFactory.getObject(this.paylineSymbolPrefabName);
          if (!paylineSymbol) return;
          paylineSymbol.active = true;
          paylineSymbol.parent = this.nearWinHolder;
          var posX = this.getXPosition(col);
          var posY = (totalSymbol / 2 - row - 0.5) * this.config.SYMBOL_HEIGHT;
          paylineSymbol.setPosition(posX, posY);
          paylineSymbol["col"] = col;
          paylineSymbol["row"] = row;
          paylineSymbol["symbol"] = symbol;
          var spineData = this.node["getSymbolSpineData"](symbol);
          paylineSymbol["SlotSymbolPayline"].init(symbol, spineData);
          paylineSymbol.active = false;
          this.usingObjs.push(paylineSymbol);
        };

        _proto.stopSoundNearWin = function stopSoundNearWin() {
          this.soundPlayer && this.soundPlayer.stopSfx(this.sfxNearWin);
        };

        return SlotTableNearWinEffect;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startAtScatterCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "startAtBonusCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "startAtJackpotCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stopAtScatterCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "stopAtBonusCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "stopAtJackpotCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nearWinHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "paylineSymbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "bonusSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'R';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scatterSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'A';
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "jackpotSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'JP';
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isSkipNearWinTurbo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTablePayline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotSymbolPayline.ts', './CustomType.ts', './CustomEnum.ts', './GameObject.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SlotSymbolPayline, SlotCustomDataType, PerformanceLevel, GameObject, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      SlotSymbolPayline = module.SlotSymbolPayline;
    }, function (module) {
      SlotCustomDataType = module.SlotCustomDataType;
    }, function (module) {
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "2bb9euaAQtD8ZN3mPH592Cn", "SlotTablePayline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTablePayline = exports('SlotTablePayline', (_dec = ccclass('SlotTablePayline'), _dec2 = property({
        type: SlotCustomDataType
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTablePayline, _GameObject);

        function SlotTablePayline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineDataList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "staticPaylineHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFrameHolder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dimBackground", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "disablePaylineHolder", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineSymbolPrefabName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winLineFramePrefabName", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpotSymbol", _descriptor9, _assertThisInitialized(_this));

          _this.payLineNormals = [];
          _this.scatterHolderNode = [];
          _this.bonusHolderNode = [];
          _this.wildHolderNode = [];
          _this.jackpotHolderNode = [];
          _this.paylinesMatrix = [];
          _this.showNormalPayline = null;
          _this.blinkNormalPayline = null;
          _this.paylineTime = null;
          _this.curentConfig = {};
          _this.animationLevel = 2;
          _this._blinkingCallback = null;
          _this._callbackShowPayline = null;
          _this._callbackSpecialPayline = null;
          _this.paylineIndex = 0;
          _this.showingPayline = false;
          _this.paylineType = 'normal';
          _this.nextPaylineTime = 0;
          _this.poolFactory = null;
          _this.usingObjs = [];
          _this.matrix = [];
          _this.showWinLineFrame = false;
          _this.showDrawingLine = false;
          return _this;
        }

        var _proto = SlotTablePayline.prototype;

        _proto.onLoad = function onLoad() {
          this.paylinesMatrix = [];
          this.paylineTime = 0;
          this.node.on("SETUP_PAYLINES", this.setupPaylines, this);
          this.node.on("SHOW_BIG_WILD", this.showBigWild, this);
          this.node.on("BLINK_ALL_NORMAL_PAYLINES", this.blinkHighlightPaylines, this);
          this.node.on("SHOW_ALL_NORMAL_PAYLINES", this.showAllNormalPayLines, this);
          this.node.on("SHOW_ALL_FREE_PAYLINES", this.showAllFreePaylines, this);
          this.node.on("SHOW_SCATTER_PAYLINE", this.showScatterPayLine, this);
          this.node.on("SHOW_BONUS_PAYLINE", this.showBonusPayLine, this);
          this.node.on("SHOW_JACKPOT_PAYLINE", this.showJackpotPayLine, this);
          this.node.on("SHOW_WILD_PAYLINE", this.showWildPayLine, this);
          this.node.on("CLEAR_PAYLINES", this.clearPaylines, this);
          this.node.on("MOVE_PARTICLE_SCATTER", this.moveScatterParticles, this);
          this.node["getSymbolSpineData"] = this.getSymbolSpineData.bind(this);
          this.showNormalPayline = this.config.PAY_LINE_ALLWAYS ? this.showNormalPaylineAllLine : this.showNormalPaylinePerline;
          this.blinkNormalPayline = this.config.PAY_LINE_ALLWAYS ? this.blinkNormalPaylineAllline : this.blinkNormalPaylinePerline;
          this.showWinLineFrame = this.config.SHOW_WINLINE_FRAME;
          this.showDrawingLine = this.config.SHOW_DRAWING_LINE;

          if (this.mainDirector) {
            this.poolFactory = this.mainDirector.poolFactory;
          }
        };

        _proto.setupPaylines = function setupPaylines(matrix, payLines) {
          if (matrix === void 0) {
            matrix = [];
          }

          if (payLines === void 0) {
            payLines = [];
          }

          var isTurbo = this.dataStore && this.dataStore.modeTurbo || false;
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.curentConfig = this.config[isTurbo ? 'TABLE_TURBO' : 'TABLE_NORMAL'];
          this.animationLevel = this.config[performanceLvl].PAYLINE_ANIMATION;
          this.paylineHolder.active = true;
          this.payLineNormals = payLines;
          this.matrix = matrix;
          this.resetPaylineHolder();
          var tableFormat = this.node.tableFormat;

          for (var col = 0; col < tableFormat.length; ++col) {
            this.paylinesMatrix[col] = [];

            for (var row = 0; row < tableFormat[col]; ++row) {
              this.createPaylineObject(col, row);
            }
          } //this.setOpacity(this.paylineHolder, 0);

        };

        _proto.getXPosition = function getXPosition(index) {
          var startX = -(this.node.tableFormat.length / 2 - 0.5) * this.config.SYMBOL_WIDTH;
          return startX + this.config.SYMBOL_WIDTH * index;
        };

        _proto.createPaylineObject = function createPaylineObject(col, row) {
          var reels = this.node.reels;
          var showSymbols = reels[col].getShowSymbols();
          var symbol = showSymbols[row];

          if (symbol) {
            var spineData = this.getSymbolSpineData(symbol['symbol']);
            if (!this.poolFactory) this.poolFactory = this.mainDirector.poolFactory;
            var isSymbolAnimated = this.animationLevel >= Number(PerformanceLevel.Medium) && spineData != null;
            symbol.emit("INIT_FOR_PAYLINE", this.staticPaylineHolder, this.poolFactory.node, isSymbolAnimated);
            var paylineSymbol = this.createPaylineSymbol(symbol['symbol'], col, row, isSymbolAnimated ? spineData : null);
            var payline = {
              symbol: symbol,
              paylineSymbol: paylineSymbol
            };

            if (this.showWinLineFrame) {
              var winLineFrame = this.createWinLineFrame(col, row);
              payline['winLineFrame'] = winLineFrame;
            }

            payline['isShowing'] = true;
            this.paylinesMatrix[col][row] = payline;

            if (symbol['symbol'] == "A") {
              this.scatterHolderNode.push(payline);
            } else if (symbol['symbol'] == "R") {
              this.bonusHolderNode.push(payline);
            } else if (symbol['symbol'] == "K") {
              this.wildHolderNode.push(payline);
            }

            if (symbol['symbol'] == this.jackpotSymbol) {
              this.jackpotHolderNode.push(payline);
            }

            return payline;
          }
        };

        _proto.createWinLineFrame = function createWinLineFrame(col, row) {
          var x = this.getXPosition(col);
          var symbolHeight = this.node.isFreeMode && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          var y = (this.node.tableFormat[col] / 2 - row - 0.5) * symbolHeight;
          var winLineFrame = null;
          winLineFrame = this.poolFactory.getObject(this.winLineFramePrefabName);

          if (winLineFrame) {
            winLineFrame.active = false;
            winLineFrame.parent = this.winLineFrameHolder;
            winLineFrame[col] = col;
            winLineFrame[row] = row;
            winLineFrame.setPosition(x, y);
            this.usingObjs.push(winLineFrame);
          }

          return winLineFrame;
        };

        _proto.createPaylineSymbol = function createPaylineSymbol(symbol, col, row, skeletonData) {
          var paylineSymbol = null;

          if (!this.poolFactory) {
            var mainDirector = this.node["mainDirector"];

            if (mainDirector) {
              this.poolFactory = mainDirector.poolFactory;
            }
          }

          paylineSymbol = this.poolFactory.getObject(this.paylineSymbolPrefabName);
          paylineSymbol.active = true;
          paylineSymbol.parent = this.paylineHolder;
          var symbolHeight = this.node.isFreeMode && this.config.SYMBOL_HEIGHT_FREE_GAME ? this.config.SYMBOL_HEIGHT_FREE_GAME : this.config.SYMBOL_HEIGHT;
          var x = this.getXPosition(col);
          var y = (this.node.tableFormat[col] / 2 - row - 0.5) * symbolHeight;
          paylineSymbol.setPosition(x, y);
          var paylineControl = paylineSymbol.getComponent(SlotSymbolPayline);

          if (paylineControl) {
            paylineControl.init(symbol, skeletonData, this.disablePaylineHolder);
          }

          this.usingObjs.push(paylineSymbol);
          return paylineSymbol;
        };

        _proto.showBigWild = function showBigWild(currentGameMode, isResume) {} //TODO: Override this function here
        ;

        _proto.showAllNormalPayLines = function showAllNormalPayLines(callback, index) {
          if (index === void 0) {
            index = 0;
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this.paylineIndex = index;
          this.showingPayline = true;
          this.paylineType = 'normal';
          this._callbackShowPayline = callback;
          var dataStore = this.node.dataStore;

          if (dataStore && !dataStore.isAutoSpin) {
            this.nextPaylineTime = this.curentConfig.EXPECT_PAYLINE_ALLWAYS_TIME;
          } else {
            this.nextPaylineTime = Math.max(this.curentConfig.EXPECT_PAYLINE_TIME / this.payLineNormals.length, this.curentConfig.MIN_TIME_EACH_PAYLINE);
          }

          this.showNextPayline();
        };

        _proto.showAllFreePaylines = function showAllFreePaylines(callback, index) {
          if (index === void 0) {
            index = 0;
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this.paylineIndex = index;
          this.showingPayline = true;
          this.paylineType = 'free';
          this._callbackShowPayline = callback;
          this.nextPaylineTime = Math.max(this.curentConfig.EXPECT_PAYLINE_TIME / this.payLineNormals.length, this.curentConfig.MIN_TIME_EACH_PAYLINE);
          this.showNextPayline();
        };

        _proto.resetSymbolPaylines = function resetSymbolPaylines() {
          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) return;

          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var _this$paylinesMatrix$ = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$.symbol,
                  paylineSymbol = _this$paylinesMatrix$.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$.winLineFrame;

              if (symbol && paylineSymbol) {
                symbol.active = true;
                symbol["isHidden"] = false;
                paylineSymbol.active = true;
                symbol.emit('RESET');
                paylineSymbol.emit('RESET');
              }

              if (winLineFrame) winLineFrame.active = false;
            }
          }
        };

        _proto.disableHighlightNormalPaylines = function disableHighlightNormalPaylines() {
          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var _this$paylinesMatrix$2 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$2.symbol,
                  paylineSymbol = _this$paylinesMatrix$2.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$2.winLineFrame;

              if (symbol && paylineSymbol) {
                symbol.emit('DISABLE_HIGHLIGHT');
                paylineSymbol.emit('DISABLE_HIGHLIGHT');
              }

              if (winLineFrame) winLineFrame.active = false;
            }
          }

          if (this.dimBackground) this.dimBackground.active = true;
        };

        _proto.blinkNormalPaylinePerline = function blinkNormalPaylinePerline(_ref) {
          var payLineID = _ref.payLineID,
              payLineWinNumbers = _ref.payLineWinNumbers;
          var payline = this.config.PAY_LINE_MATRIX[payLineID];

          for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
            var row = payline[paylinePos];
            var col = paylinePos;
            var paylineObject = this.paylinesMatrix[col][row];

            if (!paylineObject) {
              paylineObject = this.createPaylineObject(col, row);
            }

            if (!paylineObject) return;
            var _paylineObject = paylineObject,
                symbol = _paylineObject.symbol,
                winLineFrame = _paylineObject.winLineFrame;

            if (symbol) {
              symbol.emit('BLINK_HIGHLIGHT', this.curentConfig.BLINK_DURATION, this.curentConfig.BLINKS);
            }

            if (winLineFrame) winLineFrame.active = true;
          }
        };

        _proto.blinkNormalPaylineAllline = function blinkNormalPaylineAllline(_ref2) {
          var symbolName = _ref2.symbolName,
              symbolCount = _ref2.symbolCount;

          for (var col = 0; col < symbolCount; col++) {
            for (var row = 0; row < this.paylinesMatrix[col].length; row++) {
              var paylineObject = this.paylinesMatrix[col][row];

              if (!paylineObject) {
                paylineObject = this.createPaylineObject(col, row);
              }

              if (!paylineObject) return;
              var _paylineObject2 = paylineObject,
                  symbol = _paylineObject2.symbol,
                  winLineFrame = _paylineObject2.winLineFrame;

              if (symbol && symbol.symbol == symbolName || symbol.symbol == this.config.WILD_SYMBOL) {
                symbol.emit('BLINK_HIGHLIGHT', this.curentConfig.BLINK_DURATION, this.curentConfig.BLINKS);
                if (winLineFrame) winLineFrame.active = true;
              }
            }
          }
        };

        _proto.showNormalPaylinePerline = function showNormalPaylinePerline(_ref3) {
          var payLineID = _ref3.payLineID,
              payLineWinNumbers = _ref3.payLineWinNumbers,
              symbolName = _ref3.symbolName;
          this.disableHighlightNormalPaylines();
          var payline = this.config.PAY_LINE_MATRIX[payLineID];

          if (payline && payline.length > 0 && this.paylinesMatrix && this.paylinesMatrix.length > 0) {
            for (var paylinePos = 0; paylinePos < payLineWinNumbers; ++paylinePos) {
              var row = payline[paylinePos];
              var col = paylinePos;
              var _this$paylinesMatrix$3 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$3.symbol,
                  paylineSymbol = _this$paylinesMatrix$3.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$3.winLineFrame,
                  isShowing = _this$paylinesMatrix$3.isShowing;

              if (symbol && paylineSymbol && isShowing) {
                if (symbol.symbol === symbolName || symbol.symbol === this.config.WILD_SYMBOL) {
                  symbol.emit('ENABLE_HIGHLIGHT');
                  paylineSymbol.emit('PLAY_ANIMATION');
                  paylineSymbol.emit('ENABLE_HIGHLIGHT');
                }
              }

              if (winLineFrame) winLineFrame.active = true;
            }
          }
        };

        _proto.showNormalPaylineAllLine = function showNormalPaylineAllLine(_ref4) {
          var symbolName = _ref4.symbolName,
              symbolCount = _ref4.symbolCount;
          this.disableHighlightNormalPaylines();

          for (var col = 0; col < symbolCount; col++) {
            for (var row = 0; row < this.paylinesMatrix[col].length; row++) {
              var _this$paylinesMatrix$4 = this.paylinesMatrix[col][row],
                  symbol = _this$paylinesMatrix$4.symbol,
                  paylineSymbol = _this$paylinesMatrix$4.paylineSymbol,
                  winLineFrame = _this$paylinesMatrix$4.winLineFrame,
                  isShowing = _this$paylinesMatrix$4.isShowing;

              if (symbol && paylineSymbol && isShowing) {
                if (symbol.symbol == symbolName || symbol.symbol == this.config.WILD_SYMBOL) {
                  symbol.emit('ENABLE_HIGHLIGHT');
                  paylineSymbol.emit('PLAY_ANIMATION');
                  paylineSymbol.emit('ENABLE_HIGHLIGHT');
                  if (winLineFrame) winLineFrame.active = true;
                }
              }
            }
          }
        };

        _proto.showScatterPayLine = function showScatterPayLine(callback) {
          this.soundPlayer && this.soundPlayer.playSfx("ANIM_SCATTER");
          this.showSpecialPayline(this.scatterHolderNode, callback);
        };

        _proto.showBonusPayLine = function showBonusPayLine(callback) {
          this.soundPlayer && this.soundPlayer.playSfx("ANIM_BONUS");
          this.showSpecialPayline(this.bonusHolderNode, callback);
        };

        _proto.showWildPayLine = function showWildPayLine(callback) {
          this.showSpecialPayline(this.wildHolderNode, callback);
        };

        _proto.showJackpotPayLine = function showJackpotPayLine(jpPayLineID, callback) {
          this.drawPayline({
            payLineID: jpPayLineID
          });
          this.showSpecialPayline(this.jackpotHolderNode, callback);
        };

        _proto.showSpecialPayline = function showSpecialPayline(node, callback) {
          this.hideShowingPayline();
          this.setOpacity(this.paylineHolder, 255);
          this.disableHighlightNormalPaylines();
          node.forEach(function (child) {
            var symbol = child.symbol,
                paylineSymbol = child.paylineSymbol;
            if (symbol) symbol.emit('ENABLE_HIGHLIGHT');

            if (paylineSymbol) {
              paylineSymbol.emit('PLAY_ANIMATION');
              paylineSymbol.emit('ENABLE_HIGHLIGHT');
            }
          });

          this._callbackSpecialPayline = function () {
            if (callback && typeof callback == "function") {
              callback();
            }
          };

          this.scheduleOnce(this._callbackSpecialPayline, this.curentConfig.ANIMATION_DURATION);
        };

        _proto.hideShowingPayline = function hideShowingPayline() {
          this.showingPayline = false;
          this.paylineTime = 0;
          if (this.guiMgr) this.guiMgr.hidePaylineInfo();
        };

        _proto.findIndex = function findIndex(col, row) {
          if (col === void 0) {
            col = 5;
          }

          if (row === void 0) {
            row = 3;
          }

          return col * this.node['reels'].length + row;
        };

        _proto.clearPaylines = function clearPaylines() {
          this.payLineNormals = null;
          if (this.showDrawingLine && this.eventManager) this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);

          if (this._blinkingCallback) {
            this.unschedule(this._blinkingCallback);
            this._blinkingCallback = null;
          }

          if (this._callbackSpecialPayline) {
            this.unschedule(this._callbackSpecialPayline);
            this._callbackSpecialPayline = null;
          }

          this.hideShowingPayline();
          this.resetSymbolPaylines();

          for (var i = 0; i < this.usingObjs.length; i++) {
            var removeObj = this.usingObjs[i];

            if (removeObj) {
              this.poolFactory.removeObject(removeObj);
            }
          }

          this.usingObjs = [];
          this.paylineHolder.active = false;
          if (this.dimBackground) this.dimBackground.active = false;
          this.resetPaylineHolder();
        };

        _proto.resetPaylineHolder = function resetPaylineHolder() {
          this.paylinesMatrix = [];
          this.scatterHolderNode = [];
          this.bonusHolderNode = [];
          this.wildHolderNode = [];
          this.jackpotHolderNode = [];
        };

        _proto.blinkHighlightPaylines = function blinkHighlightPaylines(callback) {
          var _this2 = this;

          if (callback === void 0) {
            callback = function callback() {};
          }

          if (!this.payLineNormals) {
            callback && callback();
            return;
          }

          this._blinkingCallback = function () {
            callback && callback();
            _this2._blinkingCallback = null;
          };

          this.setOpacity(this.paylineHolder, 255);
          this.disableHighlightNormalPaylines();
          if (this.showDrawingLine && this.eventManager) this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);

          for (var i = 0; i < this.payLineNormals.length; ++i) {
            this.blinkNormalPayline(this.payLineNormals[i]);
            if (this.showDrawingLine && this.eventManager) this.drawPayline(this.payLineNormals[i]);
          }

          this.node.emit('BLINK_ALL_PAYLINE');
          this.scheduleOnce(this._blinkingCallback, this.curentConfig.BLINKS * this.curentConfig.BLINK_DURATION);
        };

        _proto.update = function update(dt) {
          if (this.paylineTime > 0 && this.showingPayline) {
            this.paylineTime -= dt;

            if (this.paylineTime <= 0) {
              this.showNextPayline();
            }
          }
        };

        _proto.showNextPayline = function showNextPayline() {
          this.setOpacity(this.paylineHolder, 255);

          if (!this.payLineNormals || !this.payLineNormals[this.paylineIndex]) {
            if (this.paylineType === 'free') {
              this.showingPayline = false;
            }

            this.paylineIndex = 0;
            this._callbackShowPayline && this._callbackShowPayline();
            this._callbackShowPayline = null;
          }

          if (this.payLineNormals && this.payLineNormals[this.paylineIndex] && this.showingPayline) {
            var paylineInfo = this.payLineNormals[this.paylineIndex];
            this.showNormalPayline(paylineInfo);

            if (this.showDrawingLine && this.eventManager) {
              this.eventManager.emit(EventNames.DRAWING_LINE_CLEAR);
              this.drawPayline(paylineInfo);
            }

            if (this.guiMgr) this.guiMgr.showPaylineInfo(paylineInfo);
            this.extShowPayline();
            this.paylineIndex += 1;
            this.paylineTime = this.nextPaylineTime;
          }
        };

        _proto.getSymbolSpineData = function getSymbolSpineData(symbolName) {
          if (this.spineDataList.length > 0) {
            // prefer internal spine skeleton data list for different spine for each game mode
            for (var i = 0; i < this.spineDataList.length; i++) {
              if (this.spineDataList[i].spineName === symbolName) {
                return this.spineDataList[i].spineData;
              }
            }
          } else if (this.mainDirector && this.mainDirector.spineSkeletonDatabase) {
            // then dynamic spine skeleton database from main director
            return this.mainDirector.spineSkeletonDatabase.getSpineSkeletonData(symbolName);
          }

          return null;
        };

        _proto.drawPayline = function drawPayline(paylineInfo) {
          var payLineID = paylineInfo.payLineID;
          var payline = this.config.PAY_LINE_MATRIX[payLineID];
          if (!payline) return;

          for (var i = 0; i < payline.length; i++) {
            var col = i;
            var row = payline[i];

            if (col == 0) {
              // add first line
              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD_FIRST, row);
              }
            }

            if (i < payline.length - 1) {
              var val = payline[i] - payline[i + 1];
              var type = 0;
              if (val == 0) type = 0; // di ngang
              else if (val == 1) type = 1; // cheo len 1 o
                else if (val == 2) type = 3; // cheo len 2 o
                  else if (val == -1) type = 2; // cheo xuong 1 o
                    else if (val == -2) type = 4; // cheo xuong 2 o

              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD, type, col, row);
              }
            }

            if (col == payline.length - 1) {
              // add last line
              if (this.eventManager) {
                this.eventManager.emit(EventNames.DRAWING_LINE_ADD_LAST, row);
              }
            }
          }
        };

        _proto.showReelStaticSymbols = function showReelStaticSymbols(col, show) {
          if (col === void 0) {
            col = 1;
          }

          if (show === void 0) {
            show = true;
          }

          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) return;
          var tableFormat = this.node.tableFormat;

          for (var row = 0; row < tableFormat[col]; row++) {
            var paylineObject = this.paylinesMatrix[col][row];

            if (paylineObject) {
              var symbol = paylineObject.symbol,
                  paylineSymbol = paylineObject.paylineSymbol,
                  winLineFrame = paylineObject.winLineFrame;

              if (symbol) {
                symbol["isHidden"] = !show;
                symbol.active = show;
              }

              if (paylineSymbol) paylineSymbol.active = show;
              if (winLineFrame) winLineFrame.active = show;
              paylineObject['isShowing'] = show;
            }
          }
        };

        _proto.moveScatterParticles = function moveScatterParticles(currentGameMode, callback) {
          if (!this.paylinesMatrix || this.paylinesMatrix.length === 0) {
            callback && callback();
            return;
          }

          var PARTICLE_MOVING_TIME = this.config.PARTICLE_MOVING_TIME;
          var count = 0;

          for (var col = 0; col < this.paylinesMatrix.length; ++col) {
            for (var row = 0; row < this.paylinesMatrix[col].length; ++row) {
              var symbol = this.paylinesMatrix[col][row].symbol;

              if (symbol && symbol.symbol == 'A') {
                this.eventManager.emit("MOVE_PARTICLES", currentGameMode, symbol.getWorldPosition(), PARTICLE_MOVING_TIME ? PARTICLE_MOVING_TIME : 1, count === 0 ? callback : function () {});
                count++;
              }
            }
          }
        };

        _proto.extShowPayline = function extShowPayline() {};

        return SlotTablePayline;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineDataList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "paylineHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "staticPaylineHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winLineFrameHolder", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dimBackground", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "disablePaylineHolder", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "paylineSymbolPrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "SlotSymbolPayline";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "winLineFramePrefabName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "WinLineFrame";
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "jackpotSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTablePaylineInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, Layout, GameObject, convertAssetArrayToObject, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      Layout = module.Layout;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "e37ddKx//xI3Z6DIaqB9Obu", "SlotTablePaylineInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTablePaylineInfo = exports('SlotTablePaylineInfo', (_dec = ccclass('SlotTablePaylineInfo'), _dec2 = property({
        type: SpriteFrame
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTablePaylineInfo, _GameObject);

        function SlotTablePaylineInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "symbolPrefix", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smallSymbols", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLeft", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRight", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "symbolImg", _descriptor5, _assertThisInitialized(_this));

          _this.assets = [];
          _this.showPaylineInfo = null;
          _this._textLayout = null;
          _this._lastPayLine = "";
          _this.hasShowed = false;
          return _this;
        }

        var _proto = SlotTablePaylineInfo.prototype;

        _proto.start = function start() {
          this.assets = convertAssetArrayToObject(this.smallSymbols);
          if (this.config && this.config.PAY_LINE_ALLWAYS) this.showPaylineInfo = this.showPaylineInfoAllways;else if (!this.showPaylineInfo) {
            this.showPaylineInfo = this.showPaylineInfoLine;
          }
          this.node.on("SHOW_PAYLINE", this.showPaylineInfo, this);
          this.node.on("HIDE_PAYLINE", this.hidePaylineInfo, this);
          this.hidePaylineInfo();
          this._textLayout = this.node.getComponentInChildren(Layout);
        };

        _proto.showPaylineInfoLine = function showPaylineInfoLine(_ref) {
          var line = _ref.line;
          var payLineID = line.payLineID,
              payLineWinNumbers = line.payLineWinNumbers,
              payLineWinAmount = line.payLineWinAmount,
              symbolName = line.symbolName;
          var _this$config$MESSAGE_ = this.config.MESSAGE_DIALOG,
              LINE = _this$config$MESSAGE_.LINE,
              WINS = _this$config$MESSAGE_.WINS;
          this.node.active = true;
          this.lbLeft.string = LINE + " " + payLineID + " " + WINS + " " + payLineWinNumbers + " x";
          this.lbRight.string = " = " + formatMoney(payLineWinAmount) + "";
          this.symbolImg.spriteFrame = this.assets[this.symbolPrefix + symbolName];

          if (this._textLayout && this._lastPayLine !== payLineID) {
            this.showBodyInfo();
          }

          this._lastPayLine = payLineID;
        };

        _proto.showPaylineInfoAllways = function showPaylineInfoAllways(_ref2) {
          var line = _ref2.line;
          var symbolName = line.symbolName,
              totalWinAmount = line.totalWinAmount,
              symbolCount = line.symbolCount,
              combination = line.combination,
              payableSymbol = line.payableSymbol;
          var betDenom = this.calculateBetDenom();
          this.node.active = true;
          this.lbLeft.string = Number(symbolCount);
          this.symbolImg.spriteFrame = this.assets[this.symbolPrefix + symbolName];
          var symbolPayTableString = 'trúng ' + payableSymbol;
          var combinationString = combination > 1 ? ' (x' + combination + ')' : '';
          var calculateDenom = ' = ' + formatMoney(payableSymbol * combination) + ' x ' + formatMoney(betDenom) + ' = ';
          var winAmount = formatMoney(totalWinAmount);
          this.lbRight.string = symbolPayTableString + combinationString + calculateDenom + winAmount;

          if (this._textLayout && this._lastPayLine !== symbolName) {
            this.showBodyInfo();
          }

          this._lastPayLine = symbolName;
        };

        _proto.showBodyInfo = function showBodyInfo() {
          var _this2 = this;

          this._textLayout.updateLayout(true);

          if (!this.hasShowed) {
            this.setOpacity(this.node, 0);
            this.scheduleOnce(function () {
              _this2.setOpacity(_this2.node, 255);
            }, 0.01);
          } else {
            this.setOpacity(this.node, 255);
          }

          this.hasShowed = true;
        };

        _proto.calculateBetDenom = function calculateBetDenom() {
          var mainBets = this.dataStore.betData.mainBets;
          var TOTAL_BET_CREDIT = this.config.TOTAL_BET_CREDIT;
          var betIds = this.dataStore.playSession.betId;
          var betIndex = Object.keys(mainBets).find(function (key) {
            return key == betIds[0];
          });
          return Number(mainBets[betIndex]) / TOTAL_BET_CREDIT;
        };

        _proto.hidePaylineInfo = function hidePaylineInfo() {
          if (this._textLayout) {
            this.unscheduleAllCallbacks();
          }

          this.lbLeft.string = '';
          this.lbRight.string = '';
          this.symbolImg.spriteFrame = null;
          this.node.active = false;
          this.hasShowed = false;
        };

        return SlotTablePaylineInfo;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "symbolPrefix", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "smallSymbols", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbLeft", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbRight", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "symbolImg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableSoundEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "1423b7wk5dKXI48elH5+rvZ", "SlotTableSoundEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableSoundEffect = exports('SlotTableSoundEffect', (_dec = ccclass('SlotTableSoundEffect'), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableSoundEffect, _GameObject);

        function SlotTableSoundEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sfxReelSpinning", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxReelStop", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scatterSymbol", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wildSymbol", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bonusSymbol", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playSoundReelStopComplete", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reelEndIndex", _descriptor7, _assertThisInitialized(_this));

          _this.countBonus = 0;
          _this.countScatter = 0;
          _this.countWild = 0;
          return _this;
        }

        var _proto = SlotTableSoundEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('TABLE_START_SOUND', this.reelStartSound, this);
          this.node.on('REEL_STOP_SOUND', this.reelStopSound, this);
          this.node.on('REEL_GOING_TO_STOP', this.reelGoingToStopSound, this);
        };

        _proto.reelStartSound = function reelStartSound() {
          this.countWild = 0;
          this.countBonus = 0;
          this.countScatter = 0;
          this.sfxReelSpinning && this.soundPlayer && this.soundPlayer.playSfx(this.sfxReelSpinning);
        };

        _proto.reelStopSound = function reelStopSound(_ref) {
          var matrix = _ref.matrix,
              count = _ref.count;
          if (!this.playSoundReelStopComplete || !this.soundPlayer) return;
          this.sfxReelStop && this.soundPlayer.playSfx(this.sfxReelStop);

          if (count >= this.node["reels"].length) {
            this.sfxReelSpinning && this.soundPlayer.stopSfx(this.sfxReelSpinning);
          }

          if (this.dataStore.modeTurbo) return;

          if (matrix.indexOf(this.bonusSymbol) > -1) {
            this.countBonus++;

            if (this.canGetBonusGame(count)) {
              this.soundPlayer.playSoundGetBonus(this.countBonus);
            }
          }

          if (matrix.indexOf(this.scatterSymbol) > -1) {
            this.countScatter++;

            if (this.canGetFreeGame(count)) {
              this.soundPlayer.playSoundGetScatter(this.countScatter);
            }
          }
        };

        _proto.reelGoingToStopSound = function reelGoingToStopSound(evt) {
          var _this2 = this;

          evt.propagationStopped = true;
          if (this.playSoundReelStopComplete || !this.soundPlayer) return;
          if (this.reelEndIndex == -1) this.reelEndIndex = this.node["reels"].length - 1;
          var _evt$details = evt.details,
              reelIndex = _evt$details.reelIndex,
              reelResult = _evt$details.reelResult,
              isTurbo = _evt$details.isTurbo,
              isF2R = _evt$details.isF2R;

          if (reelResult.indexOf(this.bonusSymbol) > -1) {
            this.countBonus++;
          }

          if (reelResult.indexOf(this.scatterSymbol) > -1) {
            this.countScatter++;
          }

          if (reelResult.indexOf(this.wildSymbol) > -1) {
            this.countWild++;
          }

          if (reelIndex == this.reelEndIndex) {
            this.sfxReelSpinning && this.soundPlayer.stopSfx(this.sfxReelSpinning);
          }

          var playSoundReelStopFunc = function playSoundReelStopFunc() {
            _this2.sfxReelStop && _this2.soundPlayer.playSfx(_this2.sfxReelStop);
          };

          if (isTurbo || isF2R) {
            if (reelIndex == this.reelEndIndex) {
              playSoundReelStopFunc();
              this.playSoundSpecialSymbolsTable();
            }
          } else {
            playSoundReelStopFunc();
            this.playSoundSpecialSymbolsReel(reelResult);
          }
        };

        _proto.playSoundSpecialSymbolsTable = function playSoundSpecialSymbolsTable() {
          //Demo: only highest scatter/wild/bonus sound count
          //Overwrite
          var matrix = this.node['getMatrixResult']();
          if (!matrix || matrix.length < 1) return;

          if (this.countScatter > 0) {
            this.playSoundScatterOnStop();
          }

          if (this.countBonus > 0) {
            this.playSoundBonusOnStop();
          }

          if (this.countWild > 0) {
            this.playSoundWildOnStop();
          }
        };

        _proto.playSoundSpecialSymbolsReel = function playSoundSpecialSymbolsReel(reelResult) {
          if (reelResult === void 0) {
            reelResult = [];
          } //Overwrite


          if (reelResult.indexOf(this.scatterSymbol)) {
            this.playSoundScatterOnStop();
          }

          if (reelResult.indexOf(this.bonusSymbol)) {
            this.playSoundBonusOnStop();
          }

          if (reelResult.indexOf(this.wildSymbol)) {
            this.playSoundWildOnStop();
          }
        };

        _proto.playSoundScatterOnStop = function playSoundScatterOnStop() {};

        _proto.playSoundWildOnStop = function playSoundWildOnStop() {};

        _proto.playSoundBonusOnStop = function playSoundBonusOnStop() {};

        _proto.canGetFreeGame = function canGetFreeGame(count) {
          if (count === 4 && this.countScatter <= 1) return false;
          if (count === 5 && this.countScatter <= 2) return false;else return true;
        };

        _proto.canGetBonusGame = function canGetBonusGame(count) {
          if (count === 4 && this.countBonus <= 1) return false;
          if (count === 5 && this.countBonus <= 2) return false;else return true;
        };

        return SlotTableSoundEffect;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfxReelSpinning", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxReelStop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scatterSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "A";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "wildSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "K";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "bonusSymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "R";
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "playSoundReelStopComplete", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "reelEndIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotTableTouchSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, find, Camera, Node, Vec3, UITransform, Rect, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      Camera = module.Camera;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Rect = module.Rect;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5273e8PuQRBG6pBLwsyW6hZ", "SlotTableTouchSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotTableTouchSymbol = exports('SlotTableTouchSymbol', (_dec = ccclass('SlotTableTouchSymbol'), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotTableTouchSymbol, _GameObject);

        function SlotTableTouchSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineAnimBorderName", _descriptor, _assertThisInitialized(_this));

          _this.eventListenterManager = null;
          _this.isAllowTouchSymbol = true;
          _this.canvas = null;
          _this.camera = null;
          _this.allSymbols = [];
          _this.curPoint = null;
          _this.expandRow = 0;
          _this.matrix = [];
          _this.isNeedReset = false;
          return _this;
        }

        var _proto = SlotTableTouchSymbol.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.init();
          this.node.on("ALLOW_TOUCH_SYMBOL", this.allowTouchSymbol, this);

          if (!this.eventListenterManager) {
            this.eventListenterManager = this.mainDirector.eventManager;
          }

          this.registerEvent();
        };

        _proto.registerEvent = function registerEvent() {
          if (this.eventListenterManager) {
            this.eventListenterManager.on("ON_SHOW_SYMBOL_INFO", this.onShowSymbolInfo, this);
          }
        };

        _proto.unRegisterAll = function unRegisterAll() {
          if (this.eventListenterManager) {
            this.eventListenterManager.targetOff(this);
          }
        };

        _proto.allowTouchSymbol = function allowTouchSymbol(isAllow) {
          if (isAllow === void 0) {
            isAllow = false;
          }

          this.isAllowTouchSymbol = isAllow;
          this.guiMgr && this.guiMgr.node.emit("HIDE_INFO_SYMBOL");
        };

        _proto.init = function init() {
          this.canvas = find('Canvas');

          if (this.canvas) {
            this.camera = this.canvas.getComponentInChildren(Camera);
          }

          if (this.camera) {
            this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          }
        };

        _proto.onTouchEnd = function onTouchEnd(evt) {
          var wlocation = new Vec3(0, 0, 0);
          var location = new Vec3(evt.getLocation().x, evt.getLocation().y, 0);
          this.camera.screenToWorld(location, wlocation);
          if (this.isAllowTouchSymbol == false) return;
          this.allSymbols = this.getAllSymbol();

          for (var index = 0; index < this.allSymbols.length; index++) {
            var symbol = this.allSymbols[index];
            var widthSymbol = this.config.SYMBOL_WIDTH;
            var heigthSymbol = this.config.SYMBOL_HEIGHT;
            this.curPoint = symbol.parent.getComponent(UITransform).convertToNodeSpaceAR(wlocation);
            var rect = new Rect(symbol.getPosition().x - widthSymbol / 2, symbol.getPosition().y - heigthSymbol / 2, widthSymbol, heigthSymbol);
            var isContains = rect.contains(this.curPoint);

            if (isContains) {
              var spineData = this.findSpineData(symbol.symbol);
              var spineBorder = this.findSpineData(this.spineAnimBorderName);
              this.guiMgr && this.guiMgr.node.emit("SHOW_INFO_SYMBOL", wlocation, symbol, spineData, spineBorder);
            }
          }
        };

        _proto.getAllSymbol = function getAllSymbol() {
          var arr = [];
          var colCount = this.node['reels'].length;

          for (var col = 0; col < colCount; col++) {
            var reel = this.node['reels'][col];
            var showSymbols = reel && reel.getShowSymbols();

            if (showSymbols && showSymbols.length > 0) {
              for (var row = 0; row < showSymbols.length; row++) {
                var symbol = showSymbols[row];
                if (symbol) arr.push(symbol);
                symbol["isLeftBorder"] = col < Math.floor(colCount / 2);
                symbol["isRightBorder"] = col > Math.floor(colCount / 2);
                symbol["isMiddle"] = col === Math.floor(colCount / 2);
                symbol["collumnInfo"] = col;
                symbol["rowInfo"] = showSymbols.length - row; // reverse direction from top to bottom
              }
            }
          }

          return arr;
        };

        _proto.findSpineData = function findSpineData(animName) {
          return this.mainDirector.spineSkeletonDatabase.getSpineSkeletonData(animName);
        };

        _proto.onDestroy = function onDestroy() {
          this.unRegisterAll();
        };

        _proto.onShowSymbolInfo = function onShowSymbolInfo(isShowing) {} //override here
        ;

        return SlotTableTouchSymbol;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineAnimBorderName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'VFX_Symbol_Light';
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotText.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d5710PmH9OEpfHrjoIDC89", "SlotText", undefined);

      var SlotText = exports('SlotText', {
        NO_MONEY: 'Số dư trong ví không đủ,\nvui lòng nạp thêm để chơi tiếp.',
        NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ,\nvui lòng nạp thêm để chơi tiếp.',
        NOT_ENOUGH_MONEY: 'Số dư trong [wallet] không đủ',
        LOST_CONNECT: 'Bạn đã bị mất kết nối. \n Vui lòng chờ ...',
        SPIN_4_EVER: 'Bạn đã mất kết nối. \n Vui lòng thử lại.',
        ANOTHER_ACCOUNT: 'Tài khoản của bạn đã\nđăng nhập từ thiết bị khác.',
        AUTHEN_FAILED: 'Xác thực tài khoản thất bại.',
        DEPOSIT_MONEY: 'Số dư không đủ,\nbạn có muốn nạp thêm ?',
        DEPOSIT_MONEY_EVENT: 'Số dư [wallet] không đủ,\nbạn có muốn nạp thêm ?',
        MISMATCH_DATA: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
        SYSTEM_ERROR: 'Có lỗi xảy ra,\nvui lòng thử lại.',
        DISCONNECT: 'Bị mất kết nối tới máy chủ\n Đang kết nối lại.',
        NO_PLAYSESSION: 'Hệ thống không tìm thấy phiên chơi.',
        GROUP_MAINTAIN: 'Hệ thống đang bảo trì.\nVui lòng quay lại sau.',
        NETWORK_WARNING: 'Đường truyền mạng yếu!',
        NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại.',
        NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại.',
        IN_PROGRESSING: 'Mạng chậm vui lòng đợi trong \ngiây lát để hoàn thành\nlượt quay hoặc bấm xác nhận \nđể tải lại game.',
        SPIN_UNSUCCESS: 'Thao tác không thành công,\nvui lòng thử lại.',
        ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá,\nvui lòng liên hệ admin.',
        REQUEST_DENIED: 'Phiên đã hết hạn, vui lòng liên hệ với admin.',
        EVENT_NOT_AVAILABLE: 'Sự kiện không hợp lệ,\nvui lòng thử lại.',
        WALLET_NORMAL: 'Ví Vàng',
        WALLET_PROMOTE: 'Ví Ngọc',
        PROMOTION_EXPIRED: 'Khuyến mãi đã hết hạn.'
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotUIScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts', './EventNames.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sys, setOpacity, fadeIn, SlotSceneType, TutorialTriggerType, EventNames, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeIn = module.fadeIn;
    }, function (module) {
      SlotSceneType = module.SlotSceneType;
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b957e/6glxDY7A92r823MuW", "SlotUIScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotUIScene = exports('SlotUIScene', (_dec = ccclass('SlotUIScene'), _dec2 = property({
        type: SlotSceneType
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SlotUIScene, _GameObject);

        function SlotUIScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.content = void 0;
          _this.callback = void 0;

          _initializerDefineProperty(_this, "sceneType", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotUIScene.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("PLAY", this.play, this);
          this.node.on("HIDE", this.exit, this);
          this.node.on("INIT", this.init, this);
          this.node.on("SKIP", this.skip, this);
          setOpacity(this.node, 0);
          this.setUpNodeInHierachy();
          this.node.active = false;
        };

        _proto.start = function start() {};

        _proto.setUpNodeInHierachy = function setUpNodeInHierachy() {
          if (this.guiMgr && !this.guiMgr.getCutscene(this.sceneType)) {
            this.guiMgr.sceneComp.push(this);
          }
        };

        _proto.play = function play(content, callback) {
          var _this2 = this;

          this.content = content;

          this.callback = function () {
            _this2.callback = null;
            callback && callback();
          };

          this.show();
          this.enter();
        };

        _proto.show = function show() {
          this.node.active = true;
          setOpacity(this.node, 0);
          fadeIn(this.node, 0.2);
        };

        _proto.init = function init() {};

        _proto.enter = function enter() {//Overwrite this when extends
        };

        _proto.skip = function skip() {};

        _proto.getType = function getType() {
          return this.sceneType;
        };

        _proto.exit = function exit(callBack) {
          var _this3 = this;

          if (callBack === void 0) {
            callBack = null;
          }

          if (callBack && typeof callBack == "function") this.callback = callBack;
          this.guiMgr.onIngameEvent(TutorialTriggerType.OnCutsceneClose, 'ON_CUTSCENE_CLOSE');

          if (this.callback) {
            this.node.emit("STOP");
            this.callback();
          }

          if (sys.isNative) {
            this.eventManager && this.eventManager.emit(EventNames.REMOVE_ON_DEMAND_OBJECT, Number(this.sceneType), true, function () {
              var index = _this3.guiMgr.sceneComp.indexOf(_this3);

              if (index > -1) {
                _this3.guiMgr.sceneComp.splice(index, 1);
              }
            });
          }

          this.hideScene();
        };

        _proto.hideScene = function hideScene() {
          this.node.active = false;
        };

        _proto.playSoundClick = function playSoundClick() {
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        return SlotUIScene;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sceneType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotSceneType.Other;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotUtils.ts", ['cc'], function (exports) {
  var cclegacy, SpriteFrame, Texture2D, ImageAsset, tween;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
      tween = module.tween;
    }],
    execute: function () {
      exports({
        bezier: bezier,
        bezierBy: bezierBy,
        bezierTo: bezierTo,
        combination: combination,
        convertPayLine: convertPayLine,
        convertPayLineAlways: convertPayLineAlways,
        convertSlotMatrix: convertSlotMatrix,
        exportDataFile: exportDataFile,
        factorial: factorial,
        importDataFile: importDataFile,
        loadSpriteFrameFile: loadSpriteFrameFile
      });

      cclegacy._RF.push({}, "96805Lx4n9Dk5S6B6JDdbbb", "SlotUtils", undefined);

      function convertSlotMatrix(matrix, format) {
        var cloneMatrix = matrix.slice();
        var newMatrix = [];

        for (var col = 0; col < format.length; col++) {
          var numRow = format[col];
          var reelResult = cloneMatrix.splice(0, numRow);
          newMatrix.push(reelResult);
        }

        return newMatrix;
      }

      function convertPayLine(payLines) {
        if (!payLines) return null;
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              symbolName: dataSplit[3],
              multiplier: dataSplit[4] ? dataSplit[4] : 1
            });
          }
        }

        return listNewPL;
      }

      function convertPayLineAlways(payLines) {
        if (!payLines) return null;
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length !== 0) {
            listNewPL.push({
              symbolName: dataSplit[0],
              totalWinAmount: dataSplit[1],
              symbolCount: dataSplit[2],
              combination: dataSplit[3],
              payableSymbol: dataSplit[4],
              multiplier: dataSplit[5]
            });
          }
        }

        return listNewPL;
      }
      /**
       * @only for web
       * 
       * @example
       * exportDataFile({"speed":10}, config.json);
       */


      function exportDataFile(dataStr, fileName) {
        var type = fileName.split(".").pop();
        var dataUri = "data:application/" + type + ";charset=utf-8," + encodeURIComponent(dataStr);
        var linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', fileName);
        linkElement.click();
      }
      /**
       * @only for web
       * 
       * @example
       * importDataFile((result)=> {console.log(result)});
       */


      function importDataFile(callback) {
        var input = window.document.createElement("input");
        input.type = "file";
        document.body.appendChild(input);
        setTimeout(function () {
          input.click();
        }, 1000);

        input.onchange = function () {
          var selectedFile = input.files[0];
          var reader = new FileReader();

          reader.onload = function (event) {
            callback(event.target.result);
          };

          reader.readAsText(selectedFile);
        };
      }

      function loadSpriteFrameFile(callback) {
        var input = window.document.createElement("input");
        input.type = "file";
        document.body.appendChild(input);
        setTimeout(function () {
          input.click();
        }, 100);

        input.onchange = function () {
          var selectedFile = input.files[0];
          var reader = new FileReader();

          reader.onload = function (event) {
            var img = new Image();
            img.src = event.target.result;

            img.onload = function () {
              var spriteFrame = new SpriteFrame();
              var texture = new Texture2D();
              var imageAsset = new ImageAsset(img);
              texture.image = imageAsset;
              spriteFrame.texture = texture;
              spriteFrame.name = selectedFile.name.replace(/\.png$/, "");
              callback && callback(spriteFrame);
            };
          };

          reader.readAsDataURL(selectedFile);
        };
      }

      var _factoryCache = {};

      function factorial(n) {
        if (_factoryCache[n] !== void 0) return _factoryCache[n];
        _factoryCache[n] = n < 2 ? 1 : n * factorial(n - 1);
        return _factoryCache[n];
      }

      function combination(n, k) {
        return factorial(n) / factorial(k) / factorial(n - k);
      }

      function bezier(pos, t) {
        var n = pos.length - 1,
            t1 = 1 - t;
        var _val = 0;

        for (var i = 0; i <= n; i++) {
          // Pi * Combine(n,i) * t^i * (1-t)^(n-i)
          _val += pos[i] * combination(n, i) * Math.pow(t, i) * Math.pow(t1, n - i);
        }

        return _val;
      }

      function bezierTo(node, duration, positions, option) {
        var _target = {
          t: 0
        };
        var bezierX, bezierY;

        var _options = Object.assign({}, option);

        _options.onStart = function () {
          _target.t = 0;
          var _node$position = node.position,
              x = _node$position.x,
              y = _node$position.y;
          bezierX = [x].concat(positions.map(function (p) {
            return p.x;
          }));
          bezierY = [y].concat(positions.map(function (p) {
            return p.y;
          }));
          (option == null ? void 0 : option.onStart) && (option == null ? void 0 : option.onStart());
        };

        _options.onUpdate = function () {
          var t = _target.t;
          var x = bezier(bezierX, t);
          var y = bezier(bezierY, t);
          node.setPosition(x, y);
          (option == null ? void 0 : option.onUpdate) && (option == null ? void 0 : option.onUpdate());
        };

        return tween(_target).to(duration, {
          t: 1
        }, _options).start();
      }

      function bezierBy(node, duration, positions, option) {
        var _target = {
          t: 0
        };
        var bezierX, bezierY;

        var _options = Object.assign(option);

        _options.onStart = function () {
          _target.t = 0;
          var _node$position2 = node.position,
              x = _node$position2.x,
              y = _node$position2.y;
          var _x = x,
              _y = y;
          bezierX = [x].concat(positions.map(function (p) {
            return _x += p.x;
          }));
          bezierY = [y].concat(positions.map(function (p) {
            return _y += p.y;
          }));
          (option == null ? void 0 : option.onStart) && (option == null ? void 0 : option.onStart());
        };

        _options.onUpdate = function () {
          var t = _target.t;
          var x = bezier(bezierX, t);
          var y = bezier(bezierY, t);
          node.setPosition(x, y);
          (option == null ? void 0 : option.onUpdate) && (option == null ? void 0 : option.onUpdate());
        };

        return tween(_target).to(duration, {
          t: 1
        }, _options).start();
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SmallToolTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Vec3, tween, setOpacity, fadeTo, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeTo = module.fadeTo;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "403ffSWAWZKXrqgZ13mg11f", "SmallToolTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SmallToolTip = exports('SmallToolTip', (_dec = ccclass('SmallToolTip'), _dec2 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(SmallToolTip, _GameObject);

        function SmallToolTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSprites", _descriptor, _assertThisInitialized(_this));

          _this.tween = void 0;
          return _this;
        }

        var _proto = SmallToolTip.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('SHOW_SMALL_TOOL_TIP', this.showSmallToolTip.bind(this));
        };

        _proto.showSmallToolTip = function showSmallToolTip(listFrames) {
          var _this2 = this;

          if (listFrames === void 0) {
            listFrames = [];
          }

          var minLength = listFrames.length < this.listSprites.length ? listFrames.length : this.listSprites.length;
          if (minLength == 0) return;
          this.listSprites.forEach(function (it) {
            it.node.active = false;
          });

          for (var i = 0; i < minLength; i++) {
            this.listSprites[i].spriteFrame = listFrames[i];
            this.listSprites[i].node.active = true;
          }

          setOpacity(this.node, 255);
          this.node.scale = new Vec3(1, 1, 1);
          if (this.tween) this.tween.stop();
          this.tween = tween(this.node).to(0.1, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.1, {
            scale: new Vec3(1, 1, 1)
          }).delay(2).call(function () {
            fadeTo(_this2.node, 0.5, 1);
          }).start();
        };

        return SmallToolTip;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomTypeShare.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, AudioSource, warn, UITransform, Size, log, sys, Component, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      AudioSource = module.AudioSource;
      warn = module.warn;
      UITransform = module.UITransform;
      Size = module.Size;
      log = module.log;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "9292cCzeGpJ2qYW3aEq3Ldq", "Sound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sound = exports('Sound', (_dec = ccclass('Sound'), _dec2 = property(CustomAudioClip), _dec3 = property(CustomAudioClip), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Sound, _Component);

        function Sound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "musicList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "musicVolume", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxVolume", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dynamicLoading", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeyBGM", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeySFX", _descriptor8, _assertThisInitialized(_this));

          _this.currentMusic = void 0;
          _this.isEnableBGM = false;
          _this.isEnableSFX = false;
          _this.enableMusicFunc = void 0;
          _this.MUSIC_VOLUME = 1;
          _this.isMuteMusic = false;
          _this.isMuteEffect = false;
          _this.userGestureNode = void 0;
          _this.musicMap = {};
          _this.sfxMap = {};
          return _this;
        }

        var _proto = Sound.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          {
            globalThis['sound'] = this;
          }

          _Component.prototype.onLoad.call(this);

          this.loadCacheConfig();
          this.createUserGestureNode();
          this.userGestureNode.on(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
          this.musicList.forEach(function (soundObj) {
            _this2.musicMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.musicMap[soundObj.soundId].audioSource = audioSource;
          });
          this.sfxList.forEach(function (soundObj) {
            _this2.sfxMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.sfxMap[soundObj.soundId].audioSource = audioSource;
          });

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          if (this.dynamicLoading) {
            this.node.on('SET_UP_AUDIO_DATABASE', this.mappingAudioFiles.bind(this));
          }
        };

        _proto.mappingAudioFiles = function mappingAudioFiles(evt) {
          var _this3 = this;

          evt.propagationStopped = true;

          if (evt.details) {
            var audioList = evt.details.audioList;

            if (audioList && audioList.length > 0) {
              audioList.forEach(function (audioObj) {
                if (audioObj.isMusic) {
                  if (!_this3.musicMap[audioObj.soundId]) {
                    _this3.musicMap[audioObj.soundId] = audioObj;
                  }
                } else if (audioObj.isEffect) {
                  if (!_this3.sfxMap[audioObj.soundId]) {
                    _this3.sfxMap[audioObj.soundId] = audioObj;
                  }
                }
              });
            } else {
              this.resetAudioMaps();
            }
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key2 in this.sfxMap) {
            var soudObj = this.sfxMap[_key2];

            if (soudObj && soudObj.destroyedOnSwitchMode) {
              this.sfxMap[_key2] = null;
              delete this.sfxMap[_key2];
            }
          }
        };

        _proto.createUserGestureNode = function createUserGestureNode() {
          if (!this.userGestureNode) {
            this.userGestureNode = new Node("UserGesture");
            this.userGestureNode.parent = this.node.parent;
            this.userGestureNode.active = true;
            this.userGestureNode.setPosition(0, 0);
            this.userGestureNode.layer = this.node.layer;
            var transform = this.userGestureNode.addComponent(UITransform);
            transform.setContentSize(new Size(2024, 1200));
            this.userGestureNode.setSiblingIndex(this.userGestureNode.parent.children.length);
          }
        };

        _proto.startPlayWithUserGesture = function startPlayWithUserGesture() {
          this.playMainBGM();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        }
        /**
         * @music_API
         *  */
        ;

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (!this.isEnableBGM) return;
          if (this.musicMap.hasOwnProperty(id) == false) return null;
          volume = this.isMuteMusic ? 0 : volume > 0 ? volume : this.musicVolume;

          if (this.currentMusic && this.currentMusic.soundId == id && !this.currentMusic.audioSource.playing) {
            this.currentMusic.audioSource.play();
            this.currentMusic.audioSource.loop = loop;
            this.currentMusic.audioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.currentMusic.audioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this.currentMusic.audioSource.play();
              this.currentMusic.audioSource.loop = loop;
              this.currentMusic.audioSource.volume = volume;
            }
          }

          if (this.isDebug) {
            log("%cSOUND playMusic", "color:red", id);
          }

          return this.currentMusic;
        };

        _proto.stopMusic = function stopMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.stop();
        };

        _proto.pauseMusic = function pauseMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.pause();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = volume;
          }
        };

        _proto.muteMusic = function muteMusic() {
          this.isMuteMusic = true;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = 0;
          }
        };

        _proto.unmuteMusic = function unmuteMusic() {
          this.isMuteMusic = false;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = this.musicVolume;
          }
        }
        /**
         * @sfx_API 
         * */
        ;

        _proto.playSfx = function playSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.isEnableSFX) return;
          volume = this.isMuteEffect ? 0 : volume > 0 ? volume : this.sfxVolume;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];

            if (soundObj) {
              soundObj.audioSource.play();
              soundObj.audioSource.loop = loop;

              if (typeof volume !== "undefined") {
                soundObj.audioSource.volume = volume;
              }
            }

            if (this.isDebug) {
              log("%cSOUND playSfx", "color: blue", id);
            }

            return soundObj;
          } else {
            warn("SOUND playSfx, do not have sfx: " + id);
            return null;
          }
        };

        _proto.stopSfx = function stopSfx(id) {
          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            soundObj && soundObj.audioSource.playing && soundObj.audioSource.stop();
          } else {
            warn("SOUND stopSfx, do not have sfx: " + id);
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) this.stopSfx(soundObj.soundId);
          }
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource.playing) {
              soundObj.audioSource.pause();

              if (this.isDebug) {
                log("%cSOUND pauseAllEffects", "color: orange", soundObj.soundId);
              }
            }
          }
        };

        _proto.muteAllEffects = function muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        };

        _proto.unmuteAllEffects = function unmuteAllEffects() {
          this.isMuteEffect = false;
          this.setEffectVolume(this.sfxVolume, true);
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) soundObj.audioSource.volume = volume;
          }
        }
        /**
         * @canNotStop 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(id, volume) {
          if (!this.isEnableSFX || this.isMuteEffect) return;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            volume = volume || this.sfxVolume;
            soundObj && soundObj.audioSource.playOneShot(soundObj.audioFile, volume);
          } else {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopMusic();
          this.stopAllEffects();
        }
        /**@control_setting */
        ;

        _proto.loadCacheConfig = function loadCacheConfig() {
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        };

        _proto.bgmToggle = function bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        };

        _proto.setBgmEnable = function setBgmEnable(enable) {
          var _this4 = this;

          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM);

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(function () {
            if (_this4.isEnableBGM) {
              _this4.playMainBGM();
            } else {
              _this4.pauseMusic();
            }

            _this4.enableMusicFunc = null;
          }, 100);
        };

        _proto.sfxToggle = function sfxToggle() {
          this.setEffectEnable(!this.isEnableBGM);
        };

        _proto.setEffectEnable = function setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX);

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        }
        /**@implements */
        ;

        _proto.playMainBGM = function playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        };

        _proto.playSFXClick = function playSFXClick() {
          this.playSfxOneShot('CLICK');
        };

        _proto.getSfxMap = function getSfxMap() {
          return this.sfxMap;
        };

        _proto.setSfxMap = function setSfxMap(data) {
          var _this5 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this5.sfxMap[key]) {
                _this5.sfxMap[key] = {};
              }

              Object.assign(_this5.sfxMap[key], data[key]);
            });
          }
        };

        _proto.getMusicMap = function getMusicMap() {
          return this.musicMap;
        };

        _proto.setMusicMap = function setMusicMap(data) {
          var _this6 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this6.musicMap[key]) {
                _this6.musicMap[key] = {};
              }

              Object.assign(_this6.musicMap[key], data[key]);
            });
          }
        };

        _proto.onDisable = function onDisable() {
          this.stopAllAudio();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        };

        _proto.test = function test() {
          this.playMusic("MUSIC_MAIN", true);
        };

        return Sound;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundPlayerImpl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './WebSoundPlayer.ts', './NativeSoundPlayer.ts', './CustomTypeShare.ts', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, warn, game, Game, sys, assetManager, UITransform, view, log, error, Component, WebSoundPlayer, NativeSoundPlayer, CustomAudioClip, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      warn = module.warn;
      game = module.game;
      Game = module.Game;
      sys = module.sys;
      assetManager = module.assetManager;
      UITransform = module.UITransform;
      view = module.view;
      log = module.log;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      WebSoundPlayer = module.WebSoundPlayer;
    }, function (module) {
      NativeSoundPlayer = module.NativeSoundPlayer;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "27112mPy0pFfJ1GtTI+J91P", "SoundPlayerImpl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundPlayerImpl = exports('SoundPlayerImpl', (_dec = ccclass('SoundPlayerImpl'), _dec2 = property({
        type: CustomAudioClip
      }), _dec3 = property({
        type: CustomAudioClip
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SoundPlayerImpl, _Component);

        function SoundPlayerImpl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "musicList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "userGestureNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "musicVolume", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfxVolume", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isDebug", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeyBGM", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "storageKeySFX", _descriptor8, _assertThisInitialized(_this));

          _this.currentMusic = void 0;
          _this.isEnableBGM = false;
          _this.isEnableSFX = false;
          _this.resumeSfxList = [];
          _this.enableMusicFunc = void 0;
          _this.MUSIC_VOLUME = 1;
          _this.isMuteMusic = false;
          _this.isMuteEffect = false;
          _this.musicAudioSource = null;
          _this.isWebSound = false;
          _this._soundPlayer = null;
          _this._hasAudioContext = true;
          return _this;
        }

        var _proto = SoundPlayerImpl.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this; // globalThis.soundPlayer = this;


          this._checkDuplicateAudioFile();

          this.node.setSiblingIndex(this.node.parent.children.length + 1);
          this.loadCacheConfig();

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          this.node.on('SET_UP_AUDIO_DATABASE', this._loadDynamicSounds.bind(this));
          game.on(Game.EVENT_HIDE, this._onEventHide, this);
          game.on(Game.EVENT_SHOW, this._onEventShow, this);
          this.isWebSound = sys.isBrowser == true && globalThis.Howl;

          if (this.isWebSound) {
            this._soundPlayer = new WebSoundPlayer();
          } else {
            this._soundPlayer = new NativeSoundPlayer();
          }

          this._soundPlayer.init(this.musicList, this.sfxList, this.node);

          if (this.isWebSound) {
            this._soundPlayer.loadSfxList(this.sfxList, function () {});

            this._soundPlayer.loadMusicList(this.musicList, function () {
              _this2._hasAudioContext = globalThis.Howler.ctx && globalThis.Howler.ctx.state === 'running';

              if (!_this2._hasAudioContext) {
                _this2._waitForUserGesture();
              } else {
                _this2._soundPlayer.skipGesture();
              }

              _this2.playMainBGM();
            });
          } else if (sys.isMobile && sys.isBrowser) {
            this._waitForUserGesture();
          }
        };

        _proto._checkDuplicateAudioFile = function _checkDuplicateAudioFile() {
          var musicFileNames = this.musicList.map(function (soundObj) {
            return soundObj.audioFile.name;
          });
          musicFileNames.forEach(function (music, index) {
            if (musicFileNames.indexOf(music) !== index) {
              warn("duplicate music file", music, musicFileNames.indexOf(music), index);
            }
          });
          var sfxFileNames = this.sfxList.map(function (soundObj) {
            return soundObj.audioFile.name;
          });
          sfxFileNames.forEach(function (sfx, index) {
            if (sfxFileNames.indexOf(sfx) !== index) {
              warn("duplicate sfx file", sfx, sfxFileNames.indexOf(sfx), index);
            }
          });
        };

        _proto._loadDynamicSounds = function _loadDynamicSounds(ev) {
          var _this3 = this;

          var sfxList = ev.details.audioList;

          if (sfxList) {
            this._soundPlayer.loadDynamicSounds(sfxList, function () {
              if (_this3.isWebSound) {
                sfxList.forEach(function (soundObj) {
                  assetManager.releaseAsset(soundObj.audioFile);
                });
              }
            });
          }

          ev.propagationStopped = true;
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._soundPlayer.setThumbMode(isThumbMode);
        };

        _proto._waitForUserGesture = function _waitForUserGesture() {
          var uiTransform = this.node.getComponent(UITransform);

          if (!uiTransform) {
            uiTransform = this.node.addComponent(UITransform);
          }

          uiTransform.setContentSize(view.getDesignResolutionSize());
          this.node.on(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
        };

        _proto._startPlayWithUserGesture = function _startPlayWithUserGesture(ev) {
          var _this4 = this;

          log("[SoundPlayerImpl] start sound with user gesture");
          ev.preventSwallow = true;
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);

          if (this.isWebSound) {
            this._resumeContextGesture().then(function () {
              _this4._soundPlayer.resumeWithGesture();
            })["catch"](function (e) {
              log("resume context fail with error " + e);
            });
          } else {
            this._soundPlayer.resumeWithGesture();
          }
        };

        _proto._resumeContextGesture = function _resumeContextGesture() {
          var Howler = globalThis.Howler;

          if (sys.os === sys.OS.IOS) {
            var iOSVersion = this._getVersionIOS();

            if (iOSVersion >= 14) {
              return Howler.ctx.suspend().then(function () {
                return Howler.ctx.resume();
              });
            }
          }

          return Howler.ctx.resume();
        };

        _proto._getVersionIOS = function _getVersionIOS() {
          var userAgent = window.navigator.userAgent;
          var match = userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);

          if (match !== null && match.length >= 4) {
            var iOSVersion = parseInt(match[1], 10);
            return iOSVersion;
          }

          return 13;
        };

        _proto._onEventHide = function _onEventHide() {
          this._soundPlayer && this._soundPlayer.onEventHide(this.isEnableBGM, this.isEnableSFX);
        };

        _proto._onEventShow = function _onEventShow() {
          this._soundPlayer && this._soundPlayer.onEventShow(this.isEnableBGM, this.isEnableSFX);
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          volume = this.isMuteMusic || !this.isEnableBGM ? 0 : volume > 0 ? volume : this.musicVolume;
          log("[SoundPlayerImpl] Play music " + id);
          return this._soundPlayer.playMusic(id, loop, volume);
        };

        _proto.changeMusic = function changeMusic(id, loop, volume, mixTime) {
          volume = this.isMuteMusic || !this.isEnableBGM ? 0 : volume > 0 ? volume : this.musicVolume;
          log("[SoundPlayerImpl] change music " + id);
          return this._soundPlayer.changeMusic(id, loop, volume, mixTime);
        };

        _proto.stopMusic = function stopMusic() {
          this._soundPlayer.stopMusic();
        };

        _proto.pauseMusic = function pauseMusic() {
          this._soundPlayer.pauseMusic();
        };

        _proto.resumeMusic = function resumeMusic() {
          this._soundPlayer.resumeMusic();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          this._soundPlayer.setMusicVolume(volume);
        };

        _proto.muteMusic = function muteMusic() {
          this.isMuteMusic = true;

          this._soundPlayer.muteMusic();
        };

        _proto.unmuteMusic = function unmuteMusic() {
          if (this.isEnableBGM) {
            this.isMuteMusic = false;

            this._soundPlayer.unmuteMusic(this.musicVolume);
          }
        };

        _proto.playSfx = function playSfx(sfx, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          log("[SoundPlayerImpl] Play sfx " + sfx);
          return this._soundPlayer.playSfx(sfx, loop, volume);
        };

        _proto.stopSfx = function stopSfx(sfx) {
          this._soundPlayer.stopSfx(sfx);
        };

        _proto.stopAllEffects = function stopAllEffects() {
          this._soundPlayer.stopAllEffects();
        };

        _proto.pauseAllEffects = function pauseAllEffects(isInterrupt) {
          if (isInterrupt === void 0) {
            isInterrupt = false;
          }

          this._soundPlayer.pauseAllEffects(isInterrupt);
        };

        _proto.muteAllEffects = function muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        };

        _proto.unmuteAllEffects = function unmuteAllEffects() {
          if (this.isEnableSFX) {
            this.isMuteEffect = false;
            this.setEffectVolume(this.sfxVolume, true);
          }
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          this._soundPlayer.setEffectVolume(volume, immediate);
        };

        _proto.setSoundVolume = function setSoundVolume(soundId, volume) {
          if (typeof volume !== 'number') return error("invalid volume", volume);

          this._soundPlayer.setSoundVolume(soundId, volume);
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          this._soundPlayer.fadeMusicTo(duration, volume);
        };

        _proto.fadeSoundTo = function fadeSoundTo(soundId, duration, volume) {
          this._soundPlayer.fadeSoundTo(soundId, duration, volume);
        }
        /**
         * using to play one clip many times
         * save the return data to stopSfxOneShot 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(soundId, volume, loop) {
          if (loop === void 0) {
            loop = false;
          }

          volume = !this.isEnableSFX || this.isMuteEffect ? 0 : volume || this.sfxVolume;
          return this._soundPlayer.playSfxOneShot(soundId, volume, loop);
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(data) {
          if (data === void 0) {
            data = null;
          }

          if (!data) return error("stopSfxOneShot invalid data", data);

          this._soundPlayer.stopSfxOneShot(data);
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this._soundPlayer.stopAllAudio();
        };

        _proto.loadCacheConfig = function loadCacheConfig() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              ENABLE_BGM = _loadConfigAsync$getC.ENABLE_BGM,
              ENABLE_SFX = _loadConfigAsync$getC.ENABLE_SFX;

          this.storageKeyBGM = ENABLE_BGM ? ENABLE_BGM : this.storageKeyBGM;
          this.storageKeySFX = ENABLE_SFX ? ENABLE_SFX : this.storageKeySFX;
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        };

        _proto.bgmToggle = function bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        };

        _proto.setBgmEnable = function setBgmEnable(enable) {
          var _this5 = this;

          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString());

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(function () {
            if (_this5.isEnableBGM) {
              _this5.unmuteMusic();
            } else {
              _this5.muteMusic();
            }

            _this5.enableMusicFunc = null;
          }, 100);
        };

        _proto.sfxToggle = function sfxToggle() {
          this.setEffectEnable(!this.isEnableSFX);
        };

        _proto.setEffectEnable = function setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        };

        _proto.playMainBGM = function playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        };

        _proto.playSFXClick = function playSFXClick() {
          this.playSfx('CLICK');
        };

        _proto.update = function update(dt) {
          if (this._soundPlayer && typeof this._soundPlayer.update == "function") {
            this._soundPlayer.update(dt);
          }
        };

        _proto.onDisable = function onDisable() {
          this.stopAllAudio();
          this.node.off(Node.EventType.TOUCH_START, this._startPlayWithUserGesture, this);
        };

        _proto.onDestroy = function onDestroy() {
          this._soundPlayer.onDestroy();
        };

        return SoundPlayerImpl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "userGestureNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkeletonDatabase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, SlotCustomDataType, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotCustomDataType = module.SlotCustomDataType;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4c61f5p/VtDmLZpdt7Lvz/p", "SpineSkeletonDatabase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineSkeletonDatabase = exports('SpineSkeletonDatabase', (_dec = ccclass('SpineSkeletonDatabase'), _dec2 = property({
        type: SlotCustomDataType
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkeletonDatabase, _Component);

        function SpineSkeletonDatabase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineDataList", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpineSkeletonDatabase.prototype;

        _proto.onEnable = function onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: this
          }));
        };

        _proto.onDisable = function onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: null
          }));
        };

        _proto.getSpineSkeletonData = function getSpineSkeletonData(spineName) {
          for (var i = 0; i < this.spineDataList.length; i++) {
            if (this.spineDataList[i].spineName === spineName) {
              return this.spineDataList[i].spineData;
            }
          }

          return null;
        };

        return SpineSkeletonDatabase;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineDataList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpinTimes.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './CustomType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SlotGameMode, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SlotGameMode = module.SlotGameMode;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "093c7VrlSRFdb3AafjJFvcq", "SpinTimes", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpinTimes = exports('SpinTimes', (_dec = ccclass('SpinTimes'), _dec2 = property({
        type: SlotGameMode
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpinTimes, _Component);

        function SpinTimes() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "currentGameMode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deCoupling", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spinTimes", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoSpinTimes", _descriptor4, _assertThisInitialized(_this));

          _this.numSpin = 0;
          return _this;
        }

        var _proto = SpinTimes.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_SPINTIMES", this.updateSpintimes, this);
          this.node.on("RESET_SPINTIMES", this.resetSpintimes, this);
          this.node.on("INCREASE_FAKE_SPINTIMES", this.increaseFakeSp, this);
          this.node.on("ANIM_SPINTIMES", this.addSpinTimesAnimation, this);
          this.resetSpintimes();

          if (this.deCoupling) {
            this.node.dispatchEvent(new CustomEvent("SET_UP_SPIN_TIMES", true, {
              slotGameType: this.currentGameMode,
              spinTimes: this.node
            }));
          }
        };

        _proto.resetSpintimes = function resetSpintimes() {
          if (this.spinTimes) {
            this.spinTimes.string = '';
            this.showSpinTimes(this.spinTimes.node, false);
          }

          if (this.promoSpinTimes) {
            this.promoSpinTimes.string = '';
            this.showSpinTimes(this.promoSpinTimes.node, false);
          }

          this.numSpin = 0;
        };

        _proto.updateSpintimes = function updateSpintimes(spinTimes, isPromotion) {
          if (spinTimes === void 0) {
            spinTimes = 0;
          }

          if (isPromotion === void 0) {
            isPromotion = false;
          }

          this.resetSpintimes();

          if (isPromotion) {
            this.setSpinTimes(this.promoSpinTimes, spinTimes);
          } else {
            this.setSpinTimes(this.spinTimes, spinTimes);
          }
        };

        _proto.setSpinTimes = function setSpinTimes(label, spinTimes) {
          if (label === void 0) {
            label = null;
          }

          if (!label) return;

          if (Number(spinTimes) > 0 || this.currentGameMode !== SlotGameMode.NormalGame) {
            label.string = "" + (spinTimes > 100 ? '∞' : spinTimes);
            this.numSpin = spinTimes;
            this.showSpinTimes(label.node, true);
          }
        };

        _proto.showSpinTimes = function showSpinTimes(node, isShowing) {
          if (node === void 0) {
            node = null;
          }

          this.node.active = isShowing;
          if (node) node.active = isShowing;
        };

        _proto.increaseFakeSp = function increaseFakeSp(num) {
          if (num === void 0) {
            num = 0;
          }

          this.updateSpintimes(this.numSpin + num, false);
        };

        _proto.addSpinTimesAnimation = function addSpinTimesAnimation(value, isFast, callback) {
          if (callback === void 0) {
            callback = null;
          } //TODO override add anim spin time here


          callback && callback();
        };

        return SpinTimes;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentGameMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.FreeGame;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deCoupling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spinTimes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "promoSpinTimes", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/state-machine.min.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE
        !function (t, n) {
          "object" == typeof exports$1 && "object" == typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define("StateMachine", [], n) : "object" == typeof exports$1 ? exports$1.StateMachine = n() : t.StateMachine = n();
        }(this, function () {
          return function (t) {
            function n(e) {
              if (i[e]) return i[e].exports;
              var s = i[e] = {
                i: e,
                l: !1,
                exports: {}
              };
              return t[e].call(s.exports, s, s.exports, n), s.l = !0, s.exports;
            }

            var i = {};
            return n.m = t, n.c = i, n.i = function (t) {
              return t;
            }, n.d = function (t, i, e) {
              n.o(t, i) || Object.defineProperty(t, i, {
                configurable: !1,
                enumerable: !0,
                get: e
              });
            }, n.n = function (t) {
              var i = t && t.__esModule ? function () {
                return t["default"];
              } : function () {
                return t;
              };
              return n.d(i, "a", i), i;
            }, n.o = function (t, n) {
              return Object.prototype.hasOwnProperty.call(t, n);
            }, n.p = "", n(n.s = 5);
          }([function (t, n, i) {
            t.exports = function (t, n) {
              var i, e, s;

              for (i = 1; i < arguments.length; i++) {
                e = arguments[i];

                for (s in e) e.hasOwnProperty(s) && (t[s] = e[s]);
              }

              return t;
            };
          }, function (t, n, i) {
            var e = i(0);
            t.exports = {
              build: function build(t, n) {
                var i,
                    s,
                    r,
                    o = n.plugins;

                for (i = 0, s = o.length; i < s; i++) r = o[i], r.methods && e(t, r.methods), r.properties && Object.defineProperties(t, r.properties);
              },
              hook: function hook(t, n, i) {
                var e,
                    s,
                    r,
                    o,
                    a = t.config.plugins,
                    f = [t.context];

                for (i && (f = f.concat(i)), e = 0, s = a.length; e < s; e++) o = a[e], (r = a[e][n]) && r.apply(o, f);
              }
            };
          }, function (t, n, i) {
            function e(t) {
              if (0 === t.length) return t;
              var n,
                  i,
                  e = t.split(/[_-]/);
              if (1 === e.length && e[0][0].toLowerCase() === e[0][0]) return t;

              for (i = e[0].toLowerCase(), n = 1; n < e.length; n++) i = i + e[n].charAt(0).toUpperCase() + e[n].substring(1).toLowerCase();

              return i;
            }

            e.prepended = function (t, n) {
              return n = e(n), t + n[0].toUpperCase() + n.substring(1);
            }, t.exports = e;
          }, function (t, n, i) {
            function e(t, n) {
              t = t || {}, this.options = t, this.defaults = n.defaults, this.states = [], this.transitions = [], this.map = {}, this.lifecycle = this.configureLifecycle(), this.init = this.configureInitTransition(t.init), this.data = this.configureData(t.data), this.methods = this.configureMethods(t.methods), this.map[this.defaults.wildcard] = {}, this.configureTransitions(t.transitions || []), this.plugins = this.configurePlugins(t.plugins, n.plugin);
            }

            var s = i(0),
                r = i(2);
            s(e.prototype, {
              addState: function addState(t) {
                this.map[t] || (this.states.push(t), this.addStateLifecycleNames(t), this.map[t] = {});
              },
              addStateLifecycleNames: function addStateLifecycleNames(t) {
                this.lifecycle.onEnter[t] = r.prepended("onEnter", t), this.lifecycle.onLeave[t] = r.prepended("onLeave", t), this.lifecycle.on[t] = r.prepended("on", t);
              },
              addTransition: function addTransition(t) {
                this.transitions.indexOf(t) < 0 && (this.transitions.push(t), this.addTransitionLifecycleNames(t));
              },
              addTransitionLifecycleNames: function addTransitionLifecycleNames(t) {
                this.lifecycle.onBefore[t] = r.prepended("onBefore", t), this.lifecycle.onAfter[t] = r.prepended("onAfter", t), this.lifecycle.on[t] = r.prepended("on", t);
              },
              mapTransition: function mapTransition(t) {
                var n = t.name,
                    i = t.from,
                    e = t.to;
                return this.addState(i), "function" != typeof e && this.addState(e), this.addTransition(n), this.map[i][n] = t, t;
              },
              configureLifecycle: function configureLifecycle() {
                return {
                  onBefore: {
                    transition: "onBeforeTransition"
                  },
                  onAfter: {
                    transition: "onAfterTransition"
                  },
                  onEnter: {
                    state: "onEnterState"
                  },
                  onLeave: {
                    state: "onLeaveState"
                  },
                  on: {
                    transition: "onTransition"
                  }
                };
              },
              configureInitTransition: function configureInitTransition(t) {
                return "string" == typeof t ? this.mapTransition(s({}, this.defaults.init, {
                  to: t,
                  active: !0
                })) : "object" == typeof t ? this.mapTransition(s({}, this.defaults.init, t, {
                  active: !0
                })) : (this.addState(this.defaults.init.from), this.defaults.init);
              },
              configureData: function configureData(t) {
                return "function" == typeof t ? t : "object" == typeof t ? function () {
                  return t;
                } : function () {
                  return {};
                };
              },
              configureMethods: function configureMethods(t) {
                return t || {};
              },
              configurePlugins: function configurePlugins(t, n) {
                t = t || [];
                var i, e, s;

                for (i = 0, e = t.length; i < e; i++) s = t[i], "function" == typeof s && (t[i] = s = s()), s.configure && s.configure(this);

                return t;
              },
              configureTransitions: function configureTransitions(t) {
                var n,
                    i,
                    e,
                    s,
                    r,
                    o = this.defaults.wildcard;

                for (i = 0; i < t.length; i++) for (e = t[i], s = Array.isArray(e.from) ? e.from : [e.from || o], r = e.to || o, n = 0; n < s.length; n++) this.mapTransition({
                  name: e.name,
                  from: s[n],
                  to: r
                });
              },
              transitionFor: function transitionFor(t, n) {
                var i = this.defaults.wildcard;
                return this.map[t][n] || this.map[i][n];
              },
              transitionsFor: function transitionsFor(t) {
                var n = this.defaults.wildcard;
                return Object.keys(this.map[t]).concat(Object.keys(this.map[n]));
              },
              allStates: function allStates() {
                return this.states;
              },
              allTransitions: function allTransitions() {
                return this.transitions;
              }
            }), t.exports = e;
          }, function (t, n, i) {
            function e(t, n) {
              this.context = t, this.config = n, this.state = n.init.from, this.observers = [t];
            }

            var s = i(0),
                r = i(6),
                o = i(1),
                a = [null, []];
            s(e.prototype, {
              init: function init(t) {
                if (s(this.context, this.config.data.apply(this.context, t)), o.hook(this, "init"), this.config.init.active) return this.fire(this.config.init.name, []);
              },
              is: function is(t) {
                return Array.isArray(t) ? t.indexOf(this.state) >= 0 : this.state === t;
              },
              isPending: function isPending() {
                return this.pending;
              },
              can: function can(t) {
                return !this.isPending() && !!this.seek(t);
              },
              cannot: function cannot(t) {
                return !this.can(t);
              },
              allStates: function allStates() {
                return this.config.allStates();
              },
              allTransitions: function allTransitions() {
                return this.config.allTransitions();
              },
              transitions: function transitions() {
                return this.config.transitionsFor(this.state);
              },
              seek: function seek(t, n) {
                var i = this.config.defaults.wildcard,
                    e = this.config.transitionFor(this.state, t),
                    s = e && e.to;
                return "function" == typeof s ? s.apply(this.context, n) : s === i ? this.state : s;
              },
              fire: function fire(t, n) {
                return this.transit(t, this.state, this.seek(t, n), n);
              },
              transit: function transit(t, n, i, e) {
                var s = this.config.lifecycle,
                    r = this.config.options.observeUnchangedState || n !== i;
                return i ? this.isPending() ? this.context.onPendingTransition(t, n, i) : (this.config.addState(i), this.beginTransit(), e.unshift({
                  transition: t,
                  from: n,
                  to: i,
                  fsm: this.context
                }), this.observeEvents([this.observersForEvent(s.onBefore.transition), this.observersForEvent(s.onBefore[t]), r ? this.observersForEvent(s.onLeave.state) : a, r ? this.observersForEvent(s.onLeave[n]) : a, this.observersForEvent(s.on.transition), r ? ["doTransit", [this]] : a, r ? this.observersForEvent(s.onEnter.state) : a, r ? this.observersForEvent(s.onEnter[i]) : a, r ? this.observersForEvent(s.on[i]) : a, this.observersForEvent(s.onAfter.transition), this.observersForEvent(s.onAfter[t]), this.observersForEvent(s.on[t])], e)) : this.context.onInvalidTransition(t, n, i);
              },
              beginTransit: function beginTransit() {
                this.pending = !0;
              },
              endTransit: function endTransit(t) {
                return this.pending = !1, t;
              },
              failTransit: function failTransit(t) {
                throw this.pending = !1, t;
              },
              doTransit: function doTransit(t) {
                this.state = t.to;
              },
              observe: function observe(t) {
                if (2 === t.length) {
                  var n = {};
                  n[t[0]] = t[1], this.observers.push(n);
                } else this.observers.push(t[0]);
              },
              observersForEvent: function observersForEvent(t) {
                for (var n, i = 0, e = this.observers.length, s = []; i < e; i++) n = this.observers[i], n[t] && s.push(n);

                return [t, s, !0];
              },
              observeEvents: function observeEvents(t, n, i, e) {
                if (0 === t.length) return this.endTransit(void 0 === e || e);
                var s = t[0][0],
                    r = t[0][1],
                    a = t[0][2];
                if (n[0].event = s, s && a && s !== i && o.hook(this, "lifecycle", n), 0 === r.length) return t.shift(), this.observeEvents(t, n, s, e);
                var f = r.shift(),
                    c = f[s].apply(f, n);
                return c && "function" == typeof c.then ? c.then(this.observeEvents.bind(this, t, n, s))["catch"](this.failTransit.bind(this)) : !1 === c ? this.endTransit(!1) : this.observeEvents(t, n, s, c);
              },
              onInvalidTransition: function onInvalidTransition(t, n, i) {
                throw new r("transition is invalid in current state", t, n, i, this.state);
              },
              onPendingTransition: function onPendingTransition(t, n, i) {
                throw new r("transition is invalid while previous transition is still in progress", t, n, i, this.state);
              }
            }), t.exports = e;
          }, function (t, n, i) {
            function e(t) {
              return r(this || {}, t);
            }

            function s() {
              var t, n;
              "function" == typeof arguments[0] ? (t = arguments[0], n = arguments[1] || {}) : (t = function t() {
                this._fsm.apply(this, arguments);
              }, n = arguments[0] || {});
              var i = new u(n, e);
              return o(t.prototype, i), t.prototype._fsm.config = i, t;
            }

            function r(t, n) {
              return o(t, new u(n, e)), t._fsm(), t;
            }

            function o(t, n) {
              if ("object" != typeof t || Array.isArray(t)) throw Error("StateMachine can only be applied to objects");
              c.build(t, n), Object.defineProperties(t, d), a(t, l), a(t, n.methods), n.allTransitions().forEach(function (n) {
                t[f(n)] = function () {
                  return this._fsm.fire(n, [].slice.call(arguments));
                };
              }), t._fsm = function () {
                this._fsm = new h(this, n), this._fsm.init(arguments);
              };
            }

            var a = i(0),
                f = i(2),
                c = i(1),
                u = i(3),
                h = i(4),
                l = {
              is: function is(t) {
                return this._fsm.is(t);
              },
              can: function can(t) {
                return this._fsm.can(t);
              },
              cannot: function cannot(t) {
                return this._fsm.cannot(t);
              },
              observe: function observe() {
                return this._fsm.observe(arguments);
              },
              transitions: function transitions() {
                return this._fsm.transitions();
              },
              allTransitions: function allTransitions() {
                return this._fsm.allTransitions();
              },
              allStates: function allStates() {
                return this._fsm.allStates();
              },
              onInvalidTransition: function onInvalidTransition(t, n, i) {
                return this._fsm.onInvalidTransition(t, n, i);
              },
              onPendingTransition: function onPendingTransition(t, n, i) {
                return this._fsm.onPendingTransition(t, n, i);
              }
            },
                d = {
              state: {
                configurable: !1,
                enumerable: !0,
                get: function get() {
                  return this._fsm.state;
                },
                set: function set(t) {
                  throw Error("use transitions to change state");
                }
              }
            };
            e.version = "3.0.1", e.factory = s, e.apply = r, e.defaults = {
              wildcard: "*",
              init: {
                name: "init",
                from: "none"
              }
            }, t.exports = e;
          }, function (t, n, i) {
            t.exports = function (t, n, i, e, s) {
              this.message = t, this.transition = n, this.from = i, this.to = e, this.current = s;
            };
          }]);
        }); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
        module.exports.StateMachine;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/StickyWild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, NodePool, instantiate, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "035daUIrxxMM6lkl3e+sD1I", "StickyWild", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StickyWild = exports('StickyWild', (_dec = ccclass('StickyWild'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(StickyWild, _GameObject);

        function StickyWild() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "wildSymbolPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "defaultNumber", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stickySymbol", _descriptor3, _assertThisInitialized(_this));

          _this.symbolPool = void 0;
          _this.table = void 0;
          _this.COLUMN = 5;
          _this.ROW = 3;
          _this.SYMBOL_HEIGHT = 156;
          _this.SYMBOL_WIDTH = 190;
          _this.TABLE_FORMAT = [3, 3, 3, 3, 3];
          _this.wildMatrix = void 0;
          _this.matrix = void 0;
          return _this;
        }

        var _proto = StickyWild.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("INIT", this.init, this);
          this.node.on("SHOW_STICKY_WILD", this.showStickyWild, this);
          this.node.on("RESET", this.reset, this);
          this.node.on("UPDATE_MATRIX", this.updateMatrix, this);
          this.node.on("CHANGE_MATRIX", this.changeMatrix, this);
        };

        _proto.initWildPool = function initWildPool() {
          this.symbolPool = new NodePool("StickyWildPool");

          for (var i = 0; i < this.defaultNumber; i++) {
            this.symbolPool.put(instantiate(this.wildSymbolPrefab));
          }
        };

        _proto.init = function init(table) {
          var _this2 = this;

          this.table = table; //this.COLUMN = this.table.tableFormat.length;
          //this.ROW = this.table.tableFormat[0];
          //this.SYMBOL_HEIGHT = this.table.node.config.SYMBOL_HEIGHT;
          //this.SYMBOL_WIDTH = this.table.node.config.SYMBOL_WIDTH;

          this.wildMatrix = Array.from(Array(this.COLUMN), function () {
            return new Array(_this2.ROW);
          });

          if (!this.wildSymbolPrefab) {
            this.wildSymbolPrefab = this.table.symbolPrefab;
          }

          this.initWildPool();
        };

        _proto.showStickyWild = function showStickyWild(reelIdx, skipAnimation) {
          if (skipAnimation === void 0) {
            skipAnimation = false;
          }

          for (var i = 0; i < this.ROW; ++i) {
            if (this.matrix[reelIdx][i] == this.stickySymbol && !this.wildMatrix[reelIdx][i]) {
              var wild = this.getStickyWild();
              this.wildMatrix[reelIdx][i] = wild;
              wild.parent = this.node;
              wild.emit('RESET');
              var x = this.getXPosition(reelIdx);
              var y = this.getYPosition(i);
              wild.setPosition(x, y);
              this.playWildAnimation(wild, skipAnimation);
            }
          }
        };

        _proto.getXPosition = function getXPosition(index) {
          var startX = -(this.TABLE_FORMAT.length / 2 - 0.5) * this.SYMBOL_WIDTH;
          return startX + this.SYMBOL_WIDTH * index;
        };

        _proto.playWildAnimation = function playWildAnimation(wildNode, isSkip) {
          if (isSkip === void 0) {
            isSkip = false;
          } // extend when do anything with wild


          wildNode.emit("PLAY_ANIMATION", isSkip);
        };

        _proto.getStickyWild = function getStickyWild() {
          if (!this.symbolPool.size()) {
            this.symbolPool.put(instantiate(this.wildSymbolPrefab));
          }

          return this.symbolPool.get();
        };

        _proto.getYPosition = function getYPosition(index) {
          var startY = -(this.ROW / 2 + 0.5) * this.SYMBOL_HEIGHT;
          return startY + this.SYMBOL_HEIGHT * (this.ROW - index);
        };

        _proto.reset = function reset() {
          for (var i = 0; i < this.COLUMN; ++i) {
            for (var j = 0; j < this.ROW; ++j) {
              if (this.wildMatrix[i][j]) {
                this.wildMatrix[i][j].emit('RESET');
                this.symbolPool.put(this.wildMatrix[i][j]);
              }

              this.wildMatrix[i][j] = null;
            }
          }

          this.node.removeAllChildren();
        };

        _proto.updateMatrix = function updateMatrix(matrix) {
          this.matrix = matrix;
        };

        _proto.changeMatrix = function changeMatrix(matrix) {
          //const matrix: any = [["4", "5", "7"], ["3", "K", "6"], ["8", "K", "K"], ["K", "2", "7"], ["2", "5", "3"]];
          this.reset();
          this.updateMatrix(matrix);

          for (var i = 0; i < this.COLUMN; ++i) {
            this.showStickyWild(i, true);
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.symbolPool.clear();

          _GameObject.prototype.onDestroy.call(this);
        };

        return StickyWild;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wildSymbolPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultNumber", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stickySymbol", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'K';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Toast.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, v3, tween, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "85647rrfRFMkL5gho+PZAWk", "Toast", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Toast = exports('Toast', (_dec = ccclass('Toast'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Toast, _Component);

        function Toast() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lblNotify", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Toast.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("SHOW_TOAST_MESSAGE", this.showMessage.bind(this));
          this.node.active = false;
        };

        _proto.showMessage = function showMessage(message) {
          var _this2 = this;

          this.lblNotify.string = message;
          setOpacity(this.node, 255);
          this.node.active = true;
          this.node.setScale(v3(0.5, 0.5, 0.5));
          tween(this.node).to(0.2, {
            scale: v3(1, 1, 1)
          }).delay(this.delayTime).call(function () {
            _this2.node.active = false;
          }).start();
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("SHOW_TOAST_MESSAGE", this.showMessage.bind(this));
        };

        _proto.hideMessage = function hideMessage() {
          this.node.active = false;
        };

        return Toast;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblNotify", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.5;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToggleMotion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, UITransform, Vec3, ProgressBar, tween, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      ProgressBar = module.ProgressBar;
      tween = module.tween;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "94d01uW4RBEVL7g8SxJNYnI", "ToggleMotion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ToggleMotion = exports('ToggleMotion', (_dec = ccclass('ToggleMotion'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToggleMotion, _Component);

        function ToggleMotion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progressBar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameOn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameOff", _descriptor4, _assertThisInitialized(_this));

          _this.status = false;
          _this.startPos = void 0;
          _this.endPos = void 0;
          _this.callBack = void 0;
          return _this;
        }

        var _proto = ToggleMotion.prototype;

        _proto.onLoad = function onLoad() {
          if (!this.progressBar.getComponent(UITransform)) {
            this.progressBar.addComponent(UITransform);
          }

          var width = this.progressBar.getComponent(UITransform).width;
          this.startPos = new Vec3(-width / 2 + 25, 0, 0);
          this.endPos = new Vec3(width / 2 - 25, 0, 0);
        };

        _proto.setCallBackToggle = function setCallBackToggle(callBack) {
          this.callBack = callBack;
        };

        _proto.onSliderTouchEnd = function onSliderTouchEnd() {
          this.status = !this.status;
          this.progressBar.getComponent(ProgressBar).progress = this.status ? 1 : 0;
          this.status ? this.moveHandle(this.endPos) : this.moveHandle(this.startPos);
          this.callBack && this.callBack();
        };

        _proto.moveHandle = function moveHandle(pos) {
          var _this2 = this;

          tween(this.handle).to(0.18, {
            position: pos
          }).call(function () {
            _this2.handle.getComponent(Sprite).spriteFrame = _this2.status ? _this2.frameOn : _this2.frameOff;
          }).start();
        };

        _proto.setChecked = function setChecked(isChecked) {
          if (isChecked === void 0) {
            isChecked = false;
          }

          this.status = isChecked;
          var pos = this.status ? this.endPos : this.startPos;
          this.handle.getComponent(Sprite).spriteFrame = this.status ? this.frameOn : this.frameOff;
          this.progressBar.getComponent(ProgressBar).progress = this.status ? 1 : 0;
          this.handle.setPosition(pos);
        };

        _proto.getChecked = function getChecked() {
          return this.status;
        };

        return ToggleMotion;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "handle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frameOn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "frameOff", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TopUIController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Button, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "80424ns6ThOw7kL5tDL1EDZ", "TopUIController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TopUIController = exports('TopUIController', (_dec = ccclass('TopUIController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TopUIController, _Component);

        function TopUIController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listButtons = [];
          return _this;
        }

        var _proto = TopUIController.prototype;

        _proto.onLoad = function onLoad() {
          this.listButtons = this.node.getComponentsInChildren(Button);

          if (this.listButtons && this.listButtons.length > 0) {
            this.node.on("ENABLE_BUTTONS", this.enableButtons, this);
            this.node.on("DISABLE_BUTTONS", this.disableButtons, this);
          }
        };

        _proto.enableButtons = function enableButtons() {
          this.listButtons.forEach(function (item) {
            item.interactable = true;
          });
        };

        _proto.disableButtons = function disableButtons() {
          this.listButtons.forEach(function (item) {
            item.interactable = false;
          });
        };

        return TopUIController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TotalWinPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, CCFloat, tween, SlotUIScene, formatMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      CCFloat = module.CCFloat;
      tween = module.tween;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6a02bBuxnhGeoqB4nC6SX44", "TotalWinPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TotalWinPanel = exports('TotalWinPanel', (_dec = ccclass('TotalWinPanel'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: CCFloat
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(TotalWinPanel, _SlotUIScene);

        function TotalWinPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.canClose = false;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "contentText", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showingTime", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TotalWinPanel.prototype;

        _proto.enter = function enter() {
          var _this2 = this;

          this.canClose = false;
          var _this$content = this.content,
              winAmount = _this$content.winAmount,
              freeGameTotal = _this$content.freeGameTotal;
          this.winAmount.getComponent(Label).string = formatMoney(winAmount);

          if (this.contentText) {
            this.contentText.string = freeGameTotal > 0 ? 'Với ' + freeGameTotal + ' lượt quay miễn phí' : "";
          }

          this.playSoundTotalWin();
          tween(this.node).delay(0.5).call(function () {
            _this2.canClose = true;
            _this2.closeBtn.interactable = true;
          }).delay(this.showingTime).call(function () {
            _this2.close();
          }).start();
        };

        _proto.close = function close() {
          var _this3 = this;

          if (!this.canClose) return;
          this.canClose = false;
          this.closeBtn.interactable = false;
          this.fadeOut(this.node, 0.5, {
            onComplete: function onComplete() {
              _this3.callback && _this3.callback();
              _this3.callback = null;

              _this3.stopSoundTotalWin();

              _this3.exit();
            }
          });
        };

        _proto.skip = function skip() {
          this.close();
        };

        _proto.playSoundTotalWin = function playSoundTotalWin() {
          this.soundPlayer && this.soundPlayer.playSfx("TOTAL_WIN");
        };

        _proto.stopSoundTotalWin = function stopSoundTotalWin() {
          this.soundPlayer && this.soundPlayer.stopSfx("TOTAL_WIN");
        };

        return TotalWinPanel;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contentText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "closeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showingTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchPayableSymbol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Vec2, Layout, GameObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      Layout = module.Layout;
    }, function (module) {
      GameObject = module.GameObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "2c0cdA+p/VGrJT4JN+u0F9H", "TouchPayableSymbol", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchPayableSymbol = exports('TouchPayableSymbol', (_dec = ccclass('TouchPayableSymbol'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TouchPayableSymbol, _GameObject);

        function TouchPayableSymbol() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "gradient", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "infoSymbol", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchBlocks", _descriptor3, _assertThisInitialized(_this));

          _this.tweenFadeIn = null;
          return _this;
        }

        var _proto = TouchPayableSymbol.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("SHOW_INFO_SYMBOL", this.showInfoSymbol, this);
          this.node.on("HIDE_INFO_SYMBOL", this.hideInfoSymbol, this);
          this.infoSymbol.on(Node.EventType.TOUCH_END, this.onInfoSymbolTouchEnded, this);
          this.registerEvent();
          this.gradient['initHeight'] = this.gradient.getComponent(UITransform).height;
          this.node.active = false;

          if (this.touchBlocks && this.touchBlocks.length > 0) {
            for (var i = 0; i < this.touchBlocks.length; i++) {
              var touchBlock = this.touchBlocks[i];

              if (touchBlock) {
                touchBlock.on(Node.EventType.TOUCH_START, this.onBlockTouchStarted, this);
              }
            }
          }
        };

        _proto.registerEvent = function registerEvent() {
          if (this.eventManager) {
            this.eventManager.on("SHOW_SYMBOL_PAYTABLE_INFO", this.showInfoSymbol, this);
            this.eventManager.on("HIDE_SYMBOL_PAYTABLE_INFO", this.hideInfoSymbol, this);
          }
        };

        _proto.unRegisterAll = function unRegisterAll() {
          if (this.eventManager) {
            this.eventManager.targetOff(this);
          }
        };

        _proto.showInfoSymbol = function showInfoSymbol(wLocation, symbol, spineData, spinneBorder, specialSymbolAnim) {
          var _this2 = this;

          if (specialSymbolAnim === void 0) {
            specialSymbolAnim = null;
          }

          if (this.gradient) {
            var pos = this.gradient.parent.getComponent(UITransform).convertToNodeSpaceAR(wLocation);

            var _pos = new Vec2(pos.x, pos.y);

            if (!this.gradient.getComponent(UITransform).getBoundingBox().contains(_pos)) {
              return;
            }
          }

          if (this.node.active == false) {
            if (this.node['tweenFade']) {
              this.node['tweenFade'].stop();
              this.node['tweenFade'] = null;
            }

            this.node.active = true;
            this.infoSymbol.active = true;
            this.setOpacity(this.node, 0);
            this.fadeTo(this.node, 0.1, 255, {
              onComplete: function onComplete(target) {
                if (_this2.eventManager) {
                  _this2.eventManager.emit("ON_SHOW_SYMBOL_INFO", true);

                  _this2.showTouchBlocks();
                }
              }
            });
          }

          var SYMBOL_SPECIAL = this.config && this.config.SYMBOL_SPECIAL || [];
          if (SYMBOL_SPECIAL.indexOf(symbol["symbol"]) !== -1) ;else {
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
          var symbolName = symbol["symbol"];
          var p1 = symbol.parent.getComponent(UITransform).convertToWorldSpaceAR(symbol.getPosition());
          var p2 = this.infoSymbol.parent.getComponent(UITransform).convertToNodeSpaceAR(p1);
          this.infoSymbol.emit("UPDATE_DATA", symbol["symbol"], spineData, spinneBorder, specialSymbolAnim);

          if (symbol["isLeftBorder"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.LEFT_TO_RIGHT, p2, symbolName);
          } else if (symbol["isRightBorder"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.RIGHT_TO_LEFT, p2, symbolName);
          } else if (symbol["isMiddle"]) {
            this.infoSymbol.emit("UPDATE_LAYOUT", Layout.HorizontalDirection.LEFT_TO_RIGHT, p2, symbolName);
          }

          this.gradient.active = true;
        };

        _proto.hideInfoSymbol = function hideInfoSymbol() {
          var _this3 = this;

          if (this.node['tweenFade']) {
            this.node['tweenFade'].stop();
            this.node['tweenFade'] = null;
          }

          this.fadeOut(this.node, 0.1, {
            onComplete: function onComplete(target) {
              if (_this3.eventManager) {
                _this3.eventManager.emit("ON_SHOW_SYMBOL_INFO", false);
              }

              _this3.infoSymbol.emit("RESET_ANIM");

              _this3.infoSymbol.active = false;
              _this3.node.active = false;
              _this3.gradient.active = false;
            }
          });
        };

        _proto.onBlockTouchStarted = function onBlockTouchStarted(evt) {
          this.showTouchBlocks(false);
          this.hideInfoSymbol();
        };

        _proto.onInfoSymbolTouchEnded = function onInfoSymbolTouchEnded(event) {
          if (event) event.propagationStopped = true;
          this.hideInfoSymbol();
        };

        _proto.showTouchBlocks = function showTouchBlocks(isOn) {
          if (isOn === void 0) {
            isOn = true;
          }

          for (var i = 0; i < this.touchBlocks.length; i++) {
            this.touchBlocks[i].active = isOn;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.unRegisterAll();
        };

        return TouchPayableSymbol;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "infoSymbol", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "touchBlocks", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Turbo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sys, Toggle, GameObject, TutorialTriggerType, EventNames;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Toggle = module.Toggle;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "af552WSyeZKlKzu4zJJJYq4", "Turbo", undefined);

      var ccclass = _decorator.ccclass;
      var Turbo = exports('Turbo', (_dec = ccclass('Turbo'), _dec(_class = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Turbo, _GameObject);

        function Turbo() {
          return _GameObject.apply(this, arguments) || this;
        }

        var _proto = Turbo.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("TOGGLE_TURBO", this.turboToggle, this);
          this.node.on("TURN_ON", this.turnOnTurbo, this);
          this.node.on("TURN_OFF", this.turnOffTurbo, this);
          this.node.on("LOAD_TURBO_CONFIG", this.loadTurboConfig, this);
          this.loadTurboConfig();
        };

        _proto.loadTurboConfig = function loadTurboConfig() {
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          var isTurbo = turboValue[gameId] || false;
          this.getComponent(Toggle).isChecked = isTurbo;
          this.dataStore.setTurbo(isTurbo);
        };

        _proto.saveTurboConfig = function saveTurboConfig(value) {
          if (this.dataStore.isTrialMode) return;
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          turboValue[gameId] = value;
          sys.localStorage.setItem('turboValueWithGame', JSON.stringify(turboValue));
        };

        _proto.turboToggle = function turboToggle() {
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          var isTurbo = !this.getComponent(Toggle).isChecked;
          this.saveTurboConfig(isTurbo);
          this.dataStore.setTurbo(isTurbo);
          this.guiMgr.onIngameEvent(TutorialTriggerType.TurboClick, "TURBO_CLICK");
        };

        _proto.turnOnTurbo = function turnOnTurbo() {
          this.getComponent(Toggle).isChecked = true;
          this.dataStore.setTurbo(true);
          this.eventManager.emit(EventNames.TURBO_ON);
        };

        _proto.turnOffTurbo = function turnOffTurbo() {
          this.getComponent(Toggle).isChecked = false;
          this.dataStore.setTurbo(false);
          this.eventManager.emit(EventNames.TURBO_OFF);
        };

        return Turbo;
      }(GameObject)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Turbov2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Turbo.ts', './CustomEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, sys, Toggle, Turbo, TutorialTriggerType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      sys = module.sys;
      Toggle = module.Toggle;
    }, function (module) {
      Turbo = module.Turbo;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "86852Cmmq5K6aw6J9S3pzVm", "Turbov2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Turbov2 = exports('Turbov2', (_dec = ccclass('Turbov2'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Turbo) {
        _inheritsLoose(Turbov2, _Turbo);

        function Turbov2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Turbo.call.apply(_Turbo, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "button", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconSprites", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textSprites", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Turbov2.prototype;

        _proto.onLoad = function onLoad() {
          _Turbo.prototype.onLoad.call(this);

          this.node.on('ENABLE_TURBO', this.enableTurbo, this);
          this.node.loadTuroConfig = this.loadTurboConfig.bind(this);
        };

        _proto.loadTurboConfig = function loadTurboConfig() {
          var gameId = this.config.GAME_ID;
          var turboValue = JSON.parse(sys.localStorage.getItem('turboValueWithGame') || '{}');
          var isTurbo = turboValue[gameId] || false;
          var toggle = this.button.getComponent(Toggle);
          toggle.isChecked = isTurbo;
          this.dataStore.setTurbo(isTurbo);
        };

        _proto.turboToggle = function turboToggle() {
          if (this.soundPlayer) this.soundPlayer.playSFXClick();
          var isTurbo = !this.button.getComponent(Toggle).isChecked;
          this.saveTurboConfig(isTurbo);
          this.dataStore.setTurbo(isTurbo);
          this.showToolTip(isTurbo);
          this.guiMgr.onIngameEvent(TutorialTriggerType.TurboClick, "TURBO_CLICK");
        };

        _proto.showToolTip = function showToolTip(isChecked) {
          if (!this.iconSprites || !this.textSprites) return;
          var index = isChecked ? 0 : 1;
          var Frames = [this.iconSprites[index], this.textSprites[index]];
          this.mainDirector.guiMgr.showSmallToolTip(Frames);
        };

        _proto.turnOnTurbo = function turnOnTurbo() {
          this.button.getComponent(Toggle).check();
          this.node.emit("TURBO_TOGGLE", true);
        };

        _proto.turnOffTurbo = function turnOffTurbo() {
          this.button.getComponent(Toggle).check();
          this.node.emit("TURBO_TOGGLE", false);
        };

        _proto.enableTurbo = function enableTurbo() {
          this.button.getComponent(Toggle).interactable = true;
        };

        return Turbov2;
      }(Turbo), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconSprites", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "textSprites", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TurnBaseFSM.ts", ['cc', './state-machine.min.mjs_cjs=&original=.js', './state-machine.min.js'], function (exports) {
  var log, cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      log = module.log;
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a49fc8jaJdIIqfDymKRb3uz", "TurnBaseFSM", undefined);

      var StateMachine = exports('default', _cjsExports.factory({
        //  <-- the factory is constructed here
        init: 'bootingGame',
        transitions: [{
          name: 'gameStart',
          from: 'bootingGame',
          to: 'waitingAction'
        }, {
          name: 'gameResume',
          from: '*',
          to: 'showingResult'
        }, {
          name: 'actionTrigger',
          from: 'waitingAction',
          to: 'waitingResult'
        }, {
          name: 'resultReceive',
          from: 'waitingResult',
          to: 'showingResult'
        }, {
          name: 'gameRestart',
          from: 'showingResult',
          to: 'waitingAction'
        }, {
          name: 'gameEnd',
          from: 'showingResult',
          to: 'closingGame'
        }, {
          name: 'reboot',
          from: '*',
          to: 'bootingGame'
        }],
        methods: {
          onInvalidTransition: function onInvalidTransition() {// cc.log("fsm: transition not allowed from that state", transition, from, to);
          },
          onPendingTransition: function onPendingTransition() {// cc.log("fsm: transition already in progress", transition, from, to);
          },
          onTransition: function onTransition(lifecycle) {
            // cc.log("trigger: "+lifecycle.transition +", state change from "+ lifecycle.from +" to "+ lifecycle.to);
            if (this.GAMEMODE) {
              log("%c " + this.GAMEMODE + ":" + ("%c run " + lifecycle.transition + " =>"), 'color:green;', 'color:red;', lifecycle.to);
            }
          }
        }
      }));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenViewComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './TweenViewConfig.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, tween, v3, GameObject, TweenViewConfig, setOpacity, fadeTo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      TweenViewConfig = module.TweenViewConfig;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeTo = module.fadeTo;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a987fqL+rtCW4BZ9Znbe/Xh", "TweenViewComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TweenType = Enum({
        FADE: 0,
        MOVE: 1,
        ZOOM: 2,
        ROTATE: 3,
        FADE_AND_MOVE: 4,
        FADE_AND_ZOOM: 5,
        FADE_AND_ROTATE: 6,
        MOVE_AND_ZOOM: 7,
        MOVE_AND_ROTATE: 8,
        ROTATE_AND_ZOOM: 9,
        FADE_AND_MOVE_AND_ZOOM: 10,
        FADE_AND_MOVE_AND_ROTATE: 11,
        FADE_AND_ROTATE_AND_ZOOM: 12,
        MOVE_AND_ZOOM_AND_ROTATE: 13,
        FADE_AND_MOVE_AND_ZOOM_AND_ROTATE: 14,
        OTHER: 99
      });
      var TweenViewComponent = exports('TweenViewComponent', (_dec = ccclass('TweenViewComponent'), _dec2 = property({
        type: TweenType
      }), _dec3 = property({
        type: TweenViewConfig
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(TweenViewComponent, _GameObject);

        function TweenViewComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tweenType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tweenConfig", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "forceChildrend", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "stopPreviousTween", _descriptor4, _assertThisInitialized(_this));

          _this._startCB = null;
          _this._endCB = null;
          _this.tweenFade = null;
          _this.tweenMove = null;
          _this.tweenZoom = null;
          _this.tweenRotate = null;
          return _this;
        }

        var _proto = TweenViewComponent.prototype;

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.show = this.show.bind(this);
          this.node.hide = this.hide.bind(this);
          this.node.on("SHOW", this.show, this);
          this.node.on("HIDE", this.hide, this);
        };

        _proto.show = function show(onStart, onComplete) {
          var _this2 = this;

          if (onStart === void 0) {
            onStart = null;
          }

          if (onComplete === void 0) {
            onComplete = null;
          }

          var delayStart = this.tweenConfig.delayStart;
          this.showByType(true, this.tweenType, delayStart, onStart, function () {
            if (_this2.forceChildrend) {
              for (var i = 0; i < _this2.node.children.length; i++) {
                var child = _this2.node.children[i];
                if (child) child.emit("SHOW");
              }
            }

            onComplete && onComplete();
          });
        };

        _proto.hide = function hide(onStart, onComplete) {
          var _this3 = this;

          var delayStart = this.tweenConfig.delayStart;
          this.showByType(false, this.tweenType, delayStart, onStart, function () {
            if (_this3.forceChildrend) {
              for (var i = 0; i < _this3.node.children.length; i++) {
                var child = _this3.node.children[i];
                if (child) child.emit("HIDE");
              }
            }

            onComplete && onComplete();
          });
        };

        _proto.showByType = function showByType(isShow, type, delay, onStartcallback, onFinishedCallback) {
          var _this$tweenConfig = this.tweenConfig,
              fromOpacity = _this$tweenConfig.fromOpacity,
              toOpacity = _this$tweenConfig.toOpacity,
              fadeDuration = _this$tweenConfig.fadeDuration,
              fadeEasing = _this$tweenConfig.fadeEasing,
              fromPos = _this$tweenConfig.fromPos,
              toPos = _this$tweenConfig.toPos,
              moveDuration = _this$tweenConfig.moveDuration,
              moveEasing = _this$tweenConfig.moveEasing,
              fromScale = _this$tweenConfig.fromScale,
              toScale = _this$tweenConfig.toScale,
              scaleDuration = _this$tweenConfig.scaleDuration,
              scaleEasing = _this$tweenConfig.scaleEasing,
              fromAngle = _this$tweenConfig.fromAngle,
              toAngle = _this$tweenConfig.toAngle,
              rotateDuration = _this$tweenConfig.rotateDuration,
              rotateEasing = _this$tweenConfig.rotateEasing;
          this._startCB = onStartcallback;
          this._endCB = onFinishedCallback;

          switch (type) {
            case TweenType.FADE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              break;

            case TweenType.ZOOM:
              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.ROTATE:
              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ZOOM:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ROTATE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_ROTATE_AND_ZOOM:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.MOVE_AND_ZOOM_AND_ROTATE:
              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              break;

            case TweenType.FADE_AND_MOVE_AND_ZOOM_AND_ROTATE:
              this._fadeTo(isShow ? fromOpacity : toOpacity, isShow ? toOpacity : fromOpacity, delay, fadeDuration, fadeEasing, this._startCB, this._endCB);

              this._moveTo(isShow ? fromPos : toPos, isShow ? toPos : fromPos, delay, moveDuration, moveEasing, this._startCB, this._endCB);

              this._rotateTo(isShow ? fromAngle : toAngle, isShow ? toAngle : fromPos, delay, rotateDuration, rotateEasing, this._startCB, this._endCB);

              this._zoomTo(isShow ? fromScale : toScale, isShow ? toScale : fromPos, delay, scaleDuration, scaleEasing, this._startCB, this._endCB);

              break;

            case TweenType.OTHER:
              break;
          }
        };

        _proto._fadeTo = function _fadeTo(fromOpacity, toOpacity, delay, duration, easing, startCallback, endCallback) {
          var _this4 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenFade && this.stopPreviousTween) {
            this.tweenFade.stop();
            this.tweenFade = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            setOpacity(this.node, fromOpacity);
          }

          this.tweenFade = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).call(function () {
            fadeTo(_this4.node, _duration, toOpacity, {
              easing: easing
            });
          }).delay(_duration).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this4.tweenFade = null;
          }).start();
          return this.tweenFade;
        };

        _proto._moveTo = function _moveTo(fromPos, toPos, delay, duration, easing, startCallback, endCallback) {
          var _this5 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenMove && this.stopPreviousTween) {
            this.tweenMove.stop();
            this.tweenMove = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.setPosition(fromPos);
          }

          this.tweenMove = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            position: v3(toPos)
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this5.tweenMove = null;
          }).start();
          return this.tweenMove;
        };

        _proto._zoomTo = function _zoomTo(fromScale, toScale, delay, duration, easing, startCallback, endCallback) {
          var _this6 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenZoom && this.stopPreviousTween) {
            this.tweenZoom.stop();
            this.tweenZoom = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.scale = fromScale;
          }

          this.tweenZoom = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            scale: toScale
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this6.tweenZoom = null;
          }).start();
          return this.tweenZoom;
        };

        _proto._rotateTo = function _rotateTo(fromAngle, toAngle, delay, duration, easing, startCallback, endCallback) {
          var _this7 = this;

          var _delay = delay;
          var _duration = duration;

          if (this.tweenRotate && this.stopPreviousTween) {
            this.tweenRotate.stop();
            this.tweenRotate = null;
            _delay = 0;
            _duration = 0.01;
          } else {
            this.node.angle = fromAngle;
          }

          this.tweenRotate = tween(this.node).delay(_delay).call(function () {
            startCallback && startCallback();
            startCallback = null;
          }).to(_duration, {
            angle: toAngle
          }, {
            easing: easing
          }).call(function () {
            endCallback && endCallback();
            endCallback = null;
            _this7.tweenRotate = null;
          }).start();
          return this.tweenRotate;
        };

        _proto.onDestroy = function onDestroy() {
          if (this.tweenFade) this.tweenFade.stop();
          if (this.tweenMove) this.tweenMove.stop();
          if (this.tweenZoom) this.tweenZoom.stop();
          if (this.tweenRotate) this.tweenRotate.stop();
          this.unscheduleAllCallbacks();
        };

        return TweenViewComponent;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tweenType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return TweenType.FADE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tweenConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "forceChildrend", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stopPreviousTween", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenViewConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, v3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "9abafER3HBEpajFDa/prpMa", "TweenViewConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TweenViewConfig = exports('TweenViewConfig', (_dec = ccclass('TweenViewConfig'), _dec2 = property({
        displayName: 'fromOpacity',
        visible: true
      }), _dec3 = property({
        displayName: 'toOpacity',
        visible: true
      }), _dec4 = property({
        displayName: 'fadeDuration',
        visible: true
      }), _dec5 = property({
        displayName: 'fadeEasing',
        visible: true
      }), _dec6 = property({
        displayName: 'fromPos',
        visible: true
      }), _dec7 = property({
        displayName: 'toPos',
        visible: true
      }), _dec8 = property({
        displayName: 'moveDuration',
        visible: true
      }), _dec9 = property({
        displayName: 'moveEasing',
        visible: true
      }), _dec10 = property({
        displayName: 'fromScale',
        visible: true
      }), _dec11 = property({
        displayName: 'toScale',
        visible: true
      }), _dec12 = property({
        displayName: 'scaleDuration',
        visible: true
      }), _dec13 = property({
        displayName: 'scaleEasing',
        visible: true
      }), _dec14 = property({
        displayName: 'fromAngle',
        visible: true
      }), _dec15 = property({
        displayName: 'toAngle',
        visible: true
      }), _dec16 = property({
        displayName: 'rotateDuration',
        visible: true
      }), _dec17 = property({
        displayName: 'rotateEasing',
        visible: true
      }), _dec18 = property({
        displayName: 'delayStart',
        visible: true
      }), _dec(_class = (_class2 = function TweenViewConfig() {
        // _name: 'TweenViewConfig';
        _initializerDefineProperty(this, "fromOpacity", _descriptor, this);

        _initializerDefineProperty(this, "toOpacity", _descriptor2, this);

        _initializerDefineProperty(this, "fadeDuration", _descriptor3, this);

        _initializerDefineProperty(this, "fadeEasing", _descriptor4, this);

        _initializerDefineProperty(this, "fromPos", _descriptor5, this);

        _initializerDefineProperty(this, "toPos", _descriptor6, this);

        _initializerDefineProperty(this, "moveDuration", _descriptor7, this);

        _initializerDefineProperty(this, "moveEasing", _descriptor8, this);

        _initializerDefineProperty(this, "fromScale", _descriptor9, this);

        _initializerDefineProperty(this, "toScale", _descriptor10, this);

        _initializerDefineProperty(this, "scaleDuration", _descriptor11, this);

        _initializerDefineProperty(this, "scaleEasing", _descriptor12, this);

        _initializerDefineProperty(this, "fromAngle", _descriptor13, this);

        _initializerDefineProperty(this, "toAngle", _descriptor14, this);

        _initializerDefineProperty(this, "rotateDuration", _descriptor15, this);

        _initializerDefineProperty(this, "rotateEasing", _descriptor16, this);

        _initializerDefineProperty(this, "delayStart", _descriptor17, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fromOpacity", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toOpacity", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 255;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fadeDuration", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fadeEasing", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fromPos", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toPos", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "moveDuration", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "moveEasing", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "fromScale", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "toScale", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scaleDuration", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "scaleEasing", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "fromAngle", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "toAngle", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 180;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "rotateDuration", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "rotateEasing", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "sineIn";
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "delayStart", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomEnum.ts', './CustomType.ts', './GameObject.ts', './EventNames.ts', './loadConfigAsync.ts', './Setting.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Event, log, v3, WalletType, SlotSceneType, CustomEvent, GameObject, EventNames, loadConfigAsync, Setting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Event = module.Event;
      log = module.log;
      v3 = module.v3;
    }, function (module) {
      WalletType = module.WalletType;
      SlotSceneType = module.SlotSceneType;
    }, function (module) {
      CustomEvent = module.CustomEvent;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      EventNames = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      Setting = module.Setting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18;

      cclegacy._RF.push({}, "10c8cuZ4JVFNK8RLXNHKcG5", "UIManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIManager = exports('UIManager', (_dec = ccclass('UIManager'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Node
      }), _dec14 = property({
        type: Node
      }), _dec15 = property({
        type: Node
      }), _dec16 = property({
        type: Node
      }), _dec17 = property({
        type: Node
      }), _dec18 = property({
        type: Node
      }), _dec19 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(UIManager, _GameObject);

        function UIManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.sceneComp = [];
          _this.buttons = [];

          _initializerDefineProperty(_this, "dialogMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "controllerHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bet", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wallet", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jackpot", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turbo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAmount", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "paylineInfo", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toastInfo", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUI", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questMgr", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "questProcessMgr", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animWinEvent", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "topUserList", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "promoteWallet", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "multiScreenBtn", _descriptor17, _assertThisInitialized(_this));

          _this._realBetData = null;
          _this._realExtraBetData = null;
          _this._lastWalletType = WalletType.NORMAL;
          _this.sceneSiblingOffset = 0;
          _this.popups = [];

          _initializerDefineProperty(_this, "loadingScreen", _descriptor18, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIManager.prototype;

        _proto.onLoad = function onLoad() {
          globalThis.UIManager = this; //TODO remove debug

          this.node.dispatchEvent(new CustomEvent("SET_UP_UI_MANAGER", true, {
            guiMgr: this
          }));

          _GameObject.prototype.onLoad.call(this);

          this.setupUI();
          this.node.on('SET_UP_SLOT_BUTTON', this.setUpSlotButton.bind(this));
          this.node.on('SET_UP_SPIN_TIMES', this.setUpSpinTimes.bind(this));

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.displayMultiScreenButton(false);
          } else {
            this.displayMultiScreenButton(true);
          }
        };

        _proto.setUpSlotButton = function setUpSlotButton(evt) {
          if (evt.details) {
            evt.propagationStopped = true;

            if (this.eventManager) {
              this.eventManager.emit(evt.type, evt.details);
            }
          }
        };

        _proto.setUpSpinTimes = function setUpSpinTimes(evt) {
          if (evt.details) {
            evt.propagationStopped = true;

            if (this.eventManager) {
              this.eventManager.emit(evt.type, evt.details);
            }
          }
        };

        _proto.setupUI = function setupUI() {
          this.sceneHolder.active = true;

          for (var i = 0; i < this.sceneHolder.children.length; i++) {
            var child = this.sceneHolder.children[i];

            if (child) {
              child.active = true;
            }
          }

          this.popups = [SlotSceneType.Setting, SlotSceneType.BetHistory, SlotSceneType.JackpotHistory, SlotSceneType.GameInfo];
          this.buttons = this.controllerHolder.getComponentsInChildren(Button);
          this.buttons.forEach(function (it) {
            it.interactable = false;
          });
        };

        _proto.hideAllUI = function hideAllUI() {
          this.bet.active = false;
          this.wallet.active = false;
          this.turbo.active = false;
          this.winAmount.active = false;
        };

        _proto.showUIMain = function showUIMain() {
          this.bet.active = true;
          this.wallet.active = true;
          this.jackpot.active = true;
          this.turbo.active = true;
          this.winAmount.active = true;
          this.setOpacity(this.paylineInfo, 255);
          if (this.topUserList && !this.dataStore.isTrialMode) this.topUserList.active = true;
          if (this.questMgr) this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.onBackToMulti = function onBackToMulti() {
          this.node.dispatchEvent(new Event('BACK_TO_MULTI', true));
        };

        _proto.showUIFree = function showUIFree() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 255);
          this.turbo.active = true;
          this.winAmount.active = true;
          if (this.topUserList && !this.dataStore.isTrialMode) this.topUserList.active = true;
          if (this.questMgr) this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.showUITopUp = function showUITopUp() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 0);
          this.turbo.active = true;
          this.winAmount.active = true;
          if (this.topUserList) this.topUserList.active = false;
          if (this.questMgr) this.questMgr.active = false;
        };

        _proto.showUIBonus = function showUIBonus() {
          this.hideAllUI();
          this.setOpacity(this.paylineInfo, 0);
          this.winAmount.active = true;
          if (this.topUserList) this.topUserList.active = false;
          if (this.questMgr) this.questMgr.active = false;
        };

        _proto.updateBetInfoStatus = function updateBetInfoStatus(canShow) {};

        _proto.enableButtons = function enableButtons() {
          this.buttons.forEach(function (it) {
            it.interactable = true;
          });
        };

        _proto.onSettingClick = function onSettingClick() {
          this.showCutScene(SlotSceneType.Setting);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.onInfoClick = function onInfoClick() {
          this.showCutScene(SlotSceneType.GameInfo);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.showJackpotHistory = function showJackpotHistory() {
          this.showCutScene(SlotSceneType.JackpotHistory);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        };

        _proto.showBetHistory = function showBetHistory() {
          this.showCutScene(SlotSceneType.BetHistory);
          this.soundPlayer && this.soundPlayer.playSFXClick();
        }
        /**@TopUI */
        ;

        _proto.disableTopButtons = function disableTopButtons() {
          this.topUI.emit('DISABLE_BUTTONS');
        };

        _proto.enableTopButtons = function enableTopButtons() {
          this.topUI.emit('ENABLE_BUTTONS');
        };
        /**@CutScenes */


        _proto.showCutScene = function showCutScene(type, content, callback) {
          var _this2 = this;

          if (content === void 0) {
            content = {};
          }

          if (callback === void 0) {
            callback = function callback() {};
          }

          var scene = this.getCutscene(type);

          if (!scene) {
            this.eventManager && this.eventManager.emit(EventNames.CREATE_ON_DEMAND_OBJECT, Number(type), function () {
              _this2.sceneComp.forEach(function (it) {
                var sceneType = it.getType();

                if (sceneType == type) {
                  log(_this2.config.GAME_ID + " add cutscene " + it.node.name);
                  it.node.emit('PLAY', content, callback);
                  it.node._uiProps.colorDirty = true;

                  _this2.sortCutScene(it.node);
                }
              });
            });
          } else {
            this.sceneComp.forEach(function (it) {
              if (it.getType() == type) {
                //it.node.setSiblingIndex(it.node.parent.children.length);
                it.node.emit('PLAY', content, callback);
                it.node._uiProps.colorDirty = true;
              }
            });
          }
        };

        _proto.sortCutScene = function sortCutScene(scene) {
          if (this.sceneHolder.children.length < 2) return;
          var currentSibIndex = this.sceneHolder.children.length;
          var targetIndex = scene['sibIndex'];
          var nextSib = currentSibIndex;

          for (var i = currentSibIndex - 1; i > 0; i--) {
            var index = this.sceneHolder.children[i]['sibIndex'] || 0;

            if (targetIndex < index) {
              nextSib = i;
            }
          }

          scene.setSiblingIndex(nextSib);
        };

        _proto.hideCutScene = function hideCutScene(type) {
          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              it.node.emit('HIDE');
            }
          });
        };

        _proto.isShowingCutScene = function isShowingCutScene(type) {
          var isShow = false;
          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              if (it.node.active) isShow = true;
            }
          });
          return isShow;
        };

        _proto.hideCutSceneWithCB = function hideCutSceneWithCB(type, callback) {
          if (callback === void 0) {
            callback = function callback() {};
          }

          this.sceneComp.forEach(function (it) {
            if (it.getType() == type) {
              it.node.emit('HIDE', function () {
                callback && callback();
              });
            }
          });
        };

        _proto.getCutscene = function getCutscene(type) {
          for (var i = 0; i < this.sceneComp.length; i++) {
            var _type = this.sceneComp[i].getType();

            if (_type == type) {
              return this.sceneComp[i];
            }
          }

          return null;
        }
        /**@Wallet */
        ;

        _proto.updateWallet = function updateWallet(wallets) {
          this.wallet.emit("UPDATE_WALLET", wallets);
        };

        _proto.enableSwitchWallet = function enableSwitchWallet(enable) {
          enable = enable && !this.dataStore.isTrialMode;
          this.wallet.emit('ENABLE_SWITCH', enable);
        };

        _proto.selectWallet = function selectWallet() {
          this.wallet.emit('LOAD_WALLET_SELECT');
        }
        /**@Dialog */
        ;

        _proto.showDialog = function showDialog(strText, actionOK, actionCancel, isForce) {
          if (actionOK === void 0) {
            actionOK = null;
          }

          if (actionCancel === void 0) {
            actionCancel = null;
          }

          if (isForce === void 0) {
            isForce = false;
          }

          if (!this.dialogMessage.active || isForce) this.dialogMessage.emit('PLAY', {
            strText: strText,
            actionOK: actionOK,
            actionCancel: actionCancel
          });
        };

        _proto.hideDialog = function hideDialog() {
          this.dialogMessage.active = false;
        };

        _proto.isDisplayDialog = function isDisplayDialog() {
          return this.dialogMessage.active;
        };

        _proto.isSpinVisible = function isSpinVisible() {
          var cutsceneDisplay = this.sceneComp.filter(function (it) {
            return it.node.active == true;
          }).length > 0;
          var result = !cutsceneDisplay && this.extraSpinCheck();
          return result;
        };

        _proto.isDisplayFullScreen = function isDisplayFullScreen() {
          return this.dataStore.isDisplayFullScreen;
        };

        _proto.extraSpinCheck = function extraSpinCheck() {
          return true;
        } // -------------- Jackpot -------------
        ;

        _proto.initJackpot = function initJackpot(data) {
          this.jackpot.emit("INIT_JACKPOT", data);
        };

        _proto.updateJackpot = function updateJackpot(data) {
          this.jackpot.emit("UPDATE_JACKPOT", data);
        };
        /**@Jackpot */


        _proto.updateValueJP = function updateValueJP(data) {
          var jpType = data.jpType,
              jpValue = data.jpValue;
          this.jackpot.emit('UPDATE_VALUE_JACKPOT', jpType, jpValue);
        };

        _proto.pauseJackpot = function pauseJackpot() {
          this.jackpot.emit('PAUSE_JACKPOT');
        };

        _proto.resumeJackpot = function resumeJackpot() {
          this.jackpot.emit('RESUME_JACKPOT');
        }
        /**@Bet */
        ;

        _proto.setBetId = function setBetId(betId) {
          this.bet.emit('SET_BET_ID', betId);
        };

        _proto.disableBet = function disableBet() {
          this.bet.emit('DISABLE_BET');
        };

        _proto.enableBet = function enableBet() {
          this.bet.emit('ENABLE_BET');
        };

        _proto.initBet = function initBet() {
          this.bet.emit('INIT_BET');
        }; //Toast


        _proto.showToast = function showToast(message) {
          this.toastInfo.emit('SHOW_TOAST_MESSAGE', message);
        } //winAmount
        ;

        _proto.getWinAmount = function getWinAmount() {
          return this.winAmount;
        };

        _proto.updateWinAmount = function updateWinAmount(winAmount, timeShow, callback) {
          if (callback === void 0) {
            callback = null;
          }

          this.winAmount.emit("UPDATE_WIN_AMOUNT", {
            value: winAmount,
            time: timeShow
          }, function () {
            callback && callback();
          });
        };

        _proto.fadeOutWinAmount = function fadeOutWinAmount() {
          this.winAmount.emit("FADE_OUT_NUMBER", this.dataStore.modeTurbo ? 0.4 : 0.8);
        };

        _proto.changeToLastWin = function changeToLastWin() {
          this.winAmount.emit("CHANGE_TO_LAST_WIN");
        };

        _proto.changeToWin = function changeToWin() {
          this.winAmount.emit("CHANGE_TO_WIN");
        };

        _proto.showPaylineInfo = function showPaylineInfo(info) {
          this.paylineInfo.emit('SHOW_PAYLINE', {
            line: info
          });
        };

        _proto.hidePaylineInfo = function hidePaylineInfo() {
          this.paylineInfo.emit('HIDE_PAYLINE');
        };

        _proto.skipAllUIScenes = function skipAllUIScenes() {
          for (var i = 0; i < this.sceneComp.length; i++) {
            var scene = this.sceneComp[i];

            if (scene && scene.node.active) {
              scene.node.emit("SKIP");
            }
          }
        } //Quest
        ;

        _proto.initQuest = function initQuest() {
          if (this.questMgr) {
            this.questMgr.emit('INIT_QUEST');
          }
        };

        _proto.forceUpdateQuest = function forceUpdateQuest() {
          if (this.questMgr) {
            this.questMgr.emit('FORCE_UPDATE_QUEST');
          }
        };

        _proto.activeQuest = function activeQuest(isActive) {
          if (this.questMgr) {
            if (isActive == false) this.questMgr.active = false;else this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
          }
        };

        _proto.refreshQuestUI = function refreshQuestUI() {
          log('UIManager refresh quest layout');

          if (this.questMgr) {
            this.questMgr.emit('REFRESH_LAYOUT');
          }

          this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
        };

        _proto.forceCloseEvent = function forceCloseEvent() {
          this.questMgr.getComponent('SlotQuestMgr').forceCloseEvent();
        };

        _proto.forceOpenPanel = function forceOpenPanel() {
          this.questMgr.getComponent('SlotQuestMgr').showBoard(false);
        };

        _proto.topUserUpdate = function topUserUpdate(userList, userOnline) {
          if (this.topUserList) {
            this.topUserList.emit('UPDATE_DATA', userList, userOnline);
          }
        };

        _proto.activeQuestProcess = function activeQuestProcess(isActive) {
          if (this.questProcessMgr) {
            this.questProcessMgr.active = isActive;
          }
        };

        _proto.setDoneQuest = function setDoneQuest() {
          this.questMgr.getComponent('SlotQuestMgr').setDoneCurrent();
        };

        _proto.finishEvent = function finishEvent(callback) {
          this.questMgr.getComponent('SlotQuestMgr').finishEvent(callback);
        };

        _proto.setQuestPosition = function setQuestPosition(parent) {
          if (!this.questMgr) return;

          if (parent) {
            this.questMgr.removeFromParent();
            this.questMgr.setParent(parent);
            this.questMgr.setPosition(v3(0, 0, 0));
            this.questMgr.getComponent('SlotQuestMgr').showIfAvailable();
          }
        };

        _proto.setWalletTypes = function setWalletTypes(types) {
          this.wallet.emit('UPDATE_WALLET_TYPE', types);
        };

        _proto.playAnimWinQuest = function playAnimWinQuest(callback) {
          var _this3 = this;

          log('UIManager playAnimWinQuest');
          this.questMgr.getComponent('SlotQuestMgr').showBoard();
          this.scheduleOnce(function () {
            var startPosition = _this3.questMgr.getComponent('SlotQuestMgr').getEffectPosition();

            if (_this3.animWinEvent) {
              _this3.animWinEvent.emit("PLAY_ANIMATION", startPosition, _this3.wallet, callback);
            } else {
              callback && callback();
            }
          }, 0.4);
        };

        _proto.stopAnimWinQuest = function stopAnimWinQuest() {
          if (this.animWinEvent) {
            this.animWinEvent.emit("RESET_ANIMATION");
          }
        };

        _proto.displayMultiScreenButton = function displayMultiScreenButton(isActive) {//if (this.multiScreenBtn) this.multiScreenBtn.active = isActive;
        } // notify win effect

        /*showBigWinEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_OPEN_BIGWIN', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         hideBigWinEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_CLOSE_BIGWIN', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         showJackpotEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_OPEN_JACKPOT', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };
         hideJackpotEffect() {
            if (!this.dataStore.isTrialMode) {
                let updatedEvent:any = new Event('NOTIFY_CLOSE_JACKPOT', true);
                this.node.dispatchEvent(updatedEvent);
            }
        };*/
        ;

        _proto.pauseTopPlayer = function pauseTopPlayer() {
          this.topUserList.getComponent("TopPlayers").pauseUpdate(true);
        };

        _proto.resumeTopPlayer = function resumeTopPlayer() {
          this.topUserList.getComponent("TopPlayers").pauseUpdate(false);
        };

        _proto.updateSoundSetting = function updateSoundSetting() {
          var setting = this.node.getComponentInChildren(Setting);

          if (setting) {
            setting.syncSetting();
          }
        };

        _proto.closePopups = function closePopups() {
          var _this4 = this;

          this.sceneComp.forEach(function (scene) {
            var isPopUp = _this4.popups.indexOf(scene.getType()) > -1;

            if (scene.node.active == true && isPopUp) {
              scene.node.emit("HIDE");
            }
          });
        };

        _proto.isDisplayLoading = function isDisplayLoading() {
          return this.loadingScreen && this.loadingScreen.active;
        };

        return UIManager;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dialogMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "controllerHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sceneHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "turbo", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "paylineInfo", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "toastInfo", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "topUI", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "questMgr", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "questProcessMgr", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "animWinEvent", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "topUserList", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "promoteWallet", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "multiScreenBtn", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "loadingScreen", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Big.mjs_cjs=&original=2.js', './Big2.js'], function (exports) {
  var _extends, cclegacy, Vec3, UITransform, error, UIRenderer, tween, UIOpacity, Color, bezier, director, v3, native, sys, log, assetManager, Texture2D, SpriteFrame, Sprite, isValid, Node, view, macro, SpriteAtlas, warn, _cjsExports;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      error = module.error;
      UIRenderer = module.UIRenderer;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      bezier = module.bezier;
      director = module.director;
      v3 = module.v3;
      native = module.native;
      sys = module.sys;
      log = module.log;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      isValid = module.isValid;
      Node = module.Node;
      view = module.view;
      macro = module.macro;
      SpriteAtlas = module.SpriteAtlas;
      warn = module.warn;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      exports({
        MD5: MD5,
        addZero: addZero,
        changeParent: changeParent,
        convertAssetArrayToObject: convertAssetArrayToObject,
        convertPayLine: convertPayLine,
        convertPayLineAllways: convertPayLineAllways,
        customDateFormat: customDateFormat,
        disableButton: disableButton,
        fadeIn: fadeIn,
        fadeInDeep: fadeInDeep,
        fadeOut: fadeOut,
        fadeOutDeep: fadeOutDeep,
        fadeTo: fadeTo,
        fadeToAllChild: fadeToAllChild,
        findKeyByValue: findKeyByValue,
        formatMoney: formatMoney,
        formatUserName: formatUserName,
        formatWalletMoney: formatWalletMoney,
        getAngleTwoPoint: getAngleTwoPoint,
        getAnimationsName: getAnimationsName,
        getDecimalCount: getDecimalCount,
        getDefaultManifest: getDefaultManifest,
        getDistance: getDistance,
        getFBAvatar: getFBAvatar,
        getLeftTime: getLeftTime,
        getOpacity: getOpacity,
        getPostionInOtherNode: getPostionInOtherNode,
        getRandomElement: getRandomElement,
        getRandomInt: getRandomInt,
        getText: getText,
        getTime: getTime,
        getUtilConfig: getUtilConfig,
        loadAvatarFacebook: loadAvatarFacebook,
        mapObjectKey: mapObjectKey,
        pickOutRandomElement: pickOutRandomElement,
        randRange: randRange,
        registerLoadHowl: registerLoadHowl,
        removeDuplicates: removeDuplicates,
        removeElementByValue: removeElementByValue,
        replaceElement: replaceElement,
        roundDecimal: roundDecimal,
        secondsToHHMMSS: secondsToHHMMSS,
        setDeviceOrientation: setDeviceOrientation,
        setIndexZ: setIndexZ,
        setLayerAlls: setLayerAlls,
        setLayerForAllChildrens: setLayerForAllChildrens,
        setMixAllAnims: setMixAllAnims,
        setOpacity: setOpacity,
        setOpacityDeep: setOpacityDeep,
        setRenderColor: setRenderColor,
        shaking: shaking,
        shuffleArray: shuffleArray,
        startGameFromEvent: startGameFromEvent,
        toFixed: toFixed,
        toLocalClockTime: toLocalClockTime,
        toLocalTime: toLocalTime,
        toLocalTimeHHMM: toLocalTimeHHMM,
        tweenBezier2DTo: tweenBezier2DTo,
        tweenMoney: tweenMoney,
        tweenMoney2: tweenMoney2,
        tweenMoneyByCurrency: tweenMoneyByCurrency,
        tweenWalletMoney: tweenWalletMoney,
        unregisterLoadHowl: unregisterLoadHowl,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "61e2aeL1yJB6r+n4NcvBChY", "utils", undefined);

      var lodash = globalThis._;
      var UTIL_CONFIG = exports('UTIL_CONFIG', {
        FORMAT_MONEY_EVENT: false,
        CURRENCY_CONFIG: null
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      function getUtilConfig() {
        return UTIL_CONFIG;
      }

      function getDecimalCount(number, min, max) {
        if (min === void 0) {
          min = 0;
        }

        if (max === void 0) {
          max = 0;
        }

        var converted = number.toString();

        if (converted.includes('.')) {
          var count = converted.split('.')[1].length;
          count = Math.max(count, min);

          if (max && count > max) {
            count = max;
          }

          return count;
        }

        return min || 0;
      }

      function formatCoin(amount, decimalCount, decimal, thousands) {
        if (decimalCount === void 0) {
          decimalCount = 0;
        }

        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        if (amount < 0) return toFixed(0, decimalCount);
        var splitStr = toFixed(amount, decimalCount).split(".");

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          decimal = ',';
          thousands = '.';
        }

        var decimalStr = splitStr[1] || "";
        var integerArr = splitStr[0].split("");
        var index = integerArr.length;

        while ((index -= 3) > 0) {
          integerArr.splice(index, 0, thousands);
        }

        if (decimalStr) {
          integerArr.push(decimal, decimalStr);
        }

        return integerArr.join("");
      }

      function findKeyByValue(object, value) {
        return Object.keys(object).find(function (key) {
          return object[key] == value;
        });
      }

      function customDateFormat(date, formatString) {
        var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
        YY = ((YYYY = date.getFullYear()) + "").slice(-2);
        MM = (M = date.getMonth() + 1) < 10 ? '0' + M : M;
        MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
        DD = (D = date.getDate()) < 10 ? '0' + D : D;
        DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][date.getDay()]).substring(0, 3);
        th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';
        formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
        h = hhh = date.getHours();
        if (h == 0) h = 24;
        if (h > 12) h -= 12;
        hh = h < 10 ? '0' + h : h;
        hhhh = hhh < 10 ? '0' + hhh : hhh;
        AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
        mm = (m = date.getMinutes()) < 10 ? '0' + m : m;
        ss = (s = date.getSeconds()) < 10 ? '0' + s : s;
        return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
      }

      function toLocalTimeHHMM(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = (hour < 10 ? "0" : "") + hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function toLocalClockTime(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function formatUserName(userName) {
        return userName.trim();
      }

      function secondsToHHMMSS(secs) {
        if (secs == 0) return "00:00";
        var sec_num = parseInt(secs, 10);
        var hours = Math.floor(sec_num / 3600);
        var minutes = Math.floor(sec_num / 60) % 60;
        var seconds = sec_num % 60;
        return [hours, minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      }

      function toLocalTime(ts, format) {
        return customDateFormat(new Date(ts * 1000), format);
      }

      function randRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function toFixed(num, fixed) {
        if (fixed === void 0) {
          fixed = 0;
        }

        try {
          _cjsExports.RM = 0;
          if (isNaN(+num) || typeof num === "object") num = 0;
          return _cjsExports(num).toFixed(fixed);
        } catch (e) {}

        return "0";
      }

      function getPostionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        var pos = new Vec3(0, 0, 0);
        var targetNodeComponent = targetNode.parent.getComponent(UITransform);
        var spaceNodeComponent = spaceNode.getComponent(UITransform);

        if (!targetNodeComponent) {
          targetNode.parent.addComponent(UITransform);
        }

        if (!spaceNodeComponent) {
          spaceNode.addComponent(UITransform);
        }

        pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
      }

      function getSpriteNameFromAtlas(uuid) {
        var mainUUID = uuid.split('@')[0];
        var mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset) {
          var keys = Object.keys(mainAsset.spriteFrames);

          for (var i = 0; i < keys.length; i++) {
            if (mainAsset.spriteFrames[keys[i]]._uuid == uuid) {
              return keys[i];
            }
          }
        }

        return '';
      }

      function isSpriteFrameFromAtlas(uuid) {
        var mainUUID = uuid.split('@')[0];
        var mainAsset = assetManager.assets['_map'][mainUUID];

        if (mainAsset && mainAsset instanceof SpriteAtlas) {
          return true;
        }

        return false;
      }

      function convertAssetArrayToObject(arr) {
        var obj = {};

        for (var i = 0; i < arr.length; i++) {
          if (arr[i]._name == "" && arr[i].data) {
            arr[i]._name = arr[i].data._name;
          }

          if (arr[i]) {
            var uuid = arr[i]._uuid ? arr[i]._uuid : arr[i].uuid;
            var name = uuid && isSpriteFrameFromAtlas(uuid) ? getSpriteNameFromAtlas(uuid) : arr[i]._name;
            obj[name] = arr[i];
          }
        }

        return obj;
      }

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime) {
        if (mixTime === void 0) {
          mixTime = 0.15;
        }

        var animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          error("spine have to have many animations");
          return;
        }

        for (var i = 0; i < animNames.length; i++) {
          for (var j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      function convertPayLineAllways(payLines, multiplier, betDenom) {
        if (payLines === void 0) {
          payLines = [];
        }

        if (multiplier === void 0) {
          multiplier = 1;
        }

        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          if (payLines[i].includes(';')) {
            var dataSplit = payLines[i].split(';');

            if (dataSplit.length !== 0) {
              listNewPL.push({
                symbolId: dataSplit[0],
                totalWinAmount: dataSplit[1],
                symbolCount: dataSplit[2],
                combination: dataSplit[3],
                payableSymbol: dataSplit[4],
                betDenom: betDenom,
                multiplier: multiplier
              });
            } else {
              error("payLines is not right AKTV formatted");
            }
          }
        }

        return listNewPL;
      }

      function convertPayLine(payLines) {
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              payLineSymbol: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function formatWalletMoney(num, digits) {
        if (digits === void 0) {
          digits = 2;
        }

        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          return formatWalletMoneyByCurrency(num, digits);
        }

        return formatWallet(num, digits);
      }

      function formatMoney(amount, decimalCount, decimal, thousands) {
        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          if (isNaN(decimalCount) || decimalCount === null) decimalCount = UTIL_CONFIG.CURRENCY_CONFIG.DECIMAL_COUNT;
          return formatMoneyByCurrency(amount, decimalCount, decimal, thousands);
        }

        return formatCoin(amount, decimalCount || 0, decimal, thousands);
      }

      function formatMoneyByCurrency(amount, decimalCount, decimal, thousands) {
        if (decimalCount === void 0) {
          decimalCount = 0;
        }

        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        var _UTIL_CONFIG$CURRENCY = UTIL_CONFIG.CURRENCY_CONFIG,
            CENT_UNIT = _UTIL_CONFIG$CURRENCY.CENT_UNIT,
            CENT_SUFFIX = _UTIL_CONFIG$CURRENCY.CENT_SUFFIX,
            CURRENCY_PREFIX = _UTIL_CONFIG$CURRENCY.CURRENCY_PREFIX,
            DECIMAL_COUNT = _UTIL_CONFIG$CURRENCY.DECIMAL_COUNT;
        var prefix = CURRENCY_PREFIX || "";
        var suffix = "";

        if (isNaN(decimalCount) || decimalCount === null) {
          decimalCount = decimalCount || DECIMAL_COUNT;
        }

        if (isNaN(amount) || amount === null) return "";

        if (CENT_UNIT && _cjsExports(amount).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          amount = _cjsExports(amount || 0).times(100).toNumber();
        }

        return prefix + formatCoin(amount, decimalCount || 0, decimal, thousands) + suffix;
      }

      function formatWalletMoneyByCurrency(num, digits) {
        var _UTIL_CONFIG$CURRENCY2 = UTIL_CONFIG.CURRENCY_CONFIG,
            CENT_UNIT = _UTIL_CONFIG$CURRENCY2.CENT_UNIT,
            CENT_SUFFIX = _UTIL_CONFIG$CURRENCY2.CENT_SUFFIX,
            CURRENCY_PREFIX = _UTIL_CONFIG$CURRENCY2.CURRENCY_PREFIX,
            DECIMAL_COUNT = _UTIL_CONFIG$CURRENCY2.DECIMAL_COUNT,
            TRIM_ZERO = _UTIL_CONFIG$CURRENCY2.TRIM_ZERO;
        var prefix = CURRENCY_PREFIX || "";
        var suffix = "";

        if (isNaN(digits) || digits === null) {
          digits = DECIMAL_COUNT || 2;
        }

        if (isNaN(num) || num === null) return "";
        var trimZero = TRIM_ZERO;

        if (CENT_UNIT && _cjsExports(num).lt(CENT_UNIT)) {
          prefix = "";
          suffix = CENT_SUFFIX || "";
          num = _cjsExports(num || 0).times(100).toNumber();
        }

        return prefix + formatWallet(num, digits, trimZero) + suffix;
      }

      function formatWallet(num, digits, trimZero) {
        if (trimZero === void 0) {
          trimZero = true;
        }

        if (isNaN(parseFloat(num))) num = 0;
        var si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        var i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) break;
        }

        var wallet = toFixed(num / si[i].value, digits);
        if (trimZero) wallet = wallet.replace(rx, "$1");
        wallet = wallet + si[i].symbol;

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          wallet = wallet.replace('.', ',');
        }

        return wallet;
      }

      function changeParent(node, newParent) {
        if (node.parent === newParent) return;

        var getWorldRotation = function getWorldRotation(node) {
          var currNode = node;
          var resultRot = currNode.angle || 0;

          do {
            currNode = currNode.parent;
            resultRot += currNode.angle || 0;
          } while (currNode.parent != null);

          resultRot = resultRot % 360;
          return resultRot;
        };

        var oldWorRot = getWorldRotation(node);
        var newParentWorRot = getWorldRotation(newParent);
        var newLocRot = oldWorRot - newParentWorRot;

        if (!node.getComponent(UITransform)) {
          node.addComponent(UITransform);
        }

        if (!newParent.getComponent(UITransform)) {
          newParent.addComponent(UITransform);
        }

        var oldWorPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0));
        var newLocPos = newParent.getComponent(UITransform).convertToNodeSpaceAR(oldWorPos);
        node.parent = newParent;
        node.position = newLocPos;
        node.angle = newLocRot;
      }

      function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function roundDecimal(num, numDecimal) {
        var rate = 1;

        for (var i = 0; i < numDecimal; i++) {
          rate *= 10;
        }

        return Math.round((num + Number.EPSILON) * rate) / rate;
      }

      function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }

        return array;
      }

      function getRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        return array[Math.floor(Math.random() * array.length)];
      }

      function pickOutRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        var randomIndex = Math.floor(Math.random() * array.length);
        return array.splice(randomIndex, 1)[0];
      }

      function removeElementByValue(array, value) {
        array.splice(array.indexOf(value), 1);
        return array;
      }

      function replaceElement(array, oldElement, newElement) {
        var index = array.indexOf(oldElement);
        if (index > -1) array[index] = newElement;
        return array;
      }

      function getText(text, length) {
        if (text === void 0) {
          text = '';
        }

        if (length === void 0) {
          length = 0;
        }

        var result = text;
        var n = length - text.length;

        if (n) {
          for (var i = 0; i < n; i++) {
            result += ' ';
          }
        }

        return result;
      }

      function getLeftTime(endTime, serverTime, millisecond) {
        if (millisecond === void 0) {
          millisecond = 1000;
        }

        serverTime = serverTime ? new Date(serverTime).getTime() : new Date().getTime();
        var time = Math.floor((new Date(endTime).getTime() - serverTime) / millisecond);
        if (time < 0) time = 0;
        return time;
      }

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      function getTime() {
        var d = new Date();
        var h = addZero(d.getHours());
        var m = addZero(d.getMinutes());
        var s = addZero(d.getSeconds());
        var t = h + ':' + m + ':' + s;
        return t;
      }

      function mapObjectKey(obj, keysMap) {
        return lodash.transform(obj, function (result, value, key) {
          var currentKey = key;

          if (keysMap[key]) {
            currentKey = keysMap[key].name;
            if (keysMap[key].type == Boolean) value = value == 'T';
          }

          if (lodash.isObject(value)) {
            result[currentKey] = mapObjectKey(value, keysMap);
          } else {
            result[currentKey] = value;
          }
        });
      }

      function fadeTo(target, duration, opacity, options) {
        var render2D = target.getComponent(UIRenderer);
        options = options || {};

        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        var tweenFade = null;

        if (render2D) {
          var obj = {
            alpha: render2D.color.a
          };

          options.onUpdate = function () {
            if (render2D && render2D.color) {
              setRenderColor(render2D, obj.alpha);
            }
          };

          tweenFade = tween(obj).to(duration, {
            alpha: opacity
          }, options).call(function () {
            if (target) {
              target['tweenFade'] = null;
            }
          }).start();
          target['tweenFade'] = tweenFade;
        } else {
          var uiOpacity = target.getComponent(UIOpacity);

          if (uiOpacity === null) {
            uiOpacity = target.addComponent(UIOpacity);
          }

          tweenFade = tween(uiOpacity);
          target['tweenFade'] = tweenFade;
          tweenFade.to(duration, {
            opacity: opacity
          }, options).call(function () {
            target['tweenFade'] = null;
          }).start();
        }

        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var render2D = node.getComponent(UIRenderer);
        var uiOpacity = node.getComponent(UIOpacity);

        if (render2D) {
          if (uiOpacity) {
            uiOpacity.opacity = 255;
          }

          setRenderColor(render2D, opacity);
        } else {
          if (uiOpacity === null) {
            uiOpacity = node.addComponent(UIOpacity);
          }

          uiOpacity.opacity = opacity;
        }

        if (node) {
          //cheat for v373 to flag dirty transform
          node.position = node.position;
        }
      }

      function setOpacityDeep(node, opacity) {
        setOpacity(node, opacity);
        var childRenders = node.getComponentsInChildren(UIRenderer);
        childRenders.forEach(function (it) {
          setOpacity(it.node, opacity);
        });
      }

      function fadeOutDeep(target, duration, options) {
        return fadeToAllChild(target, duration, 0, options);
      }

      function fadeInDeep(target, duration, options) {
        return fadeToAllChild(target, duration, 255, options);
      } //fade all renderer in node child, use it carefully


      function fadeToAllChild(target, duration, opacity, options) {
        var render2D = target.getComponent(UIRenderer);
        var childRenders = target.getComponentsInChildren(UIRenderer);
        options = options || {};

        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        var tweenFade = null;

        if (render2D) {
          var obj = {
            alpha: render2D.color.a
          };

          options.onUpdate = function () {
            childRenders.forEach(function (it) {
              setRenderColor(it, obj.alpha);
            });
          };

          tweenFade = tween(obj).to(duration, {
            alpha: opacity
          }, options).call(function () {
            if (target) {
              target['tweenFade'] = null;
            }
          }).start();
          target['tweenFade'] = tweenFade;
        } else {
          var uiOpacity = target.getComponent(UIOpacity);

          if (uiOpacity === null) {
            uiOpacity = target.addComponent(UIOpacity);
          }

          options.onUpdate = function () {
            childRenders.forEach(function (it) {
              setRenderColor(it, uiOpacity.opacity);
            });
          };

          tweenFade = tween(uiOpacity);
          target['tweenFade'] = tweenFade;
          tweenFade.to(duration, {
            opacity: opacity
          }, options).call(function () {
            target['tweenFade'] = null;
          }).start();
        }

        return tweenFade;
      }

      function setRenderColor(render, alpha) {
        var color = Color.clone(render.color);
        color.a = alpha;
        render.color = color;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (UTIL_CONFIG.CURRENCY_CONFIG) {
          return tweenMoneyByCurrency(label, duration, endValue, options);
        }

        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};
        var count = 0;
        var gap = options["gap"] || 3;
        delete options["gap"];

        options.onUpdate = function (target, ratio) {
          count++;

          if (count >= gap || ratio === 1) {
            count = 0;
            label.string = formatMoney(_target.value, null, '.', ',');
          }
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue, null, '.', ',');
          label["_tweenMoney"] = null;
        }).start();
        label.string = formatMoney(currentVal, null, '.', ',');
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenMoneyByCurrency(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var CENT_SUFFIX = UTIL_CONFIG.CURRENCY_CONFIG.CENT_SUFFIX;
        var isCentNumber = label.string.includes(CENT_SUFFIX);
        var currentVal = Number(label.string.replace(/[^\d.]/g, ''));

        if (isCentNumber) {
          currentVal = _cjsExports(currentVal || 0).div(100).toNumber();
        }

        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Number(_target.value), null, '.', ',');
        };

        var tweenMoney = tween(_target).to(duration, {
          value: Number(endValue)
        }, options).call(function () {
          label.string = formatMoney(Number(endValue), null, '.', ',');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      } //for slot event only


      function tweenMoney2(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(_target.value, 0, ',', '.');
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue, 0, ',', '.');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenWalletMoney(label, duration, startValue, endValue, options) {
        if (label["tweenWalletMoney"]) label["tweenWalletMoney"].stop(); // stop if on tween;

        var currentVal = startValue || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatWalletMoney(_target.value);
        };

        var tweenWalletMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatWalletMoney(endValue);
          label["tweenWalletMoney"] = null;
        }).start();
        label["tweenWalletMoney"] = tweenWalletMoney;
        return tweenWalletMoney;
      }

      function tweenBezier2DTo(target, duration, c1, c2, to, opts) {
        if (target['bezierX']) target['bezierX'].stop();
        if (target['bezierY']) target['bezierY'].stop();
        var c0x = c1.x,
            c0y = c1.y,
            c1x = c2.x,
            c1y = c2.y;
        var _targetX = {
          value: target.getPosition().x
        };
        var _targetY = {
          value: target.getPosition().y
        };
        var aOpts = opts ? _extends({}, opts) : Object.create(null);

        aOpts.progress = function (startX, endX, currentX, t) {
          currentX = bezier(startX, c0x, c1x, endX, t);
          return currentX;
        };

        aOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(_targetX.value, target.position.y, target.position.z));
          }
        };

        var bOpts = opts ? _extends({}, opts) : Object.create(null);

        bOpts.progress = function (startY, endY, currentY, t) {
          currentY = bezier(startY, c0y, c1y, endY, t);
          return currentY;
        };

        bOpts.onUpdate = function () {
          if (target && target.position) {
            target.setPosition(new Vec3(target.position.x, _targetY.value, target.position.z));
          }
        };

        target['bezierX'] = tween(_targetX).to(duration, {
          value: to.x
        }, aOpts).call(function () {
          target['bezierX'] = null;
        }).start();
        target['bezierY'] = tween(_targetY).to(duration, {
          value: to.y
        }, bOpts).call(function () {
          target['bezierY'] = null;
        }).start();
      }

      function startGameFromEvent(gameId) {
        director.loadScene("MultiSlot", function () {
          var multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

          if (multiSlotComp) {
            var config = {
              gameId: gameId,
              startScene: "g" + gameId
            };
            multiSlotComp.emit('RQ_PLAY_FROM_EVENT', {
              config: config
            });
          }
        });
      }

      function removeDuplicates(array) {
        return array.filter(function (item, index) {
          return array.indexOf(item) === index;
        });
      }
      /**
       * @returns degree angle
      */


      function getAngleTwoPoint(p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }

      function getDistance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      function shaking(node, _ref) {
        var _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? 0.16 : _ref$duration,
            _ref$distance = _ref.distance,
            distance = _ref$distance === void 0 ? 10 : _ref$distance,
            _ref$repeat = _ref.repeat,
            repeat = _ref$repeat === void 0 ? 1 : _ref$repeat;
        var dur = duration / 8;
        var shake = tween().by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(distance, 0)
        });
        var tweenShake = tween(node).repeat(repeat, shake).start();
        return tweenShake;
      }

      function MD5(e) {
        function h(a, b) {
          var c, d, e, f, g;
          e = a & 2147483648;
          f = b & 2147483648;
          c = a & 1073741824;
          d = b & 1073741824;
          g = (a & 1073741823) + (b & 1073741823);
          return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
        }

        function k(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & c | ~b & d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function l(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & d | c & ~d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function m(a, b, d, c, e, f, g) {
          a = h(a, h(h(b ^ d ^ c, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function n(a, b, d, c, e, f, g) {
          a = h(a, h(h(d ^ (b | ~c), e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function p(a) {
          var b = "",
              d = "",
              c;

          for (c = 0; 3 >= c; c++) d = (a >>> 8 * c & 255).toString(), d = "0" + parseInt(d).toString(16), b += d.substr(d.length - 2, 2);

          return b;
        }

        var f = [],
            q,
            r,
            s,
            t,
            a,
            b,
            c,
            d;

        e = function (a) {
          a = a.replace(/\r\n/g, "\n");

          for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
          }

          return b;
        }(e);

        f = function (b) {
          var a,
              c = b.length;
          a = c + 8;

          for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;

          a = (g - g % 4) / 4;
          e[a] |= 128 << g % 4 * 8;
          e[d - 2] = c << 3;
          e[d - 1] = c >>> 29;
          return e;
        }(e);

        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;

        for (e = 0; e < f.length; e += 16) q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);

        return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
      }

      function getFBAvatar(url, spriteA, defaultAvatar, AvatarAtlas) {
        var dirpath = native.fileUtils.getWritablePath() + 'avaImg/';
        var filepath = dirpath + MD5(url) + '.png';

        function loadEnd() {
          assetManager.loadAny({
            url: filepath
          }, function (err, tex) {
            if (err) {
              warn(err);
              spriteA.spriteFrame = defaultAvatar;
            } else {
              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = tex;

              if (spriteFrame) {
                spriteA.spriteFrame = spriteFrame;
              }
            }
          });
        }

        if (sys.os === sys.OS_ANDROID && sys.isNative) {
          if (native.fileUtils.isFileExist(filepath)) {
            //remove old file
            native.fileUtils.removeFile(filepath);
          }
        }

        var saveFile = function saveFile(data) {
          if (typeof data !== 'undefined') {
            if (!native.fileUtils.isDirectoryExist(dirpath)) {
              native.fileUtils.createDirectory(dirpath);
            }

            if (native.fileUtils.writeValueMapToFile(new Uint8Array(data), filepath)) {
              warn('Remote write file succeed.');
              loadEnd();
            } else {
              spriteA.spriteFrame = defaultAvatar;
              warn('Remote write file failed.');
            }
          } else {
            spriteA.spriteFrame = defaultAvatar;
            warn('Remote download file failed.');
          }
        };

        if (sys.os === sys.OS_IOS && sys.isNative) {
          if (url.indexOf("facebook") !== -1) {
            if (native.fileUtils.isFileExist(filepath)) {
              loadEnd();
            }

            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';

            xhr.onreadystatechange = function () {
              log("xhr.readyState  " + xhr.readyState);
              log("xhr.status  " + xhr.status);

              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  saveFile(xhr.response);
                }
              }
            }.bind(this);

            xhr.open("GET", url, true);
            xhr.send();
          } else {
            var spFrame = defaultAvatar;

            if (url) {
              var filename = url.substring(url.lastIndexOf('/') + 1);

              if (filename.match(/avatar_[0-9][0-9].png/)) {
                var num = filename.substring(7, 8);
                var spInt = parseInt(num);

                if (spInt >= 0 && spInt <= 32) {
                  spFrame = filename.split('.')[0];
                } else {
                  spFrame = defaultAvatar;
                }
              } else {
                spFrame = defaultAvatar;
              }
            }

            spriteA.spriteFrame = AvatarAtlas.getSpriteFrame(spFrame);
          }
        } else {
          var _xhr = new XMLHttpRequest();

          _xhr.responseType = 'arraybuffer';

          _xhr.onreadystatechange = function () {
            log("xhr.readyState  " + _xhr.readyState);
            log("xhr.status  " + _xhr.status);

            if (_xhr.readyState === 4) {
              if (_xhr.status === 200) {
                saveFile(_xhr.response);
              } else {
                saveFile(null);
              }
            }
          }.bind(this);

          _xhr.open("GET", url, true);

          _xhr.send();
        }
      }

      function loadAvatarFacebook(avatarSprite, ava, atlas, prefix, leadingZeroLength, avatarDefault) {
        if (prefix === void 0) {
          prefix = 'avatar_';
        }

        if (leadingZeroLength === void 0) {
          leadingZeroLength = 0;
        }

        if (avatarDefault === void 0) {
          avatarDefault = 'avatar_01';
        }

        if (!avatarSprite || !avatarSprite.node) return;
        var defaultAvatar = atlas.getSpriteFrame(avatarDefault);
        if (!defaultAvatar) return;

        var _sframe = decodeURIComponent(ava);

        if ((ava + '').indexOf('avatar_') > -1) {
          _sframe = ava || avatarDefault;
        } else {
          if (!isNaN(ava)) {
            ava = Number.parseInt(ava);
          }

          if (lodash.isNumber(ava)) {
            // avatar start from 1
            ava += 1;

            if (leadingZeroLength > 0) {
              var zeroPad = function zeroPad(num, places) {
                return String(num).padStart(places, '0');
              };

              ava = zeroPad(ava, leadingZeroLength);
            }

            _sframe = prefix + ava;
          }
        }

        if (_sframe.indexOf('avatar_') > -1 && _sframe.indexOf("facebook") === -1 && _sframe.indexOf("http") > -1) {
          var avaId = _sframe.split('avatar_');

          var frame = defaultAvatar;

          if (avaId[1]) {
            frame = atlas.getSpriteFrame('avatar_' + avaId[1].replace('.png', ''));
          }

          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } else if (_sframe.indexOf("http") === -1) {
          var _frame = atlas.getSpriteFrame(_sframe);

          _frame = _frame ? _frame : defaultAvatar;
          avatarSprite.spriteFrame = _frame;
          return false;
        } // else if(cc.sys.isNative){
        //     getFBAvatar(_sframe, avatarSprite, defaultAvatar, atlas);
        // } 
        else {
            if (_sframe.indexOf("facebook") !== -1) {
              _sframe = _sframe.replace("http://", "https://");
            }

            assetManager.loadRemote(decodeURIComponent(ava), {
              ext: 'png'
            }, function (err, imageRes) {
              if (!avatarSprite || !avatarSprite.node) return;

              if (err) {
                avatarSprite.spriteFrame = defaultAvatar;
              } else if (imageRes instanceof Texture2D) {
                var spriteFrame = new SpriteFrame();
                spriteFrame.texture = imageRes;

                if (avatarSprite && avatarSprite.node && avatarSprite.node.getComponent) {
                  var com = avatarSprite.node.getComponent(Sprite);

                  if (!com || isValid(com, true) == false) {
                    com = avatarSprite.node.addComponent(Sprite);
                  }

                  com.spriteFrame = new SpriteFrame();
                  com.spriteFrame.texture = spriteFrame.texture;
                }
              } else {
                avatarSprite.spriteFrame = defaultAvatar;
              }
            });
            return true;
          }
      }

      function setLayerForAllChildrens(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
          it.off(Node.EventType.CHILD_ADDED);
          it.on(Node.EventType.CHILD_ADDED, function (child) {
            setLayerForAllChildrens(child, child.parent.layer);
          });
        }, function () {});
      }

      function setLayerAlls(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
        }, function () {});
      }

      function setIndexZ(node, zIndex) {
        if (!node || !node.parent) return;
        var copySiblings = node.parent.children.slice();
        node['customIndexZ'] = zIndex;
        copySiblings.sort(function (a, b) {
          return (a['customIndexZ'] || 0) - (b['customIndexZ'] || 0);
        });

        for (var index = copySiblings.length - 1; index >= 0; index--) {
          var child = copySiblings[index];

          if (child.getSiblingIndex() !== index) {
            child.setSiblingIndex(index);
          }
        }
      }

      function registerLoadHowl() {
        if (globalThis.Howler) {
          assetManager.downloader['_downloaders']['.mp3cache'] = assetManager.downloader['_downloaders']['.mp3'];

          assetManager.downloader['_downloaders']['.mp3'] = function (url, options, onComplete) {
            var howl = new globalThis.Howl({
              src: [url],
              preload: true
            });
            howl.once('load', function () {
              onComplete(null, howl);
            });
            howl.once('loaderror', function () {
              onComplete(new Error("Fail to load sound " + url), howl);
            });
          };
        }
      }

      function unregisterLoadHowl() {
        var cacheLoader = assetManager.downloader['_downloaders']['.mp3cache'];

        if (cacheLoader) {
          assetManager.downloader['_downloaders']['.mp3'] = cacheLoader;
        }
      }

      function setDeviceOrientation(isPortrait) {
        if (isPortrait === void 0) {
          isPortrait = false;
        }

        if (!sys.isNative) return;

        if (isPortrait) {
          if (sys.os == sys.OS.ANDROID) {
            log("==== Android setDeviceOrientation Portrait ====");
            var className = "com/cocos/game/AppActivity";
            var methodName = "setNativeOrientation";
            var methodSignature = "(I)V";
            native.reflection.callStaticMethod(className, methodName, methodSignature, 1);
          } else if (sys.os == sys.OS.IOS) {
            native.reflection.callStaticMethod('ViewController', 'setGamePortrait');
          }

          view.setOrientation(macro.ORIENTATION_PORTRAIT);
        } else {
          if (sys.os == sys.OS.ANDROID) {
            log("==== Android setDeviceOrientation Landscape ====");
            var _className = "com/cocos/game/AppActivity";
            var _methodName = "setNativeOrientation";
            var _methodSignature = "(I)V";
            native.reflection.callStaticMethod(_className, _methodName, _methodSignature, 0);
          } else if (sys.os == sys.OS.IOS) {
            native.reflection.callStaticMethod('ViewController', 'setGameLandScape');
          }

          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
        }
      }

      function disableButton(button) {
        button.interactable = true;
        button.interactable = false;
      }

      function getDefaultManifest() {
        return {
          "packageUrl": "",
          "remoteManifestUrl": "",
          "remoteVersionUrl": "",
          "version": "0.0.0",
          "assets": {},
          "searchPaths": []
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VersionSlot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Label, log, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Label = module.Label;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "73595x+dFJJepu1k+IdzF8R", "VersionSlot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VersionSlot = exports('VersionSlot', (_dec = ccclass('VersionSlot'), _dec2 = property(JsonAsset), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VersionSlot, _Component);

        function VersionSlot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "versionFile", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "versionText", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = VersionSlot.prototype;

        _proto.onLoad = function onLoad() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_PRODUCTION = _loadConfigAsync$getC.IS_PRODUCTION;

          if (IS_PRODUCTION) {
            this.node.active = false;
          }
        };

        _proto.start = function start() {
          log(this.versionFile);
          this.versionText.string = this.versionFile.json["version"];
        };

        return VersionSlot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "versionFile", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "versionText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Wallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './GameObject.ts', './CustomEnum.ts', './CustomType.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, log, Label, tween, v3, tweenWalletMoney, tweenMoney, disableButton, setOpacity, GameObject, WalletType, WalletString, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      log = module.log;
      Label = module.Label;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      tweenWalletMoney = module.tweenWalletMoney;
      tweenMoney = module.tweenMoney;
      disableButton = module.disableButton;
      setOpacity = module.setOpacity;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      WalletType = module.WalletType;
    }, function (module) {
      WalletString = module.WalletString;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "a1552lmLtJE+LadTbPFRq48", "Wallet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Wallet = exports('Wallet', (_dec = ccclass('Wallet'), _dec2 = property({
        type: WalletString
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Button
      }), _dec5 = property({
        type: Button
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Wallet, _GameObject);

        function Wallet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this.walletValue = [];
          _this.currentWallet = WalletType.NORMAL;
          _this.displayValues = [];
          _this.walletInited = false;

          _initializerDefineProperty(_this, "walletString", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isWalletEvent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonNormal", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonPromote", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSwitch", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletNormal", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletPromo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTrial", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletSoundId", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTopPos", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletBotPos", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walletTextPosY", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Wallet.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          _GameObject.prototype.onLoad.call(this);

          this.node.on("UPDATE_WALLET", this.updateWallet, this);
          this.node.on("SWITCH_REAL", this.switchReal, this);
          this.node.on("SWITCH_TRIAL", this.switchTrial, this);
          this.node.on("ENABLE_SWITCH", this.enableSwitch, this);
          this.node.on('LOAD_WALLET_SELECT', this.loadWalletSelect, this);
          this.node.on("UPDATE_WALLET_TYPE", this.updateWalletType, this);
          this.walletString.forEach(function (it) {
            it.displayString.string = '';
            _this2.displayValues[it.walletType] = 0;
          });
        };

        _proto.updateWallet = function updateWallet(wallets, time) {
          var _this3 = this;

          if (time === void 0) {
            time = 0.3;
          }

          this.walletString.forEach(function (it) {
            var target = wallets[it.walletType] || 0;

            if (!_this3.dataStore.isPausingWallet(it.walletType) || !_this3.walletInited) {
              log("update wallet UI " + it.walletType + " : " + target);

              _this3.eventManager.emit(EventNames.START_UPDATE_WALLET);

              if (_this3.isFormatWallet) {
                tweenWalletMoney(it.displayString, time, _this3.displayValues[it.walletType], target);
              } else {
                tweenMoney(it.displayString, time, target);
              }

              _this3.displayValues[it.walletType] = target;

              _this3.dataStore.syncWalletUI(_this3.displayValues);
            }
          });
          this.walletInited = true;
        };

        _proto.loadWalletSelect = function loadWalletSelect() {
          this.setWalletDisplay(this.dataStore.getCurrentWalletType());
        };

        _proto.updateWalletType = function updateWalletType(types) {
          log("[Wallet] types " + types);

          if (types.length >= 2 && this.config.IS_SUPPORT_EVENT) {
            this.showPromoWallet();
          }
        };

        _proto.showPromoWallet = function showPromoWallet() {
          var _this4 = this;

          this.walletPromo.active = true;
          this.buttonSwitch.node.active = true;

          if (this.currentWallet == WalletType.NORMAL) {
            this.buttonNormal.interactable = true;
            disableButton(this.buttonPromote);
          } else {
            disableButton(this.buttonNormal);
            this.buttonPromote.interactable = true;
          }

          this.walletTrial.getComponentInChildren(Label).node.position.y = this.walletTextPosY;
          this.walletNormal.getComponentInChildren(Label).node.position.y = this.walletTextPosY;
          setOpacity(this.buttonSwitch.node, 1);
          tween(this.walletNormal).to(0.15, {
            position: v3(this.walletNormal.position.x, this.walletTopPos, 0)
          }).call(function () {
            _this4.walletTrial.setPosition(_this4.walletNormal.position);

            _this4.fadeIn(_this4.buttonSwitch, 0.1);
          }).start();
          tween(this.walletPromo).to(0.15, {
            position: v3(this.walletPromo.position.x, this.walletBotPos, 0)
          }).start();
        };

        _proto.switchTrial = function switchTrial() {
          this.walletNormal.active = false;
          this.walletTrial.active = true;
          this.buttonSwitch.interactable = false;
          this.buttonNormal.interactable = true;
          this.buttonPromote.interactable = false;
        };

        _proto.switchReal = function switchReal() {
          this.walletNormal.active = true;
          this.walletTrial.active = false;
          this.buttonSwitch.interactable = true;
          this.setWalletDisplay(this.dataStore.getCurrentWalletType());
        };

        _proto.enableSwitch = function enableSwitch(isEnable) {
          this.buttonSwitch.interactable = isEnable;
        };

        _proto.switchWallet = function switchWallet() {
          if (this.dataStore.isAutoSpinNormal) return;
          this.soundPlayer.playSFXClick();
          this.buttonSwitch.interactable = false;

          if (this.currentWallet == WalletType.NORMAL) {
            this.currentWallet = WalletType.PROMOTE;
            this.dataStore.switchWallet(this.currentWallet);
            this.eventManager.emit(EventNames.SWITCH_WALLET, WalletType.PROMOTE);
          } else {
            this.currentWallet = WalletType.NORMAL;
            this.dataStore.switchWallet(this.currentWallet);
            this.eventManager.emit(EventNames.SWITCH_WALLET, WalletType.NORMAL);
          }

          this.setWalletDisplay(this.currentWallet);
          this.buttonSwitch.interactable = true;

          if (this.walletSoundId) {
            this.walletSoundId && this.soundPlayer && this.soundPlayer.playSfx(this.walletSoundId);
          } else {
            this.soundPlayer && this.soundPlayer.playSFXClick();
          }
        };

        _proto.setWalletDisplay = function setWalletDisplay(type) {
          this.currentWallet = type;

          if (type == WalletType.NORMAL) {
            this.buttonNormal.interactable = true;
            this.buttonPromote.interactable = false;
          } else {
            this.buttonNormal.interactable = false;
            this.buttonPromote.interactable = true;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off("UPDATE_WALLET", this.updateWallet, this);
        };

        return Wallet;
      }(GameObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "walletString", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isWalletEvent", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonNormal", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonPromote", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonSwitch", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "walletNormal", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "walletPromo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "walletTrial", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "walletSoundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "walletTopPos", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "walletBotPos", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -25;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "walletTextPosY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSoundPlayer.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, AudioClip, warn, log, game, error, tween;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      warn = module.warn;
      log = module.log;
      game = module.game;
      error = module.error;
      tween = module.tween;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "665a6jOt8tNUoF71xXbg++z", "WebSoundPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WebSoundPlayer = exports('WebSoundPlayer', (_dec = ccclass('WebSoundPlayer'), _dec(_class = /*#__PURE__*/function () {
        function WebSoundPlayer() {
          this.musicMap = {};
          this.sfxMap = {};
          this.currentMusic = null;
          this._musicTween = null;
          this._sfxList = [];
          this.loadedSoundMap = {};
          this.musicInstance = null;
          this.sfxCachedOnHide = [];
          this.sfxCacheGesture = [];
          this.howlMap = {};
          this.totalSound = 0;
          this.onWebSoundLoaded = null;
          this._hasAudioContext = false;
          this._isMusicPlaying = false;
          this._gamePaused = false;
          this._soundLoaded = [];
          this._isThumbMode = false;
          this._playedInitMusic = false;
          this._resume_sound_action = null;
          this.playOneShotTweens = [];
        }

        var _proto = WebSoundPlayer.prototype;

        _proto.init = function init() {} //merge more sound from dynamic loading
        ;

        _proto.loadDynamicSounds = function loadDynamicSounds(sfxList, callback) {
          this.loadSfxList(sfxList, callback);
        };

        _proto.loadMusicList = function loadMusicList(list, callback) {
          var _this = this;

          list.forEach(function (soundObj) {
            _this.musicMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        };

        _proto.loadSfxList = function loadSfxList(list, callback) {
          var _this2 = this;

          this._sfxList = this._sfxList.concat(list);
          list.forEach(function (soundObj) {
            _this2.sfxMap[soundObj.soundId] = soundObj;
          });
          this.loadSoundList(list, callback);
        };

        _proto.setThumbMode = function setThumbMode(isThumbMode) {
          this._isThumbMode = isThumbMode;
        };

        _proto.loadSoundList = function loadSoundList(soundList, callback) {
          var _this3 = this;

          var soundInfos = [];
          var loadTasks = [];
          this.loadedSoundMap = {};
          soundList.forEach(function (soundObj) {
            var clip = soundObj.audioFile;

            if (clip._nativeAsset instanceof globalThis.Howl) {
              _this3.howlMap[clip._uuid] = clip._nativeAsset;

              _this3._soundLoaded.push(clip._uuid);
            } else if (clip instanceof AudioClip) {
              soundInfos.push({
                uuid: clip._uuid,
                name: clip.name,
                src: clip['_meta'].url
              });
              _this3.loadedSoundMap[clip.name] = false;
            }
          });
          soundInfos.forEach(function (info) {
            if (_this3._soundLoaded.indexOf(info.uuid) < 0) {
              var task = new Promise(function (resolve, reject) {
                var howl = new globalThis.Howl({
                  src: [info.src],
                  preload: true
                });
                howl.once('load', function () {
                  _this3.howlMap[info.uuid] = howl;
                  resolve(true);
                });
                howl.once('loaderror', function () {
                  reject();
                });
              });
              loadTasks.push(task);

              _this3._soundLoaded.push(info.uuid);
            } else {
              warn('theres duplicated sound in list');
            }
          });
          Promise.all(loadTasks).then(function () {
            callback && callback();
          });
        };

        _proto.skipGesture = function skipGesture() {
          this._hasAudioContext = true;
        };

        _proto.resumeWithGesture = function resumeWithGesture() {
          this._hasAudioContext = true;

          if (this.musicInstance) {
            this.musicInstance.stop();

            if (this._isMusicPlaying) {
              this.musicInstance.play();
            }
          }

          this.sfxCacheGesture.forEach(function (sound) {
            var position = (Date.now() - sound.startTime) / 1000;
            var clip = sound.clip;

            if (sound.loop === true) {
              position = position % clip.duration();
            }

            if (position < clip.duration()) {
              clip.volume(sound.volume);
              clip.loop(sound.loop);
              var id = clip.play();
              clip.seek(position, id);
              log("[WebSoundPlayer] play resume sound " + sound.name);
            }
          });
          this.sfxCacheGesture = [];
        };

        _proto.onEventHide = function onEventHide() {
          this._gamePaused = true;
          if (!this._hasAudioContext) return;
          this.pauseMusic();
          this.pauseEffects();
        };

        _proto.onEventShow = function onEventShow() {
          if (!this._gamePaused) return;
          this._gamePaused = false;
          if (!this._hasAudioContext) return;
          this.resumeAllSounds();
        };

        _proto.resumeAllSounds = function resumeAllSounds() {
          var _this4 = this;

          var Howler = globalThis.Howler;

          if (Howler && Howler.ctx && Howler.ctx.state !== "running") {
            if (this._resume_sound_action) {
              clearTimeout(this._resume_sound_action);
            }

            this._resume_sound_action = setTimeout(function () {
              _this4._resume_sound_action = null;

              _this4.resumeContext().then(function () {
                log("resume context successfully");
              })["catch"](function (e) {
                log("resume context fail with error " + e);
              });

              _this4.resumeAllSounds();
            }, 0.02);
            return;
          }

          if (this._playedInitMusic) {
            log("WebSoundPlayer: resumeMusic successfully");
            this.resumeMusic();
          }

          this.resumeEffects();
        };

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          var oldMusic = this.musicInstance;
          this._isMusicPlaying = true;
          var newMusic = this.musicMap[id];
          var musicInstance = newMusic ? this.howlMap[newMusic.audioFile._uuid] : null;

          if (!musicInstance) {
            warn("[WebSoundPlayer] invalid Music:", id);
            return;
          }

          this.currentMusic = newMusic;
          this.musicInstance = musicInstance;

          if (this.musicInstance === oldMusic && this.musicInstance.playing()) {
            log("[WebSoundPlayer] duplicate play music " + id);
            return;
          }

          if (oldMusic && oldMusic.playing()) {
            oldMusic.stop();
          }

          this.musicInstance.loop(loop);
          this.musicInstance.volume(volume);

          if (this._hasAudioContext && !game.isPaused()) {
            this.musicInstance.play();
          }

          this._playedInitMusic = true;
          log("[WebSoundPlayer] play music " + id);
        };

        _proto.changeMusic = function changeMusic(id, loop, volume, mixTime) {
          var _this5 = this;

          if (volume === void 0) {
            volume = 1;
          }

          if (mixTime === void 0) {
            mixTime = 1;
          }

          var newMusic = this.musicMap[id];

          if (!newMusic || newMusic === this.currentMusic) {
            error('invalid music', {
              id: id,
              currentId: this.currentMusic.soundId
            });
            return;
          }

          var oldMusicInstance = this.musicInstance;
          this.currentMusic = newMusic;
          this.musicInstance = this.howlMap[newMusic.audioFile._uuid];
          this.musicInstance.play();
          this.musicInstance.loop(loop);

          if (oldMusicInstance && oldMusicInstance.playing()) {
            var currentVolume = oldMusicInstance.volume();
            oldMusicInstance.fade(currentVolume, 0, mixTime * 1000);
            this.musicInstance.fade(0, volume, mixTime * 1000);
            this._musicTween && this._musicTween.stop();
            this._musicTween = tween(this).delay(mixTime).call(function () {
              _this5._musicTween = null;
              oldMusicInstance.stop();
            }).start();
          }
        };

        _proto.getCurrentMusic = function getCurrentMusic() {
          return this.musicInstance;
        };

        _proto.pauseMusic = function pauseMusic() {
          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.pause();
          }
        };

        _proto.resumeMusic = function resumeMusic() {
          if (this.musicInstance && this._isMusicPlaying) {
            this.musicInstance.play();
          }
        };

        _proto.stopMusic = function stopMusic() {
          log("[WebSoundPlayer] stop music");
          this._isMusicPlaying = false;

          if (this.musicInstance && this.musicInstance.playing()) {
            this.musicInstance.stop();
          }
        };

        _proto.muteMusic = function muteMusic() {
          if (this.musicInstance) {
            this.musicInstance.volume(0);
          }
        };

        _proto.unmuteMusic = function unmuteMusic(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          if (this.musicInstance) {
            this.musicInstance.volume(volume);
          }
        };

        _proto.playSfx = function playSfx(sfx, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          var soundObj = this.sfxMap[sfx];

          if (!soundObj) {
            warn("playSfx: invalid sfx", sfx);
            return null;
          }

          var clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip) {
            if (this._hasAudioContext) {
              if (clip.playing()) {
                clip.stop();
              }

              clip.loop(loop);
              clip.volume(volume);
              clip.play();

              if (this._gamePaused) {
                clip.pause();
              }
            } else {
              this.sfxCacheGesture.push({
                name: sfx,
                clip: clip,
                startTime: Date.now(),
                volume: volume,
                loop: loop
              });
            }

            return {
              clip: clip
            };
          }
        };

        _proto.resumeContext = function resumeContext() {
          var Howler = globalThis.Howler;

          if (Howler.ctx.state == "interrupted") {
            return Howler.ctx.resume();
          } else {
            return Howler.ctx.suspend().then(function () {
              return Howler.ctx.resume();
            });
          }
        };

        _proto.playSfxOneShot = function playSfxOneShot(sfx, volume, loop) {
          var _this6 = this;

          if (loop === void 0) {
            loop = false;
          }

          if (!this.sfxMap.hasOwnProperty(sfx)) return warn("playSfxOneShot: invalid sfx", sfx);
          var soundObj = this.sfxMap[sfx];
          var clip = this.howlMap[soundObj.audioFile._uuid];

          if (!clip) {
            return warn("playSfxOneShot: invalid howl", soundObj);
          }

          var id;

          if (this._hasAudioContext) {
            clip.volume(volume);
            id = clip.play();
            clip.loop(loop, id);
            this._gamePaused && clip.pause(id);
          } else {
            this.sfxCacheGesture.push({
              name: sfx,
              clip: clip,
              startTime: Date.now(),
              volume: volume,
              loop: loop
            });
          }

          var duration = clip.duration();

          if (duration > 0) {
            this.stopAndRemoveTweenOnShot(clip);
            var sfxOneShotTween = tween(this).delay(duration).call(function () {
              _this6.stopAndRemoveTweenOnShot(clip);

              if (clip) clip.stop();
            }).start();
            var clipTween = {
              clip: clip,
              tweenOneShot: sfxOneShotTween
            };
            this.playOneShotTweens.push(clipTween);
          }

          return {
            clip: clip,
            id: id
          };
        };

        _proto.stopAndRemoveTweenOnShot = function stopAndRemoveTweenOnShot(_clip) {
          var availableTweenObject = this.hasClipOneShotTween(_clip);

          if (availableTweenObject) {
            var index = availableTweenObject.index,
                tweenOneShot = availableTweenObject.tweenOneShot;

            if (tweenOneShot) {
              tweenOneShot.stop();
            }

            this.playOneShotTweens.splice(index, 1);
          }
        };

        _proto.hasClipOneShotTween = function hasClipOneShotTween(_clip) {
          for (var i = 0; i < this.playOneShotTweens.length; i++) {
            var _tweenObj = this.playOneShotTweens[i];

            if (_tweenObj) {
              var clip = _tweenObj.clip,
                  tweenOneShot = _tweenObj.tweenOneShot;

              if (clip == _clip) {
                return {
                  index: i,
                  tweenOneShot: tweenOneShot
                };
              }
            }
          }

          return null;
        };

        _proto.stopSfxOneShot = function stopSfxOneShot(sfxData) {
          if (!sfxData) {
            return warn("stopSfxOneShot invalid data", sfxData);
          }

          var clip = sfxData.clip,
              id = sfxData.id;
          clip && clip.stop(id);

          this._removeClipFromGestureList(clip);
        };

        _proto.stopSfx = function stopSfx(sfx) {
          var soundObj = this.sfxMap[sfx];

          if (soundObj) {
            var clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              if (clip.playing()) {
                clip.stop();
              } else {
                log(sfx + " is not playing");
              }

              this._removeClipFromGestureList(clip);
            }
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          var _this7 = this;

          this._sfxList.forEach(function (sfx) {
            _this7.stopSfx(sfx.soundId);
          });
        };

        _proto.pauseEffects = function pauseEffects() {
          var _this8 = this;

          this._sfxList.forEach(function (it) {
            var clip = _this8.howlMap[it.audioFile._uuid];

            if (clip && clip.playing()) {
              clip.pause();

              _this8.sfxCachedOnHide.push(clip);
            }
          });
        };

        _proto.resumeEffects = function resumeEffects() {
          this.sfxCachedOnHide.forEach(function (it) {
            it.play();
          });
          this.sfxCachedOnHide = [];
        };

        _proto.resumeEffect = function resumeEffect(sfx) {
          var soundObj = this.sfxMap[sfx];
          var clip = this.howlMap[soundObj.audioFile._uuid];

          if (clip && clip.playing()) {
            clip.play();
          }
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          var _this9 = this;

          this._sfxList.forEach(function (sfx) {
            _this9._setSfxVolume(sfx.soundId, volume);
          });
        };

        _proto.fadeMusicTo = function fadeMusicTo(duration, volume) {
          if (this.musicInstance) {
            var currentVolume = this.musicInstance.volume();
            duration *= 1000;

            if (this.musicInstance.playing()) {
              this.musicInstance.fade(currentVolume, volume, duration);
            } else {
              this.musicInstance.volume(volume);
            }
          }
        };

        _proto.fadeSoundTo = function fadeSoundTo(sfx, duration, volume) {
          if (this.sfxMap.hasOwnProperty(sfx)) {
            var soundObj = this.sfxMap[sfx];
            var clip = this.howlMap[soundObj.audioFile._uuid];
            var currentVolume = clip.volume() || 0;
            duration *= 1000;

            if (clip.playing()) {
              clip.fade(currentVolume, volume, duration);
            } else {
              clip.volume(volume);
            }
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopAllEffects();
          this.stopMusic();
        };

        _proto.playHowl = function playHowl(howl, options, id) {
          if (id === void 0) {
            id = -1;
          }

          if (options.loop) howl.loop(options.loop);
          if (options.volume) howl.volume(options.volume);
          if (options.offset) howl.seek(options.offset);
          return id >= 0 ? howl.play(id) : howl.play();
        };

        _proto._setSfxVolume = function _setSfxVolume(sfx, volume) {
          var soundObj = this.sfxMap[sfx];

          if (soundObj) {
            var clip = this.howlMap[soundObj.audioFile._uuid];

            if (clip) {
              clip.volume(volume);
            }
          }
        };

        _proto._removeClipFromGestureList = function _removeClipFromGestureList(clip) {
          if (this.sfxCacheGesture && this.sfxCacheGesture.length > 0 && clip) {
            var index = this.sfxCacheGesture.findIndex(function (i) {
              return i.clip == clip;
            });
            index >= 0 && this.sfxCacheGesture.splice(index, 1);
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var i in this.howlMap) {
            this.howlMap[i].unload();
          }

          if (this._musicTween) {
            this._musicTween.stop();
          }

          this._soundLoaded = [];

          if (this._resume_sound_action) {
            clearTimeout(this._resume_sound_action);
          }

          for (var _i = 0; _i < this.playOneShotTweens.length; _i++) {
            var onShotTweenObj = this.playOneShotTweens[_i];

            if (onShotTweenObj && onShotTweenObj.tweenOneShot) {
              onShotTweenObj.tweenOneShot.stop();
            }
          }

          this.playOneShotTweens = [];
        };

        _proto._testPlayMusic = function _testPlayMusic() {
          var _this10 = this;

          var musicId = "BGM_MAIN";
          tween(this).call(function () {
            _this10.stopMusic();
          }).delay(0.5).call(function () {
            _this10.playMusic(musicId, true);

            log(_this10.musicInstance.seek());
          }).delay(1).call(function () {
            _this10.playMusic(musicId, true);
          }).call(function () {
            if (Math.round(_this10.musicInstance.seek()) !== 1) {
              log("FAIL!");
            } else {
              log("passed");
            }
          }).start();
        };

        return WebSoundPlayer;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinAmount.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameObject.ts', './utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, error, log, GameObject, formatMoney, fadeOut, tweenMoney;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      error = module.error;
      log = module.log;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      formatMoney = module.formatMoney;
      fadeOut = module.fadeOut;
      tweenMoney = module.tweenMoney;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0199dlcTOhLAKY3Gsr8BcpY", "WinAmount", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WinAmount = exports('WinAmount', (_dec = ccclass('WinAmount'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(WinAmount, _GameObject);

        function WinAmount() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GameObject.call.apply(_GameObject, [this].concat(args)) || this;
          _this._currentValue = 0;
          _this._winValue = void 0;
          _this._callBackOnComplete = void 0;
          _this._tweenValue = void 0;
          _this._tweenFade = void 0;

          _initializerDefineProperty(_this, "labelWinAmount", _descriptor, _assertThisInitialized(_this));

          _this.isDebug = true;
          return _this;
        }

        var _proto = WinAmount.prototype;

        _proto._updateLabelWinAmount = function _updateLabelWinAmount() {
          this.labelWinAmount.string = this.currentValue > 0 ? "" + formatMoney(this._currentValue) : "";
        };

        _proto.onLoad = function onLoad() {
          _GameObject.prototype.onLoad.call(this);

          this.node.on("UPDATE_WIN_AMOUNT", this.updateWinAmount, this);
          this.node.on('FAST_UPDATE_WIN_AMOUNT', this.fastUpdateWinAmount, this);
          this.node.on('RESET_NUMBER', this.clearWinAmount, this);
          this.node.on('FADE_OUT_NUMBER', this.fadeOutNumber, this);
          this.labelWinAmount.string = '';
        };

        _proto.fastUpdateWinAmount = function fastUpdateWinAmount(_ref) {
          var value = _ref.value,
              time = _ref.time;
          if (!value) value = this._winValue;

          if (value < this._currentValue || value < this._winValue) {
            error("Logic fail: Could not speed up to the smaller value", {
              current: this._currentValue,
              endValue: this._winValue,
              fastUpdateValue: value
            });
            return;
          }

          this._tweenWinAmount(value, time);
        };

        _proto.clearWinAmount = function clearWinAmount() {
          if (this.isDebug) {
            log("clearWinAmount");
          }

          this._resetLabel();

          this.currentValue = 0;
          this.labelWinAmount.string = "";
          this._winValue = 0;
        };

        _proto.fadeOutNumber = function fadeOutNumber(time) {
          var _this2 = this;

          if (time === void 0) {
            time = 1;
          }

          if (!this.labelWinAmount || this._winValue <= 0) return;
          this.node.isFading = true;

          if (this._tweenValue) {
            this.currentValue = this._winValue;
            this.labelWinAmount.string = formatMoney(this.currentValue);
          }

          this.stopTweenValue();
          this.resetCallBack();
          this.scheduleOnce(function () {
            _this2._tweenFade = fadeOut(_this2.labelWinAmount.node, time, {
              onComplete: function onComplete() {
                _this2.node.isFading = false;

                _this2.clearWinAmount();
              }
            });
          }, 0.1);
        };

        _proto.updateWinAmount = function updateWinAmount(_ref2, callback) {
          var value = _ref2.value,
              time = _ref2.time,
              isLastest = _ref2.isLastest;

          if (this._tweenFade) {
            this._tweenFade.stop();
          }

          if (isLastest && this.dataStore) {
            value = this.dataStore.playSession.winAmount;
          }

          if (value < this._currentValue || value < this._winValue) {
            log("Logic fail somewhere, script clear winamount have not ran yet", {
              current: this._currentValue,
              endValue: this._winValue,
              fastUpdateValue: value
            });
            this.clearWinAmount();
          }

          this._callBackOnComplete = callback;
          this._winValue = value;
          time = this._currentValue === value ? 0 : time;

          this._tweenWinAmount(value, time);
        };

        _proto._tweenWinAmount = function _tweenWinAmount(value, time) {
          var _this3 = this;

          this._resetLabel();

          if (time === 0) {
            this.currentValue = value;
            this.labelWinAmount.string = formatMoney(this.currentValue);
            this.resetCallBack();
            log("show win Amount instantly", {
              value: value,
              time: time
            });
            return;
          }

          this._tweenValue = tweenMoney(this.labelWinAmount, time, value, {
            onComplete: function onComplete() {
              _this3.resetCallBack();

              _this3._tweenValue = null;
            }
          });
        };

        _proto._resetLabel = function _resetLabel() {
          this.stopTweenFade();
          this.stopTweenValue();
          this.setOpacity(this.labelWinAmount.node, 255);
          this.node.isFading = false;
        };

        _proto.resetCallBack = function resetCallBack() {
          this._callBackOnComplete && this._callBackOnComplete();
          this._callBackOnComplete = null;
        };

        _proto.stopTweenFade = function stopTweenFade() {
          this._tweenFade && this._tweenFade.stop();
          this._tweenFade = null;
        };

        _proto.stopTweenValue = function stopTweenValue() {
          this._tweenValue && this._tweenValue.stop();
          this._tweenValue = null;
        };

        _proto.onDestroy = function onDestroy() {
          this.stopTweenFade();
          this.stopTweenValue();
        };

        _createClass(WinAmount, [{
          key: "currentValue",
          get: function get() {
            return this._currentValue;
          },
          set: function set(value) {
            if (this._currentValue !== value) {
              this._currentValue = value;

              this._updateLabelWinAmount();
            }
          }
        }]);

        return WinAmount;
      }(GameObject), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelWinAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystem2D, SpriteFrame, Label, tween, Vec3, Sprite, log, SlotUIScene, formatMoney, fadeOut, WinEffectLevel, PerformanceLevel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      log = module.log;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      formatMoney = module.formatMoney;
      fadeOut = module.fadeOut;
    }, function (module) {
      WinEffectLevel = module.WinEffectLevel;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "4a1b71CROJMQbYrRztOGsp4", "WinEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var WinEffect = exports('WinEffect', (_dec = ccclass('WinEffect'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: ParticleSystem2D
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(WinEffect, _SlotUIScene);

        function WinEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.isShowFastEffect = false;
          _this.isShowNormalEffect = false;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.callback = null;
          _this.label = void 0;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.megaWinAmount = 0;
          _this.superWinAmount = 0;
          _this.nodeTween = void 0;
          _this.winAmountTween = void 0;
          _this.titleTween = void 0;
          _this.content = void 0;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlayNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastParticle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinDur", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinDur", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinDur", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaRate", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superRate", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animDuration", _descriptor15, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          return _this;
        }

        var _proto = WinEffect.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.label = this.winAmount.getComponentInChildren(Label);
        };

        _proto.enter = function enter() {
          this.eventManager.emit(EventNames.BIGWIN_START);
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].BIG_WIN_ANIMATION;
          var modeTurbo = this.dataStore.modeTurbo;
          if (this.coinsEffect) this.setOpacity(this.coinsEffect, 255);
          modeTurbo ? this.showFastEffectWin() : this.showEffectWin();
        };

        _proto.showFastEffectWin = function showFastEffectWin() {
          var _this2 = this; // turbo


          if (this.isShowFastEffect) {
            this.callback && this.callback();
            this.callback = null;
            return;
          }

          this.isShowFastEffect = true;
          this.setOpacity(this.winInfo, 0);

          if (this.overlayNode) {
            this.overlayNode.active = false;
          }

          this.fastParticle && this.fastParticle.resetSystem();
          this.callback && this.callback();
          this.callback = null;
          this.nodeTween && this.nodeTween.stop();
          this.nodeTween = tween(this.node).delay(1).call(function () {
            _this2.fastParticle && _this2.fastParticle.stopSystem();
          }).delay(2).call(function () {
            _this2.exit();
          }).start();
        };

        _proto.showEffectWin = function showEffectWin() {
          this.isShowNormalEffect = true;

          if (this.overlayNode) {
            this.overlayNode.active = true;
          }

          this.setOpacity(this.winInfo, 255);
          this.playSoundStart();
          this.winAmountTween = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.titleTween = tween(this.title).repeatForever(tween().to(0.5, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.5, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.initValue();
          this.startParticle();
          this.startUpdateWinAmount();
        };

        _proto.playSoundStart = function playSoundStart() {
          var _this3 = this;

          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllAudio();
          this.soundPlayer.playSfx('BIG_WIN');
          this.scheduleOnce(function () {
            _this3.soundPlayer.playSfx('BIG_WIN_LOOP', true);
          }, 2);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllEffects();
          this.soundPlayer.playSfx('BIG_WIN_END');
        };

        _proto.initValue = function initValue() {
          this.winInfo.setScale(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          if (this.title) this.title.getComponent(Sprite).spriteFrame = this.titleFrame[0];
          var _this$content = this.content,
              winType = _this$content.winType,
              bigWinConfig = _this$content.bigWinConfig,
              currentBetData = _this$content.currentBetData;
          var listConfig = bigWinConfig ? bigWinConfig.split(',') : [];

          if (winType && bigWinConfig) {
            this.megaWinAmount = currentBetData * listConfig[WinEffectLevel.MEGA];
            this.superWinAmount = currentBetData * listConfig[WinEffectLevel.SUPER];

            switch (Number(WinEffectLevel[winType])) {
              case WinEffectLevel.SUPER:
                this.animDuration = this.superWinDur;
                break;

              case WinEffectLevel.MEGA:
                this.animDuration = this.megaWinDur;
                break;

              default:
                this.animDuration = this.bigWinDur;
                break;
            }

            if (winType) {
              log('show ' + winType + ' in ' + this.animDuration + ' second', ' with config: ', listConfig);
            }
          } else {
            this.megaWinAmount = currentBetData * this.megaRate;
            this.superWinAmount = currentBetData * this.superRate;
          }

          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
        };

        _proto.bindQuickShow = function bindQuickShow() {
          var _this4 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this4.skippable = true;
          }).delay(this.animDuration - this.delayShowTime).call(function () {
            _this4.skippable = false;
          }).start();
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('START_PARTICLE');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount() {
          var _this5 = this;

          var reverseEasing = function reverseEasing(easing) {
            return function (t) {
              return 1 - easing(1 - t);
            };
          };

          var speedUpEasing = function speedUpEasing(t) {
            return t * t;
          }; // constant accelerated


          var slowDownEasing = reverseEasing(function (t) {
            return t * t;
          });
          var halfAmount = 0.5 * this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(0.5 * this.animDuration, {
            currentValue: halfAmount
          }, {
            easing: speedUpEasing
          }).to(0.5 * this.animDuration, {
            currentValue: this.content.winAmount
          }, {
            easing: slowDownEasing
          }).delay(0.5).call(function () {
            _this5.skippable = false;
            _this5.nodeTween = null;

            _this5.finish();
          }).start();
        };

        _proto.update = function update(dt) {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);

          if (this.currentValue >= this.superWinAmount && this.currentTitle == 1) {
            this.changeTitle(2);
          } else if (this.currentValue >= this.megaWinAmount && this.currentTitle == 0) {
            this.changeTitle(1);
          }
        };

        _proto.changeTitle = function changeTitle(index) {
          var _this6 = this;

          this.currentTitle = index;
          if (!this.title) return;
          this.titleTween = tween(this.title).to(0.2, {
            scale: new Vec3(1.5, 1.5, 1.5)
          }).call(function () {
            _this6.title.getComponent(Sprite).spriteFrame = _this6.titleFrame[index];
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            tween(_this6.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }).start();
        };

        _proto.onClick = function onClick() {
          var _this7 = this;

          if (!this.isUpdating || this.speedUp) return;
          if (!this.skippable) return;
          this.speedUp = true;
          this.winAmountTween.stop();
          var scaleTime = 0.13;
          tween(this.winAmount).repeatForever(tween().to(scaleTime, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(scaleTime, {
            scale: new Vec3(1, 1, 1)
          })).start();

          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }

          this.currentValue = this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(1, {
            currentValue: this.content.winAmount
          }).call(function () {
            _this7.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect || this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('STOP_PARTICLE');
        };

        _proto.finish = function finish() {
          var _this8 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.winAmountTween && this.winAmountTween.stop();
          this.titleTween && this.titleTween.stop();
          this.nodeTween && this.nodeTween.stop();
          this.stopParticle();
          this.playSoundEnd();
          tween(this.winInfo).delay(this.delayShowTime).call(function () {
            fadeOut(_this8.winInfo, _this8.hideTime);
            if (_this8.coinsEffect) _this8.setOpacity(_this8.coinsEffect, 0);
          }).delay(this.hideTime).call(function () {
            _this8.label.string = '';

            _this8.exit();

            _this8.soundPlayer && _this8.soundPlayer.stopAllAudio();
            _this8.soundPlayer && _this8.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.exit = function exit() {
          this.soundPlayer && this.soundPlayer.stopAllEffects();
          this.eventManager.emit(EventNames.BIGWIN_END);

          _SlotUIScene.prototype.exit.call(this);

          this.isShowFastEffect = false;
          this.isShowNormalEffect = false;
        };

        _proto.onDisable = function onDisable() {
          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }
        };

        return WinEffect;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlayNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fastParticle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "titleFrame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "bigWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "megaWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "superWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 8;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "megaRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "superRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [integer, integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "animDuration", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 9;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WinEffectv2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotUIScene.ts', './utils.ts', './CustomEnum.ts', './EventNames.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystem2D, SpriteFrame, Label, sp, Event, tween, Vec3, Sprite, SlotUIScene, fadeIn, formatMoney, WinEffectLevel, PerformanceLevel, EventNames;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      sp = module.sp;
      Event = module.Event;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
    }, function (module) {
      SlotUIScene = module.SlotUIScene;
    }, function (module) {
      fadeIn = module.fadeIn;
      formatMoney = module.formatMoney;
    }, function (module) {
      WinEffectLevel = module.WinEffectLevel;
      PerformanceLevel = module.PerformanceLevel;
    }, function (module) {
      EventNames = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25;

      cclegacy._RF.push({}, "e778f2vnhZK1YyKBd7vAXKT", "WinEffectv2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var WinEffectv2 = exports('WinEffectv2', (_dec = ccclass('WinEffectv2'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: ParticleSystem2D
      }), _dec8 = property({
        type: SpriteFrame
      }), _dec9 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SlotUIScene) {
        _inheritsLoose(WinEffectv2, _SlotUIScene);

        function WinEffectv2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SlotUIScene.call.apply(_SlotUIScene, [this].concat(args)) || this;
          _this.isUpdating = false;
          _this.speedUp = false;
          _this.skippable = false;
          _this.callback = null;
          _this.label = void 0;
          _this.currentValue = 0;
          _this.currentTitle = 0;
          _this.megaWinAmount = 0;
          _this.superWinAmount = 0;
          _this.nodeTween = void 0;
          _this.winAmountTween = void 0;
          _this.titleTween = void 0;
          _this.content = void 0;
          _this.canFinish = false;

          _initializerDefineProperty(_this, "winAmount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "overlayNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinsEffect", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fastParticle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "winAnim", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinDur", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinDur", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinDur", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaRate", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superRate", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayShowTime", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delayHideTime", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideTime", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinSound", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinSound", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinSound", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinAnimIdle", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bigWinAnimStart", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinAnimIdle", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "megaWinAnimStart", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinAnimIdle", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "superWinAnimStart", _descriptor25, _assertThisInitialized(_this));

          _this.animationLevel = 2;
          _this.winAnimSkeleton = null;
          _this.isSkipEffect = false;
          _this.winSound = 'BIG_WIN';
          return _this;
        }

        var _proto = WinEffectv2.prototype;

        _proto.onLoad = function onLoad() {
          _SlotUIScene.prototype.onLoad.call(this);

          this.label = this.winAmount.getComponentInChildren(Label);
          if (this.winAnim) this.winAnimSkeleton = this.winAnim.getComponent(sp.Skeleton);
        };

        _proto.enter = function enter() {
          this.mainDirector.currentGameMode.emit('SPIN_DISABLE');
          this.eventManager.emit(EventNames.BIGWIN_START);
          var performanceLvl = this.dataStore && this.dataStore.performanceLevel || 'HIGH_PERFORMANCE_LV';
          this.animationLevel = this.config[performanceLvl].BIG_WIN_ANIMATION;
          if (this.coinsEffect) this.setOpacity(this.coinsEffect, 255);
          this.showEffectWin();

          if (!this.dataStore.isTrialMode) {
            var updatedEvent = new Event('NOTIFY_OPEN_BIGWIN', true);
            updatedEvent.winAmount = this.content.winAmount;
            updatedEvent.winType = this.getWinType();
            updatedEvent.gameId = this.config.GAME_ID;
            this.node.dispatchEvent(updatedEvent);
          }
        };

        _proto.showEffectWin = function showEffectWin() {
          var _this2 = this;

          if (this.overlayNode) this.overlayNode.active = true;
          this.setOpacity(this.winInfo, 1);
          fadeIn(this.winInfo, this.delayShowTime);
          this.winAmountTween = tween(this.winAmount).repeatForever(tween().to(0.2, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          })).start();

          if (this.title) {
            this.titleTween = tween(this.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }

          this.initValue();
          this.playSoundStart();
          tween(this.node).delay(this.delayShowTime).call(function () {
            _this2.startParticle();

            _this2.playCoinSound();

            _this2.startUpdateWinAmount('BIG_WIN');

            _this2.setAnimation(_this2.bigWinAnimStart, _this2.bigWinAnimIdle);
          }).start();
        };

        _proto.initValue = function initValue() {
          this.canFinish = false;
          this.winInfo.setScale(1, 1, 1);
          this.currentValue = 0;
          this.currentTitle = 0;
          this.label.string = '';
          if (this.title) this.title.getComponent(Sprite).spriteFrame = this.titleFrame[0];
          var _this$content = this.content,
              currentBetData = _this$content.currentBetData,
              bigWinConfig = _this$content.bigWinConfig;
          var winRates = [];

          if (bigWinConfig) {
            winRates = bigWinConfig.split(',');
            this.megaRate = winRates[WinEffectLevel.MEGA] || this.megaRate;
            this.superRate = winRates[WinEffectLevel.SUPER] || this.superRate;
          }

          this.megaWinAmount = currentBetData * Number(this.megaRate);
          this.superWinAmount = currentBetData * Number(this.superRate);
          this.isUpdating = true;
          this.speedUp = false;
          this.bindQuickShow();
          this.isSkipEffect = this.content.winAmount >= this.superWinAmount * 2;
          this.coinsEffect.emit('RESET_COIN_EFFECT');
        };

        _proto.playSoundStart = function playSoundStart() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllAudio();
          this.winSound = this.bigWinSound;

          if (this.content.winAmount >= this.superWinAmount) {
            if (this.superWinSound) this.winSound = this.superWinSound;
          } else if (this.content.winAmount >= this.megaWinAmount) {
            if (this.megaWinSound) this.winSound = this.megaWinSound;
          }

          this.soundPlayer.playSfx(this.winSound);
        };

        _proto.playSoundEnd = function playSoundEnd() {
          if (!this.soundPlayer) return;
          this.soundPlayer.stopAllEffects();
        };

        _proto.getWinType = function getWinType() {
          var winType = 'BIG';

          if (this.content.winAmount > this.superWinAmount) {
            winType = 'SUPER';
          } else if (this.content.winAmount > this.megaWinAmount) {
            winType = 'MEGA';
          }

          return winType;
        };

        _proto.playCoinSound = function playCoinSound() {};

        _proto.bindQuickShow = function bindQuickShow() {
          var _this3 = this;

          this.skippable = false;
          tween(this.node).delay(this.hideTime).call(function () {
            _this3.skippable = true;
          }).delay(this.bigWinDur + this.megaWinDur + this.superWinDur).call(function () {
            _this3.skippable = false;
          }).start();
        };

        _proto.startParticle = function startParticle() {
          if (!this.coinsEffect) return;
          if (this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('SHOW_COIN_EFFECT', 0, this.isSkipEffect);
          this.coinsEffect.emit('START_PARTICLE');
        };

        _proto.startUpdateWinAmount = function startUpdateWinAmount(winType) {
          var _this4 = this;

          var winAmount = this.content.winAmount;
          var animDuration = 0;
          if (this.canFinish) return;

          if (winType === 'BIG_WIN') {
            animDuration = this.bigWinDur;

            if (this.content.winAmount > this.megaWinAmount) {
              winAmount = this.megaWinAmount;
            } else {
              this.canFinish = true;
            }
          } else if (winType === 'MEGA_WIN') {
            animDuration = this.megaWinDur;

            if (this.content.winAmount > this.superWinAmount) {
              winAmount = this.superWinAmount;
            } else {
              this.canFinish = true;
            }
          } else {
            animDuration = this.superWinDur;
            this.canFinish = true;
          }

          var speedUpEasing = function speedUpEasing(t) {
            return t * t;
          };

          this.nodeTween && this.nodeTween.stop();
          this.nodeTween = tween(this);
          this.nodeTween.to(animDuration, {
            currentValue: winAmount
          }, {
            easing: speedUpEasing
          }).call(function () {
            if (_this4.canFinish) _this4.skippable = false;
          });

          if (this.canFinish) {
            this.nodeTween.delay(1).call(function () {
              _this4.skippable = false;
              _this4.nodeTween = null;

              _this4.finish();
            });
          }

          this.nodeTween.start();
        };

        _proto.update = function update(dt) {
          if (!this.isUpdating) return;
          this.label.string = formatMoney(this.currentValue);

          if (this.currentValue >= this.superWinAmount && this.currentTitle == 1) {
            this.currentTitle = 2;

            if (this.animationLevel >= Number(PerformanceLevel.Medium)) {
              this.coinsEffect.emit('SHOW_COIN_EFFECT', 2, this.isSkipEffect);
            }

            this.setAnimation(this.superWinAnimStart, this.superWinAnimIdle);
            this.changeTitle(2);
            this.startUpdateWinAmount('SUPER_WIN');
          } else if (this.currentValue >= this.megaWinAmount && this.currentTitle == 0) {
            this.currentTitle = 1;

            if (this.animationLevel >= Number(PerformanceLevel.Medium)) {
              this.coinsEffect.emit('SHOW_COIN_EFFECT', 1, this.isSkipEffect);
            }

            this.setAnimation(this.megaWinAnimStart, this.megaWinAnimIdle);
            this.changeTitle(1);
            this.startUpdateWinAmount('MEGA_WIN');
          }
        };

        _proto.changeTitle = function changeTitle(index) {
          var _this5 = this;

          this.currentTitle = index;
          if (!this.title || !this.titleFrame || !this.titleFrame.length) return;
          this.titleTween = tween(this.title).to(0.2, {
            scale: new Vec3(1.5, 1.5, 1.5)
          }).call(function () {
            _this5.title.getComponent(Sprite).spriteFrame = _this5.titleFrame[index];
          }).to(0.2, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            tween(_this5.title).repeatForever(tween().to(0.5, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.5, {
              scale: new Vec3(1, 1, 1)
            })).start();
          }).start();
        };

        _proto.onClick = function onClick() {
          var _this6 = this;

          if (!this.isUpdating || this.speedUp || this.canFinish || !this.skippable) return;
          this.canFinish = true;
          this.speedUp = true;
          this.winAmountTween && this.winAmountTween.stop();
          var scaleTime = 0.13;
          tween(this.winAmount).repeatForever(tween().to(scaleTime, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(scaleTime, {
            scale: new Vec3(1, 1, 1)
          })).start();
          this.nodeTween && this.nodeTween.stop();
          this.currentValue = this.content.winAmount;
          this.nodeTween = tween(this);
          this.nodeTween.to(1, {
            currentValue: this.content.winAmount
          }).call(function () {
            _this6.nodeTween = null;

            _this6.finish();
          }).start();
        };

        _proto.stopParticle = function stopParticle() {
          if (!this.coinsEffect) return;
          if (this.animationLevel < Number(PerformanceLevel.Medium)) return;
          this.coinsEffect.emit('HIDE_COIN_EFFECT');
        };

        _proto.finish = function finish() {
          var _this7 = this;

          this.isUpdating = false;
          this.label.string = formatMoney(this.content.winAmount);
          this.winAmountTween && this.winAmountTween.stop();
          this.titleTween && this.titleTween.stop();
          this.nodeTween && this.nodeTween.stop();
          this.stopParticle();
          this.playSoundEnd();
          tween(this.winInfo).delay(this.delayHideTime).call(function () {
            _this7.fadeTo(_this7.winInfo, _this7.hideTime, 1);

            if (_this7.coinsEffect) _this7.setOpacity(_this7.coinsEffect, 0);
          }).delay(this.hideTime).call(function () {
            _this7.label.string = '';

            _this7.eventManager.emit(EventNames.BIGWIN_END);

            _this7.exit();

            _this7.soundPlayer && _this7.soundPlayer.stopAllAudio();
            _this7.soundPlayer && _this7.soundPlayer.playMainBGM();
          }).start();
        };

        _proto.onDisable = function onDisable() {
          if (this.nodeTween) {
            this.nodeTween.stop();
            this.nodeTween = null;
          }
        };

        _proto.setAnimation = function setAnimation(current, next) {
          var _this8 = this;

          if (!current || !next || !this.winAnimSkeleton) return;
          this.winAnimSkeleton.setAnimation(0, current, false);
          this.winAnimSkeleton.setCompleteListener(function (listener) {
            _this8.winAnimSkeleton.setCompleteListener(function () {});

            if (listener.animation.name === current) {
              _this8.winAnimSkeleton.setAnimation(0, next, true);
            }
          });
        };

        _proto.exit = function exit() {
          this.mainDirector.currentGameMode.emit('SPIN_ENABLE');
          this.eventManager.emit(EventNames.BIGWIN_END);

          _SlotUIScene.prototype.exit.call(this);
        };

        return WinEffectv2;
      }(SlotUIScene), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "overlayNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "coinsEffect", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fastParticle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "titleFrame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "winAnim", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "bigWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "megaWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "superWinDur", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "megaRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "superRate", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "delayShowTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "delayHideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "hideTime", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "bigWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'BIG_WIN';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "megaWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'MEGA_WIN';
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "superWinSound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'SUPER_WIN';
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "bigWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "bigWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "megaWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "megaWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "superWinAnimIdle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "superWinAnimStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Writer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3b5668ki+5NjJgo65RO5IY2", "Writer", undefined);

      var ccclass = _decorator.ccclass;
      var Writer = exports('Writer', (_dec = ccclass('Writer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Writer, _Component);

        function Writer() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Writer.prototype;

        _proto.onLoad = function onLoad() {
          this.node['writer'] = this;
        };

        _proto.makeScriptResume = function makeScriptResume(data) {
          // this.node['gSlotDataStore'].formatData(data);
          return [{
            command: "_stateResume"
          }];
        };

        _proto.makeScriptUpdate = function makeScriptUpdate(data) {
          // this.node['gSlotDataStore'].formatData(data);
          return [{
            command: "_stateUpdate"
          }];
        };

        return Writer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XOCypher.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "effd4CcclVCIblXmo9eBV5+", "XOCypher", undefined);

      var b64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

      var XORCipher = /*#__PURE__*/function () {
        function XORCipher() {}

        var _proto = XORCipher.prototype;

        _proto.encode = function encode(key, data) {
          data = xor_encrypt(key, data);
          return b64_encode(data);
        };

        _proto.decode = function decode(key, data) {
          data = b64_decode(data);
          return xor_decrypt(key, data);
        };

        _proto.encode_new = function encode_new(key, data) {
          data = xor_encrypt_new(key, data);
          return b64_encode(data);
        };

        _proto.decode_new = function decode_new(key, data) {
          data = b64_decode(data);
          return xor_decrypt_new(key, data);
        };

        _proto.encode_tutorial = function encode_tutorial(data) {
          var key = randomString(10);
          data = xor_encrypt_new(key, data);
          return b64_encode(data) + key;
        };

        _proto.decode_tutorial = function decode_tutorial(data) {
          var key = data.slice(-10);
          data = b64_decode(data.slice(0, -10));
          return xor_decrypt_new(key, data);
        };

        return XORCipher;
      }();

      function stringToUtf8ByteArray(str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);

          if (c < 128) {
            out[p++] = c;
          } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
          } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          }
        }

        return out;
      }

      function utf8ByteArrayToString(bytes) {
        var out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
          var c1 = bytes[pos++];

          if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
          } else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
          } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var _c = bytes[pos++]; // eslint-disable-line

            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (_c & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xD800 + (u >> 10));
            out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
          } else {
            var _c2 = bytes[pos++]; // eslint-disable-line

            var _c3 = bytes[pos++]; // eslint-disable-line

            out[c++] = String.fromCharCode((c1 & 15) << 12 | (_c2 & 63) << 6 | _c3 & 63);
          }
        }

        return out.join('');
      }

      function b64_encode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            r,
            i = 0,
            enc = "";

        if (!data) {
          return data;
        }

        do {
          o1 = data[i++];
          o2 = data[i++];
          o3 = data[i++];
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 0x3f;
          h2 = bits >> 12 & 0x3f;
          h3 = bits >> 6 & 0x3f;
          h4 = bits & 0x3f;
          enc += b64_table.charAt(h1) + b64_table.charAt(h2) + b64_table.charAt(h3) + b64_table.charAt(h4);
        } while (i < data.length);

        r = data.length % 3;
        return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
      }

      function b64_decode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            i = 0,
            result = [];

        if (!data) {
          return data;
        }

        data += "";

        do {
          h1 = b64_table.indexOf(data.charAt(i++));
          h2 = b64_table.indexOf(data.charAt(i++));
          h3 = b64_table.indexOf(data.charAt(i++));
          h4 = b64_table.indexOf(data.charAt(i++));
          bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
          o1 = bits >> 16 & 0xff;
          o2 = bits >> 8 & 0xff;
          o3 = bits & 0xff;
          result.push(o1);

          if (h3 !== 64) {
            result.push(o2);

            if (h4 !== 64) {
              result.push(o3);
            }
          }
        } while (i < data.length);

        return result;
      }

      function xor_encrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        });
      }

      function xor_decrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        }));
      }

      function xor_encrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        });
      }

      function xor_decrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        }));
      }

      function randomString(length) {
        if (length === void 0) {
          length = 10;
        }

        var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        var result = '';
        var lettersLength = letters.length;

        for (var i = 0; i < length; i++) {
          var randomIndex = Math.floor(Math.random() * lettersLength);
          result += letters.charAt(randomIndex);
        }

        return result;
      }

      var xorCipher = exports('default', new XORCipher());

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=index.js.map